# autogenerated
# mypy: ignore-errors
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import results_upload_pb2 as results__upload__pb2


class ResultsStoreStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadTestRun = channel.stream_unary(
                '/rime.ResultsStore/UploadTestRun',
                request_serializer=results__upload__pb2.UploadChunk.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.VerifyProjectID = channel.unary_unary(
                '/rime.ResultsStore/VerifyProjectID',
                request_serializer=results__upload__pb2.VerifyProjectIDRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.CreateProject = channel.unary_unary(
                '/rime.ResultsStore/CreateProject',
                request_serializer=results__upload__pb2.CreateProjectRequest.SerializeToString,
                response_deserializer=results__upload__pb2.CreateProjectResponse.FromString,
                )


class ResultsStoreServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UploadTestRun(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyProjectID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProject(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResultsStoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UploadTestRun': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadTestRun,
                    request_deserializer=results__upload__pb2.UploadChunk.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'VerifyProjectID': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyProjectID,
                    request_deserializer=results__upload__pb2.VerifyProjectIDRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'CreateProject': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProject,
                    request_deserializer=results__upload__pb2.CreateProjectRequest.FromString,
                    response_serializer=results__upload__pb2.CreateProjectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rime.ResultsStore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ResultsStore(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UploadTestRun(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/rime.ResultsStore/UploadTestRun',
            results__upload__pb2.UploadChunk.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyProjectID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.ResultsStore/VerifyProjectID',
            results__upload__pb2.VerifyProjectIDRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.ResultsStore/CreateProject',
            results__upload__pb2.CreateProjectRequest.SerializeToString,
            results__upload__pb2.CreateProjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
