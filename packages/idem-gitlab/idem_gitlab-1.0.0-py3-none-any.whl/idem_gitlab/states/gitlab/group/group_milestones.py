"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

Group milestones
"""
from typing import Any
from typing import Dict

import dict_tools.differ as differ


async def present(
    hub,
    ctx,
    name: str,
    project_id: int,
    title: str,
    description: str = None,
    due_date: str = None,
    start_date: str = None,
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Parameters:


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID or URL-encoded path of the group owned by the authenticated user.
        title(str): The title of a milestone.
        description(str, optional): The description of the milestone. Defaults to None.
        due_date(str, optional): The due date of the milestone, in ISO 8601 format (YYYY-MM-DD). Defaults to None.
        start_date(str, optional): The start date of the milestone, in ISO 8601 format (YYYY-MM-DD). Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              gitlab.group.group_milestones.present:
                - name: value
                - project_id: value
                - title: value
    """

    result = dict(comment="", changes=None, name=name, result=True)

    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/groups/{project_id}/milestones",
        data={},
        success_codes=[200],
    )
    if before["status"]:
        result["comment"] = f"'{name}' already exists"
    else:
        ret = await hub.exec.request.json.post(
            ctx,
            success_codes=[201, 304, 204],
            url=f"{ctx.acct.endpoint_url}/groups/{project_id}/milestones",
            **{
                "title": title,
                "description": description,
                "due_date": due_date,
                "start_date": start_date,
            },
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Created '{name}'"

    # Now that the resource exists, update it
    ret = await hub.exec.request.json.put(
        ctx,
        url=f"{ctx.acct.endpoint_url}/groups/{project_id}/milestones",
        success_codes=[200, 204, 304],
    )

    if not ret["status"]:
        result["status"] = False
        result["comment"] = f"Unable to update '{name}': {ret['comment']}"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/groups/{project_id}/milestones",
        data={},
        success_codes=[200],
    )
    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def absent(
    hub, ctx, name: str, project_id: int, milestone_id: int
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Parameters:


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID or URL-encoded path of the group owned by the authenticated user.
        milestone_id(int): The ID of the groupâ€™s milestone.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              gitlab.group.group_milestones.absent:
                - name: value
                - project_id: value
                - milestone_id: value
    """

    result = dict(comment="", changes=None, name=name, result=True)
    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/groups/{project_id}/milestones",
        data={},
        success_codes=[204, 304, 404],
    )

    if before["status"]:
        result["comment"] = f"'{name}' already absent"
    else:
        ret = await hub.exec.request.json.delete(
            ctx,
            url=f"{ctx.acct.endpoint_url}/groups/{project_id}/milestones",
            success_code=[204],
            **{"milestone_id": milestone_id},
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Deleted '{name}'"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/groups/{project_id}/milestones",
        data={},
        success_codes=[204, 304, 404],
    )

    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    Parameters:



    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe gitlab.group.group_milestones
    """

    result = {}

    async for project in hub.exec.gitlab.request.paginate(
        ctx, url=f"{ctx.acct.endpoint_url}/groups"
    ):
        project_id = project["id"]

        async for ret in hub.exec.gitlab.request.paginate(
            ctx, url=f"{ctx.acct.endpoint_url}/groups/{project_id}/milestones"
        ):
            result[f"/groups-{project_id}-group.group_milestones-{ret['id']}"] = {
                "gitlab.group.group_milestones.present": [
                    {"project_id": ret.get("id")},
                    {"title": ret.get("title")},
                    {"description": ret.get("description")},
                    {"due_date": ret.get("due_date")},
                    {"start_date": ret.get("start_date")},
                ]
            }

    return result
