"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

Releases
"""
from typing import Any
from typing import Dict
from typing import List

import dict_tools.differ as differ


async def present(
    hub,
    ctx,
    project_id: int,
    tag_name: str,
    ref: str,
    name: str = None,
    description: str = None,
    milestones: List[str] = None,
    assets_links: List[str] = None,
    assets_links_name: str = None,
    assets_links_url: str = None,
    assets_links_filepath: str = None,
    assets_links_link_type: str = None,
    released_at: str = None,
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Create a release. Developer level access to the project is required to create a release.


    Args:
        name(str, optional): The release name. Defaults to None.
        project_id(int): The ID or URL-encoded path of the project.
        tag_name(str): The tag where the release is created from.
        description(str, optional): The description of the release. You can use Markdown. Defaults to None.
        ref(str): If a tag specified in tag_name doesnâ€™t exist, the release is created from ref and tagged with tag_name. It can be a commit SHA, another tag name, or a branch name.
        milestones(List[str], optional): The title of each milestone the release is associated with. GitLab Premium customers can specify group milestones. Defaults to None.
        assets_links(List[str], optional): An array of assets links. Defaults to None.
        assets_links_name(str, optional): The name of the link. Link names must be unique within the release. Defaults to None.
        assets_links_url(str, optional): The URL of the link. Link URLs must be unique within the release. Defaults to None.
        assets_links_filepath(str, optional): Optional path for a Direct Asset link. Defaults to None.
        assets_links_link_type(str, optional): The type of the link: other, runbook, image, package. Defaults to other. Defaults to None.
        released_at(str, optional): The date when the release is/was ready. Defaults to the current time. Expected in ISO 8601 format (2019-03-15T08:00:00Z). Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              gitlab.project.releases.present:
                - project_id: value
                - tag_name: value
                - ref: value
    """

    result = dict(comment="", changes=None, name=name, result=True)

    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/releases",
        data={},
        success_codes=[200],
    )
    if before["status"]:
        result["comment"] = f"'{name}' already exists"
    else:
        ret = await hub.exec.request.json.post(
            ctx,
            success_codes=[201, 304, 204],
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/releases",
            **{
                "name": name,
                "tag_name": tag_name,
                "description": description,
                "ref": ref,
                "milestones": milestones,
                "assets:links": assets_links,
                "assets:links:name": assets_links_name,
                "assets:links:url": assets_links_url,
                "assets:links:filepath": assets_links_filepath,
                "assets:links:link_type": assets_links_link_type,
                "released_at": released_at,
            },
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Created '{name}'"

    # Now that the resource exists, update it
    ret = await hub.exec.request.json.put(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/releases",
        success_codes=[200, 204, 304],
    )

    if not ret["status"]:
        result["status"] = False
        result["comment"] = f"Unable to update '{name}': {ret['comment']}"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/releases",
        data={},
        success_codes=[200],
    )
    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def absent(hub, ctx, name: str, project_id: int, tag_name: str) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Create a release. Developer level access to the project is required to create a release.


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID or URL-encoded path of the project.
        tag_name(str): The Git tag the release is associated with.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              gitlab.project.releases.absent:
                - name: value
                - project_id: value
                - tag_name: value
    """

    result = dict(comment="", changes=None, name=name, result=True)
    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/releases",
        data={},
        success_codes=[204, 304, 404],
    )

    if before["status"]:
        result["comment"] = f"'{name}' already absent"
    else:
        ret = await hub.exec.request.json.delete(
            ctx,
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/releases",
            success_code=[204],
            **{"tag_name": tag_name},
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Deleted '{name}'"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/releases",
        data={},
        success_codes=[204, 304, 404],
    )

    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    Paginated list of Releases, sorted by released_at.



    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe gitlab.project.releases
    """

    result = {}

    async for project in hub.exec.gitlab.request.paginate(
        ctx, url=f"{ctx.acct.endpoint_url}/projects"
    ):
        project_id = project["id"]

        async for ret in hub.exec.gitlab.request.paginate(
            ctx, url=f"{ctx.acct.endpoint_url}/projects/{project_id}/releases"
        ):
            result[f"/projects-{project_id}-project.releases-{ret['id']}"] = {
                "gitlab.project.releases.present": [
                    {"name": ret.get("name")},
                    {"project_id": ret.get("id")},
                    {"tag_name": ret.get("tag_name")},
                    {"description": ret.get("description")},
                    {"ref": ret.get("ref")},
                    {"milestones": ret.get("milestones")},
                    {"assets_links": ret.get("assets:links")},
                    {"assets_links_name": ret.get("assets:links:name")},
                    {"assets_links_url": ret.get("assets:links:url")},
                    {"assets_links_filepath": ret.get("assets:links:filepath")},
                    {"assets_links_link_type": ret.get("assets:links:link_type")},
                    {"released_at": ret.get("released_at")},
                ]
            }

    return result
