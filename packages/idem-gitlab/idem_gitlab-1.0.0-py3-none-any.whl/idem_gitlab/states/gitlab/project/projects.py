"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

Projects
"""
from typing import Any
from typing import Dict
from typing import List

import dict_tools.differ as differ


async def present(
    hub,
    ctx,
    name: str = None,
    path: str = None,
    allow_merge_on_skipped_pipeline: bool = None,
    analytics_access_level: str = None,
    approvals_before_merge: int = None,
    auto_cancel_pending_pipelines: str = None,
    auto_devops_deploy_strategy: str = None,
    auto_devops_enabled: bool = None,
    autoclose_referenced_issues: bool = None,
    avatar: str = None,
    build_coverage_regex: str = None,
    build_git_strategy: str = None,
    build_timeout: int = None,
    builds_access_level: str = None,
    ci_config_path: str = None,
    container_expiration_policy_attributes: str = None,
    container_registry_enabled: bool = None,
    container_registry_access_level: str = None,
    default_branch: str = None,
    description: str = None,
    emails_disabled: bool = None,
    external_authorization_classification_label: str = None,
    forking_access_level: str = None,
    group_with_project_templates_id: int = None,
    import_url: str = None,
    initialize_with_readme: bool = None,
    issues_access_level: str = None,
    issues_enabled: bool = None,
    jobs_enabled: bool = None,
    lfs_enabled: bool = None,
    merge_method: str = None,
    merge_requests_access_level: str = None,
    merge_requests_enabled: bool = None,
    mirror_trigger_builds: bool = None,
    mirror: bool = None,
    namespace_id: int = None,
    operations_access_level: str = None,
    only_allow_merge_if_all_discussions_are_resolved: bool = None,
    only_allow_merge_if_pipeline_succeeds: bool = None,
    packages_enabled: bool = None,
    pages_access_level: str = None,
    requirements_access_level: str = None,
    printing_merge_request_link_enabled: bool = None,
    public_builds: bool = None,
    remove_source_branch_after_merge: bool = None,
    repository_access_level: str = None,
    repository_storage: str = None,
    request_access_enabled: bool = None,
    resolve_outdated_diff_discussions: bool = None,
    shared_runners_enabled: bool = None,
    show_default_award_emojis: bool = None,
    snippets_access_level: str = None,
    snippets_enabled: bool = None,
    squash_option: str = None,
    tag_list: List[str] = None,
    template_name: str = None,
    template_project_id: int = None,
    topics: List[str] = None,
    use_custom_template: bool = None,
    visibility: str = None,
    wiki_access_level: str = None,
    wiki_enabled: bool = None,
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    If your HTTP repository isn’t publicly accessible, add authentication information
    to the URL https://username:password@gitlab.company.com/group/project.git,
    where password is a public access key with the api scope enabled.


    Args:
        name(str, optional): The name of the new project. Equals path if not provided. Defaults to None.
        path(str, optional): Repository name for new project. Generated based on name if not provided (generated as lowercase with dashes). Defaults to None.
        allow_merge_on_skipped_pipeline(bool, optional): Set whether or not merge requests can be merged with skipped jobs. Defaults to None.
        analytics_access_level(str, optional): One of disabled, private or enabled. Defaults to None.
        approvals_before_merge(int, optional): How many approvers should approve merge requests by default. To configure approval rules, see Merge request approvals API. Defaults to None.
        auto_cancel_pending_pipelines(str, optional): Auto-cancel pending pipelines. This isn’t a boolean, but enabled/disabled. Defaults to None.
        auto_devops_deploy_strategy(str, optional): Auto Deploy strategy (continuous, manual or timed_incremental). Defaults to None.
        auto_devops_enabled(bool, optional): Enable Auto DevOps for this project. Defaults to None.
        autoclose_referenced_issues(bool, optional): Set whether auto-closing referenced issues on default branch. Defaults to None.
        avatar(str, optional): Image file for avatar of the project. Defaults to None.
        build_coverage_regex(str, optional): Test coverage parsing. Defaults to None.
        build_git_strategy(str, optional): The Git strategy. Defaults to fetch. Defaults to None.
        build_timeout(int, optional): The maximum amount of time, in seconds, that a job can run. Defaults to None.
        builds_access_level(str, optional): One of disabled, private, or enabled. Defaults to None.
        ci_config_path(str, optional): The path to CI configuration file. Defaults to None.
        container_expiration_policy_attributes(str, optional): Update the image cleanup policy for this project. Accepts: cadence (string), keep_n (integer), older_than (string), name_regex (string), name_regex_delete (string), name_regex_keep (string), enabled (boolean). Valid values for cadence are: 1d (every day), 7d (every week), 14d (every two weeks), 1month (every month), or 3month (every quarter). Defaults to None.
        container_registry_enabled(bool, optional): (Deprecated) Enable container registry for this project. Use container_registry_access_level instead. Defaults to None.
        container_registry_access_level(str, optional): Set visibility of container registry, for this project, to one of disabled, private or enabled. Defaults to None.
        default_branch(str, optional): The default branch name. Requires initialize_with_readme to be true. Defaults to None.
        description(str, optional): Short project description. Defaults to None.
        emails_disabled(bool, optional): Disable email notifications. Defaults to None.
        external_authorization_classification_label(str, optional): The classification label for the project. Defaults to None.
        forking_access_level(str, optional): One of disabled, private, or enabled. Defaults to None.
        group_with_project_templates_id(int, optional): For group-level custom templates, specifies ID of group from which all the custom project templates are sourced. Leave empty for instance-level templates. Requires use_custom_template to be true. Defaults to None.
        import_url(str, optional): URL to import repository from. Defaults to None.
        initialize_with_readme(bool, optional): false by default. Defaults to None.
        issues_access_level(str, optional): One of disabled, private, or enabled. Defaults to None.
        issues_enabled(bool, optional): (Deprecated) Enable issues for this project. Use issues_access_level instead. Defaults to None.
        jobs_enabled(bool, optional): (Deprecated) Enable jobs for this project. Use builds_access_level instead. Defaults to None.
        lfs_enabled(bool, optional): Enable LFS. Defaults to None.
        merge_method(str, optional): Set the merge method used. Defaults to None.
        merge_requests_access_level(str, optional): One of disabled, private, or enabled. Defaults to None.
        merge_requests_enabled(bool, optional): (Deprecated) Enable merge requests for this project. Use merge_requests_access_level instead. Defaults to None.
        mirror_trigger_builds(bool, optional): Pull mirroring triggers builds. Defaults to None.
        mirror(bool, optional): Enables pull mirroring in a project. Defaults to None.
        namespace_id(int, optional): Namespace for the new project (defaults to the current user’s namespace). Defaults to None.
        operations_access_level(str, optional): One of disabled, private, or enabled. Defaults to None.
        only_allow_merge_if_all_discussions_are_resolved(bool, optional): Set whether merge requests can only be merged when all the discussions are resolved. Defaults to None.
        only_allow_merge_if_pipeline_succeeds(bool, optional): Set whether merge requests can only be merged with successful pipelines. This setting is named Pipelines must succeed in the project settings. Defaults to None.
        packages_enabled(bool, optional): Enable or disable packages repository feature. Defaults to None.
        pages_access_level(str, optional): One of disabled, private, enabled, or public. Defaults to None.
        requirements_access_level(str, optional): One of disabled, private, enabled or public. Defaults to None.
        printing_merge_request_link_enabled(bool, optional): Show link to create/view merge request when pushing from the command line. Defaults to None.
        public_builds(bool, optional): If true, jobs can be viewed by non-project members. Defaults to None.
        remove_source_branch_after_merge(bool, optional): Enable Delete source branch option by default for all new merge requests. Defaults to None.
        repository_access_level(str, optional): One of disabled, private, or enabled. Defaults to None.
        repository_storage(str, optional): Which storage shard the repository is on. (administrator only). Defaults to None.
        request_access_enabled(bool, optional): Allow users to request member access. Defaults to None.
        resolve_outdated_diff_discussions(bool, optional): Automatically resolve merge request diffs discussions on lines changed with a push. Defaults to None.
        shared_runners_enabled(bool, optional): Enable shared runners for this project. Defaults to None.
        show_default_award_emojis(bool, optional): Show default award emojis. Defaults to None.
        snippets_access_level(str, optional): One of disabled, private, or enabled. Defaults to None.
        snippets_enabled(bool, optional): (Deprecated) Enable snippets for this project. Use snippets_access_level instead. Defaults to None.
        squash_option(str, optional): One of never, always, default_on, or default_off. Defaults to None.
        tag_list(List[str], optional): (Deprecated in GitLab 14.0) The list of tags for a project; put array of tags, that should be finally assigned to a project. Use topics instead. Defaults to None.
        template_name(str, optional): When used without use_custom_template, name of a built-in project template. When used with use_custom_template, name of a custom project template. Defaults to None.
        template_project_id(int, optional): When used with use_custom_template, project ID of a custom project template. This is preferable to using template_name since template_name may be ambiguous. Defaults to None.
        topics(List[str], optional): The list of topics for a project; put array of topics, that should be finally assigned to a project. (Introduced in GitLab 14.0.). Defaults to None.
        use_custom_template(bool, optional): Use either custom instance or group (with group_with_project_templates_id) project template. Defaults to None.
        visibility(str, optional): See project visibility level. Defaults to None.
        wiki_access_level(str, optional): One of disabled, private, or enabled. Defaults to None.
        wiki_enabled(bool, optional): (Deprecated) Enable wiki for this project. Use wiki_access_level instead. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              gitlab.project.projects.present:
                -
    """

    result = dict(comment="", changes=None, name=name, result=True)

    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects",
        data={},
        success_codes=[200],
    )
    if before["status"]:
        result["comment"] = f"'{name}' already exists"
    else:
        ret = await hub.exec.request.json.post(
            ctx,
            success_codes=[201, 304, 204],
            url=f"{ctx.acct.endpoint_url}/projects",
            **{
                "name": name,
                "path": path,
                "allow_merge_on_skipped_pipeline": allow_merge_on_skipped_pipeline,
                "analytics_access_level": analytics_access_level,
                "approvals_before_merge": approvals_before_merge,
                "auto_cancel_pending_pipelines": auto_cancel_pending_pipelines,
                "auto_devops_deploy_strategy": auto_devops_deploy_strategy,
                "auto_devops_enabled": auto_devops_enabled,
                "autoclose_referenced_issues": autoclose_referenced_issues,
                "avatar": avatar,
                "build_coverage_regex": build_coverage_regex,
                "build_git_strategy": build_git_strategy,
                "build_timeout": build_timeout,
                "builds_access_level": builds_access_level,
                "ci_config_path": ci_config_path,
                "container_expiration_policy_attributes": container_expiration_policy_attributes,
                "container_registry_enabled": container_registry_enabled,
                "container_registry_access_level": container_registry_access_level,
                "default_branch": default_branch,
                "description": description,
                "emails_disabled": emails_disabled,
                "external_authorization_classification_label": external_authorization_classification_label,
                "forking_access_level": forking_access_level,
                "group_with_project_templates_id": group_with_project_templates_id,
                "import_url": import_url,
                "initialize_with_readme": initialize_with_readme,
                "issues_access_level": issues_access_level,
                "issues_enabled": issues_enabled,
                "jobs_enabled": jobs_enabled,
                "lfs_enabled": lfs_enabled,
                "merge_method": merge_method,
                "merge_requests_access_level": merge_requests_access_level,
                "merge_requests_enabled": merge_requests_enabled,
                "mirror_trigger_builds": mirror_trigger_builds,
                "mirror": mirror,
                "namespace_id": namespace_id,
                "operations_access_level": operations_access_level,
                "only_allow_merge_if_all_discussions_are_resolved": only_allow_merge_if_all_discussions_are_resolved,
                "only_allow_merge_if_pipeline_succeeds": only_allow_merge_if_pipeline_succeeds,
                "packages_enabled": packages_enabled,
                "pages_access_level": pages_access_level,
                "requirements_access_level": requirements_access_level,
                "printing_merge_request_link_enabled": printing_merge_request_link_enabled,
                "public_builds": public_builds,
                "remove_source_branch_after_merge": remove_source_branch_after_merge,
                "repository_access_level": repository_access_level,
                "repository_storage": repository_storage,
                "request_access_enabled": request_access_enabled,
                "resolve_outdated_diff_discussions": resolve_outdated_diff_discussions,
                "shared_runners_enabled": shared_runners_enabled,
                "show_default_award_emojis": show_default_award_emojis,
                "snippets_access_level": snippets_access_level,
                "snippets_enabled": snippets_enabled,
                "squash_option": squash_option,
                "tag_list": tag_list,
                "template_name": template_name,
                "template_project_id": template_project_id,
                "topics": topics,
                "use_custom_template": use_custom_template,
                "visibility": visibility,
                "wiki_access_level": wiki_access_level,
                "wiki_enabled": wiki_enabled,
            },
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Created '{name}'"

    # Now that the resource exists, update it
    ret = await hub.exec.request.json.put(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects",
        success_codes=[200, 204, 304],
    )

    if not ret["status"]:
        result["status"] = False
        result["comment"] = f"Unable to update '{name}': {ret['comment']}"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects",
        data={},
        success_codes=[200],
    )
    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def absent(hub, ctx, name: str, project_id: int = None) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    If your HTTP repository isn’t publicly accessible, add authentication information
    to the URL https://username:password@gitlab.company.com/group/project.git,
    where password is a public access key with the api scope enabled.


    Args:
        name(Text): The identifier for this state.
        project_id(int, optional): The ID or URL-encoded path of the project. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              gitlab.project.projects.absent:
                - name: value
    """

    result = dict(comment="", changes=None, name=name, result=True)
    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects",
        data={},
        success_codes=[204, 304, 404],
    )

    if before["status"]:
        result["comment"] = f"'{name}' already absent"
    else:
        ret = await hub.exec.request.json.delete(
            ctx,
            url=f"{ctx.acct.endpoint_url}/projects",
            success_code=[204],
            **{"id": project_id},
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Deleted '{name}'"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects",
        data={},
        success_codes=[204, 304, 404],
    )

    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    Get a list of all visible projects across GitLab for the authenticated user.
    When accessed without authentication, only public projects with simple fields
    are returned.



    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe gitlab.project.projects
    """

    result = {}

    async for ret in hub.exec.gitlab.request.paginate(
        ctx, url=f"{ctx.acct.endpoint_url}/projects"
    ):
        result[f"project.projects-{ret['id']}"] = {
            "gitlab.project.projects.present": [
                {"name": ret.get("name")},
                {"path": ret.get("path")},
                {
                    "allow_merge_on_skipped_pipeline": ret.get(
                        "allow_merge_on_skipped_pipeline"
                    )
                },
                {"analytics_access_level": ret.get("analytics_access_level")},
                {"approvals_before_merge": ret.get("approvals_before_merge")},
                {
                    "auto_cancel_pending_pipelines": ret.get(
                        "auto_cancel_pending_pipelines"
                    )
                },
                {"auto_devops_deploy_strategy": ret.get("auto_devops_deploy_strategy")},
                {"auto_devops_enabled": ret.get("auto_devops_enabled")},
                {"autoclose_referenced_issues": ret.get("autoclose_referenced_issues")},
                {"avatar": ret.get("avatar")},
                {"build_coverage_regex": ret.get("build_coverage_regex")},
                {"build_git_strategy": ret.get("build_git_strategy")},
                {"build_timeout": ret.get("build_timeout")},
                {"builds_access_level": ret.get("builds_access_level")},
                {"ci_config_path": ret.get("ci_config_path")},
                {
                    "container_expiration_policy_attributes": ret.get(
                        "container_expiration_policy_attributes"
                    )
                },
                {"container_registry_enabled": ret.get("container_registry_enabled")},
                {
                    "container_registry_access_level": ret.get(
                        "container_registry_access_level"
                    )
                },
                {"default_branch": ret.get("default_branch")},
                {"description": ret.get("description")},
                {"emails_disabled": ret.get("emails_disabled")},
                {
                    "external_authorization_classification_label": ret.get(
                        "external_authorization_classification_label"
                    )
                },
                {"forking_access_level": ret.get("forking_access_level")},
                {
                    "group_with_project_templates_id": ret.get(
                        "group_with_project_templates_id"
                    )
                },
                {"import_url": ret.get("import_url")},
                {"initialize_with_readme": ret.get("initialize_with_readme")},
                {"issues_access_level": ret.get("issues_access_level")},
                {"issues_enabled": ret.get("issues_enabled")},
                {"jobs_enabled": ret.get("jobs_enabled")},
                {"lfs_enabled": ret.get("lfs_enabled")},
                {"merge_method": ret.get("merge_method")},
                {"merge_requests_access_level": ret.get("merge_requests_access_level")},
                {"merge_requests_enabled": ret.get("merge_requests_enabled")},
                {"mirror_trigger_builds": ret.get("mirror_trigger_builds")},
                {"mirror": ret.get("mirror")},
                {"namespace_id": ret.get("namespace_id")},
                {"operations_access_level": ret.get("operations_access_level")},
                {
                    "only_allow_merge_if_all_discussions_are_resolved": ret.get(
                        "only_allow_merge_if_all_discussions_are_resolved"
                    )
                },
                {
                    "only_allow_merge_if_pipeline_succeeds": ret.get(
                        "only_allow_merge_if_pipeline_succeeds"
                    )
                },
                {"packages_enabled": ret.get("packages_enabled")},
                {"pages_access_level": ret.get("pages_access_level")},
                {"requirements_access_level": ret.get("requirements_access_level")},
                {
                    "printing_merge_request_link_enabled": ret.get(
                        "printing_merge_request_link_enabled"
                    )
                },
                {"public_builds": ret.get("public_builds")},
                {
                    "remove_source_branch_after_merge": ret.get(
                        "remove_source_branch_after_merge"
                    )
                },
                {"repository_access_level": ret.get("repository_access_level")},
                {"repository_storage": ret.get("repository_storage")},
                {"request_access_enabled": ret.get("request_access_enabled")},
                {
                    "resolve_outdated_diff_discussions": ret.get(
                        "resolve_outdated_diff_discussions"
                    )
                },
                {"shared_runners_enabled": ret.get("shared_runners_enabled")},
                {"show_default_award_emojis": ret.get("show_default_award_emojis")},
                {"snippets_access_level": ret.get("snippets_access_level")},
                {"snippets_enabled": ret.get("snippets_enabled")},
                {"squash_option": ret.get("squash_option")},
                {"tag_list": ret.get("tag_list")},
                {"template_name": ret.get("template_name")},
                {"template_project_id": ret.get("template_project_id")},
                {"topics": ret.get("topics")},
                {"use_custom_template": ret.get("use_custom_template")},
                {"visibility": ret.get("visibility")},
                {"wiki_access_level": ret.get("wiki_access_level")},
                {"wiki_enabled": ret.get("wiki_enabled")},
            ]
        }

    return result
