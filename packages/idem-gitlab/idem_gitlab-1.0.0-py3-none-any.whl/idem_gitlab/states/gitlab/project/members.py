"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

Members
"""
from typing import Any
from typing import Dict

import dict_tools.differ as differ


async def present(
    hub,
    ctx,
    name: str,
    project_id: int,
    user_id: int,
    access_level: int,
    expires_at: str = None,
    invite_source: str = None,
    areas_of_focus: str = None,
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Adds a member to a group or project.


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID or URL-encoded path of the project or group owned by the authenticated user.
        user_id(int): The user ID of the new member or multiple IDs separated by commas.
        access_level(int): A valid access level.
        expires_at(str, optional): A date string in the format YEAR-MONTH-DAY. Defaults to None.
        invite_source(str, optional): The source of the invitation that starts the member creation process. See this issue. Defaults to None.
        areas_of_focus(str, optional): Areas the inviter wants the member to focus upon. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              gitlab.project.members.present:
                - name: value
                - project_id: value
                - user_id: value
                - access_level: value
    """

    result = dict(comment="", changes=None, name=name, result=True)

    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/members",
        data={},
        success_codes=[200],
    )
    if before["status"]:
        result["comment"] = f"'{name}' already exists"
    else:
        ret = await hub.exec.request.json.post(
            ctx,
            success_codes=[201, 304, 204],
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/members",
            **{
                "user_id": user_id,
                "access_level": access_level,
                "expires_at": expires_at,
                "invite_source": invite_source,
                "areas_of_focus": areas_of_focus,
            },
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Created '{name}'"

    # Now that the resource exists, update it
    ret = await hub.exec.request.json.put(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/members",
        success_codes=[200, 204, 304],
    )

    if not ret["status"]:
        result["status"] = False
        result["comment"] = f"Unable to update '{name}': {ret['comment']}"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/members",
        data={},
        success_codes=[200],
    )
    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def absent(
    hub,
    ctx,
    name: str,
    project_id: int,
    user_id: int,
    skip_subresources: bool = None,
    unassign_issuables: bool = None,
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Adds a member to a group or project.


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID or URL-encoded path of the project or group owned by the authenticated user.
        user_id(int): The user ID of the member.
        skip_subresources(bool, optional): Whether the deletion of direct memberships of the removed member in subgroups and projects should be skipped. Default is false. Defaults to None.
        unassign_issuables(bool, optional): Whether the removed member should be unassigned from any issues or merge requests inside a given group or project. Default is false. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              gitlab.project.members.absent:
                - name: value
                - project_id: value
                - user_id: value
    """

    result = dict(comment="", changes=None, name=name, result=True)
    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/members",
        data={},
        success_codes=[204, 304, 404],
    )

    if before["status"]:
        result["comment"] = f"'{name}' already absent"
    else:
        ret = await hub.exec.request.json.delete(
            ctx,
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/members",
            success_code=[204],
            **{
                "user_id": user_id,
                "skip_subresources": skip_subresources,
                "unassign_issuables": unassign_issuables,
            },
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Deleted '{name}'"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/members",
        data={},
        success_codes=[204, 304, 404],
    )

    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    This function takes pagination parameters page and per_page to restrict the list of users.



    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe gitlab.project.members
    """

    result = {}

    async for project in hub.exec.gitlab.request.paginate(
        ctx, url=f"{ctx.acct.endpoint_url}/projects"
    ):
        project_id = project["id"]

        async for ret in hub.exec.gitlab.request.paginate(
            ctx, url=f"{ctx.acct.endpoint_url}/projects/{project_id}/members"
        ):
            result[f"/projects-{project_id}-project.members-{ret['id']}"] = {
                "gitlab.project.members.present": [
                    {"project_id": ret.get("id")},
                    {"user_id": ret.get("user_id")},
                    {"access_level": ret.get("access_level")},
                    {"expires_at": ret.get("expires_at")},
                    {"invite_source": ret.get("invite_source")},
                    {"areas_of_focus": ret.get("areas_of_focus")},
                ]
            }

    return result
