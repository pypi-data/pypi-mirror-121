"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

Project clusters
"""
from typing import Any
from typing import Dict

import dict_tools.differ as differ


async def present(
    hub,
    ctx,
    name: str,
    project_id: int,
    platform_kubernetes_attributes_api_url_: str,
    platform_kubernetes_attributes_token_: str,
    domain: str = None,
    management_project_id: int = None,
    enabled: bool = None,
    managed: bool = None,
    platform_kubernetes_attributes_ca_cert_: str = None,
    platform_kubernetes_attributes_namespace_: str = None,
    platform_kubernetes_attributes_authorization_type_: str = None,
    environment_scope: str = None,
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Parameters:


    Args:
        name(str): The name of the cluster.
        project_id(int): The ID or URL-encoded path of the project owned by the authenticated user.
        domain(str, optional): The base domain of the cluster. Defaults to None.
        management_project_id(int, optional): The ID of the management project for the cluster. Defaults to None.
        enabled(bool, optional): Determines if cluster is active or not, defaults to true. Defaults to None.
        managed(bool, optional): Determines if GitLab manages namespaces and service accounts for this cluster. Defaults to true. Defaults to None.
        platform_kubernetes_attributes_api_url_(str): The URL to access the Kubernetes API.
        platform_kubernetes_attributes_token_(str): The token to authenticate against Kubernetes.
        platform_kubernetes_attributes_ca_cert_(str, optional): TLS certificate. Required if API is using a self-signed TLS certificate. Defaults to None.
        platform_kubernetes_attributes_namespace_(str, optional): The unique namespace related to the project. Defaults to None.
        platform_kubernetes_attributes_authorization_type_(str, optional): The cluster authorization type: rbac, abac or unknown_authorization. Defaults to rbac. Defaults to None.
        environment_scope(str, optional): The associated environment to the cluster. Defaults to *. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              gitlab.project.project_clusters.present:
                - name: value
                - project_id: value
                - platform_kubernetes_attributes_api_url_: value
                - platform_kubernetes_attributes_token_: value
    """

    result = dict(comment="", changes=None, name=name, result=True)

    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/clusters",
        data={},
        success_codes=[200],
    )
    if before["status"]:
        result["comment"] = f"'{name}' already exists"
    else:
        ret = await hub.exec.request.json.post(
            ctx,
            success_codes=[201, 304, 204],
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/clusters",
            **{
                "name": name,
                "domain": domain,
                "management_project_id": management_project_id,
                "enabled": enabled,
                "managed": managed,
                "platform_kubernetes_attributes[api_url]": platform_kubernetes_attributes_api_url_,
                "platform_kubernetes_attributes[token]": platform_kubernetes_attributes_token_,
                "platform_kubernetes_attributes[ca_cert]": platform_kubernetes_attributes_ca_cert_,
                "platform_kubernetes_attributes[namespace]": platform_kubernetes_attributes_namespace_,
                "platform_kubernetes_attributes[authorization_type]": platform_kubernetes_attributes_authorization_type_,
                "environment_scope": environment_scope,
            },
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Created '{name}'"

    # Now that the resource exists, update it
    ret = await hub.exec.request.json.put(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/clusters",
        success_codes=[200, 204, 304],
    )

    if not ret["status"]:
        result["status"] = False
        result["comment"] = f"Unable to update '{name}': {ret['comment']}"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/clusters",
        data={},
        success_codes=[200],
    )
    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def absent(
    hub, ctx, name: str, project_id: int, cluster_id: int
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Parameters:


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID or URL-encoded path of the project owned by the authenticated user.
        cluster_id(int): The ID of the cluster.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              gitlab.project.project_clusters.absent:
                - name: value
                - project_id: value
                - cluster_id: value
    """

    result = dict(comment="", changes=None, name=name, result=True)
    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/clusters",
        data={},
        success_codes=[204, 304, 404],
    )

    if before["status"]:
        result["comment"] = f"'{name}' already absent"
    else:
        ret = await hub.exec.request.json.delete(
            ctx,
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/clusters",
            success_code=[204],
            **{"cluster_id": cluster_id},
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Deleted '{name}'"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/clusters",
        data={},
        success_codes=[204, 304, 404],
    )

    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    Parameters:



    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe gitlab.project.project_clusters
    """

    result = {}

    async for project in hub.exec.gitlab.request.paginate(
        ctx, url=f"{ctx.acct.endpoint_url}/projects"
    ):
        project_id = project["id"]

        async for ret in hub.exec.gitlab.request.paginate(
            ctx, url=f"{ctx.acct.endpoint_url}/projects/{project_id}/clusters"
        ):
            result[f"/projects-{project_id}-project.project_clusters-{ret['id']}"] = {
                "gitlab.project.project_clusters.present": [
                    {"name": ret.get("name")},
                    {"project_id": ret.get("id")},
                    {"domain": ret.get("domain")},
                    {"management_project_id": ret.get("management_project_id")},
                    {"enabled": ret.get("enabled")},
                    {"managed": ret.get("managed")},
                    {
                        "platform_kubernetes_attributes_api_url_": ret.get(
                            "platform_kubernetes_attributes[api_url]"
                        )
                    },
                    {
                        "platform_kubernetes_attributes_token_": ret.get(
                            "platform_kubernetes_attributes[token]"
                        )
                    },
                    {
                        "platform_kubernetes_attributes_ca_cert_": ret.get(
                            "platform_kubernetes_attributes[ca_cert]"
                        )
                    },
                    {
                        "platform_kubernetes_attributes_namespace_": ret.get(
                            "platform_kubernetes_attributes[namespace]"
                        )
                    },
                    {
                        "platform_kubernetes_attributes_authorization_type_": ret.get(
                            "platform_kubernetes_attributes[authorization_type]"
                        )
                    },
                    {"environment_scope": ret.get("environment_scope")},
                ]
            }

    return result
