"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

Pages domains
"""
from typing import Any
from typing import Dict

import dict_tools.differ as differ


async def present(
    hub,
    ctx,
    name: str,
    project_id: int,
    domain: str,
    auto_ssl_enabled: bool = None,
    certificate: str = None,
    key: str = None,
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Creates a new Pages domain. The user must have permissions to create new Pages domains.


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID or URL-encoded path of the project owned by the authenticated user.
        domain(str): The custom domain indicated by the user.
        auto_ssl_enabled(bool, optional): Enables automatic generation of SSL certificates issued by Letâ€™s Encrypt for custom domains. Defaults to None.
        certificate(str, optional): The certificate in PEM format with intermediates following in most specific to least specific order. Defaults to None.
        key(str, optional): The certificate key in PEM format. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              gitlab.standalone.pages_domains.present:
                - name: value
                - project_id: value
                - domain: value
    """

    result = dict(comment="", changes=None, name=name, result=True)

    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/pages/domains",
        data={"kwargs": '{"id": project_id}'},
        success_codes=[200],
    )
    if before["status"]:
        result["comment"] = f"'{name}' already exists"
    else:
        ret = await hub.exec.request.json.post(
            ctx,
            success_codes=[201, 304, 204],
            url=f"{ctx.acct.endpoint_url}/pages/domains",
            **{
                "id": project_id,
                "domain": domain,
                "auto_ssl_enabled": auto_ssl_enabled,
                "certificate": certificate,
                "key": key,
            },
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Created '{name}'"

    # Now that the resource exists, update it
    ret = await hub.exec.request.json.put(
        ctx,
        url=f"{ctx.acct.endpoint_url}/pages/domains",
        success_codes=[200, 204, 304],
    )

    if not ret["status"]:
        result["status"] = False
        result["comment"] = f"Unable to update '{name}': {ret['comment']}"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/pages/domains",
        data={"kwargs": '{"id": project_id}'},
        success_codes=[200],
    )
    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def absent(hub, ctx, name: str, project_id: int, domain: str) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Creates a new Pages domain. The user must have permissions to create new Pages domains.


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID or URL-encoded path of the project owned by the authenticated user.
        domain(str): The custom domain indicated by the user.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              gitlab.standalone.pages_domains.absent:
                - name: value
                - project_id: value
                - domain: value
    """

    result = dict(comment="", changes=None, name=name, result=True)
    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/pages/domains",
        data={"kwargs": '{"id": project_id}'},
        success_codes=[204, 304, 404],
    )

    if before["status"]:
        result["comment"] = f"'{name}' already absent"
    else:
        ret = await hub.exec.request.json.delete(
            ctx,
            url=f"{ctx.acct.endpoint_url}/pages/domains",
            success_code=[204],
            **{"id": project_id, "domain": domain},
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Deleted '{name}'"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/pages/domains",
        data={"kwargs": '{"id": project_id}'},
        success_codes=[204, 304, 404],
    )

    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    Get a list of project Pages domains. The user must have permissions to view Pages domains.



    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe gitlab.standalone.pages_domains
    """

    result = {}

    async for ret in hub.exec.gitlab.request.paginate(
        ctx, url=f"{ctx.acct.endpoint_url}/pages/domains"
    ):
        result[f"standalone.pages_domains-{ret['id']}"] = {
            "gitlab.standalone.pages_domains.present": [
                {"project_id": ret.get("id")},
                {"domain": ret.get("domain")},
                {"auto_ssl_enabled": ret.get("auto_ssl_enabled")},
                {"certificate": ret.get("certificate")},
                {"key": ret.get("key")},
            ]
        }

    return result
