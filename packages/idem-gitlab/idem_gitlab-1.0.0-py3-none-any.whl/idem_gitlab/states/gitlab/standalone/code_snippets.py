"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

Code snippets
"""
from typing import Any
from typing import Dict
from typing import List

import dict_tools.differ as differ


async def present(
    hub,
    ctx,
    name: str,
    title: str,
    files_file_path: str,
    files_content: str,
    file_name: str = None,
    content: str = None,
    description: str = None,
    visibility: str = None,
    files: List[str] = None,
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Parameters:


    Args:
        name(Text): The identifier for this state.
        title(str): Title of a snippet.
        file_name(str, optional): Deprecated: Use files instead. Name of a snippet file. Defaults to None.
        content(str, optional): Deprecated: Use files instead. Content of a snippet. Defaults to None.
        description(str, optional): Description of a snippet. Defaults to None.
        visibility(str, optional): Snippetâ€™s visibility. Defaults to None.
        files(List[str], optional): An array of snippet files. Defaults to None.
        files_file_path(str): File path of the snippet file.
        files_content(str): Content of the snippet file.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              gitlab.standalone.code_snippets.present:
                - name: value
                - title: value
                - files_file_path: value
                - files_content: value
    """

    result = dict(comment="", changes=None, name=name, result=True)

    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/snippets",
        data={},
        success_codes=[200],
    )
    if before["status"]:
        result["comment"] = f"'{name}' already exists"
    else:
        ret = await hub.exec.request.json.post(
            ctx,
            success_codes=[201, 304, 204],
            url=f"{ctx.acct.endpoint_url}/snippets",
            **{
                "title": title,
                "file_name": file_name,
                "content": content,
                "description": description,
                "visibility": visibility,
                "files": files,
                "files:file_path": files_file_path,
                "files:content": files_content,
            },
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Created '{name}'"

    # Now that the resource exists, update it
    ret = await hub.exec.request.json.put(
        ctx,
        url=f"{ctx.acct.endpoint_url}/snippets",
        success_codes=[200, 204, 304],
    )

    if not ret["status"]:
        result["status"] = False
        result["comment"] = f"Unable to update '{name}': {ret['comment']}"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/snippets",
        data={},
        success_codes=[200],
    )
    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def absent(hub, ctx, name: str, project_id: int) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Parameters:


    Args:
        name(Text): The identifier for this state.
        project_id(int): ID of snippet to delete.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              gitlab.standalone.code_snippets.absent:
                - name: value
                - project_id: value
    """

    result = dict(comment="", changes=None, name=name, result=True)
    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/snippets",
        data={},
        success_codes=[204, 304, 404],
    )

    if before["status"]:
        result["comment"] = f"'{name}' already absent"
    else:
        ret = await hub.exec.request.json.delete(
            ctx,
            url=f"{ctx.acct.endpoint_url}/snippets",
            success_code=[204],
            **{"id": project_id},
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Deleted '{name}'"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/snippets",
        data={},
        success_codes=[204, 304, 404],
    )

    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    Parameters:



    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe gitlab.standalone.code_snippets
    """

    result = {}

    async for ret in hub.exec.gitlab.request.paginate(
        ctx, url=f"{ctx.acct.endpoint_url}/snippets"
    ):
        result[f"standalone.code_snippets-{ret['id']}"] = {
            "gitlab.standalone.code_snippets.present": [
                {"title": ret.get("title")},
                {"file_name": ret.get("file_name")},
                {"content": ret.get("content")},
                {"description": ret.get("description")},
                {"visibility": ret.get("visibility")},
                {"files": ret.get("files")},
                {"files_file_path": ret.get("files:file_path")},
                {"files_content": ret.get("files:content")},
            ]
        }

    return result
