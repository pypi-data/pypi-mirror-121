"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

Issues
"""
from typing import Any
from typing import Dict

import dict_tools.differ as differ


async def present(
    hub,
    ctx,
    name: str,
    project_id: int,
    title: str,
    assignee_id: int = None,
    assignee_ids: int = None,
    confidential: bool = None,
    created_at: str = None,
    description: str = None,
    discussion_to_resolve: str = None,
    due_date: str = None,
    epic_id: int = None,
    epic_iid: int = None,
    iid: int = None,
    issue_type: str = None,
    labels: str = None,
    merge_request_to_resolve_discussions_of: int = None,
    milestone_id: int = None,
    weight: int = None,
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Creates a new project issue.


    Args:
        name(Text): The identifier for this state.
        assignee_id(int, optional): The ID of the user to assign the issue to. Only appears on GitLab Free. Defaults to None.
        assignee_ids(int, optional): The IDs of the users to assign the issue to. Defaults to None.
        confidential(bool, optional): Set an issue to be confidential. Default is false. Defaults to None.
        created_at(str, optional): When the issue was created. Date time string, ISO 8601 formatted, for example 2016-03-11T03:45:40Z. Requires administrator or project/group owner rights. Defaults to None.
        description(str, optional): The description of an issue. Limited to 1,048,576 characters. Defaults to None.
        discussion_to_resolve(str, optional): The ID of a discussion to resolve. This fills out the issue with a default description and mark the discussion as resolved. Use in combination with merge_request_to_resolve_discussions_of. Defaults to None.
        due_date(str, optional): The due date. Date time string in the format YYYY-MM-DD, for example 2016-03-11. Defaults to None.
        epic_id(int, optional): ID of the epic to add the issue to. Valid values are greater than or equal to 0. Defaults to None.
        epic_iid(int, optional): IID of the epic to add the issue to. Valid values are greater than or equal to 0. (deprecated, scheduled for removal in API version 5). Defaults to None.
        project_id(int): The ID or URL-encoded path of the project owned by the authenticated user.
        iid(int, optional): The internal ID of the project’s issue (requires administrator or project owner rights). Defaults to None.
        issue_type(str, optional): The type of issue. One of issue, incident, or test_case. Default is issue. Defaults to None.
        labels(str, optional): Comma-separated label names for an issue. Defaults to None.
        merge_request_to_resolve_discussions_of(int, optional): The IID of a merge request in which to resolve all issues. This fills out the issue with a default description and mark all discussions as resolved. When passing a description or title, these values take precedence over the default values. Defaults to None.
        milestone_id(int, optional): The global ID of a milestone to assign issue. To find the milestone_id associated with a milestone, view an issue with the milestone assigned and use the API to retrieve the issue’s details. Defaults to None.
        title(str): The title of an issue.
        weight(int, optional): The weight of the issue. Valid values are greater than or equal to 0. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              gitlab.standalone.issues.present:
                - name: value
                - project_id: value
                - title: value
    """

    result = dict(comment="", changes=None, name=name, result=True)

    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/issues",
        data={"kwargs": '{"id": project_id}'},
        success_codes=[200],
    )
    if before["status"]:
        result["comment"] = f"'{name}' already exists"
    else:
        ret = await hub.exec.request.json.post(
            ctx,
            success_codes=[201, 304, 204],
            url=f"{ctx.acct.endpoint_url}/issues",
            **{
                "assignee_id": assignee_id,
                "assignee_ids": assignee_ids,
                "confidential": confidential,
                "created_at": created_at,
                "description": description,
                "discussion_to_resolve": discussion_to_resolve,
                "due_date": due_date,
                "epic_id": epic_id,
                "epic_iid": epic_iid,
                "id": project_id,
                "iid": iid,
                "issue_type": issue_type,
                "labels": labels,
                "merge_request_to_resolve_discussions_of": merge_request_to_resolve_discussions_of,
                "milestone_id": milestone_id,
                "title": title,
                "weight": weight,
            },
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Created '{name}'"

    # Now that the resource exists, update it
    ret = await hub.exec.request.json.put(
        ctx,
        url=f"{ctx.acct.endpoint_url}/issues",
        success_codes=[200, 204, 304],
    )

    if not ret["status"]:
        result["status"] = False
        result["comment"] = f"Unable to update '{name}': {ret['comment']}"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/issues",
        data={"kwargs": '{"id": project_id}'},
        success_codes=[200],
    )
    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def absent(
    hub, ctx, name: str, project_id: int, issue_iid: int
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Creates a new project issue.


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID or URL-encoded path of the project owned by the authenticated user.
        issue_iid(int): The internal ID of a project’s issue.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              gitlab.standalone.issues.absent:
                - name: value
                - project_id: value
                - issue_iid: value
    """

    result = dict(comment="", changes=None, name=name, result=True)
    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/issues",
        data={"kwargs": '{"id": project_id}'},
        success_codes=[204, 304, 404],
    )

    if before["status"]:
        result["comment"] = f"'{name}' already absent"
    else:
        ret = await hub.exec.request.json.delete(
            ctx,
            url=f"{ctx.acct.endpoint_url}/issues",
            success_code=[204],
            **{"id": project_id, "issue_iid": issue_iid},
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Deleted '{name}'"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/issues",
        data={"kwargs": '{"id": project_id}'},
        success_codes=[204, 304, 404],
    )

    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    Get all issues the authenticated user has access to. By default it
    returns only issues created by the current user. To get all issues,
    use parameter scope=all.



    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe gitlab.standalone.issues
    """

    result = {}

    async for ret in hub.exec.gitlab.request.paginate(
        ctx, url=f"{ctx.acct.endpoint_url}/issues"
    ):
        result[f"standalone.issues-{ret['id']}"] = {
            "gitlab.standalone.issues.present": [
                {"assignee_id": ret.get("assignee_id")},
                {"assignee_ids": ret.get("assignee_ids")},
                {"confidential": ret.get("confidential")},
                {"created_at": ret.get("created_at")},
                {"description": ret.get("description")},
                {"discussion_to_resolve": ret.get("discussion_to_resolve")},
                {"due_date": ret.get("due_date")},
                {"epic_id": ret.get("epic_id")},
                {"epic_iid": ret.get("epic_iid")},
                {"project_id": ret.get("id")},
                {"iid": ret.get("iid")},
                {"issue_type": ret.get("issue_type")},
                {"labels": ret.get("labels")},
                {
                    "merge_request_to_resolve_discussions_of": ret.get(
                        "merge_request_to_resolve_discussions_of"
                    )
                },
                {"milestone_id": ret.get("milestone_id")},
                {"title": ret.get("title")},
                {"weight": ret.get("weight")},
            ]
        }

    return result
