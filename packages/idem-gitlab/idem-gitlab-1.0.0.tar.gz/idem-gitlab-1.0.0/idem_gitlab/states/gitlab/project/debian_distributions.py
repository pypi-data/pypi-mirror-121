"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

Debian distributions
"""
from typing import Any
from typing import Dict

import dict_tools.differ as differ


async def present(
    hub,
    ctx,
    name: str,
    project_id: int,
    codename: str,
    suite: str = None,
    origin: str = None,
    label: str = None,
    version: str = None,
    description: str = None,
    valproject_idtime_duration_seconds: int = None,
    components: str = None,
    architectures: str = None,
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Creates a Debian project distribution.


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID or URL-encoded path of the project owned by the authenticated user.
        codename(str): The Debian distribution’s codename.
        suite(str, optional): The new Debian distribution’s suite. Defaults to None.
        origin(str, optional): The new Debian distribution’s origin. Defaults to None.
        label(str, optional): The new Debian distribution’s label. Defaults to None.
        version(str, optional): The new Debian distribution’s version. Defaults to None.
        description(str, optional): The new Debian distribution’s description. Defaults to None.
        valproject_idtime_duration_seconds(int, optional): The new Debian distribution’s valid time duration (in seconds). Defaults to None.
        components(str, optional): The new Debian distribution’s list of components. Defaults to None.
        architectures(str, optional): The new Debian distribution’s list of architectures. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              gitlab.project.debian_distributions.present:
                - name: value
                - project_id: value
                - codename: value
    """

    result = dict(comment="", changes=None, name=name, result=True)

    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/debian_distributions",
        data={"kwargs": '{"codename": codename}'},
        success_codes=[200],
    )
    if before["status"]:
        result["comment"] = f"'{name}' already exists"
    else:
        ret = await hub.exec.request.json.post(
            ctx,
            success_codes=[201, 304, 204],
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/debian_distributions",
            **{
                "codename": codename,
                "suite": suite,
                "origin": origin,
                "label": label,
                "version": version,
                "description": description,
                "valproject_idtime_duration_seconds": valproject_idtime_duration_seconds,
                "components": components,
                "architectures": architectures,
            },
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Created '{name}'"

    # Now that the resource exists, update it
    ret = await hub.exec.request.json.put(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/debian_distributions",
        success_codes=[200, 204, 304],
    )

    if not ret["status"]:
        result["status"] = False
        result["comment"] = f"Unable to update '{name}': {ret['comment']}"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/debian_distributions",
        data={"kwargs": '{"codename": codename}'},
        success_codes=[200],
    )
    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def absent(hub, ctx, name: str, project_id: int, codename: int) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Creates a Debian project distribution.


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID or URL-encoded path of the project owned by the authenticated user.
        codename(int): The Debian distribution’s codename.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              gitlab.project.debian_distributions.absent:
                - name: value
                - project_id: value
                - codename: value
    """

    result = dict(comment="", changes=None, name=name, result=True)
    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/debian_distributions",
        data={"kwargs": '{"codename": codename}'},
        success_codes=[204, 304, 404],
    )

    if before["status"]:
        result["comment"] = f"'{name}' already absent"
    else:
        ret = await hub.exec.request.json.delete(
            ctx,
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/debian_distributions",
            success_code=[204],
            **{"codename": codename},
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Deleted '{name}'"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/debian_distributions",
        data={"kwargs": '{"codename": codename}'},
        success_codes=[204, 304, 404],
    )

    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    Lists Debian distributions in the given project.



    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe gitlab.project.debian_distributions
    """

    result = {}

    async for project in hub.exec.gitlab.request.paginate(
        ctx, url=f"{ctx.acct.endpoint_url}/projects"
    ):
        project_id = project["id"]

        async for ret in hub.exec.gitlab.request.paginate(
            ctx,
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/debian_distributions",
        ):
            result[
                f"/projects-{project_id}-project.debian_distributions-{ret['id']}"
            ] = {
                "gitlab.project.debian_distributions.present": [
                    {"project_id": ret.get("id")},
                    {"codename": ret.get("codename")},
                    {"suite": ret.get("suite")},
                    {"origin": ret.get("origin")},
                    {"label": ret.get("label")},
                    {"version": ret.get("version")},
                    {"description": ret.get("description")},
                    {
                        "valproject_idtime_duration_seconds": ret.get(
                            "valproject_idtime_duration_seconds"
                        )
                    },
                    {"components": ret.get("components")},
                    {"architectures": ret.get("architectures")},
                ]
            }

    return result
