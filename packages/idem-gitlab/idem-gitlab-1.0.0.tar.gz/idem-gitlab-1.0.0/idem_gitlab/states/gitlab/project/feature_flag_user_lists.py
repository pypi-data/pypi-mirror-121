"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

Feature Flag User Lists
"""
from typing import Any
from typing import Dict

import dict_tools.differ as differ


async def present(
    hub, ctx, name: str, project_id: int, user_xids: str
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Creates a feature flag user list.


    Args:
        name(str): The name of the feature flag.
        project_id(int): The ID or URL-encoded path of the project.
        user_xids(str): A comma separated list of user IDs.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              gitlab.project.feature_flag_user_lists.present:
                - name: value
                - project_id: value
                - user_xids: value
    """

    result = dict(comment="", changes=None, name=name, result=True)

    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags_user_lists",
        data={"kwargs": '{"iid": iid}'},
        success_codes=[200],
    )
    if before["status"]:
        result["comment"] = f"'{name}' already exists"
    else:
        ret = await hub.exec.request.json.post(
            ctx,
            success_codes=[201, 304, 204],
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags_user_lists",
            **{"name": name, "user_xids": user_xids},
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Created '{name}'"

    # Now that the resource exists, update it
    ret = await hub.exec.request.json.put(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags_user_lists",
        success_codes=[200, 204, 304],
    )

    if not ret["status"]:
        result["status"] = False
        result["comment"] = f"Unable to update '{name}': {ret['comment']}"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags_user_lists",
        data={"kwargs": '{"iid": iid}'},
        success_codes=[200],
    )
    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def absent(hub, ctx, name: str, project_id: int, iid: int) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Creates a feature flag user list.


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID or URL-encoded path of the project.
        iid(int): The internal ID of the projectâ€™s feature flag user list.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              gitlab.project.feature_flag_user_lists.absent:
                - name: value
                - project_id: value
                - iid: value
    """

    result = dict(comment="", changes=None, name=name, result=True)
    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags_user_lists",
        data={"kwargs": '{"iid": iid}'},
        success_codes=[204, 304, 404],
    )

    if before["status"]:
        result["comment"] = f"'{name}' already absent"
    else:
        ret = await hub.exec.request.json.delete(
            ctx,
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags_user_lists",
            success_code=[204],
            **{"iid": iid},
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Deleted '{name}'"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags_user_lists",
        data={"kwargs": '{"iid": iid}'},
        success_codes=[204, 304, 404],
    )

    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    Gets all feature flag user lists for the requested project.



    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe gitlab.project.feature_flag_user_lists
    """

    result = {}

    async for project in hub.exec.gitlab.request.paginate(
        ctx, url=f"{ctx.acct.endpoint_url}/projects"
    ):
        project_id = project["id"]

        async for ret in hub.exec.gitlab.request.paginate(
            ctx,
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags_user_lists",
        ):
            result[
                f"/projects-{project_id}-project.feature_flag_user_lists-{ret['id']}"
            ] = {
                "gitlab.project.feature_flag_user_lists.present": [
                    {"name": ret.get("name")},
                    {"project_id": ret.get("id")},
                    {"user_xids": ret.get("user_xids")},
                ]
            }

    return result
