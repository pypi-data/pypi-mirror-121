"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

Feature Flags
"""
from typing import Any
from typing import Dict

import dict_tools.differ as differ


async def present(
    hub,
    ctx,
    name: str,
    project_id: int,
    version: str,
    description: str = None,
    active: bool = None,
    strategies: Dict[str, Any] = None,
    strategies_name: Dict[str, Any] = None,
    strategies_parameters: Dict[str, Any] = None,
    strategies_scopes: Dict[str, Any] = None,
    strategies_scopes_environment_scope: str = None,
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Creates a new feature flag.


    Args:
        name(str): The name of the feature flag.
        project_id(int): The ID or URL-encoded path of the project.
        version(str): The version of the feature flag. Must be new_version_flag. Omit or set to legacy_flag to create a Legacy Feature Flag.
        description(str, optional): The description of the feature flag. Defaults to None.
        active(bool, optional): The active state of the flag. Defaults to true. Supported in GitLab 13.3 and later. Defaults to None.
        strategies(Dict[str, Any], optional): The feature flag strategies. Defaults to None.
        strategies_name(Dict[str, Any], optional): The strategy name. Can be default, gradualRolloutUserId, userWithId, or gitlabUserList. In GitLab 13.5 and later, can be flexibleRollout. Defaults to None.
        strategies_parameters(Dict[str, Any], optional): The strategy parameters. Defaults to None.
        strategies_scopes(Dict[str, Any], optional): The scopes for the strategy. Defaults to None.
        strategies_scopes_environment_scope(str, optional): The environment spec for the scope. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              gitlab.project.feature_flags.present:
                - name: value
                - project_id: value
                - version: value
    """

    result = dict(comment="", changes=None, name=name, result=True)

    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags",
        data={},
        success_codes=[200],
    )
    if before["status"]:
        result["comment"] = f"'{name}' already exists"
    else:
        ret = await hub.exec.request.json.post(
            ctx,
            success_codes=[201, 304, 204],
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags",
            **{
                "name": name,
                "version": version,
                "description": description,
                "active": active,
                "strategies": strategies,
                "strategies:name": strategies_name,
                "strategies:parameters": strategies_parameters,
                "strategies:scopes": strategies_scopes,
                "strategies:scopes:environment_scope": strategies_scopes_environment_scope,
            },
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Created '{name}'"

    # Now that the resource exists, update it
    ret = await hub.exec.request.json.put(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags",
        success_codes=[200, 204, 304],
    )

    if not ret["status"]:
        result["status"] = False
        result["comment"] = f"Unable to update '{name}': {ret['comment']}"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags",
        data={},
        success_codes=[200],
    )
    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def absent(
    hub, ctx, name: str, project_id: int, feature_flag_name: str
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Creates a new feature flag.


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID or URL-encoded path of the project.
        feature_flag_name(str): The name of the feature flag.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              gitlab.project.feature_flags.absent:
                - name: value
                - project_id: value
                - feature_flag_name: value
    """

    result = dict(comment="", changes=None, name=name, result=True)
    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags",
        data={},
        success_codes=[204, 304, 404],
    )

    if before["status"]:
        result["comment"] = f"'{name}' already absent"
    else:
        ret = await hub.exec.request.json.delete(
            ctx,
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags",
            success_code=[204],
            **{"feature_flag_name": feature_flag_name},
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Deleted '{name}'"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags",
        data={},
        success_codes=[204, 304, 404],
    )

    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    Gets all feature flags of the requested project.



    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe gitlab.project.feature_flags
    """

    result = {}

    async for project in hub.exec.gitlab.request.paginate(
        ctx, url=f"{ctx.acct.endpoint_url}/projects"
    ):
        project_id = project["id"]

        async for ret in hub.exec.gitlab.request.paginate(
            ctx, url=f"{ctx.acct.endpoint_url}/projects/{project_id}/feature_flags"
        ):
            result[f"/projects-{project_id}-project.feature_flags-{ret['id']}"] = {
                "gitlab.project.feature_flags.present": [
                    {"name": ret.get("name")},
                    {"project_id": ret.get("id")},
                    {"version": ret.get("version")},
                    {"description": ret.get("description")},
                    {"active": ret.get("active")},
                    {"strategies": ret.get("strategies")},
                    {"strategies_name": ret.get("strategies:name")},
                    {"strategies_parameters": ret.get("strategies:parameters")},
                    {"strategies_scopes": ret.get("strategies:scopes")},
                    {
                        "strategies_scopes_environment_scope": ret.get(
                            "strategies:scopes:environment_scope"
                        )
                    },
                ]
            }

    return result
