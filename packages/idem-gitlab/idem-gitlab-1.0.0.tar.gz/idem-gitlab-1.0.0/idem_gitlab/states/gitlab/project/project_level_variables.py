"""
Autogenerated using `pop-create-idem <https://gitlab.com/saltstack/pop/pop-create-idem>`__

Project-level variables
"""
from typing import Any
from typing import Dict

import dict_tools.differ as differ


async def present(
    hub,
    ctx,
    name: str,
    project_id: int,
    key: str,
    value: str,
    variable_type: str = None,
    protected: bool = None,
    masked: bool = None,
    environment_scope: str = None,
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Create a new variable.


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID of a project or URL-encoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user.
        key(str): The key of a variable; must have no more than 255 characters; only A-Z, a-z, 0-9, and _ are allowed.
        value(str): The value of a variable.
        variable_type(str, optional): The type of a variable. Available types are: env_var (default) and file. Defaults to None.
        protected(bool, optional): Whether the variable is protected. Default: false. Defaults to None.
        masked(bool, optional): Whether the variable is masked. Default: false. Defaults to None.
        environment_scope(str, optional): The environment_scope of the variable. Default: *. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_present:
              gitlab.project.project_level_variables.present:
                - name: value
                - project_id: value
                - key: value
                - value: value
    """

    result = dict(comment="", changes=None, name=name, result=True)

    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/variables",
        data={},
        success_codes=[200],
    )
    if before["status"]:
        result["comment"] = f"'{name}' already exists"
    else:
        ret = await hub.exec.request.json.post(
            ctx,
            success_codes=[201, 304, 204],
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/variables",
            **{
                "key": key,
                "value": value,
                "variable_type": variable_type,
                "protected": protected,
                "masked": masked,
                "environment_scope": environment_scope,
            },
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Created '{name}'"

    # Now that the resource exists, update it
    ret = await hub.exec.request.json.put(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/variables",
        success_codes=[200, 204, 304],
    )

    if not ret["status"]:
        result["status"] = False
        result["comment"] = f"Unable to update '{name}': {ret['comment']}"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/variables",
        data={},
        success_codes=[200],
    )
    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def absent(
    hub, ctx, name: str, project_id: int, key: str, filter_: str = None
) -> Dict[str, Any]:
    r"""
    **Autogenerated function**

    Create a new variable.


    Args:
        name(Text): The identifier for this state.
        project_id(int): The ID of a project or URL-encoded NAMESPACE/PROJECT_NAME of the project owned by the authenticated user.
        key(str): The key of a variable.
        filter_(str, optional): Available filters: [environment_scope]. See the filter parameter details. Defaults to None.

    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: sls

            resource_is_absent:
              gitlab.project.project_level_variables.absent:
                - name: value
                - project_id: value
                - key: value
    """

    result = dict(comment="", changes=None, name=name, result=True)
    before = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/variables",
        data={},
        success_codes=[204, 304, 404],
    )

    if before["status"]:
        result["comment"] = f"'{name}' already absent"
    else:
        ret = await hub.exec.request.json.delete(
            ctx,
            url=f"{ctx.acct.endpoint_url}/projects/{project_id}/variables",
            success_code=[204],
            **{"key": key, "filter": filter_},
        )
        result["result"] = ret["status"]
        if not result["result"]:
            result["comment"] = ret["comment"]
            return result
        result["comment"] = f"Deleted '{name}'"

    after = hub.exec.request.json.get(
        ctx,
        url=f"{ctx.acct.endpoint_url}/projects/{project_id}/variables",
        data={},
        success_codes=[204, 304, 404],
    )

    result["changes"] = differ.deep_diff(before["ret"], after["ret"])
    return result


async def describe(hub, ctx) -> Dict[str, Dict[str, Any]]:
    r"""
    **Autogenerated function**

    Describe the resource in a way that can be recreated/managed with the corresponding "present" function


    Get list of a projectâ€™s variables.



    Returns:
        Dict[str, Any]

    Examples:

        .. code-block:: bash

            $ idem describe gitlab.project.project_level_variables
    """

    result = {}

    async for project in hub.exec.gitlab.request.paginate(
        ctx, url=f"{ctx.acct.endpoint_url}/projects"
    ):
        project_id = project["id"]

        async for ret in hub.exec.gitlab.request.paginate(
            ctx, url=f"{ctx.acct.endpoint_url}/projects/{project_id}/variables"
        ):
            result[
                f"/projects-{project_id}-project.project_level_variables-{ret['id']}"
            ] = {
                "gitlab.project.project_level_variables.present": [
                    {"project_id": ret.get("id")},
                    {"key": ret.get("key")},
                    {"value": ret.get("value")},
                    {"variable_type": ret.get("variable_type")},
                    {"protected": ret.get("protected")},
                    {"masked": ret.get("masked")},
                    {"environment_scope": ret.get("environment_scope")},
                ]
            }

    return result
