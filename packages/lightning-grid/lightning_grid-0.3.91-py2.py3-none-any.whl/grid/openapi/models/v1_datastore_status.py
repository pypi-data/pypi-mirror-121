# coding: utf-8

"""
    external/v1/external_session_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from grid.openapi.configuration import Configuration


class V1DatastoreStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extracted_url': 'str',
        'metadata_url': 'str',
        'phase': 'V1DatastoreOptimizationStatus',
        'size_bytes': 'str',
        'snapshot_id': 'V1DatastoreSnapshotID'
    }

    attribute_map = {
        'extracted_url': 'extractedUrl',
        'metadata_url': 'metadataUrl',
        'phase': 'phase',
        'size_bytes': 'sizeBytes',
        'snapshot_id': 'snapshotId'
    }

    def __init__(self, extracted_url=None, metadata_url=None, phase=None, size_bytes=None, snapshot_id=None, _configuration=None):  # noqa: E501
        """V1DatastoreStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._extracted_url = None
        self._metadata_url = None
        self._phase = None
        self._size_bytes = None
        self._snapshot_id = None
        self.discriminator = None

        if extracted_url is not None:
            self.extracted_url = extracted_url
        if metadata_url is not None:
            self.metadata_url = metadata_url
        if phase is not None:
            self.phase = phase
        if size_bytes is not None:
            self.size_bytes = size_bytes
        if snapshot_id is not None:
            self.snapshot_id = snapshot_id

    @property
    def extracted_url(self):
        """Gets the extracted_url of this V1DatastoreStatus.  # noqa: E501


        :return: The extracted_url of this V1DatastoreStatus.  # noqa: E501
        :rtype: str
        """
        return self._extracted_url

    @extracted_url.setter
    def extracted_url(self, extracted_url):
        """Sets the extracted_url of this V1DatastoreStatus.


        :param extracted_url: The extracted_url of this V1DatastoreStatus.  # noqa: E501
        :type: str
        """

        self._extracted_url = extracted_url

    @property
    def metadata_url(self):
        """Gets the metadata_url of this V1DatastoreStatus.  # noqa: E501


        :return: The metadata_url of this V1DatastoreStatus.  # noqa: E501
        :rtype: str
        """
        return self._metadata_url

    @metadata_url.setter
    def metadata_url(self, metadata_url):
        """Sets the metadata_url of this V1DatastoreStatus.


        :param metadata_url: The metadata_url of this V1DatastoreStatus.  # noqa: E501
        :type: str
        """

        self._metadata_url = metadata_url

    @property
    def phase(self):
        """Gets the phase of this V1DatastoreStatus.  # noqa: E501


        :return: The phase of this V1DatastoreStatus.  # noqa: E501
        :rtype: V1DatastoreOptimizationStatus
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this V1DatastoreStatus.


        :param phase: The phase of this V1DatastoreStatus.  # noqa: E501
        :type: V1DatastoreOptimizationStatus
        """

        self._phase = phase

    @property
    def size_bytes(self):
        """Gets the size_bytes of this V1DatastoreStatus.  # noqa: E501


        :return: The size_bytes of this V1DatastoreStatus.  # noqa: E501
        :rtype: str
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this V1DatastoreStatus.


        :param size_bytes: The size_bytes of this V1DatastoreStatus.  # noqa: E501
        :type: str
        """

        self._size_bytes = size_bytes

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this V1DatastoreStatus.  # noqa: E501


        :return: The snapshot_id of this V1DatastoreStatus.  # noqa: E501
        :rtype: V1DatastoreSnapshotID
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this V1DatastoreStatus.


        :param snapshot_id: The snapshot_id of this V1DatastoreStatus.  # noqa: E501
        :type: V1DatastoreSnapshotID
        """

        self._snapshot_id = snapshot_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1DatastoreStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1DatastoreStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1DatastoreStatus):
            return True

        return self.to_dict() != other.to_dict()
