# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/CLI.ipynb (unless otherwise specified).

__all__ = [
    "get_token",
    "app",
    "datasource_ls",
    "datasource_cmds",
    "datasource_s3",
    "datasource_db",
    "datasource_pull",
    "datasource_is_ready",
    "datasource_head",
    "datasource_dtypes",
    "datasource_train",
    "model_is_ready",
    "model_to_pandas",
    "model_push",
    "datasource_push",
    "prediction_is_ready",
]

# Cell

from typing import *

# Internal Cell

import logging
import typer
import os
from tabulate import tabulate
import pytest
from typer.testing import CliRunner
from time import sleep
import pandas as pd
from datetime import timedelta

from .client import Client, DataSource, ProgressStatus, Model, Prediction

# Internal Cell

# Gets or creates a logger
logger = logging.getLogger(__name__)

# set log level
logger.setLevel(logging.WARNING)

# Cell

app = typer.Typer()


@app.command()
def get_token(
    username: Optional[str] = typer.Option(
        None,
        "--username",
        "-u",
        help="Username for your developer account. If not set (default value `None`), it will try to use the value from environment variable `AIRT_SERVICE_USERNAME`.",
    ),
    password: Optional[str] = typer.Option(
        None,
        "--password",
        "-p",
        help="Password for your developer account. If not set (default value `None`), it will try to use the value from environment variable `AIRT_SERVICE_PASSWORD`.",
    ),
    verbose: Optional[bool] = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose output.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
) -> None:
    """A command for authenticating and accessing the airt service.

    Before you can use the service, you must acquire a username and password for your developer account.
    Please contact us by email info@airt.ai to get one.

    The username, and password can be passed explicitly while calling this command or stored
    permanently in environment variables `AIRT_SERVICE_USERNAME` and `AIRT_SERVICE_PASSWORD` respectively.

    Upon successful authentication, the airt services will be available to access.
    """
    try:
        Client.authenticate(username=username, password=password)
        if verbose:
            typer.secho(
                "Authentication successful. Please save the below token in `AIRT_SERVICE_TOKEN` env variable"
            )
            typer.echo(f"auth_token = {Client.auth_token}")
            typer.echo(f"server = {Client.server}")
        else:
            typer.secho(Client.auth_token)
    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Cell

datasource_cmds = typer.Typer()
app.add_typer(
    datasource_cmds,
    name="datasource",
    short_help="A class for encapsulating the data from sources like AWS S3 bucket or a database.",
    help="A class for encapsulating the data from sources like AWS S3 bucket or a database. Currently, we support reading and pushing the data to a MySql database, and to an AWS S3 bucket in the Parquet file format. We plan to add other databases and storage mediums in the future.",
)


@datasource_cmds.command("ls")
def datasource_ls(
    verbose: Optional[bool] = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose output.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
) -> None:
    """List the available datasources."""
    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        # todo: use --debug for debugging purposes if needed by setting logger
        from .client import DataSource

        # todo: implement me
        # DataSource.ls()
        df = pd.DataFrame(
            dict(
                image_id=[1, 5],
                uri=["s3://something", "s3://something_else"],
                ready=[True, False],
            )
        )

        if verbose:
            # output everything you know
            typer.echo(
                tabulate(df.set_index("image_id"), headers="keys", tablefmt="github")
            )
        else:
            # output only ids
            typer.echo(" ".join([str(x) for x in df["image_id"]]))

    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Cell


@datasource_cmds.command("s3")
def datasource_s3(
    uri: str = typer.Option(
        ..., help="The AWS S3 bucket location of the Parquet files as a string."
    ),
    access_key: Optional[str] = typer.Option(
        None,
        help="The access key for the S3 bucket. If `None` (default value), then the value of environment variable `AWS_ACCESS_KEY_ID` is used.",
    ),
    secret_key: Optional[str] = typer.Option(
        None,
        help="The secret key for the S3 bucket. If `None` (default value), then the value of environment variable `AWS_SECRET_ACCESS_KEY` is used.",
    ),
    verbose: Optional[bool] = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose output.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
):
    """Creates an object that encapsulates the data from a S3 bucket."""

    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        ds = DataSource.s3(uri=uri)
        if verbose:
            typer.secho(f"Data ID: {ds.id}")
            typer.echo(
                f"Please run the `datasource pull {ds.id}` command to download the data to the airt server."
            )
        else:
            typer.secho(f"Data ID: {ds.id}")
    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Cell


@datasource_cmds.command("db")
def datasource_db(
    host: str = typer.Option(
        ..., help="The host name (subdomain) of the database server as a string."
    ),
    database: str = typer.Option(
        ..., help="The name of the database for establishing the connection as string."
    ),
    table: str = typer.Option(
        ...,
        help="The name of the table present in the database for querying as a string.",
    ),
    port: Optional[int] = typer.Option(
        3306,
        help="The port number as a string. If the value is not passed then the default port number will be used (e.g. for MySQL we will use 3306)",
    ),
    engine: Optional[str] = typer.Option(
        None,
        help="The name of the database engine as a string. If the value is not passed then the default database engine for MySQL will be used.",
    ),
    username: Optional[str] = typer.Option(
        None,
        help="The username to connect to the database as a string. If not set (default value `root`), it will try to use the value from environment variable `AIRT_CLIENT_DB_USERNAME`.",
    ),
    password: Optional[str] = typer.Option(
        None,
        help="The username to connect to the database as a string. If not set (default value ``), it will try to use the value from environment variable `AIRT_CLIENT_DB_PASSWORD`.",
    ),
    verbose: Optional[bool] = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose output.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
):
    """Creates a DB backed data source."""

    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        ds = DataSource.db(
            host=host,
            database=database,
            port=port,
            table=table,
            engine=engine,
            username=username,
            password=password,
        )
        if verbose:
            typer.secho(f"Data ID: {ds.id}")
            typer.echo(
                f"Please run the `datasource pull {ds.id}` command to download the data to the airt server."
            )
        else:
            typer.secho(f"Data ID: {ds.id}")
    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Cell


@datasource_cmds.command("pull")
def datasource_pull(
    data_id: str = typer.Option(
        ...,
        "--data_id",
        "-id",
        help="The data ID in the airt service that you want to pull.",
    ),
    verbose: Optional[bool] = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose output.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
) -> None:
    """Establish the connection with the data source.

    The pull method establishes the connection with the specified `DataSource` and pulls the
    data into the server for further processing.

    """
    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        ds = DataSource(data_id=int(data_id))
        ds.pull()
        if verbose:
            typer.secho(
                f"The data source (id = {data_id}) is being pulled to the airt server."
            )
            typer.echo(
                f"Please run the `datasource progress_bar` or `datasource is_ready` command to check the status."
            )
    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Cell


@datasource_cmds.command("is_ready")
def datasource_is_ready(
    data_id: str = typer.Option(
        ...,
        "--data_id",
        "-id",
        help="The data ID in the airt service.",
    ),
    verbose: Optional[bool] = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose output.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
) -> None:
    """A command to check the download status of the given data ID.

    Returns:
            True if the progress if completed, else False.
    """
    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        ps = ProgressStatus(relative_url=f"/data/{int(data_id)}")
        status = ps.is_ready()
        if verbose:
            if status:
                typer.echo(f"Data source sucessfully downloaded")
            else:
                typer.secho(
                    f"The data source (id = {data_id}) is being pulled to the airt server."
                )
        else:
            typer.echo(status)
    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Cell


@datasource_cmds.command("head")
def datasource_head(
    data_id: str = typer.Option(
        ...,
        "--data_id",
        "-id",
        help="The data ID in the airt service.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
) -> None:
    """Display first few records of the selected data source."""
    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        ds = DataSource(data_id=int(data_id))
        head = ds.head()
        typer.echo(tabulate(head, headers="keys", tablefmt="github"))

    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Cell


@datasource_cmds.command("dtypes")
def datasource_dtypes(
    data_id: str = typer.Option(
        ...,
        "--data_id",
        "-id",
        help="The data ID in the airt service.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
) -> None:
    """Parse the data source and returns the column names and their dtypes."""
    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        ds = DataSource(data_id=int(data_id))
        typer.echo(ds.dtypes)

    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Cell


@datasource_cmds.command("train")
def datasource_train(
    data_id: str = typer.Option(
        ...,
        "--data_id",
        "-id",
        help="The data ID in the airt service.",
    ),
    client_column: str = typer.Option(
        ...,
        "--client_column",
        help="The name of the column that uniquely identifies the users/clients as string.",
    ),
    timestamp_column: Optional[str] = typer.Option(
        None,
        "--timestamp_column",
        help="Optional; Name of the timestamp_column specifying the time of an occurred event as a string.",
    ),
    target_column: str = typer.Option(
        ...,
        "--target_column",
        help="Name of the target event for which the model needs to be trained to make predictions.",
    ),
    target: str = typer.Option(
        ...,
        "--target",
        help="Name of the target event for which the model needs to be trained to make predictions.",
    ),
    predict_after: str = typer.Option(
        ...,
        "--predict_after",
        help="Time delta in hours of the expected target event mentioned as timedelta.",
    ),
    verbose: Optional[bool] = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose output.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
):
    """Train a ML model for the given `DataSource`."""

    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        ds = DataSource(data_id=int(data_id))
        model = ds.train(
            client_column=client_column,
            target_column=target_column,
            target=target,
            predict_after=timedelta(hours=int(predict_after)),
        )
        if verbose:
            typer.secho(f"Model ID: {model.model_id}")
        else:
            typer.secho(f"Model ID: {model.model_id}")
    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Internal Cell

model_cmds = typer.Typer()
app.add_typer(
    model_cmds,
    name="model",
    short_help="A class for querying the status of the model training, evaluation, and prediction on the remote server.",
    help="A command for querying the status of the model training, evaluation, and prediction on the remote server. The model is trained on the connected data and tries to predict a specific event in the future. For the model training and prediction, we assume the input data includes the following: 1. a column identifying a client client_column (person, car, business, etc.), 2. a column specifying a type of event we will try to predict target_column (buy, checkout, etc.), 3. a timestamp column specifying the time of an occurred event.",
)


@model_cmds.command("ls")
def model_ls():
    """List the available models"""
    # Todo: Implement me
    typer.echo("yet to implement")


# Internal Cell


@model_cmds.command("evaluate")
def model_evaluate(
    model_id: str = typer.Option(
        ...,
        "--model_id",
        "-id",
        help="The model ID in the airt service.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
) -> None:
    """Evaluate the performance of the trained model."""
    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        model = Model(model_id=int(model_id))
        typer.echo(tabulate(model.evaluate(), headers="keys", tablefmt="github"))

    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Internal Cell


@model_cmds.command("predict")
def model_predict(
    model_id: str = typer.Option(
        ...,
        "--model_id",
        "-id",
        help="The model ID in the airt service.",
    ),
    verbose: Optional[bool] = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose output.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
) -> None:
    """Use the trained model and makes predictions."""
    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        model = Model(model_id=int(model_id))
        prediction = model.predict()
        if verbose:
            typer.echo(prediction.prediction_id)
        else:
            typer.echo(f"Prediction ID: {prediction.prediction_id}")

    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Cell


@model_cmds.command("is_ready")
def model_is_ready(
    model_id: str = typer.Option(
        ...,
        "--model_id",
        "-id",
        help="The model ID in the airt service.",
    ),
    verbose: Optional[bool] = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose output.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
) -> None:
    """Check the training status of the given model ID.

    Returns:
            True if the progress if completed, else False.
    """
    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        ps = ProgressStatus(relative_url=f"/model/{int(model_id)}")
        status = ps.is_ready()
        if verbose:
            if status:
                typer.echo(f"Training completed for the model id: {model_id}")
            else:
                typer.secho(
                    f"The training for the model id: {model_id} is yet to complete. Please check back later."
                )
        else:
            typer.echo(status)
    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Internal Cell

prediction_cmds = typer.Typer()
app.add_typer(
    prediction_cmds,
    name="prediction",
    short_help="A command to that uses the trained model for making predictions on the connected data.",
    help="A command to that uses the trained model for making predictions on the connected data.",
)


@prediction_cmds.command("ls")
def prediction_ls():
    """List the available predictions"""
    # Todo: Implement me
    typer.echo("yet to implement")


# Cell


@prediction_cmds.command("to_pandas")
def model_to_pandas(
    prediction_id: str = typer.Option(
        ...,
        "--prediction_id",
        "-id",
        help="The prediction ID in the airt service.",
    ),
    verbose: Optional[bool] = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose output.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
) -> None:
    """A command to convert the predicted results into a Pandas DataFrame object."""
    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        prediction = Prediction(prediction_id=int(prediction_id))
        df = prediction.to_pandas()
        if verbose:
            typer.echo(f"Training completed for the model id: {prediction_id}")
        else:
            typer.echo(tabulate(df, headers="keys", tablefmt="github"))
    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Cell


@prediction_cmds.command("push")
def model_push(
    prediction_id: str = typer.Option(
        ...,
        "--prediction_id",
        help="The prediction ID in the airt service.",
    ),
    data_id: str = typer.Option(
        ...,
        "--data_id",
        help="The data ID in the airt service.",
    ),
    verbose: Optional[bool] = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose output.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
) -> None:
    """Push the prediction results to the target data source."""
    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        ds = DataSource(data_id=int(data_id))
        prediction = Prediction(prediction_id=int(prediction_id))
        prediction.push(data_source=ds)
        if verbose:
            typer.echo(f"Data push initiated for the data id: {data_id}")
        else:
            typer.echo(f"Data push initiated for the data id: {data_id}")
    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Cell


@datasource_cmds.command("push")
def datasource_push(
    prediction_id: str = typer.Option(
        ...,
        "--prediction_id",
        help="The prediction ID in the airt service.",
    ),
    data_id: str = typer.Option(
        ...,
        "--data_id",
        help="The data ID in the airt service.",
    ),
    verbose: Optional[bool] = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose output.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
) -> None:
    """A command to push the prediction results into the target data source."""
    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        ds = DataSource(data_id=int(data_id))
        prediction = Prediction(prediction_id=int(prediction_id))
        ds.push(predictions=prediction)
        if verbose:
            typer.echo(f"Data push initiated for the data id: {data_id}")
        else:
            typer.echo(f"Data push initiated for the data id: {data_id}")
    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)


# Cell


@prediction_cmds.command("is_ready")
def prediction_is_ready(
    prediction_id: str = typer.Option(
        ...,
        "--prediction_id",
        "-id",
        help="The prediction ID in the airt service.",
    ),
    verbose: Optional[bool] = typer.Option(
        False,
        "--verbose",
        "-v",
        help="Enable verbose output.",
    ),
    debug: Optional[bool] = typer.Option(
        False,
        "--debug",
        "-d",
        help="Enable debug mode.",
    ),
) -> None:
    """A command to check the prediction status of the given model ID.

    Returns:
            True if the progress if completed, else False.
    """
    try:
        Client(
            auth_token=os.environ["AIRT_SERVICE_TOKEN"],
            server=os.environ["AIRT_SERVER_URL"],
        )
        ps = ProgressStatus(relative_url=f"/prediction/{int(prediction_id)}")
        status = ps.is_ready()
        if verbose:
            if status:
                typer.echo(f"Prediction completed for the prediction: {prediction_id}")
            else:
                typer.secho(
                    f"The prediction for the id: {prediction_id} is yet to complete. Please check back later."
                )
        else:
            typer.echo(status)
    except Exception as e:
        typer.echo(message=f"Error: {e}", err=True)
        raise typer.Exit(code=1)
