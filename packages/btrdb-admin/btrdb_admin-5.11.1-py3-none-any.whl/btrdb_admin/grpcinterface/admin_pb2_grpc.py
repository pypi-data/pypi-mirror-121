# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import btrdb_admin.grpcinterface.admin_pb2 as admin__pb2


class AdminAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetIngressClasses = channel.unary_unary(
                '/adminapi.AdminAPI/GetIngressClasses',
                request_serializer=admin__pb2.GetIngressClassesParams.SerializeToString,
                response_deserializer=admin__pb2.GetIngressClassesResponse.FromString,
                )
        self.GetIngressClass = channel.unary_unary(
                '/adminapi.AdminAPI/GetIngressClass',
                request_serializer=admin__pb2.GetIngressClassParams.SerializeToString,
                response_deserializer=admin__pb2.GetIngressClassResponse.FromString,
                )
        self.AddOrUpdateIngressClass = channel.unary_unary(
                '/adminapi.AdminAPI/AddOrUpdateIngressClass',
                request_serializer=admin__pb2.AddOrUpdateIngressClassParams.SerializeToString,
                response_deserializer=admin__pb2.AddOrUpdateIngressClassResponse.FromString,
                )
        self.UpdateIngressClassEnabled = channel.unary_unary(
                '/adminapi.AdminAPI/UpdateIngressClassEnabled',
                request_serializer=admin__pb2.UpdateIngressClassEnabledParams.SerializeToString,
                response_deserializer=admin__pb2.UpdateIngressClassEnabledResponse.FromString,
                )
        self.RemoveIngressClass = channel.unary_unary(
                '/adminapi.AdminAPI/RemoveIngressClass',
                request_serializer=admin__pb2.RemoveIngressClassParams.SerializeToString,
                response_deserializer=admin__pb2.RemoveIngressClassResponse.FromString,
                )
        self.AddIngress = channel.unary_unary(
                '/adminapi.AdminAPI/AddIngress',
                request_serializer=admin__pb2.AddIngressParams.SerializeToString,
                response_deserializer=admin__pb2.AddIngressResponse.FromString,
                )
        self.UpdateIngress = channel.unary_unary(
                '/adminapi.AdminAPI/UpdateIngress',
                request_serializer=admin__pb2.UpdateIngressParams.SerializeToString,
                response_deserializer=admin__pb2.UpdateIngressResponse.FromString,
                )
        self.UpdateIngressEnabled = channel.unary_unary(
                '/adminapi.AdminAPI/UpdateIngressEnabled',
                request_serializer=admin__pb2.UpdateIngressEnabledParams.SerializeToString,
                response_deserializer=admin__pb2.UpdateIngressEnabledResponse.FromString,
                )
        self.GetIngress = channel.unary_unary(
                '/adminapi.AdminAPI/GetIngress',
                request_serializer=admin__pb2.GetIngressParams.SerializeToString,
                response_deserializer=admin__pb2.GetIngressResponse.FromString,
                )
        self.RemoveIngress = channel.unary_unary(
                '/adminapi.AdminAPI/RemoveIngress',
                request_serializer=admin__pb2.RemoveIngressParams.SerializeToString,
                response_deserializer=admin__pb2.RemoveIngressResponse.FromString,
                )
        self.GetIngresses = channel.unary_unary(
                '/adminapi.AdminAPI/GetIngresses',
                request_serializer=admin__pb2.GetIngressesParams.SerializeToString,
                response_deserializer=admin__pb2.GetIngressesResponse.FromString,
                )
        self.GetAllIngresses = channel.unary_unary(
                '/adminapi.AdminAPI/GetAllIngresses',
                request_serializer=admin__pb2.GetAllIngressesParams.SerializeToString,
                response_deserializer=admin__pb2.GetAllIngressesResponse.FromString,
                )
        self.GetAssignments = channel.unary_unary(
                '/adminapi.AdminAPI/GetAssignments',
                request_serializer=admin__pb2.GetAssignmentsParams.SerializeToString,
                response_deserializer=admin__pb2.GetAssignmentsResponse.FromString,
                )
        self.AddDistilClass = channel.unary_unary(
                '/adminapi.AdminAPI/AddDistilClass',
                request_serializer=admin__pb2.AddDistilClassParams.SerializeToString,
                response_deserializer=admin__pb2.AddDistilClassResponse.FromString,
                )
        self.UpdateDistilClass = channel.unary_unary(
                '/adminapi.AdminAPI/UpdateDistilClass',
                request_serializer=admin__pb2.UpdateDistilClassParams.SerializeToString,
                response_deserializer=admin__pb2.UpdateDistilClassResponse.FromString,
                )
        self.RemoveDistilClass = channel.unary_unary(
                '/adminapi.AdminAPI/RemoveDistilClass',
                request_serializer=admin__pb2.RemoveDistilClassParams.SerializeToString,
                response_deserializer=admin__pb2.RemoveDistilClassResponse.FromString,
                )
        self.GetDistilClass = channel.unary_unary(
                '/adminapi.AdminAPI/GetDistilClass',
                request_serializer=admin__pb2.GetDistilClassParams.SerializeToString,
                response_deserializer=admin__pb2.GetDistilClassResponse.FromString,
                )
        self.ListDistilClasses = channel.unary_unary(
                '/adminapi.AdminAPI/ListDistilClasses',
                request_serializer=admin__pb2.ListDistilClassesParams.SerializeToString,
                response_deserializer=admin__pb2.ListDistilClassesResponse.FromString,
                )
        self.SetDistilClassEnabled = channel.unary_unary(
                '/adminapi.AdminAPI/SetDistilClassEnabled',
                request_serializer=admin__pb2.SetDistilClassEnabledParams.SerializeToString,
                response_deserializer=admin__pb2.SetDistilClassEnabledResponse.FromString,
                )
        self.AddDistilSelector = channel.unary_unary(
                '/adminapi.AdminAPI/AddDistilSelector',
                request_serializer=admin__pb2.AddDistilSelectorParams.SerializeToString,
                response_deserializer=admin__pb2.AddDistilSelectorResponse.FromString,
                )
        self.UpdateDistilSelector = channel.unary_unary(
                '/adminapi.AdminAPI/UpdateDistilSelector',
                request_serializer=admin__pb2.UpdateDistilSelectorParams.SerializeToString,
                response_deserializer=admin__pb2.UpdateDistilSelectorResponse.FromString,
                )
        self.RemoveDistilSelector = channel.unary_unary(
                '/adminapi.AdminAPI/RemoveDistilSelector',
                request_serializer=admin__pb2.RemoveDistilSelectorParams.SerializeToString,
                response_deserializer=admin__pb2.RemoveDistilSelectorResponse.FromString,
                )
        self.BindDistilSelector = channel.unary_unary(
                '/adminapi.AdminAPI/BindDistilSelector',
                request_serializer=admin__pb2.BindDistilSelectorParams.SerializeToString,
                response_deserializer=admin__pb2.BindDistilSelectorResponse.FromString,
                )
        self.UnBindDistilSelector = channel.unary_unary(
                '/adminapi.AdminAPI/UnBindDistilSelector',
                request_serializer=admin__pb2.UnBindDistilSelectorParams.SerializeToString,
                response_deserializer=admin__pb2.UnBindDistilSelectorResponse.FromString,
                )
        self.ListBoundSelectors = channel.unary_unary(
                '/adminapi.AdminAPI/ListBoundSelectors',
                request_serializer=admin__pb2.ListBoundSelectorsParams.SerializeToString,
                response_deserializer=admin__pb2.ListBoundSelectorsResponse.FromString,
                )
        self.ListAllSelectors = channel.unary_unary(
                '/adminapi.AdminAPI/ListAllSelectors',
                request_serializer=admin__pb2.ListAllSelectorsParams.SerializeToString,
                response_deserializer=admin__pb2.ListAllSelectorsResponse.FromString,
                )
        self.GetSelector = channel.unary_unary(
                '/adminapi.AdminAPI/GetSelector',
                request_serializer=admin__pb2.GetSelectorParams.SerializeToString,
                response_deserializer=admin__pb2.GetSelectorResponse.FromString,
                )
        self.AddDistilInstance = channel.unary_unary(
                '/adminapi.AdminAPI/AddDistilInstance',
                request_serializer=admin__pb2.AddDistilInstanceParams.SerializeToString,
                response_deserializer=admin__pb2.AddDistilInstanceResponse.FromString,
                )
        self.UpdateDistilInstance = channel.unary_unary(
                '/adminapi.AdminAPI/UpdateDistilInstance',
                request_serializer=admin__pb2.UpdateDistilInstanceParams.SerializeToString,
                response_deserializer=admin__pb2.UpdateDistilInstanceResponse.FromString,
                )
        self.RemoveDistilInstance = channel.unary_unary(
                '/adminapi.AdminAPI/RemoveDistilInstance',
                request_serializer=admin__pb2.RemoveDistilInstanceParams.SerializeToString,
                response_deserializer=admin__pb2.RemoveDistilInstanceResponse.FromString,
                )
        self.ListDistilInstances = channel.unary_unary(
                '/adminapi.AdminAPI/ListDistilInstances',
                request_serializer=admin__pb2.ListDistilInstancesParams.SerializeToString,
                response_deserializer=admin__pb2.ListDistilInstancesResponse.FromString,
                )
        self.GetDistilInstance = channel.unary_unary(
                '/adminapi.AdminAPI/GetDistilInstance',
                request_serializer=admin__pb2.GetDistilInstanceParams.SerializeToString,
                response_deserializer=admin__pb2.GetDistilInstanceResponse.FromString,
                )
        self.SetDistilStatus = channel.unary_unary(
                '/adminapi.AdminAPI/SetDistilStatus',
                request_serializer=admin__pb2.SetDistilStatusParams.SerializeToString,
                response_deserializer=admin__pb2.SetDistilStatusResponse.FromString,
                )
        self.RemoveDistilStatus = channel.unary_unary(
                '/adminapi.AdminAPI/RemoveDistilStatus',
                request_serializer=admin__pb2.RemoveDistilStatusParams.SerializeToString,
                response_deserializer=admin__pb2.RemoveDistilStatusResponse.FromString,
                )
        self.ListDistilStatusByClass = channel.unary_unary(
                '/adminapi.AdminAPI/ListDistilStatusByClass',
                request_serializer=admin__pb2.ListDistilStatusByClassParams.SerializeToString,
                response_deserializer=admin__pb2.ListDistilStatusByClassResponse.FromString,
                )
        self.ListDistilStatusByInstance = channel.unary_unary(
                '/adminapi.AdminAPI/ListDistilStatusByInstance',
                request_serializer=admin__pb2.ListDistilStatusByInstanceParams.SerializeToString,
                response_deserializer=admin__pb2.ListDistilStatusByInstanceResponse.FromString,
                )
        self.ListAllDistilStatuses = channel.unary_unary(
                '/adminapi.AdminAPI/ListAllDistilStatuses',
                request_serializer=admin__pb2.ListAllDistilStatusesParams.SerializeToString,
                response_deserializer=admin__pb2.ListAllDistilStatusesResponse.FromString,
                )
        self.GetDistilStatus = channel.unary_unary(
                '/adminapi.AdminAPI/GetDistilStatus',
                request_serializer=admin__pb2.GetDistilStatusParams.SerializeToString,
                response_deserializer=admin__pb2.GetDistilStatusResponse.FromString,
                )
        self.ListTieredStoragePolicies = channel.unary_unary(
                '/adminapi.AdminAPI/ListTieredStoragePolicies',
                request_serializer=admin__pb2.ListTieredStoragePolicyParams.SerializeToString,
                response_deserializer=admin__pb2.ListTieredStoragePolicyResponse.FromString,
                )
        self.GetTieredStoragePolicy = channel.unary_unary(
                '/adminapi.AdminAPI/GetTieredStoragePolicy',
                request_serializer=admin__pb2.GetTieredStoragePolicyParams.SerializeToString,
                response_deserializer=admin__pb2.GetTieredStoragePolicyResponse.FromString,
                )
        self.CreateTieredStoragePolicy = channel.unary_unary(
                '/adminapi.AdminAPI/CreateTieredStoragePolicy',
                request_serializer=admin__pb2.CreateTieredStoragePolicyParams.SerializeToString,
                response_deserializer=admin__pb2.CreateTieredStoragePolicyResponse.FromString,
                )
        self.UpdateTieredStoragePolicy = channel.unary_unary(
                '/adminapi.AdminAPI/UpdateTieredStoragePolicy',
                request_serializer=admin__pb2.UpdateTieredStoragePolicyParams.SerializeToString,
                response_deserializer=admin__pb2.UpdateTieredStoragePolicyResponse.FromString,
                )
        self.ActivateTieredStoragePolicy = channel.unary_unary(
                '/adminapi.AdminAPI/ActivateTieredStoragePolicy',
                request_serializer=admin__pb2.ActivateTieredStoragePolicyParams.SerializeToString,
                response_deserializer=admin__pb2.ActivateTieredStoragePolicyResponse.FromString,
                )
        self.GetDomainDetails = channel.unary_unary(
                '/adminapi.AdminAPI/GetDomainDetails',
                request_serializer=admin__pb2.GetDomainDetailsParams.SerializeToString,
                response_deserializer=admin__pb2.GetDomainDetailsResponse.FromString,
                )
        self.SetDomainDetails = channel.unary_unary(
                '/adminapi.AdminAPI/SetDomainDetails',
                request_serializer=admin__pb2.SetDomainDetailsParams.SerializeToString,
                response_deserializer=admin__pb2.SetDomainDetailsResponse.FromString,
                )
        self.SetCertificateSource = channel.unary_unary(
                '/adminapi.AdminAPI/SetCertificateSource',
                request_serializer=admin__pb2.SetCertificateSourceParams.SerializeToString,
                response_deserializer=admin__pb2.SetCertificateSourceResponse.FromString,
                )
        self.GetCertificateSource = channel.unary_unary(
                '/adminapi.AdminAPI/GetCertificateSource',
                request_serializer=admin__pb2.GetCertificateSourceParams.SerializeToString,
                response_deserializer=admin__pb2.GetCertificateSourceResponse.FromString,
                )
        self.SetManualCertificate = channel.unary_unary(
                '/adminapi.AdminAPI/SetManualCertificate',
                request_serializer=admin__pb2.SetManualCertificateParams.SerializeToString,
                response_deserializer=admin__pb2.SetManualCertificateResponse.FromString,
                )
        self.GetManualCertificate = channel.unary_unary(
                '/adminapi.AdminAPI/GetManualCertificate',
                request_serializer=admin__pb2.GetManualCertificateParams.SerializeToString,
                response_deserializer=admin__pb2.GetManualCertificateResponse.FromString,
                )
        self.GetAutocert = channel.unary_unary(
                '/adminapi.AdminAPI/GetAutocert',
                request_serializer=admin__pb2.GetAutocertParams.SerializeToString,
                response_deserializer=admin__pb2.GetAutocertResponse.FromString,
                )
        self.VerifyCertificate = channel.unary_unary(
                '/adminapi.AdminAPI/VerifyCertificate',
                request_serializer=admin__pb2.VerifyCertificateParams.SerializeToString,
                response_deserializer=admin__pb2.VerifyCertificateResponse.FromString,
                )
        self.GetIdentityProvider = channel.unary_unary(
                '/adminapi.AdminAPI/GetIdentityProvider',
                request_serializer=admin__pb2.GetIdentityProviderParams.SerializeToString,
                response_deserializer=admin__pb2.GetIdentityProviderResponse.FromString,
                )
        self.SetIdentityProvider = channel.unary_unary(
                '/adminapi.AdminAPI/SetIdentityProvider',
                request_serializer=admin__pb2.SetIdentityProviderParams.SerializeToString,
                response_deserializer=admin__pb2.SetIdentityProviderResponse.FromString,
                )
        self.GetGroup = channel.unary_unary(
                '/adminapi.AdminAPI/GetGroup',
                request_serializer=admin__pb2.GetGroupParams.SerializeToString,
                response_deserializer=admin__pb2.GetGroupResponse.FromString,
                )
        self.GetAllGroups = channel.unary_unary(
                '/adminapi.AdminAPI/GetAllGroups',
                request_serializer=admin__pb2.GetAllGroupsParams.SerializeToString,
                response_deserializer=admin__pb2.GetAllGroupsResponse.FromString,
                )
        self.AddGroup = channel.unary_unary(
                '/adminapi.AdminAPI/AddGroup',
                request_serializer=admin__pb2.AddGroupParams.SerializeToString,
                response_deserializer=admin__pb2.AddGroupResponse.FromString,
                )
        self.DeleteGroup = channel.unary_unary(
                '/adminapi.AdminAPI/DeleteGroup',
                request_serializer=admin__pb2.DeleteGroupParams.SerializeToString,
                response_deserializer=admin__pb2.DeleteGroupResponse.FromString,
                )
        self.SetGroupPrefixes = channel.unary_unary(
                '/adminapi.AdminAPI/SetGroupPrefixes',
                request_serializer=admin__pb2.SetGroupPrefixesParams.SerializeToString,
                response_deserializer=admin__pb2.SetGroupPrefixesResponse.FromString,
                )
        self.SetGroupCapabilities = channel.unary_unary(
                '/adminapi.AdminAPI/SetGroupCapabilities',
                request_serializer=admin__pb2.SetGroupCapabilitiesParams.SerializeToString,
                response_deserializer=admin__pb2.SetGroupCapabilitiesResponse.FromString,
                )
        self.AddUserToGroup = channel.unary_unary(
                '/adminapi.AdminAPI/AddUserToGroup',
                request_serializer=admin__pb2.AddUserToGroupParams.SerializeToString,
                response_deserializer=admin__pb2.AddUserToGroupResponse.FromString,
                )
        self.RemoveUserFromGroup = channel.unary_unary(
                '/adminapi.AdminAPI/RemoveUserFromGroup',
                request_serializer=admin__pb2.RemoveUserFromGroupParams.SerializeToString,
                response_deserializer=admin__pb2.RemoveUserFromGroupResponse.FromString,
                )
        self.AuthenticateUser = channel.unary_unary(
                '/adminapi.AdminAPI/AuthenticateUser',
                request_serializer=admin__pb2.AuthenticateUserParams.SerializeToString,
                response_deserializer=admin__pb2.AuthenticateUserResponse.FromString,
                )
        self.GetPublicUser = channel.unary_unary(
                '/adminapi.AdminAPI/GetPublicUser',
                request_serializer=admin__pb2.GetPublicUserParams.SerializeToString,
                response_deserializer=admin__pb2.GetPublicUserResponse.FromString,
                )
        self.UserExists = channel.unary_unary(
                '/adminapi.AdminAPI/UserExists',
                request_serializer=admin__pb2.UserExistsParams.SerializeToString,
                response_deserializer=admin__pb2.UserExistsResponse.FromString,
                )
        self.AuthenticateUserByKey = channel.unary_unary(
                '/adminapi.AdminAPI/AuthenticateUserByKey',
                request_serializer=admin__pb2.AuthenticateUserByKeyParams.SerializeToString,
                response_deserializer=admin__pb2.AuthenticateUserByKeyResponse.FromString,
                )
        self.GetBuiltinUser = channel.unary_unary(
                '/adminapi.AdminAPI/GetBuiltinUser',
                request_serializer=admin__pb2.GetBuiltinUserParams.SerializeToString,
                response_deserializer=admin__pb2.GetBuiltinUserResponse.FromString,
                )
        self.GetAllUsers = channel.unary_unary(
                '/adminapi.AdminAPI/GetAllUsers',
                request_serializer=admin__pb2.GetAllUsersParams.SerializeToString,
                response_deserializer=admin__pb2.GetAllUsersResponse.FromString,
                )
        self.CreateUser = channel.unary_unary(
                '/adminapi.AdminAPI/CreateUser',
                request_serializer=admin__pb2.CreateUserParams.SerializeToString,
                response_deserializer=admin__pb2.CreateUserResponse.FromString,
                )
        self.DeleteUser = channel.unary_unary(
                '/adminapi.AdminAPI/DeleteUser',
                request_serializer=admin__pb2.DeleteUserParams.SerializeToString,
                response_deserializer=admin__pb2.DeleteUserResponse.FromString,
                )
        self.GetAPIKey = channel.unary_unary(
                '/adminapi.AdminAPI/GetAPIKey',
                request_serializer=admin__pb2.GetAPIKeyParams.SerializeToString,
                response_deserializer=admin__pb2.GetAPIKeyResponse.FromString,
                )
        self.ResetAPIKey = channel.unary_unary(
                '/adminapi.AdminAPI/ResetAPIKey',
                request_serializer=admin__pb2.ResetAPIKeyParams.SerializeToString,
                response_deserializer=admin__pb2.ResetAPIKeyResponse.FromString,
                )
        self.SetUserPassword = channel.unary_unary(
                '/adminapi.AdminAPI/SetUserPassword',
                request_serializer=admin__pb2.SetUserPasswordParams.SerializeToString,
                response_deserializer=admin__pb2.SetUserPasswordResponse.FromString,
                )
        self.Info = channel.unary_unary(
                '/adminapi.AdminAPI/Info',
                request_serializer=admin__pb2.InfoParams.SerializeToString,
                response_deserializer=admin__pb2.InfoResponse.FromString,
                )
        self.GetClusterStatus = channel.unary_unary(
                '/adminapi.AdminAPI/GetClusterStatus',
                request_serializer=admin__pb2.GetClusterStatusParams.SerializeToString,
                response_deserializer=admin__pb2.GetClusterStatusResponse.FromString,
                )
        self.NodeDisable = channel.unary_unary(
                '/adminapi.AdminAPI/NodeDisable',
                request_serializer=admin__pb2.NodeDisableParams.SerializeToString,
                response_deserializer=admin__pb2.NodeDisableResponse.FromString,
                )
        self.NodeOut = channel.unary_unary(
                '/adminapi.AdminAPI/NodeOut',
                request_serializer=admin__pb2.NodeOutParams.SerializeToString,
                response_deserializer=admin__pb2.NodeOutResponse.FromString,
                )
        self.NodeEnable = channel.unary_unary(
                '/adminapi.AdminAPI/NodeEnable',
                request_serializer=admin__pb2.NodeEnableParams.SerializeToString,
                response_deserializer=admin__pb2.NodeEnableResponse.FromString,
                )
        self.NodeIn = channel.unary_unary(
                '/adminapi.AdminAPI/NodeIn',
                request_serializer=admin__pb2.NodeInParams.SerializeToString,
                response_deserializer=admin__pb2.NodeInResponse.FromString,
                )
        self.NodeRemove = channel.unary_unary(
                '/adminapi.AdminAPI/NodeRemove',
                request_serializer=admin__pb2.NodeRemoveParams.SerializeToString,
                response_deserializer=admin__pb2.NodeRemoveResponse.FromString,
                )
        self.Autoprune = channel.unary_unary(
                '/adminapi.AdminAPI/Autoprune',
                request_serializer=admin__pb2.AutopruneParams.SerializeToString,
                response_deserializer=admin__pb2.AutopruneResponse.FromString,
                )
        self.NodeWeight = channel.unary_unary(
                '/adminapi.AdminAPI/NodeWeight',
                request_serializer=admin__pb2.NodeWeightParams.SerializeToString,
                response_deserializer=admin__pb2.NodeWeightResponse.FromString,
                )
        self.NodeReadPreference = channel.unary_unary(
                '/adminapi.AdminAPI/NodeReadPreference',
                request_serializer=admin__pb2.NodeReadPreferenceParams.SerializeToString,
                response_deserializer=admin__pb2.NodeReadPreferenceResponse.FromString,
                )
        self.ListThrottles = channel.unary_unary(
                '/adminapi.AdminAPI/ListThrottles',
                request_serializer=admin__pb2.ListThrottlesParams.SerializeToString,
                response_deserializer=admin__pb2.ListThrottlesResponse.FromString,
                )
        self.SetThrottle = channel.unary_unary(
                '/adminapi.AdminAPI/SetThrottle',
                request_serializer=admin__pb2.SetThrottleParams.SerializeToString,
                response_deserializer=admin__pb2.SetThrottleResponse.FromString,
                )
        self.EvaluateSelect = channel.unary_unary(
                '/adminapi.AdminAPI/EvaluateSelect',
                request_serializer=admin__pb2.EvaluateSelectParams.SerializeToString,
                response_deserializer=admin__pb2.EvaluateSelectResponse.FromString,
                )


class AdminAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetIngressClasses(self, request, context):
        """Functions for working with ingress
        ----------------------------------------------------------------------------
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIngressClass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddOrUpdateIngressClass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateIngressClassEnabled(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveIngressClass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddIngress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateIngress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateIngressEnabled(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIngress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveIngress(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIngresses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllIngresses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAssignments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddDistilClass(self, request, context):
        """Functions for working with distillates
        ----------------------------------------------------------------------------
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDistilClass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveDistilClass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDistilClass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDistilClasses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDistilClassEnabled(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddDistilSelector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDistilSelector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveDistilSelector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BindDistilSelector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnBindDistilSelector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBoundSelectors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAllSelectors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSelector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddDistilInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDistilInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveDistilInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDistilInstances(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDistilInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDistilStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveDistilStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDistilStatusByClass(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDistilStatusByInstance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAllDistilStatuses(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDistilStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTieredStoragePolicies(self, request, context):
        """Functions for working with tiered storage
        ----------------------------------------------------------------------------
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTieredStoragePolicy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTieredStoragePolicy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTieredStoragePolicy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ActivateTieredStoragePolicy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDomainDetails(self, request, context):
        """Functions for working with keys
        ----------------------------------------------------------------------------
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetDomainDetails(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetCertificateSource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCertificateSource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetManualCertificate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetManualCertificate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAutocert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyCertificate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIdentityProvider(self, request, context):
        """Functions for working with access control
        ----------------------------------------------------------------------------
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetIdentityProvider(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllGroups(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGroupPrefixes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetGroupCapabilities(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUserToGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveUserFromGroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthenticateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPublicUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UserExists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthenticateUserByKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBuiltinUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAPIKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetAPIKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetUserPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Info(self, request, context):
        """Functions for working with BTrDB core state
        ----------------------------------------------------------------------------
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClusterStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeDisable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeEnable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeIn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeRemove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Autoprune(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeWeight(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeReadPreference(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListThrottles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetThrottle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EvaluateSelect(self, request, context):
        """Functions for evaluating selectors
        ----------------------------------------------------------------------------
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetIngressClasses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIngressClasses,
                    request_deserializer=admin__pb2.GetIngressClassesParams.FromString,
                    response_serializer=admin__pb2.GetIngressClassesResponse.SerializeToString,
            ),
            'GetIngressClass': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIngressClass,
                    request_deserializer=admin__pb2.GetIngressClassParams.FromString,
                    response_serializer=admin__pb2.GetIngressClassResponse.SerializeToString,
            ),
            'AddOrUpdateIngressClass': grpc.unary_unary_rpc_method_handler(
                    servicer.AddOrUpdateIngressClass,
                    request_deserializer=admin__pb2.AddOrUpdateIngressClassParams.FromString,
                    response_serializer=admin__pb2.AddOrUpdateIngressClassResponse.SerializeToString,
            ),
            'UpdateIngressClassEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateIngressClassEnabled,
                    request_deserializer=admin__pb2.UpdateIngressClassEnabledParams.FromString,
                    response_serializer=admin__pb2.UpdateIngressClassEnabledResponse.SerializeToString,
            ),
            'RemoveIngressClass': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveIngressClass,
                    request_deserializer=admin__pb2.RemoveIngressClassParams.FromString,
                    response_serializer=admin__pb2.RemoveIngressClassResponse.SerializeToString,
            ),
            'AddIngress': grpc.unary_unary_rpc_method_handler(
                    servicer.AddIngress,
                    request_deserializer=admin__pb2.AddIngressParams.FromString,
                    response_serializer=admin__pb2.AddIngressResponse.SerializeToString,
            ),
            'UpdateIngress': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateIngress,
                    request_deserializer=admin__pb2.UpdateIngressParams.FromString,
                    response_serializer=admin__pb2.UpdateIngressResponse.SerializeToString,
            ),
            'UpdateIngressEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateIngressEnabled,
                    request_deserializer=admin__pb2.UpdateIngressEnabledParams.FromString,
                    response_serializer=admin__pb2.UpdateIngressEnabledResponse.SerializeToString,
            ),
            'GetIngress': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIngress,
                    request_deserializer=admin__pb2.GetIngressParams.FromString,
                    response_serializer=admin__pb2.GetIngressResponse.SerializeToString,
            ),
            'RemoveIngress': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveIngress,
                    request_deserializer=admin__pb2.RemoveIngressParams.FromString,
                    response_serializer=admin__pb2.RemoveIngressResponse.SerializeToString,
            ),
            'GetIngresses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIngresses,
                    request_deserializer=admin__pb2.GetIngressesParams.FromString,
                    response_serializer=admin__pb2.GetIngressesResponse.SerializeToString,
            ),
            'GetAllIngresses': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllIngresses,
                    request_deserializer=admin__pb2.GetAllIngressesParams.FromString,
                    response_serializer=admin__pb2.GetAllIngressesResponse.SerializeToString,
            ),
            'GetAssignments': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAssignments,
                    request_deserializer=admin__pb2.GetAssignmentsParams.FromString,
                    response_serializer=admin__pb2.GetAssignmentsResponse.SerializeToString,
            ),
            'AddDistilClass': grpc.unary_unary_rpc_method_handler(
                    servicer.AddDistilClass,
                    request_deserializer=admin__pb2.AddDistilClassParams.FromString,
                    response_serializer=admin__pb2.AddDistilClassResponse.SerializeToString,
            ),
            'UpdateDistilClass': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDistilClass,
                    request_deserializer=admin__pb2.UpdateDistilClassParams.FromString,
                    response_serializer=admin__pb2.UpdateDistilClassResponse.SerializeToString,
            ),
            'RemoveDistilClass': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveDistilClass,
                    request_deserializer=admin__pb2.RemoveDistilClassParams.FromString,
                    response_serializer=admin__pb2.RemoveDistilClassResponse.SerializeToString,
            ),
            'GetDistilClass': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDistilClass,
                    request_deserializer=admin__pb2.GetDistilClassParams.FromString,
                    response_serializer=admin__pb2.GetDistilClassResponse.SerializeToString,
            ),
            'ListDistilClasses': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDistilClasses,
                    request_deserializer=admin__pb2.ListDistilClassesParams.FromString,
                    response_serializer=admin__pb2.ListDistilClassesResponse.SerializeToString,
            ),
            'SetDistilClassEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDistilClassEnabled,
                    request_deserializer=admin__pb2.SetDistilClassEnabledParams.FromString,
                    response_serializer=admin__pb2.SetDistilClassEnabledResponse.SerializeToString,
            ),
            'AddDistilSelector': grpc.unary_unary_rpc_method_handler(
                    servicer.AddDistilSelector,
                    request_deserializer=admin__pb2.AddDistilSelectorParams.FromString,
                    response_serializer=admin__pb2.AddDistilSelectorResponse.SerializeToString,
            ),
            'UpdateDistilSelector': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDistilSelector,
                    request_deserializer=admin__pb2.UpdateDistilSelectorParams.FromString,
                    response_serializer=admin__pb2.UpdateDistilSelectorResponse.SerializeToString,
            ),
            'RemoveDistilSelector': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveDistilSelector,
                    request_deserializer=admin__pb2.RemoveDistilSelectorParams.FromString,
                    response_serializer=admin__pb2.RemoveDistilSelectorResponse.SerializeToString,
            ),
            'BindDistilSelector': grpc.unary_unary_rpc_method_handler(
                    servicer.BindDistilSelector,
                    request_deserializer=admin__pb2.BindDistilSelectorParams.FromString,
                    response_serializer=admin__pb2.BindDistilSelectorResponse.SerializeToString,
            ),
            'UnBindDistilSelector': grpc.unary_unary_rpc_method_handler(
                    servicer.UnBindDistilSelector,
                    request_deserializer=admin__pb2.UnBindDistilSelectorParams.FromString,
                    response_serializer=admin__pb2.UnBindDistilSelectorResponse.SerializeToString,
            ),
            'ListBoundSelectors': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBoundSelectors,
                    request_deserializer=admin__pb2.ListBoundSelectorsParams.FromString,
                    response_serializer=admin__pb2.ListBoundSelectorsResponse.SerializeToString,
            ),
            'ListAllSelectors': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAllSelectors,
                    request_deserializer=admin__pb2.ListAllSelectorsParams.FromString,
                    response_serializer=admin__pb2.ListAllSelectorsResponse.SerializeToString,
            ),
            'GetSelector': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSelector,
                    request_deserializer=admin__pb2.GetSelectorParams.FromString,
                    response_serializer=admin__pb2.GetSelectorResponse.SerializeToString,
            ),
            'AddDistilInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.AddDistilInstance,
                    request_deserializer=admin__pb2.AddDistilInstanceParams.FromString,
                    response_serializer=admin__pb2.AddDistilInstanceResponse.SerializeToString,
            ),
            'UpdateDistilInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDistilInstance,
                    request_deserializer=admin__pb2.UpdateDistilInstanceParams.FromString,
                    response_serializer=admin__pb2.UpdateDistilInstanceResponse.SerializeToString,
            ),
            'RemoveDistilInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveDistilInstance,
                    request_deserializer=admin__pb2.RemoveDistilInstanceParams.FromString,
                    response_serializer=admin__pb2.RemoveDistilInstanceResponse.SerializeToString,
            ),
            'ListDistilInstances': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDistilInstances,
                    request_deserializer=admin__pb2.ListDistilInstancesParams.FromString,
                    response_serializer=admin__pb2.ListDistilInstancesResponse.SerializeToString,
            ),
            'GetDistilInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDistilInstance,
                    request_deserializer=admin__pb2.GetDistilInstanceParams.FromString,
                    response_serializer=admin__pb2.GetDistilInstanceResponse.SerializeToString,
            ),
            'SetDistilStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDistilStatus,
                    request_deserializer=admin__pb2.SetDistilStatusParams.FromString,
                    response_serializer=admin__pb2.SetDistilStatusResponse.SerializeToString,
            ),
            'RemoveDistilStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveDistilStatus,
                    request_deserializer=admin__pb2.RemoveDistilStatusParams.FromString,
                    response_serializer=admin__pb2.RemoveDistilStatusResponse.SerializeToString,
            ),
            'ListDistilStatusByClass': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDistilStatusByClass,
                    request_deserializer=admin__pb2.ListDistilStatusByClassParams.FromString,
                    response_serializer=admin__pb2.ListDistilStatusByClassResponse.SerializeToString,
            ),
            'ListDistilStatusByInstance': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDistilStatusByInstance,
                    request_deserializer=admin__pb2.ListDistilStatusByInstanceParams.FromString,
                    response_serializer=admin__pb2.ListDistilStatusByInstanceResponse.SerializeToString,
            ),
            'ListAllDistilStatuses': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAllDistilStatuses,
                    request_deserializer=admin__pb2.ListAllDistilStatusesParams.FromString,
                    response_serializer=admin__pb2.ListAllDistilStatusesResponse.SerializeToString,
            ),
            'GetDistilStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDistilStatus,
                    request_deserializer=admin__pb2.GetDistilStatusParams.FromString,
                    response_serializer=admin__pb2.GetDistilStatusResponse.SerializeToString,
            ),
            'ListTieredStoragePolicies': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTieredStoragePolicies,
                    request_deserializer=admin__pb2.ListTieredStoragePolicyParams.FromString,
                    response_serializer=admin__pb2.ListTieredStoragePolicyResponse.SerializeToString,
            ),
            'GetTieredStoragePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTieredStoragePolicy,
                    request_deserializer=admin__pb2.GetTieredStoragePolicyParams.FromString,
                    response_serializer=admin__pb2.GetTieredStoragePolicyResponse.SerializeToString,
            ),
            'CreateTieredStoragePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTieredStoragePolicy,
                    request_deserializer=admin__pb2.CreateTieredStoragePolicyParams.FromString,
                    response_serializer=admin__pb2.CreateTieredStoragePolicyResponse.SerializeToString,
            ),
            'UpdateTieredStoragePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTieredStoragePolicy,
                    request_deserializer=admin__pb2.UpdateTieredStoragePolicyParams.FromString,
                    response_serializer=admin__pb2.UpdateTieredStoragePolicyResponse.SerializeToString,
            ),
            'ActivateTieredStoragePolicy': grpc.unary_unary_rpc_method_handler(
                    servicer.ActivateTieredStoragePolicy,
                    request_deserializer=admin__pb2.ActivateTieredStoragePolicyParams.FromString,
                    response_serializer=admin__pb2.ActivateTieredStoragePolicyResponse.SerializeToString,
            ),
            'GetDomainDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDomainDetails,
                    request_deserializer=admin__pb2.GetDomainDetailsParams.FromString,
                    response_serializer=admin__pb2.GetDomainDetailsResponse.SerializeToString,
            ),
            'SetDomainDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.SetDomainDetails,
                    request_deserializer=admin__pb2.SetDomainDetailsParams.FromString,
                    response_serializer=admin__pb2.SetDomainDetailsResponse.SerializeToString,
            ),
            'SetCertificateSource': grpc.unary_unary_rpc_method_handler(
                    servicer.SetCertificateSource,
                    request_deserializer=admin__pb2.SetCertificateSourceParams.FromString,
                    response_serializer=admin__pb2.SetCertificateSourceResponse.SerializeToString,
            ),
            'GetCertificateSource': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCertificateSource,
                    request_deserializer=admin__pb2.GetCertificateSourceParams.FromString,
                    response_serializer=admin__pb2.GetCertificateSourceResponse.SerializeToString,
            ),
            'SetManualCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.SetManualCertificate,
                    request_deserializer=admin__pb2.SetManualCertificateParams.FromString,
                    response_serializer=admin__pb2.SetManualCertificateResponse.SerializeToString,
            ),
            'GetManualCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.GetManualCertificate,
                    request_deserializer=admin__pb2.GetManualCertificateParams.FromString,
                    response_serializer=admin__pb2.GetManualCertificateResponse.SerializeToString,
            ),
            'GetAutocert': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAutocert,
                    request_deserializer=admin__pb2.GetAutocertParams.FromString,
                    response_serializer=admin__pb2.GetAutocertResponse.SerializeToString,
            ),
            'VerifyCertificate': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyCertificate,
                    request_deserializer=admin__pb2.VerifyCertificateParams.FromString,
                    response_serializer=admin__pb2.VerifyCertificateResponse.SerializeToString,
            ),
            'GetIdentityProvider': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIdentityProvider,
                    request_deserializer=admin__pb2.GetIdentityProviderParams.FromString,
                    response_serializer=admin__pb2.GetIdentityProviderResponse.SerializeToString,
            ),
            'SetIdentityProvider': grpc.unary_unary_rpc_method_handler(
                    servicer.SetIdentityProvider,
                    request_deserializer=admin__pb2.SetIdentityProviderParams.FromString,
                    response_serializer=admin__pb2.SetIdentityProviderResponse.SerializeToString,
            ),
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=admin__pb2.GetGroupParams.FromString,
                    response_serializer=admin__pb2.GetGroupResponse.SerializeToString,
            ),
            'GetAllGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllGroups,
                    request_deserializer=admin__pb2.GetAllGroupsParams.FromString,
                    response_serializer=admin__pb2.GetAllGroupsResponse.SerializeToString,
            ),
            'AddGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.AddGroup,
                    request_deserializer=admin__pb2.AddGroupParams.FromString,
                    response_serializer=admin__pb2.AddGroupResponse.SerializeToString,
            ),
            'DeleteGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteGroup,
                    request_deserializer=admin__pb2.DeleteGroupParams.FromString,
                    response_serializer=admin__pb2.DeleteGroupResponse.SerializeToString,
            ),
            'SetGroupPrefixes': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGroupPrefixes,
                    request_deserializer=admin__pb2.SetGroupPrefixesParams.FromString,
                    response_serializer=admin__pb2.SetGroupPrefixesResponse.SerializeToString,
            ),
            'SetGroupCapabilities': grpc.unary_unary_rpc_method_handler(
                    servicer.SetGroupCapabilities,
                    request_deserializer=admin__pb2.SetGroupCapabilitiesParams.FromString,
                    response_serializer=admin__pb2.SetGroupCapabilitiesResponse.SerializeToString,
            ),
            'AddUserToGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUserToGroup,
                    request_deserializer=admin__pb2.AddUserToGroupParams.FromString,
                    response_serializer=admin__pb2.AddUserToGroupResponse.SerializeToString,
            ),
            'RemoveUserFromGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveUserFromGroup,
                    request_deserializer=admin__pb2.RemoveUserFromGroupParams.FromString,
                    response_serializer=admin__pb2.RemoveUserFromGroupResponse.SerializeToString,
            ),
            'AuthenticateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthenticateUser,
                    request_deserializer=admin__pb2.AuthenticateUserParams.FromString,
                    response_serializer=admin__pb2.AuthenticateUserResponse.SerializeToString,
            ),
            'GetPublicUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPublicUser,
                    request_deserializer=admin__pb2.GetPublicUserParams.FromString,
                    response_serializer=admin__pb2.GetPublicUserResponse.SerializeToString,
            ),
            'UserExists': grpc.unary_unary_rpc_method_handler(
                    servicer.UserExists,
                    request_deserializer=admin__pb2.UserExistsParams.FromString,
                    response_serializer=admin__pb2.UserExistsResponse.SerializeToString,
            ),
            'AuthenticateUserByKey': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthenticateUserByKey,
                    request_deserializer=admin__pb2.AuthenticateUserByKeyParams.FromString,
                    response_serializer=admin__pb2.AuthenticateUserByKeyResponse.SerializeToString,
            ),
            'GetBuiltinUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBuiltinUser,
                    request_deserializer=admin__pb2.GetBuiltinUserParams.FromString,
                    response_serializer=admin__pb2.GetBuiltinUserResponse.SerializeToString,
            ),
            'GetAllUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllUsers,
                    request_deserializer=admin__pb2.GetAllUsersParams.FromString,
                    response_serializer=admin__pb2.GetAllUsersResponse.SerializeToString,
            ),
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=admin__pb2.CreateUserParams.FromString,
                    response_serializer=admin__pb2.CreateUserResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=admin__pb2.DeleteUserParams.FromString,
                    response_serializer=admin__pb2.DeleteUserResponse.SerializeToString,
            ),
            'GetAPIKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAPIKey,
                    request_deserializer=admin__pb2.GetAPIKeyParams.FromString,
                    response_serializer=admin__pb2.GetAPIKeyResponse.SerializeToString,
            ),
            'ResetAPIKey': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetAPIKey,
                    request_deserializer=admin__pb2.ResetAPIKeyParams.FromString,
                    response_serializer=admin__pb2.ResetAPIKeyResponse.SerializeToString,
            ),
            'SetUserPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.SetUserPassword,
                    request_deserializer=admin__pb2.SetUserPasswordParams.FromString,
                    response_serializer=admin__pb2.SetUserPasswordResponse.SerializeToString,
            ),
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=admin__pb2.InfoParams.FromString,
                    response_serializer=admin__pb2.InfoResponse.SerializeToString,
            ),
            'GetClusterStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterStatus,
                    request_deserializer=admin__pb2.GetClusterStatusParams.FromString,
                    response_serializer=admin__pb2.GetClusterStatusResponse.SerializeToString,
            ),
            'NodeDisable': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeDisable,
                    request_deserializer=admin__pb2.NodeDisableParams.FromString,
                    response_serializer=admin__pb2.NodeDisableResponse.SerializeToString,
            ),
            'NodeOut': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeOut,
                    request_deserializer=admin__pb2.NodeOutParams.FromString,
                    response_serializer=admin__pb2.NodeOutResponse.SerializeToString,
            ),
            'NodeEnable': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeEnable,
                    request_deserializer=admin__pb2.NodeEnableParams.FromString,
                    response_serializer=admin__pb2.NodeEnableResponse.SerializeToString,
            ),
            'NodeIn': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeIn,
                    request_deserializer=admin__pb2.NodeInParams.FromString,
                    response_serializer=admin__pb2.NodeInResponse.SerializeToString,
            ),
            'NodeRemove': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeRemove,
                    request_deserializer=admin__pb2.NodeRemoveParams.FromString,
                    response_serializer=admin__pb2.NodeRemoveResponse.SerializeToString,
            ),
            'Autoprune': grpc.unary_unary_rpc_method_handler(
                    servicer.Autoprune,
                    request_deserializer=admin__pb2.AutopruneParams.FromString,
                    response_serializer=admin__pb2.AutopruneResponse.SerializeToString,
            ),
            'NodeWeight': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeWeight,
                    request_deserializer=admin__pb2.NodeWeightParams.FromString,
                    response_serializer=admin__pb2.NodeWeightResponse.SerializeToString,
            ),
            'NodeReadPreference': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeReadPreference,
                    request_deserializer=admin__pb2.NodeReadPreferenceParams.FromString,
                    response_serializer=admin__pb2.NodeReadPreferenceResponse.SerializeToString,
            ),
            'ListThrottles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListThrottles,
                    request_deserializer=admin__pb2.ListThrottlesParams.FromString,
                    response_serializer=admin__pb2.ListThrottlesResponse.SerializeToString,
            ),
            'SetThrottle': grpc.unary_unary_rpc_method_handler(
                    servicer.SetThrottle,
                    request_deserializer=admin__pb2.SetThrottleParams.FromString,
                    response_serializer=admin__pb2.SetThrottleResponse.SerializeToString,
            ),
            'EvaluateSelect': grpc.unary_unary_rpc_method_handler(
                    servicer.EvaluateSelect,
                    request_deserializer=admin__pb2.EvaluateSelectParams.FromString,
                    response_serializer=admin__pb2.EvaluateSelectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'adminapi.AdminAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetIngressClasses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetIngressClasses',
            admin__pb2.GetIngressClassesParams.SerializeToString,
            admin__pb2.GetIngressClassesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIngressClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetIngressClass',
            admin__pb2.GetIngressClassParams.SerializeToString,
            admin__pb2.GetIngressClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddOrUpdateIngressClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/AddOrUpdateIngressClass',
            admin__pb2.AddOrUpdateIngressClassParams.SerializeToString,
            admin__pb2.AddOrUpdateIngressClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateIngressClassEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/UpdateIngressClassEnabled',
            admin__pb2.UpdateIngressClassEnabledParams.SerializeToString,
            admin__pb2.UpdateIngressClassEnabledResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveIngressClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/RemoveIngressClass',
            admin__pb2.RemoveIngressClassParams.SerializeToString,
            admin__pb2.RemoveIngressClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddIngress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/AddIngress',
            admin__pb2.AddIngressParams.SerializeToString,
            admin__pb2.AddIngressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateIngress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/UpdateIngress',
            admin__pb2.UpdateIngressParams.SerializeToString,
            admin__pb2.UpdateIngressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateIngressEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/UpdateIngressEnabled',
            admin__pb2.UpdateIngressEnabledParams.SerializeToString,
            admin__pb2.UpdateIngressEnabledResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIngress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetIngress',
            admin__pb2.GetIngressParams.SerializeToString,
            admin__pb2.GetIngressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveIngress(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/RemoveIngress',
            admin__pb2.RemoveIngressParams.SerializeToString,
            admin__pb2.RemoveIngressResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIngresses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetIngresses',
            admin__pb2.GetIngressesParams.SerializeToString,
            admin__pb2.GetIngressesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllIngresses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetAllIngresses',
            admin__pb2.GetAllIngressesParams.SerializeToString,
            admin__pb2.GetAllIngressesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAssignments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetAssignments',
            admin__pb2.GetAssignmentsParams.SerializeToString,
            admin__pb2.GetAssignmentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddDistilClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/AddDistilClass',
            admin__pb2.AddDistilClassParams.SerializeToString,
            admin__pb2.AddDistilClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDistilClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/UpdateDistilClass',
            admin__pb2.UpdateDistilClassParams.SerializeToString,
            admin__pb2.UpdateDistilClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveDistilClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/RemoveDistilClass',
            admin__pb2.RemoveDistilClassParams.SerializeToString,
            admin__pb2.RemoveDistilClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDistilClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetDistilClass',
            admin__pb2.GetDistilClassParams.SerializeToString,
            admin__pb2.GetDistilClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDistilClasses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/ListDistilClasses',
            admin__pb2.ListDistilClassesParams.SerializeToString,
            admin__pb2.ListDistilClassesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDistilClassEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/SetDistilClassEnabled',
            admin__pb2.SetDistilClassEnabledParams.SerializeToString,
            admin__pb2.SetDistilClassEnabledResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddDistilSelector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/AddDistilSelector',
            admin__pb2.AddDistilSelectorParams.SerializeToString,
            admin__pb2.AddDistilSelectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDistilSelector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/UpdateDistilSelector',
            admin__pb2.UpdateDistilSelectorParams.SerializeToString,
            admin__pb2.UpdateDistilSelectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveDistilSelector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/RemoveDistilSelector',
            admin__pb2.RemoveDistilSelectorParams.SerializeToString,
            admin__pb2.RemoveDistilSelectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BindDistilSelector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/BindDistilSelector',
            admin__pb2.BindDistilSelectorParams.SerializeToString,
            admin__pb2.BindDistilSelectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnBindDistilSelector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/UnBindDistilSelector',
            admin__pb2.UnBindDistilSelectorParams.SerializeToString,
            admin__pb2.UnBindDistilSelectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBoundSelectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/ListBoundSelectors',
            admin__pb2.ListBoundSelectorsParams.SerializeToString,
            admin__pb2.ListBoundSelectorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAllSelectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/ListAllSelectors',
            admin__pb2.ListAllSelectorsParams.SerializeToString,
            admin__pb2.ListAllSelectorsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSelector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetSelector',
            admin__pb2.GetSelectorParams.SerializeToString,
            admin__pb2.GetSelectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddDistilInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/AddDistilInstance',
            admin__pb2.AddDistilInstanceParams.SerializeToString,
            admin__pb2.AddDistilInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDistilInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/UpdateDistilInstance',
            admin__pb2.UpdateDistilInstanceParams.SerializeToString,
            admin__pb2.UpdateDistilInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveDistilInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/RemoveDistilInstance',
            admin__pb2.RemoveDistilInstanceParams.SerializeToString,
            admin__pb2.RemoveDistilInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDistilInstances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/ListDistilInstances',
            admin__pb2.ListDistilInstancesParams.SerializeToString,
            admin__pb2.ListDistilInstancesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDistilInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetDistilInstance',
            admin__pb2.GetDistilInstanceParams.SerializeToString,
            admin__pb2.GetDistilInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDistilStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/SetDistilStatus',
            admin__pb2.SetDistilStatusParams.SerializeToString,
            admin__pb2.SetDistilStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveDistilStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/RemoveDistilStatus',
            admin__pb2.RemoveDistilStatusParams.SerializeToString,
            admin__pb2.RemoveDistilStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDistilStatusByClass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/ListDistilStatusByClass',
            admin__pb2.ListDistilStatusByClassParams.SerializeToString,
            admin__pb2.ListDistilStatusByClassResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDistilStatusByInstance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/ListDistilStatusByInstance',
            admin__pb2.ListDistilStatusByInstanceParams.SerializeToString,
            admin__pb2.ListDistilStatusByInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAllDistilStatuses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/ListAllDistilStatuses',
            admin__pb2.ListAllDistilStatusesParams.SerializeToString,
            admin__pb2.ListAllDistilStatusesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDistilStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetDistilStatus',
            admin__pb2.GetDistilStatusParams.SerializeToString,
            admin__pb2.GetDistilStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTieredStoragePolicies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/ListTieredStoragePolicies',
            admin__pb2.ListTieredStoragePolicyParams.SerializeToString,
            admin__pb2.ListTieredStoragePolicyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTieredStoragePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetTieredStoragePolicy',
            admin__pb2.GetTieredStoragePolicyParams.SerializeToString,
            admin__pb2.GetTieredStoragePolicyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTieredStoragePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/CreateTieredStoragePolicy',
            admin__pb2.CreateTieredStoragePolicyParams.SerializeToString,
            admin__pb2.CreateTieredStoragePolicyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTieredStoragePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/UpdateTieredStoragePolicy',
            admin__pb2.UpdateTieredStoragePolicyParams.SerializeToString,
            admin__pb2.UpdateTieredStoragePolicyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ActivateTieredStoragePolicy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/ActivateTieredStoragePolicy',
            admin__pb2.ActivateTieredStoragePolicyParams.SerializeToString,
            admin__pb2.ActivateTieredStoragePolicyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDomainDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetDomainDetails',
            admin__pb2.GetDomainDetailsParams.SerializeToString,
            admin__pb2.GetDomainDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetDomainDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/SetDomainDetails',
            admin__pb2.SetDomainDetailsParams.SerializeToString,
            admin__pb2.SetDomainDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetCertificateSource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/SetCertificateSource',
            admin__pb2.SetCertificateSourceParams.SerializeToString,
            admin__pb2.SetCertificateSourceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCertificateSource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetCertificateSource',
            admin__pb2.GetCertificateSourceParams.SerializeToString,
            admin__pb2.GetCertificateSourceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetManualCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/SetManualCertificate',
            admin__pb2.SetManualCertificateParams.SerializeToString,
            admin__pb2.SetManualCertificateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetManualCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetManualCertificate',
            admin__pb2.GetManualCertificateParams.SerializeToString,
            admin__pb2.GetManualCertificateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAutocert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetAutocert',
            admin__pb2.GetAutocertParams.SerializeToString,
            admin__pb2.GetAutocertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyCertificate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/VerifyCertificate',
            admin__pb2.VerifyCertificateParams.SerializeToString,
            admin__pb2.VerifyCertificateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIdentityProvider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetIdentityProvider',
            admin__pb2.GetIdentityProviderParams.SerializeToString,
            admin__pb2.GetIdentityProviderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetIdentityProvider(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/SetIdentityProvider',
            admin__pb2.SetIdentityProviderParams.SerializeToString,
            admin__pb2.SetIdentityProviderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetGroup',
            admin__pb2.GetGroupParams.SerializeToString,
            admin__pb2.GetGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetAllGroups',
            admin__pb2.GetAllGroupsParams.SerializeToString,
            admin__pb2.GetAllGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/AddGroup',
            admin__pb2.AddGroupParams.SerializeToString,
            admin__pb2.AddGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/DeleteGroup',
            admin__pb2.DeleteGroupParams.SerializeToString,
            admin__pb2.DeleteGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetGroupPrefixes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/SetGroupPrefixes',
            admin__pb2.SetGroupPrefixesParams.SerializeToString,
            admin__pb2.SetGroupPrefixesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetGroupCapabilities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/SetGroupCapabilities',
            admin__pb2.SetGroupCapabilitiesParams.SerializeToString,
            admin__pb2.SetGroupCapabilitiesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddUserToGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/AddUserToGroup',
            admin__pb2.AddUserToGroupParams.SerializeToString,
            admin__pb2.AddUserToGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveUserFromGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/RemoveUserFromGroup',
            admin__pb2.RemoveUserFromGroupParams.SerializeToString,
            admin__pb2.RemoveUserFromGroupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthenticateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/AuthenticateUser',
            admin__pb2.AuthenticateUserParams.SerializeToString,
            admin__pb2.AuthenticateUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPublicUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetPublicUser',
            admin__pb2.GetPublicUserParams.SerializeToString,
            admin__pb2.GetPublicUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UserExists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/UserExists',
            admin__pb2.UserExistsParams.SerializeToString,
            admin__pb2.UserExistsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthenticateUserByKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/AuthenticateUserByKey',
            admin__pb2.AuthenticateUserByKeyParams.SerializeToString,
            admin__pb2.AuthenticateUserByKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBuiltinUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetBuiltinUser',
            admin__pb2.GetBuiltinUserParams.SerializeToString,
            admin__pb2.GetBuiltinUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetAllUsers',
            admin__pb2.GetAllUsersParams.SerializeToString,
            admin__pb2.GetAllUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/CreateUser',
            admin__pb2.CreateUserParams.SerializeToString,
            admin__pb2.CreateUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/DeleteUser',
            admin__pb2.DeleteUserParams.SerializeToString,
            admin__pb2.DeleteUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAPIKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetAPIKey',
            admin__pb2.GetAPIKeyParams.SerializeToString,
            admin__pb2.GetAPIKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetAPIKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/ResetAPIKey',
            admin__pb2.ResetAPIKeyParams.SerializeToString,
            admin__pb2.ResetAPIKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetUserPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/SetUserPassword',
            admin__pb2.SetUserPasswordParams.SerializeToString,
            admin__pb2.SetUserPasswordResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/Info',
            admin__pb2.InfoParams.SerializeToString,
            admin__pb2.InfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetClusterStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/GetClusterStatus',
            admin__pb2.GetClusterStatusParams.SerializeToString,
            admin__pb2.GetClusterStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeDisable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/NodeDisable',
            admin__pb2.NodeDisableParams.SerializeToString,
            admin__pb2.NodeDisableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/NodeOut',
            admin__pb2.NodeOutParams.SerializeToString,
            admin__pb2.NodeOutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeEnable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/NodeEnable',
            admin__pb2.NodeEnableParams.SerializeToString,
            admin__pb2.NodeEnableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/NodeIn',
            admin__pb2.NodeInParams.SerializeToString,
            admin__pb2.NodeInResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeRemove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/NodeRemove',
            admin__pb2.NodeRemoveParams.SerializeToString,
            admin__pb2.NodeRemoveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Autoprune(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/Autoprune',
            admin__pb2.AutopruneParams.SerializeToString,
            admin__pb2.AutopruneResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeWeight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/NodeWeight',
            admin__pb2.NodeWeightParams.SerializeToString,
            admin__pb2.NodeWeightResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeReadPreference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/NodeReadPreference',
            admin__pb2.NodeReadPreferenceParams.SerializeToString,
            admin__pb2.NodeReadPreferenceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListThrottles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/ListThrottles',
            admin__pb2.ListThrottlesParams.SerializeToString,
            admin__pb2.ListThrottlesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetThrottle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/SetThrottle',
            admin__pb2.SetThrottleParams.SerializeToString,
            admin__pb2.SetThrottleResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EvaluateSelect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/adminapi.AdminAPI/EvaluateSelect',
            admin__pb2.EvaluateSelectParams.SerializeToString,
            admin__pb2.EvaluateSelectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
