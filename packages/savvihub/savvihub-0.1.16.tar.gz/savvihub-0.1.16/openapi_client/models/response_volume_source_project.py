# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponseVolumeSourceProject(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cli_driven_project': 'OrmCLIDrivenProject',
        'git_diff_file': 'ResponseFileMetadata',
        'local_project_file': 'ResponseFileMetadata',
        'project': 'ResponseProjectInfo',
        'project_id': 'int',
        'version_control_project': 'OrmVersionControlProject'
    }

    attribute_map = {
        'cli_driven_project': 'cli_driven_project',
        'git_diff_file': 'git_diff_file',
        'local_project_file': 'local_project_file',
        'project': 'project',
        'project_id': 'project_id',
        'version_control_project': 'version_control_project'
    }

    def __init__(self, cli_driven_project=None, git_diff_file=None, local_project_file=None, project=None, project_id=None, version_control_project=None, local_vars_configuration=None):  # noqa: E501
        """ResponseVolumeSourceProject - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cli_driven_project = None
        self._git_diff_file = None
        self._local_project_file = None
        self._project = None
        self._project_id = None
        self._version_control_project = None
        self.discriminator = None

        if cli_driven_project is not None:
            self.cli_driven_project = cli_driven_project
        if git_diff_file is not None:
            self.git_diff_file = git_diff_file
        if local_project_file is not None:
            self.local_project_file = local_project_file
        if project is not None:
            self.project = project
        if project_id is not None:
            self.project_id = project_id
        if version_control_project is not None:
            self.version_control_project = version_control_project

    @property
    def cli_driven_project(self):
        """Gets the cli_driven_project of this ResponseVolumeSourceProject.  # noqa: E501


        :return: The cli_driven_project of this ResponseVolumeSourceProject.  # noqa: E501
        :rtype: OrmCLIDrivenProject
        """
        return self._cli_driven_project

    @cli_driven_project.setter
    def cli_driven_project(self, cli_driven_project):
        """Sets the cli_driven_project of this ResponseVolumeSourceProject.


        :param cli_driven_project: The cli_driven_project of this ResponseVolumeSourceProject.  # noqa: E501
        :type cli_driven_project: OrmCLIDrivenProject
        """

        self._cli_driven_project = cli_driven_project

    @property
    def git_diff_file(self):
        """Gets the git_diff_file of this ResponseVolumeSourceProject.  # noqa: E501


        :return: The git_diff_file of this ResponseVolumeSourceProject.  # noqa: E501
        :rtype: ResponseFileMetadata
        """
        return self._git_diff_file

    @git_diff_file.setter
    def git_diff_file(self, git_diff_file):
        """Sets the git_diff_file of this ResponseVolumeSourceProject.


        :param git_diff_file: The git_diff_file of this ResponseVolumeSourceProject.  # noqa: E501
        :type git_diff_file: ResponseFileMetadata
        """

        self._git_diff_file = git_diff_file

    @property
    def local_project_file(self):
        """Gets the local_project_file of this ResponseVolumeSourceProject.  # noqa: E501


        :return: The local_project_file of this ResponseVolumeSourceProject.  # noqa: E501
        :rtype: ResponseFileMetadata
        """
        return self._local_project_file

    @local_project_file.setter
    def local_project_file(self, local_project_file):
        """Sets the local_project_file of this ResponseVolumeSourceProject.


        :param local_project_file: The local_project_file of this ResponseVolumeSourceProject.  # noqa: E501
        :type local_project_file: ResponseFileMetadata
        """

        self._local_project_file = local_project_file

    @property
    def project(self):
        """Gets the project of this ResponseVolumeSourceProject.  # noqa: E501


        :return: The project of this ResponseVolumeSourceProject.  # noqa: E501
        :rtype: ResponseProjectInfo
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ResponseVolumeSourceProject.


        :param project: The project of this ResponseVolumeSourceProject.  # noqa: E501
        :type project: ResponseProjectInfo
        """

        self._project = project

    @property
    def project_id(self):
        """Gets the project_id of this ResponseVolumeSourceProject.  # noqa: E501


        :return: The project_id of this ResponseVolumeSourceProject.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ResponseVolumeSourceProject.


        :param project_id: The project_id of this ResponseVolumeSourceProject.  # noqa: E501
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def version_control_project(self):
        """Gets the version_control_project of this ResponseVolumeSourceProject.  # noqa: E501


        :return: The version_control_project of this ResponseVolumeSourceProject.  # noqa: E501
        :rtype: OrmVersionControlProject
        """
        return self._version_control_project

    @version_control_project.setter
    def version_control_project(self, version_control_project):
        """Sets the version_control_project of this ResponseVolumeSourceProject.


        :param version_control_project: The version_control_project of this ResponseVolumeSourceProject.  # noqa: E501
        :type version_control_project: OrmVersionControlProject
        """

        self._version_control_project = version_control_project

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseVolumeSourceProject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseVolumeSourceProject):
            return True

        return self.to_dict() != other.to_dict()
