#!python
# This file is placed in the Public Domain.

__version__ = 65

import os, sys ; sys.path.insert(0, os.getcwd())

import os
import readline
import sys
import termios
import threading
import time

from bot.obj import Cfg, Object, fmt, fntime, keys, save
from bot.run import Client, Runtime, Table, elapsed, find, get_exception
from bot.run import listfiles, spl
from bot.run import Cfg as RunCfg


Cfg.wd = os.path.expanduser("~/.bot")


class Console(Client):

    def handle(self, clt, e):
        k.put(e)
        e.wait()

    def poll(self):
        return input("> ")

    def raw(self, txt):
        print(txt)
        sys.stdout.flush()


class Kernel(Runtime):

    @staticmethod
    def error(txt):
        print(txt)
        sys.stdout.flush()

    @staticmethod
    def log(txt):
        if "PONG" in txt or "PING" in txt:
            return
        if RunCfg.verbose:
            print(txt.rstrip())
            sys.stdout.flush()

def daemon():
    pid = os.fork()
    if pid != 0:
        termreset()
        os._exit(0)
    os.setsid()
    os.umask(0)
    si = open("/dev/null", 'r')
    so = open("/dev/null", 'a+')
    se = open("/dev/null", 'a+')
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())


def wrap(func):
    fd = sys.stdin.fileno()
    old = termios.tcgetattr(fd)
    try:
        func()
    except KeyboardInterrupt:
        print("")
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old)


clt = Console()
k = Kernel()


import bot.all


def cmd(event):
    event.reply(",".join(sorted(list(Table.modnames))))


def ver(event):
    event.reply("BOT %s" % __version__)


def main():
    if k.root():
        print("don't run this bot as root")
        return
    k.parse_cli()
    k.add(cmd)
    k.add(ver)
    if k.cfg.verbose:
        k.log("BOT starting at %s" % (time.ctime(time.time())))
        k.log("workdir is %s" % Cfg.wd)
        k.log(",".join(sorted(list(Table.modnames))))
        k.log(fmt(k.cfg, ["bork", "console", "daemon", "debug", "systemd", "verbose"]))
    if k.prs.txt:
        return k.cmd(clt, k.prs.otxt)
    if RunCfg.daemon:
        daemon()
    if RunCfg.console or k.cfg.mod:
        k.start()
        for mn in spl(k.cfg.mod):
            k.init("bot.%s" % mn)
        clt.start()
        k.wait()


wrap(main)
