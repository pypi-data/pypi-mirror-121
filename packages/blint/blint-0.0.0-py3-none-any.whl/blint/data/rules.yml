- id: CHECK_NX
  title: Check Non-Executable Memory Protection
  description: |
    Most modern CPUs protect against executing non-executable memory regions (heap, stack, etc). This is known either as `Non-eXecute (NX) or eXecute-Disable (XD)`. This protection reduces the areas an attacker can use to perform arbitrary code execution.
    An operating system with support for the NX bit may mark certain areas of memory as non-executable. The processor will then refuse to execute any code residing in these areas of memory. The general technique, known as executable space protection, also called Write XOR Execute, is used to prevent certain types of malicious software from taking over computers by inserting their code into another program's data storage area and running their own code from within this section; one class of such attacks is known as the buffer overflow attack.
    Do not disable this protection. Check and remove the below gcc flags.

    ```bash
    gcc -fno-stack-protector -z execstack
    ```
  severity: critical
- id: CHECK_PIE
  title: Check Position-Independent Executable Protection
  description: |
    `Position-Independent Executable (PIE)` executes properly regardless of its absolute address. PIE binaries are used in some security-focused Linux distributions to allow PaX or Exec Shield to use address space layout randomization to prevent attackers from knowing where existing executable code is during a security attack using exploits that rely on knowing the offset of the executable code in the binary, such as return-to-libc attacks.
    Apple's macOS and iOS fully support PIE executables; a warning is issued when non-PIE iOS executables are submitted for approval to Apple's App Store.
    Android enabled support for PIEs in Jelly Bean and removed non-PIE linker support in Lollipop.
    For go binary builds, enable pie by specifying the buildmode=pie as described in the [documentation](https://pkg.go.dev/cmd/go#hdr-Build_modes). The below command line enables pie along with relro and other protections.

    ```bash
    go build -buildmode=pie -ldflags -extldflags=-Wl,-z,now,-z,relro
    ```
  severity: high
- id: CHECK_RELRO
  title: Check Relocation Read-Only (RELRO) Protection
  description: |
    A dynamically linked ELF binary uses a look-up table called the Global Offset Table (GOT) to dynamically resolve functions that are located in shared libraries. Such calls point to the Procedure Linkage Table (PLT), which is present in the .plt section of the binary. The GOT is populated dynamically as the program is running. The first time a shared function is called, the GOT contains a pointer back to the PLT, where the dynamic linker is called to find the actual location of the function in question. Since GOT exists at a predefined place in memory, a program that contains a vulnerability allowing an attacker to write 4 bytes at a controlled place in memory (such as some integer overflows leading to out-of-bounds write), may be exploited to allow arbitrary code execution.
    To prevent the above mentioned security weakness, we need to ensure that the linker resolves all dynamically linked functions at the beginning of the execution, and then makes the GOT read-only.  This technique is called RELRO and ensures that the GOT cannot be overwritten in vulnerable ELF binaries.

    RELRO can be turned on when compiling a program by using the following options:

    ```bash
    gcc -g -O0 -Wl,-z,relro,-z,now -o <binary_name> <source_code>
    ```

    The below command line enables relro along with other protections.

    ```bash
    go build -buildmode=pie -ldflags -extldflags=-Wl,-z,now,-z,relro
    ```
  severity: high
