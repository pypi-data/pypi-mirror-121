# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grid_service_pb2 as grid__service__pb2


class GridStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add_velocity_grid = channel.unary_unary(
                '/grid.Grid/add_velocity_grid',
                request_serializer=grid__service__pb2.VelocityGrid3D.SerializeToString,
                response_deserializer=grid__service__pb2.GenericMessage.FromString,
                )
        self.add_inventory = channel.stream_unary(
                '/grid.Grid/add_inventory',
                request_serializer=grid__service__pb2.GenericFile.SerializeToString,
                response_deserializer=grid__service__pb2.GenericMessage.FromString,
                )
        self.add_srces = channel.unary_unary(
                '/grid.Grid/add_srces',
                request_serializer=grid__service__pb2.Srces.SerializeToString,
                response_deserializer=grid__service__pb2.GenericMessage.FromString,
                )


class GridServicer(object):
    """Missing associated documentation comment in .proto file."""

    def add_velocity_grid(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_inventory(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def add_srces(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GridServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'add_velocity_grid': grpc.unary_unary_rpc_method_handler(
                    servicer.add_velocity_grid,
                    request_deserializer=grid__service__pb2.VelocityGrid3D.FromString,
                    response_serializer=grid__service__pb2.GenericMessage.SerializeToString,
            ),
            'add_inventory': grpc.stream_unary_rpc_method_handler(
                    servicer.add_inventory,
                    request_deserializer=grid__service__pb2.GenericFile.FromString,
                    response_serializer=grid__service__pb2.GenericMessage.SerializeToString,
            ),
            'add_srces': grpc.unary_unary_rpc_method_handler(
                    servicer.add_srces,
                    request_deserializer=grid__service__pb2.Srces.FromString,
                    response_serializer=grid__service__pb2.GenericMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grid.Grid', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Grid(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def add_velocity_grid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grid.Grid/add_velocity_grid',
            grid__service__pb2.VelocityGrid3D.SerializeToString,
            grid__service__pb2.GenericMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_inventory(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/grid.Grid/add_inventory',
            grid__service__pb2.GenericFile.SerializeToString,
            grid__service__pb2.GenericMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def add_srces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grid.Grid/add_srces',
            grid__service__pb2.Srces.SerializeToString,
            grid__service__pb2.GenericMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
