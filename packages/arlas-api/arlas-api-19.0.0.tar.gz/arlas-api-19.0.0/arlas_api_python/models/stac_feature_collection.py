# coding: utf-8

"""
    ARLAS Exploration API

    Explore the content of ARLAS collections  # noqa: E501

    OpenAPI spec version: 19.0.0
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class StacFeatureCollection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stac_version': 'str',
        'stac_extensions': 'list[str]',
        'type': 'str',
        'features': 'list[Item]',
        'links': 'list[StacLink]',
        'time_stamp': 'str',
        'number_matched': 'int',
        'number_returned': 'int',
        'context': 'dict(str, object)'
    }

    attribute_map = {
        'stac_version': 'stac_version',
        'stac_extensions': 'stac_extensions',
        'type': 'type',
        'features': 'features',
        'links': 'links',
        'time_stamp': 'timeStamp',
        'number_matched': 'numberMatched',
        'number_returned': 'numberReturned',
        'context': 'context'
    }

    def __init__(self, stac_version=None, stac_extensions=None, type=None, features=None, links=None, time_stamp=None, number_matched=None, number_returned=None, context=None):  # noqa: E501
        """StacFeatureCollection - a model defined in Swagger"""  # noqa: E501

        self._stac_version = None
        self._stac_extensions = None
        self._type = None
        self._features = None
        self._links = None
        self._time_stamp = None
        self._number_matched = None
        self._number_returned = None
        self._context = None
        self.discriminator = None

        self.stac_version = stac_version
        if stac_extensions is not None:
            self.stac_extensions = stac_extensions
        self.type = type
        self.features = features
        if links is not None:
            self.links = links
        if time_stamp is not None:
            self.time_stamp = time_stamp
        if number_matched is not None:
            self.number_matched = number_matched
        if number_returned is not None:
            self.number_returned = number_returned
        if context is not None:
            self.context = context

    @property
    def stac_version(self):
        """Gets the stac_version of this StacFeatureCollection.  # noqa: E501


        :return: The stac_version of this StacFeatureCollection.  # noqa: E501
        :rtype: str
        """
        return self._stac_version

    @stac_version.setter
    def stac_version(self, stac_version):
        """Sets the stac_version of this StacFeatureCollection.


        :param stac_version: The stac_version of this StacFeatureCollection.  # noqa: E501
        :type: str
        """
        if stac_version is None:
            raise ValueError("Invalid value for `stac_version`, must not be `None`")  # noqa: E501

        self._stac_version = stac_version

    @property
    def stac_extensions(self):
        """Gets the stac_extensions of this StacFeatureCollection.  # noqa: E501


        :return: The stac_extensions of this StacFeatureCollection.  # noqa: E501
        :rtype: list[str]
        """
        return self._stac_extensions

    @stac_extensions.setter
    def stac_extensions(self, stac_extensions):
        """Sets the stac_extensions of this StacFeatureCollection.


        :param stac_extensions: The stac_extensions of this StacFeatureCollection.  # noqa: E501
        :type: list[str]
        """

        self._stac_extensions = stac_extensions

    @property
    def type(self):
        """Gets the type of this StacFeatureCollection.  # noqa: E501


        :return: The type of this StacFeatureCollection.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StacFeatureCollection.


        :param type: The type of this StacFeatureCollection.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def features(self):
        """Gets the features of this StacFeatureCollection.  # noqa: E501


        :return: The features of this StacFeatureCollection.  # noqa: E501
        :rtype: list[Item]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this StacFeatureCollection.


        :param features: The features of this StacFeatureCollection.  # noqa: E501
        :type: list[Item]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features

    @property
    def links(self):
        """Gets the links of this StacFeatureCollection.  # noqa: E501


        :return: The links of this StacFeatureCollection.  # noqa: E501
        :rtype: list[StacLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this StacFeatureCollection.


        :param links: The links of this StacFeatureCollection.  # noqa: E501
        :type: list[StacLink]
        """

        self._links = links

    @property
    def time_stamp(self):
        """Gets the time_stamp of this StacFeatureCollection.  # noqa: E501


        :return: The time_stamp of this StacFeatureCollection.  # noqa: E501
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this StacFeatureCollection.


        :param time_stamp: The time_stamp of this StacFeatureCollection.  # noqa: E501
        :type: str
        """

        self._time_stamp = time_stamp

    @property
    def number_matched(self):
        """Gets the number_matched of this StacFeatureCollection.  # noqa: E501


        :return: The number_matched of this StacFeatureCollection.  # noqa: E501
        :rtype: int
        """
        return self._number_matched

    @number_matched.setter
    def number_matched(self, number_matched):
        """Sets the number_matched of this StacFeatureCollection.


        :param number_matched: The number_matched of this StacFeatureCollection.  # noqa: E501
        :type: int
        """

        self._number_matched = number_matched

    @property
    def number_returned(self):
        """Gets the number_returned of this StacFeatureCollection.  # noqa: E501


        :return: The number_returned of this StacFeatureCollection.  # noqa: E501
        :rtype: int
        """
        return self._number_returned

    @number_returned.setter
    def number_returned(self, number_returned):
        """Sets the number_returned of this StacFeatureCollection.


        :param number_returned: The number_returned of this StacFeatureCollection.  # noqa: E501
        :type: int
        """

        self._number_returned = number_returned

    @property
    def context(self):
        """Gets the context of this StacFeatureCollection.  # noqa: E501

        Augments lists of resources with the number of returned and matches resource and the given limit for the request.  # noqa: E501

        :return: The context of this StacFeatureCollection.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this StacFeatureCollection.

        Augments lists of resources with the number of returned and matches resource and the given limit for the request.  # noqa: E501

        :param context: The context of this StacFeatureCollection.  # noqa: E501
        :type: dict(str, object)
        """

        self._context = context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StacFeatureCollection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StacFeatureCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
