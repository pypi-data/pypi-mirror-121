# coding: utf-8

"""
    ARLAS Exploration API

    Explore the content of ARLAS collections  # noqa: E501

    OpenAPI spec version: 19.0.1
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExtentTemporal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interval': 'list[list[str]]',
        'trs': 'str'
    }

    attribute_map = {
        'interval': 'interval',
        'trs': 'trs'
    }

    def __init__(self, interval=None, trs=None):  # noqa: E501
        """ExtentTemporal - a model defined in Swagger"""  # noqa: E501

        self._interval = None
        self._trs = None
        self.discriminator = None

        self.interval = interval
        if trs is not None:
            self.trs = trs

    @property
    def interval(self):
        """Gets the interval of this ExtentTemporal.  # noqa: E501

        One or more time intervals that describe the temporal extent of the dataset.  The first time interval describes the overall temporal extent of the data. All subsequent time intervals describe  more precise time intervals, e.g., to identify clusters of data. Clients only interested in the overall extent will only need to access the first item in each array.  # noqa: E501

        :return: The interval of this ExtentTemporal.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ExtentTemporal.

        One or more time intervals that describe the temporal extent of the dataset.  The first time interval describes the overall temporal extent of the data. All subsequent time intervals describe  more precise time intervals, e.g., to identify clusters of data. Clients only interested in the overall extent will only need to access the first item in each array.  # noqa: E501

        :param interval: The interval of this ExtentTemporal.  # noqa: E501
        :type: list[list[str]]
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval

    @property
    def trs(self):
        """Gets the trs of this ExtentTemporal.  # noqa: E501

        Coordinate reference system of the coordinates in the temporal extent (property `interval`). The default reference system is the Gregorian calendar. In the Core this is the only supported temporal reference system. Extensions may support additional temporal reference systems and add additional enum values.  # noqa: E501

        :return: The trs of this ExtentTemporal.  # noqa: E501
        :rtype: str
        """
        return self._trs

    @trs.setter
    def trs(self, trs):
        """Sets the trs of this ExtentTemporal.

        Coordinate reference system of the coordinates in the temporal extent (property `interval`). The default reference system is the Gregorian calendar. In the Core this is the only supported temporal reference system. Extensions may support additional temporal reference systems and add additional enum values.  # noqa: E501

        :param trs: The trs of this ExtentTemporal.  # noqa: E501
        :type: str
        """
        allowed_values = ["HTTP_WWW_OPENGIS_NET_DEF_UOM_ISO_8601_0_GREGORIAN"]  # noqa: E501
        if trs not in allowed_values:
            raise ValueError(
                "Invalid value for `trs` ({0}), must be one of {1}"  # noqa: E501
                .format(trs, allowed_values)
            )

        self._trs = trs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtentTemporal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtentTemporal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
