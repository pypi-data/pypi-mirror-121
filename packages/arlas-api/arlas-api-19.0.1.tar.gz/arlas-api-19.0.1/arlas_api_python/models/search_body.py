# coding: utf-8

"""
    ARLAS Exploration API

    Explore the content of ARLAS collections  # noqa: E501

    OpenAPI spec version: 19.0.1
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SearchBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bbox': 'list[float]',
        '_datetime': 'str',
        'intersects': 'object',
        'collections': 'list[str]',
        'ids': 'list[str]',
        'limit': 'int',
        '_from': 'int',
        'sortby': 'str',
        'after': 'str',
        'before': 'str'
    }

    attribute_map = {
        'bbox': 'bbox',
        '_datetime': 'datetime',
        'intersects': 'intersects',
        'collections': 'collections',
        'ids': 'ids',
        'limit': 'limit',
        '_from': 'from',
        'sortby': 'sortby',
        'after': 'after',
        'before': 'before'
    }

    def __init__(self, bbox=None, _datetime=None, intersects=None, collections=None, ids=None, limit=None, _from=None, sortby=None, after=None, before=None):  # noqa: E501
        """SearchBody - a model defined in Swagger"""  # noqa: E501

        self._bbox = None
        self.__datetime = None
        self._intersects = None
        self._collections = None
        self._ids = None
        self._limit = None
        self.__from = None
        self._sortby = None
        self._after = None
        self._before = None
        self.discriminator = None

        if bbox is not None:
            self.bbox = bbox
        if _datetime is not None:
            self._datetime = _datetime
        if intersects is not None:
            self.intersects = intersects
        if collections is not None:
            self.collections = collections
        if ids is not None:
            self.ids = ids
        if limit is not None:
            self.limit = limit
        if _from is not None:
            self._from = _from
        if sortby is not None:
            self.sortby = sortby
        if after is not None:
            self.after = after
        if before is not None:
            self.before = before

    @property
    def bbox(self):
        """Gets the bbox of this SearchBody.  # noqa: E501


        :return: The bbox of this SearchBody.  # noqa: E501
        :rtype: list[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this SearchBody.


        :param bbox: The bbox of this SearchBody.  # noqa: E501
        :type: list[float]
        """

        self._bbox = bbox

    @property
    def _datetime(self):
        """Gets the _datetime of this SearchBody.  # noqa: E501


        :return: The _datetime of this SearchBody.  # noqa: E501
        :rtype: str
        """
        return self.__datetime

    @_datetime.setter
    def _datetime(self, _datetime):
        """Sets the _datetime of this SearchBody.


        :param _datetime: The _datetime of this SearchBody.  # noqa: E501
        :type: str
        """

        self.__datetime = _datetime

    @property
    def intersects(self):
        """Gets the intersects of this SearchBody.  # noqa: E501


        :return: The intersects of this SearchBody.  # noqa: E501
        :rtype: object
        """
        return self._intersects

    @intersects.setter
    def intersects(self, intersects):
        """Sets the intersects of this SearchBody.


        :param intersects: The intersects of this SearchBody.  # noqa: E501
        :type: object
        """

        self._intersects = intersects

    @property
    def collections(self):
        """Gets the collections of this SearchBody.  # noqa: E501


        :return: The collections of this SearchBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._collections

    @collections.setter
    def collections(self, collections):
        """Sets the collections of this SearchBody.


        :param collections: The collections of this SearchBody.  # noqa: E501
        :type: list[str]
        """

        self._collections = collections

    @property
    def ids(self):
        """Gets the ids of this SearchBody.  # noqa: E501


        :return: The ids of this SearchBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this SearchBody.


        :param ids: The ids of this SearchBody.  # noqa: E501
        :type: list[str]
        """

        self._ids = ids

    @property
    def limit(self):
        """Gets the limit of this SearchBody.  # noqa: E501


        :return: The limit of this SearchBody.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchBody.


        :param limit: The limit of this SearchBody.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def _from(self):
        """Gets the _from of this SearchBody.  # noqa: E501


        :return: The _from of this SearchBody.  # noqa: E501
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this SearchBody.


        :param _from: The _from of this SearchBody.  # noqa: E501
        :type: int
        """

        self.__from = _from

    @property
    def sortby(self):
        """Gets the sortby of this SearchBody.  # noqa: E501


        :return: The sortby of this SearchBody.  # noqa: E501
        :rtype: str
        """
        return self._sortby

    @sortby.setter
    def sortby(self, sortby):
        """Sets the sortby of this SearchBody.


        :param sortby: The sortby of this SearchBody.  # noqa: E501
        :type: str
        """

        self._sortby = sortby

    @property
    def after(self):
        """Gets the after of this SearchBody.  # noqa: E501


        :return: The after of this SearchBody.  # noqa: E501
        :rtype: str
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this SearchBody.


        :param after: The after of this SearchBody.  # noqa: E501
        :type: str
        """

        self._after = after

    @property
    def before(self):
        """Gets the before of this SearchBody.  # noqa: E501


        :return: The before of this SearchBody.  # noqa: E501
        :rtype: str
        """
        return self._before

    @before.setter
    def before(self, before):
        """Sets the before of this SearchBody.


        :param before: The before of this SearchBody.  # noqa: E501
        :type: str
        """

        self._before = before

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
