# coding: utf-8

"""
    ARLAS Exploration API

    Explore the content of ARLAS collections  # noqa: E501

    OpenAPI spec version: 19.0.1
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Item(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crs': 'Crs',
        'bbox': 'list[float]',
        'properties': 'dict(str, object)',
        'geometry': 'object',
        'id': 'str',
        'stac_version': 'str',
        'stac_extensions': 'list[str]',
        'type': 'str',
        'links': 'list[StacLink]',
        'collection': 'str',
        'assets': 'dict(str, object)'
    }

    attribute_map = {
        'crs': 'crs',
        'bbox': 'bbox',
        'properties': 'properties',
        'geometry': 'geometry',
        'id': 'id',
        'stac_version': 'stac_version',
        'stac_extensions': 'stac_extensions',
        'type': 'type',
        'links': 'links',
        'collection': 'collection',
        'assets': 'assets'
    }

    def __init__(self, crs=None, bbox=None, properties=None, geometry=None, id=None, stac_version=None, stac_extensions=None, type=None, links=None, collection=None, assets=None):  # noqa: E501
        """Item - a model defined in Swagger"""  # noqa: E501

        self._crs = None
        self._bbox = None
        self._properties = None
        self._geometry = None
        self._id = None
        self._stac_version = None
        self._stac_extensions = None
        self._type = None
        self._links = None
        self._collection = None
        self._assets = None
        self.discriminator = None

        if crs is not None:
            self.crs = crs
        if bbox is not None:
            self.bbox = bbox
        if properties is not None:
            self.properties = properties
        if geometry is not None:
            self.geometry = geometry
        if id is not None:
            self.id = id
        self.stac_version = stac_version
        if stac_extensions is not None:
            self.stac_extensions = stac_extensions
        self.type = type
        self.links = links
        if collection is not None:
            self.collection = collection
        self.assets = assets

    @property
    def crs(self):
        """Gets the crs of this Item.  # noqa: E501


        :return: The crs of this Item.  # noqa: E501
        :rtype: Crs
        """
        return self._crs

    @crs.setter
    def crs(self, crs):
        """Sets the crs of this Item.


        :param crs: The crs of this Item.  # noqa: E501
        :type: Crs
        """

        self._crs = crs

    @property
    def bbox(self):
        """Gets the bbox of this Item.  # noqa: E501


        :return: The bbox of this Item.  # noqa: E501
        :rtype: list[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this Item.


        :param bbox: The bbox of this Item.  # noqa: E501
        :type: list[float]
        """

        self._bbox = bbox

    @property
    def properties(self):
        """Gets the properties of this Item.  # noqa: E501


        :return: The properties of this Item.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Item.


        :param properties: The properties of this Item.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def geometry(self):
        """Gets the geometry of this Item.  # noqa: E501


        :return: The geometry of this Item.  # noqa: E501
        :rtype: object
        """
        return self._geometry

    @geometry.setter
    def geometry(self, geometry):
        """Sets the geometry of this Item.


        :param geometry: The geometry of this Item.  # noqa: E501
        :type: object
        """

        self._geometry = geometry

    @property
    def id(self):
        """Gets the id of this Item.  # noqa: E501


        :return: The id of this Item.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Item.


        :param id: The id of this Item.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def stac_version(self):
        """Gets the stac_version of this Item.  # noqa: E501


        :return: The stac_version of this Item.  # noqa: E501
        :rtype: str
        """
        return self._stac_version

    @stac_version.setter
    def stac_version(self, stac_version):
        """Sets the stac_version of this Item.


        :param stac_version: The stac_version of this Item.  # noqa: E501
        :type: str
        """
        if stac_version is None:
            raise ValueError("Invalid value for `stac_version`, must not be `None`")  # noqa: E501

        self._stac_version = stac_version

    @property
    def stac_extensions(self):
        """Gets the stac_extensions of this Item.  # noqa: E501


        :return: The stac_extensions of this Item.  # noqa: E501
        :rtype: list[str]
        """
        return self._stac_extensions

    @stac_extensions.setter
    def stac_extensions(self, stac_extensions):
        """Sets the stac_extensions of this Item.


        :param stac_extensions: The stac_extensions of this Item.  # noqa: E501
        :type: list[str]
        """

        self._stac_extensions = stac_extensions

    @property
    def type(self):
        """Gets the type of this Item.  # noqa: E501


        :return: The type of this Item.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Item.


        :param type: The type of this Item.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def links(self):
        """Gets the links of this Item.  # noqa: E501


        :return: The links of this Item.  # noqa: E501
        :rtype: list[StacLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Item.


        :param links: The links of this Item.  # noqa: E501
        :type: list[StacLink]
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def collection(self):
        """Gets the collection of this Item.  # noqa: E501


        :return: The collection of this Item.  # noqa: E501
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Item.


        :param collection: The collection of this Item.  # noqa: E501
        :type: str
        """

        self._collection = collection

    @property
    def assets(self):
        """Gets the assets of this Item.  # noqa: E501


        :return: The assets of this Item.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Item.


        :param assets: The assets of this Item.  # noqa: E501
        :type: dict(str, object)
        """
        if assets is None:
            raise ValueError("Invalid value for `assets`, must not be `None`")  # noqa: E501

        self._assets = assets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Item, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
