# *******************************
# |docname| - nginx configuration
# *******************************
# This sets up nginx to run both the old and new server together. It requires processing by envsubst before use -- see `run_server.sh`.
#
# This file was partially taken from the `gunicorn deployment docs <https://docs.gunicorn.org/en/stable/deploy.html#nginx-configuration>`_.

# `worker_processes <https://nginx.org/en/docs/ngx_core_module.html#worker_processes>`_: Define the number of worker processes. TODO: Why set this to 1, instead of the number of available CPU cores? Perhaps because we let gunicorn / uwsgi so this instead; then nginx doesn't have much work to do. Another option: ``worker_processes auto;``.
worker_processes 1;

# `user <https://nginx.org/en/docs/ngx_core_module.html#user>`_: Set the user and group used by the worker processes. Select a user with restricted privileges for better security.
user www-data www-data;

# `error_log <https://nginx.org/en/docs/ngx_core_module.html#error_log>`_: configure logging. Capture only warnings and above in the log.
error_log  /var/log/nginx/error.log warn;

# `pid <https://nginx.org/en/docs/ngx_core_module.html#pid>`_: define a file that will store the process ID of the main process. nginx uses this when stopping/reloading the server.
pid /var/run/nginx.pid;

# `events <https://nginx.org/en/docs/ngx_core_module.html#events>`_: specify connection processing parameters.
events {
  # `worker_connections <https://nginx.org/en/docs/ngx_core_module.html#worker_connections>`_: set the maximum number of simultaneous connections that can be opened by a worker process. TODO: will we have websockets, and therefore need more connections?
  worker_connections 1024;
  # `accept_mutex <https://nginx.org/en/docs/ngx_core_module.html#accept_mutex>`_: enable to have worker processes take turns when handling connections. Set this to 'on' if ``worker_processes`` > 1.
  accept_mutex off;
  # TODO: the `connection processing methods <https://nginx.org/en/docs/events.html>`_ page states that nginx will normally select the most efficient method. However, gnuicorn's template says to add ``use epoll;`` for Linux 2.6+, or ``use kqueue;`` for FreeBSD, OSX. Is this really necessary?
}

# `http <https://nginx.org/en/docs/http/ngx_http_core_module.html#http>`: configure HTTP server directives. TODO: for testing only. For production, use https only.
http {
  # `gzip_static <http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html>`_: Enables ("on") or disables ("off") checking the existence of precompressed files. Send compressed files in lieu of uncompressed files where they exist. This requires the optional ``ngx_http_gzip_static_module`` module.
  gzip_static on;

  # `include <https://nginx.org/en/docs/ngx_core_module.html#include>`_: Inlcude another file. In this case, define standard MIME types.
  include /etc/nginx/mime.types;

  # `default_type <https://nginx.org/en/docs/http/ngx_http_core_module.html#default_type>`_: Define the default MIME type of a response. Use this in case we can't determine a type.
  default_type application/octet-stream;

  # `access_log (http) <https://nginx.org/en/docs/http/ngx_http_log_module.html#access_log>`_: Set the path, format, and configuration for a buffered log write.
  access_log /var/log/nginx/access.log combined;

  # `sendfile (http) <http://nginx.org/en/docs/http/ngx_http_core_module.html#sendfile>`_: Enables or disables the use of ``sendfile()``. This was included in the default gunicorn config file, so I'm assuming gunicorn uses it.
  sendfile on;

  # `server (http) <http://nginx.org/en/docs/http/ngx_http_core_module.html#server>`_: set configuration for a virtual server. This server closes the connection if there's no host match to prevent host spoofing.
  server {
    # `listen (http) <http://nginx.org/en/docs/http/ngx_http_core_module.html#listen>`_: Set the ``address`` and ``port`` for IP, or the ``path`` for a UNIX-domain socket on which the server will accept requests.
    #
    # I think that omitting the server_name_ directive causes this to match any host name not otherwise matched. TODO: does the use of ``default_server`` play into this? What is the purpose of ``default_server``?
    listen 80 default_server;
    # Also look for HTTPS connections.
    listen 443 default_server;
    # `return <https://nginx.org/en/docs/http/ngx_http_rewrite_module.html#return>`_: define a rewritten URL for the client. The non-standard code 444 closes a connection without sending a response header.
    return 444;
  }

  # Redirect from http to https. Copied from a `nginx blog <https://www.nginx.com/blog/creating-nginx-rewrite-rules/#https>`_. Comment this section out for testing.
  #server {
    #listen 80;
    #server_name $SITE_NAME;
    #return 301 https://$SITE_NAME$request_uri;
  #}

  # Define the web2py and FastAPI servers.
  server {
    # `listen`: use the Linux-only ``deferred`` option. For testing, use port 80 (http); for production, use port 443 (https).
    listen 80 deferred;
    client_max_body_size 4G;

    # `server_name <http://nginx.org/en/docs/http/ngx_http_core_module.html#server_name>`_: Set name(s) of a virtual server. TODO: update this by setting the correct host(s) for your site.
    server_name $SITE_NAME;

    keepalive_timeout 5;

    # `location <https://nginx.org/en/docs/http/ngx_http_core_module.html#location>`_: set configuration depending on a request URI. The ``~*`` indicates the following parameter is a case-insensitive regex. Look for web2py static files.
    #
    # Match web2py static paths with the application specified, such as ``/runestone/static/``.
    location ~* ^/\w+/static/ {
        root $WEB2PY_PATH/applications;
    }

    # Match web2py static paths with no application specified; assume the default application is ``runestone``.
    location /static/ {
        root $WEB2PY_PATH/applications/runestone;
    }

    # Route static book files from web2py with an application specified. Regex fun: ``(?!ns/)`` prevents a match with a prefix of ``ns/`` (since this should be routed to the new server instead).
    ##              $1                 $2        $3              $4             $5
    location ~* ^/(?!ns/)(\w+)/books/(published|draft)/(\w+)/(_static|_images|images)/(.*)$ {
        alias $WEB2PY_PATH/applications/$1/books/$3/$2/$3/$4/$5;
    }

    # Route static book files from web2py with no application specified; assume the default application is ``runestone``.
    ##                         $1           $2               $3           $4
    location ~* ^/books/(published|draft)/(\w+)/(_static|_images|images)/(.*)$ {
        alias $WEB2PY_PATH/applications/runestone/books/$2/$1/$2/$3/$4;
    }

    # Route the ``/ns`` (new server) path to gunicorn.
    location /ns/ {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      # Allow web sockets.
      proxy_buffering off;
      # `proxy_pass <https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass>`_: set the protocol and address of a proxied server and an optional URI to which a location should be mapped. **Tricky**: Specifying the ``location`` above with a trailing slash and including a trailing slash at the end of ``proxy_pass`` causes nginx to strip of the ``/ns`` prefix when sending it to gunicorn. Quoting the docs: "If the ``proxy_pass`` directive is specified with a URI, then when a request is passed to the server, the part of a normalized request URI matching the location is replaced by a URI specified in the directive."
      proxy_pass http://unix:/run/gunicorn.sock:/;
    }

    # Route anything else to uwsgi.
    location / {
        # Per `uwsgi_param <https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html#uwsgi_param>`_, this passes standard CGI environment variables.
        include /etc/nginx/uwsgi_params;
        # `uwsgi_pass <https://nginx.org/en/docs/http/ngx_http_uwsgi_module.html#uwsgi_pass>`_: sets the protocol and address of a uwsgi server.
        uwsgi_pass unix:/run/uwsgi.sock;
    }

    # `error_page <http://nginx.org/en/docs/http/ngx_http_core_module.html#error_page>`_: Define the URI that will be shown for the specified errors.
    error_page 500 502 503 504 /500.html;

    # TODO: a nice template for the 501 error.
    location = /500.html {
      root /path/to/app/current/public;
    }
  }
}
