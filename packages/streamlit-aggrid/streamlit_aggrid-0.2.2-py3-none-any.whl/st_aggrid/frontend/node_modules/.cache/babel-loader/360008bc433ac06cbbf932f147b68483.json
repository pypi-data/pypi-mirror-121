{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Component, Events, PostConstruct, RefSelector, _, Optional } from '@ag-grid-community/core';\n\nvar AggregationComp = function (_super) {\n  __extends(AggregationComp, _super);\n\n  function AggregationComp() {\n    return _super.call(this, AggregationComp.TEMPLATE) || this;\n  } // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n\n\n  AggregationComp.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n  };\n\n  AggregationComp.prototype.postConstruct = function () {\n    if (!this.isValidRowModel()) {\n      console.warn(\"AG Grid: agAggregationComponent should only be used with the client and server side row model.\");\n      return;\n    }\n\n    this.avgAggregationComp.setLabel('avg', 'Average');\n    this.countAggregationComp.setLabel('count', 'Count');\n    this.minAggregationComp.setLabel('min', 'Min');\n    this.maxAggregationComp.setLabel('max', 'Max');\n    this.sumAggregationComp.setLabel('sum', 'Sum');\n    this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onRangeSelectionChanged.bind(this));\n  };\n\n  AggregationComp.prototype.isValidRowModel = function () {\n    // this component is only really useful with client or server side rowmodels\n    var rowModelType = this.gridApi.getModel().getType();\n    return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n  };\n\n  AggregationComp.prototype.init = function () {};\n\n  AggregationComp.prototype.setAggregationComponentValue = function (aggFuncName, value, visible) {\n    var statusBarValueComponent = this.getAggregationValueComponent(aggFuncName);\n\n    if (_.exists(statusBarValueComponent) && statusBarValueComponent) {\n      statusBarValueComponent.setValue(_.formatNumberTwoDecimalPlacesAndCommas(value));\n      statusBarValueComponent.setDisplayed(visible);\n    }\n  };\n\n  AggregationComp.prototype.getAggregationValueComponent = function (aggFuncName) {\n    // converts user supplied agg name to our reference - eg: sum => sumAggregationComp\n    var refComponentName = aggFuncName + \"AggregationComp\"; // if the user has specified the agAggregationPanelComp but no aggFuncs we show the all\n    // if the user has specified the agAggregationPanelComp and aggFuncs, then we only show the aggFuncs listed\n\n    var statusBarValueComponent = null;\n    var aggregationPanelConfig = _.exists(this.gridOptions.statusBar) && this.gridOptions.statusBar ? _.find(this.gridOptions.statusBar.statusPanels, function (panel) {\n      return panel.statusPanel === 'agAggregationComponent';\n    }) : null;\n\n    if (_.exists(aggregationPanelConfig) && aggregationPanelConfig) {\n      // a little defensive here - if no statusPanelParams show it, if componentParams we also expect aggFuncs\n      if (!_.exists(aggregationPanelConfig.statusPanelParams) || _.exists(aggregationPanelConfig.statusPanelParams) && _.exists(aggregationPanelConfig.statusPanelParams.aggFuncs) && _.exists(_.find(aggregationPanelConfig.statusPanelParams.aggFuncs, function (func) {\n        return func === aggFuncName;\n      }))) {\n        statusBarValueComponent = this[refComponentName];\n      }\n    } else {\n      // components not specified - assume we can show this component\n      statusBarValueComponent = this[refComponentName];\n    } // either we can't find it (which would indicate a typo or similar user side), or the user has deliberately\n    // not listed the component in aggFuncs\n\n\n    return statusBarValueComponent;\n  };\n\n  AggregationComp.prototype.onRangeSelectionChanged = function () {\n    var _this = this;\n\n    var cellRanges = this.rangeService ? this.rangeService.getCellRanges() : undefined;\n    var sum = 0;\n    var count = 0;\n    var numberCount = 0;\n    var min = null;\n    var max = null;\n    var cellsSoFar = {};\n\n    if (cellRanges && !_.missingOrEmpty(cellRanges)) {\n      cellRanges.forEach(function (cellRange) {\n        var currentRow = _this.rangeService.getRangeStartRow(cellRange);\n\n        var lastRow = _this.rangeService.getRangeEndRow(cellRange);\n\n        while (true) {\n          var finishedAllRows = _.missing(currentRow) || !currentRow || _this.rowPositionUtils.before(lastRow, currentRow);\n\n          if (finishedAllRows || !currentRow || !cellRange.columns) {\n            break;\n          }\n\n          cellRange.columns.forEach(function (col) {\n            if (currentRow === null) {\n              return;\n            } // we only want to include each cell once, in case a cell is in multiple ranges\n\n\n            var cellId = _this.cellPositionUtils.createId({\n              rowPinned: currentRow.rowPinned,\n              column: col,\n              rowIndex: currentRow.rowIndex\n            });\n\n            if (cellsSoFar[cellId]) {\n              return;\n            }\n\n            cellsSoFar[cellId] = true;\n\n            var rowNode = _this.rowRenderer.getRowNode(currentRow);\n\n            if (_.missing(rowNode)) {\n              return;\n            }\n\n            var value = _this.valueService.getValue(col, rowNode); // if empty cell, skip it, doesn't impact count or anything\n\n\n            if (_.missing(value) || value === '') {\n              return;\n            } // see if value is wrapped, can happen when doing count() or avg() functions\n\n\n            if (value.value) {\n              value = value.value;\n            }\n\n            if (typeof value === 'string') {\n              value = Number(value);\n            }\n\n            if (typeof value === 'number' && !isNaN(value)) {\n              sum += value;\n\n              if (max === null || value > max) {\n                max = value;\n              }\n\n              if (min === null || value < min) {\n                min = value;\n              }\n\n              numberCount++;\n            }\n\n            count++;\n          });\n          currentRow = _this.cellNavigationService.getRowBelow(currentRow);\n        }\n      });\n    }\n\n    var gotResult = count > 1;\n    var gotNumberResult = numberCount > 1; // we show count even if no numbers\n\n    this.setAggregationComponentValue('count', count, gotResult); // show if numbers found\n\n    this.setAggregationComponentValue('sum', sum, gotNumberResult);\n    this.setAggregationComponentValue('min', min, gotNumberResult);\n    this.setAggregationComponentValue('max', max, gotNumberResult);\n    this.setAggregationComponentValue('avg', sum / numberCount, gotNumberResult);\n  };\n\n  AggregationComp.TEMPLATE = \"<div class=\\\"ag-status-panel ag-status-panel-aggregations\\\">\\n            <ag-name-value ref=\\\"avgAggregationComp\\\"></ag-name-value>\\n            <ag-name-value ref=\\\"countAggregationComp\\\"></ag-name-value>\\n            <ag-name-value ref=\\\"minAggregationComp\\\"></ag-name-value>\\n            <ag-name-value ref=\\\"maxAggregationComp\\\"></ag-name-value>\\n            <ag-name-value ref=\\\"sumAggregationComp\\\"></ag-name-value>\\n        </div>\";\n\n  __decorate([Optional('rangeService')], AggregationComp.prototype, \"rangeService\", void 0);\n\n  __decorate([Autowired('valueService')], AggregationComp.prototype, \"valueService\", void 0);\n\n  __decorate([Autowired('cellNavigationService')], AggregationComp.prototype, \"cellNavigationService\", void 0);\n\n  __decorate([Autowired('rowRenderer')], AggregationComp.prototype, \"rowRenderer\", void 0);\n\n  __decorate([Autowired('gridOptions')], AggregationComp.prototype, \"gridOptions\", void 0);\n\n  __decorate([Autowired('gridApi')], AggregationComp.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired('cellPositionUtils')], AggregationComp.prototype, \"cellPositionUtils\", void 0);\n\n  __decorate([Autowired('rowPositionUtils')], AggregationComp.prototype, \"rowPositionUtils\", void 0);\n\n  __decorate([RefSelector('sumAggregationComp')], AggregationComp.prototype, \"sumAggregationComp\", void 0);\n\n  __decorate([RefSelector('countAggregationComp')], AggregationComp.prototype, \"countAggregationComp\", void 0);\n\n  __decorate([RefSelector('minAggregationComp')], AggregationComp.prototype, \"minAggregationComp\", void 0);\n\n  __decorate([RefSelector('maxAggregationComp')], AggregationComp.prototype, \"maxAggregationComp\", void 0);\n\n  __decorate([RefSelector('avgAggregationComp')], AggregationComp.prototype, \"avgAggregationComp\", void 0);\n\n  __decorate([PostConstruct], AggregationComp.prototype, \"postConstruct\", null);\n\n  return AggregationComp;\n}(Component);\n\nexport { AggregationComp };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/status-bar/dist/es6/statusBar/providedPanels/aggregationComp.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Autowired","Component","Events","PostConstruct","RefSelector","_","Optional","AggregationComp","_super","call","TEMPLATE","destroy","postConstruct","isValidRowModel","console","warn","avgAggregationComp","setLabel","countAggregationComp","minAggregationComp","maxAggregationComp","sumAggregationComp","addManagedListener","eventService","EVENT_RANGE_SELECTION_CHANGED","onRangeSelectionChanged","bind","EVENT_MODEL_UPDATED","rowModelType","gridApi","getModel","getType","init","setAggregationComponentValue","aggFuncName","value","visible","statusBarValueComponent","getAggregationValueComponent","exists","setValue","formatNumberTwoDecimalPlacesAndCommas","setDisplayed","refComponentName","aggregationPanelConfig","gridOptions","statusBar","find","statusPanels","panel","statusPanel","statusPanelParams","aggFuncs","func","_this","cellRanges","rangeService","getCellRanges","undefined","sum","count","numberCount","min","max","cellsSoFar","missingOrEmpty","forEach","cellRange","currentRow","getRangeStartRow","lastRow","getRangeEndRow","finishedAllRows","missing","rowPositionUtils","before","columns","col","cellId","cellPositionUtils","createId","rowPinned","column","rowIndex","rowNode","rowRenderer","getRowNode","valueService","getValue","Number","isNaN","cellNavigationService","getRowBelow","gotResult","gotNumberResult"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Component, Events, PostConstruct, RefSelector, _, Optional } from '@ag-grid-community/core';\nvar AggregationComp = /** @class */ (function (_super) {\n    __extends(AggregationComp, _super);\n    function AggregationComp() {\n        return _super.call(this, AggregationComp.TEMPLATE) || this;\n    }\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    AggregationComp.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n    };\n    AggregationComp.prototype.postConstruct = function () {\n        if (!this.isValidRowModel()) {\n            console.warn(\"AG Grid: agAggregationComponent should only be used with the client and server side row model.\");\n            return;\n        }\n        this.avgAggregationComp.setLabel('avg', 'Average');\n        this.countAggregationComp.setLabel('count', 'Count');\n        this.minAggregationComp.setLabel('min', 'Min');\n        this.maxAggregationComp.setLabel('max', 'Max');\n        this.sumAggregationComp.setLabel('sum', 'Sum');\n        this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.onRangeSelectionChanged.bind(this));\n    };\n    AggregationComp.prototype.isValidRowModel = function () {\n        // this component is only really useful with client or server side rowmodels\n        var rowModelType = this.gridApi.getModel().getType();\n        return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n    };\n    AggregationComp.prototype.init = function () {\n    };\n    AggregationComp.prototype.setAggregationComponentValue = function (aggFuncName, value, visible) {\n        var statusBarValueComponent = this.getAggregationValueComponent(aggFuncName);\n        if (_.exists(statusBarValueComponent) && statusBarValueComponent) {\n            statusBarValueComponent.setValue(_.formatNumberTwoDecimalPlacesAndCommas(value));\n            statusBarValueComponent.setDisplayed(visible);\n        }\n    };\n    AggregationComp.prototype.getAggregationValueComponent = function (aggFuncName) {\n        // converts user supplied agg name to our reference - eg: sum => sumAggregationComp\n        var refComponentName = aggFuncName + \"AggregationComp\";\n        // if the user has specified the agAggregationPanelComp but no aggFuncs we show the all\n        // if the user has specified the agAggregationPanelComp and aggFuncs, then we only show the aggFuncs listed\n        var statusBarValueComponent = null;\n        var aggregationPanelConfig = _.exists(this.gridOptions.statusBar) && this.gridOptions.statusBar ? _.find(this.gridOptions.statusBar.statusPanels, function (panel) { return panel.statusPanel === 'agAggregationComponent'; }) : null;\n        if (_.exists(aggregationPanelConfig) && aggregationPanelConfig) {\n            // a little defensive here - if no statusPanelParams show it, if componentParams we also expect aggFuncs\n            if (!_.exists(aggregationPanelConfig.statusPanelParams) ||\n                (_.exists(aggregationPanelConfig.statusPanelParams) &&\n                    _.exists(aggregationPanelConfig.statusPanelParams.aggFuncs) &&\n                    _.exists(_.find(aggregationPanelConfig.statusPanelParams.aggFuncs, function (func) { return func === aggFuncName; })))) {\n                statusBarValueComponent = this[refComponentName];\n            }\n        }\n        else {\n            // components not specified - assume we can show this component\n            statusBarValueComponent = this[refComponentName];\n        }\n        // either we can't find it (which would indicate a typo or similar user side), or the user has deliberately\n        // not listed the component in aggFuncs\n        return statusBarValueComponent;\n    };\n    AggregationComp.prototype.onRangeSelectionChanged = function () {\n        var _this = this;\n        var cellRanges = this.rangeService ? this.rangeService.getCellRanges() : undefined;\n        var sum = 0;\n        var count = 0;\n        var numberCount = 0;\n        var min = null;\n        var max = null;\n        var cellsSoFar = {};\n        if (cellRanges && !_.missingOrEmpty(cellRanges)) {\n            cellRanges.forEach(function (cellRange) {\n                var currentRow = _this.rangeService.getRangeStartRow(cellRange);\n                var lastRow = _this.rangeService.getRangeEndRow(cellRange);\n                while (true) {\n                    var finishedAllRows = _.missing(currentRow) || !currentRow || _this.rowPositionUtils.before(lastRow, currentRow);\n                    if (finishedAllRows || !currentRow || !cellRange.columns) {\n                        break;\n                    }\n                    cellRange.columns.forEach(function (col) {\n                        if (currentRow === null) {\n                            return;\n                        }\n                        // we only want to include each cell once, in case a cell is in multiple ranges\n                        var cellId = _this.cellPositionUtils.createId({\n                            rowPinned: currentRow.rowPinned,\n                            column: col,\n                            rowIndex: currentRow.rowIndex\n                        });\n                        if (cellsSoFar[cellId]) {\n                            return;\n                        }\n                        cellsSoFar[cellId] = true;\n                        var rowNode = _this.rowRenderer.getRowNode(currentRow);\n                        if (_.missing(rowNode)) {\n                            return;\n                        }\n                        var value = _this.valueService.getValue(col, rowNode);\n                        // if empty cell, skip it, doesn't impact count or anything\n                        if (_.missing(value) || value === '') {\n                            return;\n                        }\n                        // see if value is wrapped, can happen when doing count() or avg() functions\n                        if (value.value) {\n                            value = value.value;\n                        }\n                        if (typeof value === 'string') {\n                            value = Number(value);\n                        }\n                        if (typeof value === 'number' && !isNaN(value)) {\n                            sum += value;\n                            if (max === null || value > max) {\n                                max = value;\n                            }\n                            if (min === null || value < min) {\n                                min = value;\n                            }\n                            numberCount++;\n                        }\n                        count++;\n                    });\n                    currentRow = _this.cellNavigationService.getRowBelow(currentRow);\n                }\n            });\n        }\n        var gotResult = count > 1;\n        var gotNumberResult = numberCount > 1;\n        // we show count even if no numbers\n        this.setAggregationComponentValue('count', count, gotResult);\n        // show if numbers found\n        this.setAggregationComponentValue('sum', sum, gotNumberResult);\n        this.setAggregationComponentValue('min', min, gotNumberResult);\n        this.setAggregationComponentValue('max', max, gotNumberResult);\n        this.setAggregationComponentValue('avg', (sum / numberCount), gotNumberResult);\n    };\n    AggregationComp.TEMPLATE = \"<div class=\\\"ag-status-panel ag-status-panel-aggregations\\\">\\n            <ag-name-value ref=\\\"avgAggregationComp\\\"></ag-name-value>\\n            <ag-name-value ref=\\\"countAggregationComp\\\"></ag-name-value>\\n            <ag-name-value ref=\\\"minAggregationComp\\\"></ag-name-value>\\n            <ag-name-value ref=\\\"maxAggregationComp\\\"></ag-name-value>\\n            <ag-name-value ref=\\\"sumAggregationComp\\\"></ag-name-value>\\n        </div>\";\n    __decorate([\n        Optional('rangeService')\n    ], AggregationComp.prototype, \"rangeService\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], AggregationComp.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('cellNavigationService')\n    ], AggregationComp.prototype, \"cellNavigationService\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], AggregationComp.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired('gridOptions')\n    ], AggregationComp.prototype, \"gridOptions\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], AggregationComp.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('cellPositionUtils')\n    ], AggregationComp.prototype, \"cellPositionUtils\", void 0);\n    __decorate([\n        Autowired('rowPositionUtils')\n    ], AggregationComp.prototype, \"rowPositionUtils\", void 0);\n    __decorate([\n        RefSelector('sumAggregationComp')\n    ], AggregationComp.prototype, \"sumAggregationComp\", void 0);\n    __decorate([\n        RefSelector('countAggregationComp')\n    ], AggregationComp.prototype, \"countAggregationComp\", void 0);\n    __decorate([\n        RefSelector('minAggregationComp')\n    ], AggregationComp.prototype, \"minAggregationComp\", void 0);\n    __decorate([\n        RefSelector('maxAggregationComp')\n    ], AggregationComp.prototype, \"maxAggregationComp\", void 0);\n    __decorate([\n        RefSelector('avgAggregationComp')\n    ], AggregationComp.prototype, \"avgAggregationComp\", void 0);\n    __decorate([\n        PostConstruct\n    ], AggregationComp.prototype, \"postConstruct\", null);\n    return AggregationComp;\n}(Component));\nexport { AggregationComp };\n"]},"metadata":{},"sourceType":"module"}