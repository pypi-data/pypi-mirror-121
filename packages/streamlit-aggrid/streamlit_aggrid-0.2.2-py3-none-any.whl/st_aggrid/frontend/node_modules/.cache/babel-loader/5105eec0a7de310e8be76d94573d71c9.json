{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Constants } from \"@ag-grid-community/core\";\nimport { BaseGridSerializingSession } from \"./baseGridSerializingSession\";\nvar LINE_SEPARATOR = '\\r\\n';\n\nvar CsvSerializingSession = function (_super) {\n  __extends(CsvSerializingSession, _super);\n\n  function CsvSerializingSession(config) {\n    var _this = _super.call(this, config) || this;\n\n    _this.isFirstLine = true;\n    _this.result = '';\n    var suppressQuotes = config.suppressQuotes,\n        columnSeparator = config.columnSeparator;\n    _this.suppressQuotes = suppressQuotes;\n    _this.columnSeparator = columnSeparator;\n    return _this;\n  }\n\n  CsvSerializingSession.prototype.addCustomContent = function (content) {\n    var _this = this;\n\n    if (!content) {\n      return;\n    }\n\n    if (typeof content === 'string') {\n      if (!/^\\s*\\n/.test(content)) {\n        this.beginNewLine();\n      } // replace whatever newlines are supplied with the style we're using\n\n\n      content = content.replace(/\\r?\\n/g, LINE_SEPARATOR);\n      this.result += content;\n    } else {\n      content.forEach(function (row) {\n        _this.beginNewLine();\n\n        row.forEach(function (cell, index) {\n          if (index !== 0) {\n            _this.result += _this.columnSeparator;\n          }\n\n          _this.result += _this.putInQuotes(cell.data.value || '');\n\n          if (cell.mergeAcross) {\n            _this.appendEmptyCells(cell.mergeAcross);\n          }\n        });\n      });\n    }\n  };\n\n  CsvSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n    this.beginNewLine();\n    return {\n      onColumn: this.onNewHeaderGroupingRowColumn.bind(this)\n    };\n  };\n\n  CsvSerializingSession.prototype.onNewHeaderGroupingRowColumn = function (header, index, span) {\n    if (index != 0) {\n      this.result += this.columnSeparator;\n    }\n\n    this.result += this.putInQuotes(header);\n    this.appendEmptyCells(span);\n  };\n\n  CsvSerializingSession.prototype.appendEmptyCells = function (count) {\n    for (var i = 1; i <= count; i++) {\n      this.result += this.columnSeparator + this.putInQuotes(\"\");\n    }\n  };\n\n  CsvSerializingSession.prototype.onNewHeaderRow = function () {\n    this.beginNewLine();\n    return {\n      onColumn: this.onNewHeaderRowColumn.bind(this)\n    };\n  };\n\n  CsvSerializingSession.prototype.onNewHeaderRowColumn = function (column, index) {\n    if (index != 0) {\n      this.result += this.columnSeparator;\n    }\n\n    this.result += this.putInQuotes(this.extractHeaderValue(column));\n  };\n\n  CsvSerializingSession.prototype.onNewBodyRow = function () {\n    this.beginNewLine();\n    return {\n      onColumn: this.onNewBodyRowColumn.bind(this)\n    };\n  };\n\n  CsvSerializingSession.prototype.onNewBodyRowColumn = function (column, index, node) {\n    if (index != 0) {\n      this.result += this.columnSeparator;\n    }\n\n    this.result += this.putInQuotes(this.extractRowCellValue(column, index, index, Constants.EXPORT_TYPE_CSV, node));\n  };\n\n  CsvSerializingSession.prototype.putInQuotes = function (value) {\n    if (this.suppressQuotes) {\n      return value;\n    }\n\n    if (value === null || value === undefined) {\n      return '\"\"';\n    }\n\n    var stringValue;\n\n    if (typeof value === 'string') {\n      stringValue = value;\n    } else if (typeof value.toString === 'function') {\n      stringValue = value.toString();\n    } else {\n      console.warn('unknown value type during csv conversion');\n      stringValue = '';\n    } // replace each \" with \"\" (ie two sets of double quotes is how to do double quotes in csv)\n\n\n    var valueEscaped = stringValue.replace(/\"/g, \"\\\"\\\"\");\n    return '\"' + valueEscaped + '\"';\n  };\n\n  CsvSerializingSession.prototype.parse = function () {\n    return this.result;\n  };\n\n  CsvSerializingSession.prototype.beginNewLine = function () {\n    if (!this.isFirstLine) {\n      this.result += LINE_SEPARATOR;\n    }\n\n    this.isFirstLine = false;\n  };\n\n  return CsvSerializingSession;\n}(BaseGridSerializingSession);\n\nexport { CsvSerializingSession };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/sessions/csvSerializingSession.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Constants","BaseGridSerializingSession","LINE_SEPARATOR","CsvSerializingSession","_super","config","_this","call","isFirstLine","result","suppressQuotes","columnSeparator","addCustomContent","content","test","beginNewLine","replace","forEach","row","cell","index","putInQuotes","data","value","mergeAcross","appendEmptyCells","onNewHeaderGroupingRow","onColumn","onNewHeaderGroupingRowColumn","bind","header","span","count","i","onNewHeaderRow","onNewHeaderRowColumn","column","extractHeaderValue","onNewBodyRow","onNewBodyRowColumn","node","extractRowCellValue","EXPORT_TYPE_CSV","undefined","stringValue","toString","console","warn","valueEscaped","parse"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Constants } from \"@ag-grid-community/core\";\nimport { BaseGridSerializingSession } from \"./baseGridSerializingSession\";\nvar LINE_SEPARATOR = '\\r\\n';\nvar CsvSerializingSession = /** @class */ (function (_super) {\n    __extends(CsvSerializingSession, _super);\n    function CsvSerializingSession(config) {\n        var _this = _super.call(this, config) || this;\n        _this.isFirstLine = true;\n        _this.result = '';\n        var suppressQuotes = config.suppressQuotes, columnSeparator = config.columnSeparator;\n        _this.suppressQuotes = suppressQuotes;\n        _this.columnSeparator = columnSeparator;\n        return _this;\n    }\n    CsvSerializingSession.prototype.addCustomContent = function (content) {\n        var _this = this;\n        if (!content) {\n            return;\n        }\n        if (typeof content === 'string') {\n            if (!/^\\s*\\n/.test(content)) {\n                this.beginNewLine();\n            }\n            // replace whatever newlines are supplied with the style we're using\n            content = content.replace(/\\r?\\n/g, LINE_SEPARATOR);\n            this.result += content;\n        }\n        else {\n            content.forEach(function (row) {\n                _this.beginNewLine();\n                row.forEach(function (cell, index) {\n                    if (index !== 0) {\n                        _this.result += _this.columnSeparator;\n                    }\n                    _this.result += _this.putInQuotes(cell.data.value || '');\n                    if (cell.mergeAcross) {\n                        _this.appendEmptyCells(cell.mergeAcross);\n                    }\n                });\n            });\n        }\n    };\n    CsvSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewHeaderGroupingRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewHeaderGroupingRowColumn = function (header, index, span) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(header);\n        this.appendEmptyCells(span);\n    };\n    CsvSerializingSession.prototype.appendEmptyCells = function (count) {\n        for (var i = 1; i <= count; i++) {\n            this.result += this.columnSeparator + this.putInQuotes(\"\");\n        }\n    };\n    CsvSerializingSession.prototype.onNewHeaderRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewHeaderRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewHeaderRowColumn = function (column, index) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(this.extractHeaderValue(column));\n    };\n    CsvSerializingSession.prototype.onNewBodyRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewBodyRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewBodyRowColumn = function (column, index, node) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(this.extractRowCellValue(column, index, index, Constants.EXPORT_TYPE_CSV, node));\n    };\n    CsvSerializingSession.prototype.putInQuotes = function (value) {\n        if (this.suppressQuotes) {\n            return value;\n        }\n        if (value === null || value === undefined) {\n            return '\"\"';\n        }\n        var stringValue;\n        if (typeof value === 'string') {\n            stringValue = value;\n        }\n        else if (typeof value.toString === 'function') {\n            stringValue = value.toString();\n        }\n        else {\n            console.warn('unknown value type during csv conversion');\n            stringValue = '';\n        }\n        // replace each \" with \"\" (ie two sets of double quotes is how to do double quotes in csv)\n        var valueEscaped = stringValue.replace(/\"/g, \"\\\"\\\"\");\n        return '\"' + valueEscaped + '\"';\n    };\n    CsvSerializingSession.prototype.parse = function () {\n        return this.result;\n    };\n    CsvSerializingSession.prototype.beginNewLine = function () {\n        if (!this.isFirstLine) {\n            this.result += LINE_SEPARATOR;\n        }\n        this.isFirstLine = false;\n    };\n    return CsvSerializingSession;\n}(BaseGridSerializingSession));\nexport { CsvSerializingSession };\n"]},"metadata":{},"sourceType":"module"}