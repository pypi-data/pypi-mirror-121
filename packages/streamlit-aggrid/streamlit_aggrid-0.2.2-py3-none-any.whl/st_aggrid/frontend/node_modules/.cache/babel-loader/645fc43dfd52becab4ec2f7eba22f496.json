{"ast":null,"code":"import { XmlFactory } from \"@ag-grid-community/csv-export\";\nimport { INCH_TO_EMU } from \"./excelConstants\";\nexport var pixelsToPoint = function pixelsToPoint(pixels) {\n  return Math.round(pixels * 72 / 96);\n};\nexport var pointsToPixel = function pointsToPixel(points) {\n  return Math.round(points * 96 / 72);\n};\nexport var pixelsToEMU = function pixelsToEMU(value) {\n  return Math.ceil(value * INCH_TO_EMU);\n};\nexport var getFontFamilyId = function getFontFamilyId(name) {\n  if (name === undefined) {\n    return;\n  }\n\n  var families = ['Automatic', 'Roman', 'Swiss', 'Modern', 'Script', 'Decorative'];\n  var pos = families.indexOf(name || 'Automatic');\n  return Math.max(pos, 0);\n};\nexport var getHeightFromProperty = function getHeightFromProperty(rowIndex, height) {\n  if (!height) {\n    return;\n  }\n\n  var finalHeight;\n\n  if (typeof height === 'number') {\n    finalHeight = height;\n  } else {\n    var heightFunc = height;\n    finalHeight = heightFunc({\n      rowIndex: rowIndex\n    });\n  }\n\n  return pixelsToPoint(finalHeight);\n};\nexport var setExcelImageTotalWidth = function setExcelImageTotalWidth(image, columnsToExport) {\n  var _a = image.position,\n      colSpan = _a.colSpan,\n      column = _a.column;\n\n  if (image.width) {\n    if (colSpan) {\n      var columnsInSpan = columnsToExport.slice(column - 1, column + colSpan - 1);\n      var totalWidth = 0;\n\n      for (var i = 0; i < columnsInSpan.length; i++) {\n        var colWidth = columnsInSpan[i].getActualWidth();\n\n        if (image.width < totalWidth + colWidth) {\n          image.position.colSpan = i + 1;\n          image.totalWidth = image.width;\n          image.width = image.totalWidth - totalWidth;\n          break;\n        }\n\n        totalWidth += colWidth;\n      }\n    } else {\n      image.totalWidth = image.width;\n    }\n  }\n};\nexport var setExcelImageTotalHeight = function setExcelImageTotalHeight(image, rowHeight) {\n  var _a = image.position,\n      rowSpan = _a.rowSpan,\n      row = _a.row;\n\n  if (image.height) {\n    if (rowSpan) {\n      var totalHeight = 0;\n      var counter = 0;\n\n      for (var i = row; i < row + rowSpan; i++) {\n        var nextRowHeight = pointsToPixel(getHeightFromProperty(i, rowHeight) || 20);\n\n        if (image.height < totalHeight + nextRowHeight) {\n          image.position.rowSpan = counter + 1;\n          image.totalHeight = image.height;\n          image.height = image.totalHeight - totalHeight;\n          break;\n        }\n\n        totalHeight += nextRowHeight;\n        counter++;\n      }\n    } else {\n      image.totalHeight = image.height;\n    }\n  }\n};\nexport var createXmlPart = function createXmlPart(body) {\n  var header = XmlFactory.createHeader({\n    encoding: 'UTF-8',\n    standalone: 'yes'\n  });\n  var xmlBody = XmlFactory.createXml(body);\n  return \"\" + header + xmlBody;\n};\nexport var getExcelColumnName = function getExcelColumnName(colIdx) {\n  var startCode = 65;\n  var tableWidth = 26;\n  var fromCharCode = String.fromCharCode;\n  var pos = Math.floor(colIdx / tableWidth);\n  var tableIdx = colIdx % tableWidth;\n\n  if (!pos || colIdx === tableWidth) {\n    return fromCharCode(startCode + colIdx - 1);\n  }\n\n  if (!tableIdx) {\n    return getExcelColumnName(pos - 1) + 'Z';\n  }\n\n  if (pos < tableWidth) {\n    return fromCharCode(startCode + pos - 1) + fromCharCode(startCode + tableIdx - 1);\n  }\n\n  return getExcelColumnName(pos) + fromCharCode(startCode + tableIdx - 1);\n};","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/excel-export/dist/es6/excelExport/assets/excelUtils.js"],"names":["XmlFactory","INCH_TO_EMU","pixelsToPoint","pixels","Math","round","pointsToPixel","points","pixelsToEMU","value","ceil","getFontFamilyId","name","undefined","families","pos","indexOf","max","getHeightFromProperty","rowIndex","height","finalHeight","heightFunc","setExcelImageTotalWidth","image","columnsToExport","_a","position","colSpan","column","width","columnsInSpan","slice","totalWidth","i","length","colWidth","getActualWidth","setExcelImageTotalHeight","rowHeight","rowSpan","row","totalHeight","counter","nextRowHeight","createXmlPart","body","header","createHeader","encoding","standalone","xmlBody","createXml","getExcelColumnName","colIdx","startCode","tableWidth","fromCharCode","String","floor","tableIdx"],"mappings":"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","sourcesContent":["import { XmlFactory } from \"@ag-grid-community/csv-export\";\nimport { INCH_TO_EMU } from \"./excelConstants\";\nexport var pixelsToPoint = function (pixels) {\n    return Math.round(pixels * 72 / 96);\n};\nexport var pointsToPixel = function (points) {\n    return Math.round(points * 96 / 72);\n};\nexport var pixelsToEMU = function (value) {\n    return Math.ceil(value * INCH_TO_EMU);\n};\nexport var getFontFamilyId = function (name) {\n    if (name === undefined) {\n        return;\n    }\n    var families = ['Automatic', 'Roman', 'Swiss', 'Modern', 'Script', 'Decorative'];\n    var pos = families.indexOf(name || 'Automatic');\n    return Math.max(pos, 0);\n};\nexport var getHeightFromProperty = function (rowIndex, height) {\n    if (!height) {\n        return;\n    }\n    var finalHeight;\n    if (typeof height === 'number') {\n        finalHeight = height;\n    }\n    else {\n        var heightFunc = height;\n        finalHeight = heightFunc({ rowIndex: rowIndex });\n    }\n    return pixelsToPoint(finalHeight);\n};\nexport var setExcelImageTotalWidth = function (image, columnsToExport) {\n    var _a = image.position, colSpan = _a.colSpan, column = _a.column;\n    if (image.width) {\n        if (colSpan) {\n            var columnsInSpan = columnsToExport.slice(column - 1, column + colSpan - 1);\n            var totalWidth = 0;\n            for (var i = 0; i < columnsInSpan.length; i++) {\n                var colWidth = columnsInSpan[i].getActualWidth();\n                if (image.width < totalWidth + colWidth) {\n                    image.position.colSpan = i + 1;\n                    image.totalWidth = image.width;\n                    image.width = image.totalWidth - totalWidth;\n                    break;\n                }\n                totalWidth += colWidth;\n            }\n        }\n        else {\n            image.totalWidth = image.width;\n        }\n    }\n};\nexport var setExcelImageTotalHeight = function (image, rowHeight) {\n    var _a = image.position, rowSpan = _a.rowSpan, row = _a.row;\n    if (image.height) {\n        if (rowSpan) {\n            var totalHeight = 0;\n            var counter = 0;\n            for (var i = row; i < row + rowSpan; i++) {\n                var nextRowHeight = pointsToPixel(getHeightFromProperty(i, rowHeight) || 20);\n                if (image.height < totalHeight + nextRowHeight) {\n                    image.position.rowSpan = counter + 1;\n                    image.totalHeight = image.height;\n                    image.height = image.totalHeight - totalHeight;\n                    break;\n                }\n                totalHeight += nextRowHeight;\n                counter++;\n            }\n        }\n        else {\n            image.totalHeight = image.height;\n        }\n    }\n};\nexport var createXmlPart = function (body) {\n    var header = XmlFactory.createHeader({\n        encoding: 'UTF-8',\n        standalone: 'yes'\n    });\n    var xmlBody = XmlFactory.createXml(body);\n    return \"\" + header + xmlBody;\n};\nexport var getExcelColumnName = function (colIdx) {\n    var startCode = 65;\n    var tableWidth = 26;\n    var fromCharCode = String.fromCharCode;\n    var pos = Math.floor(colIdx / tableWidth);\n    var tableIdx = colIdx % tableWidth;\n    if (!pos || colIdx === tableWidth) {\n        return fromCharCode(startCode + colIdx - 1);\n    }\n    if (!tableIdx) {\n        return getExcelColumnName(pos - 1) + 'Z';\n    }\n    if (pos < tableWidth) {\n        return fromCharCode(startCode + pos - 1) + fromCharCode(startCode + tableIdx - 1);\n    }\n    return getExcelColumnName(pos) + fromCharCode(startCode + tableIdx - 1);\n};\n"]},"metadata":{},"sourceType":"module"}