{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.0.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Bean, PreDestroy } from \"../context/context\";\nimport { _ } from \"../utils\";\n\nvar ColumnApi = function () {\n  function ColumnApi() {}\n\n  ColumnApi.prototype.sizeColumnsToFit = function (gridWidth) {\n    // AG-3403 validate that gridWidth is provided because this method has the same name as\n    // a method on the grid API that takes no arguments, and it's easy to confuse the two\n    if (typeof gridWidth === \"undefined\") {\n      console.error('AG Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)');\n    }\n\n    this.columnModel.sizeColumnsToFit(gridWidth, 'api');\n  };\n\n  ColumnApi.prototype.setColumnGroupOpened = function (group, newValue) {\n    this.columnModel.setColumnGroupOpened(group, newValue, 'api');\n  };\n\n  ColumnApi.prototype.getColumnGroup = function (name, instanceId) {\n    return this.columnModel.getColumnGroup(name, instanceId);\n  };\n\n  ColumnApi.prototype.getOriginalColumnGroup = function (name) {\n    return this.columnModel.getOriginalColumnGroup(name);\n  };\n\n  ColumnApi.prototype.getDisplayNameForColumn = function (column, location) {\n    return this.columnModel.getDisplayNameForColumn(column, location) || '';\n  };\n\n  ColumnApi.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) {\n    return this.columnModel.getDisplayNameForColumnGroup(columnGroup, location) || '';\n  };\n\n  ColumnApi.prototype.getColumn = function (key) {\n    return this.columnModel.getPrimaryColumn(key);\n  };\n\n  ColumnApi.prototype.applyColumnState = function (params) {\n    return this.columnModel.applyColumnState(params, 'api');\n  };\n\n  ColumnApi.prototype.getColumnState = function () {\n    return this.columnModel.getColumnState();\n  };\n\n  ColumnApi.prototype.resetColumnState = function () {\n    this.columnModel.resetColumnState('api');\n  };\n\n  ColumnApi.prototype.getColumnGroupState = function () {\n    return this.columnModel.getColumnGroupState();\n  };\n\n  ColumnApi.prototype.setColumnGroupState = function (stateItems) {\n    this.columnModel.setColumnGroupState(stateItems, 'api');\n  };\n\n  ColumnApi.prototype.resetColumnGroupState = function () {\n    this.columnModel.resetColumnGroupState('api');\n  };\n\n  ColumnApi.prototype.isPinning = function () {\n    return this.columnModel.isPinningLeft() || this.columnModel.isPinningRight();\n  };\n\n  ColumnApi.prototype.isPinningLeft = function () {\n    return this.columnModel.isPinningLeft();\n  };\n\n  ColumnApi.prototype.isPinningRight = function () {\n    return this.columnModel.isPinningRight();\n  };\n\n  ColumnApi.prototype.getDisplayedColAfter = function (col) {\n    return this.columnModel.getDisplayedColAfter(col);\n  };\n\n  ColumnApi.prototype.getDisplayedColBefore = function (col) {\n    return this.columnModel.getDisplayedColBefore(col);\n  };\n\n  ColumnApi.prototype.setColumnVisible = function (key, visible) {\n    this.columnModel.setColumnVisible(key, visible, 'api');\n  };\n\n  ColumnApi.prototype.setColumnsVisible = function (keys, visible) {\n    this.columnModel.setColumnsVisible(keys, visible, 'api');\n  };\n\n  ColumnApi.prototype.setColumnPinned = function (key, pinned) {\n    this.columnModel.setColumnPinned(key, pinned, 'api');\n  };\n\n  ColumnApi.prototype.setColumnsPinned = function (keys, pinned) {\n    this.columnModel.setColumnsPinned(keys, pinned, 'api');\n  };\n\n  ColumnApi.prototype.getAllColumns = function () {\n    return this.columnModel.getAllPrimaryColumns();\n  };\n\n  ColumnApi.prototype.getAllGridColumns = function () {\n    return this.columnModel.getAllGridColumns();\n  };\n\n  ColumnApi.prototype.getDisplayedLeftColumns = function () {\n    return this.columnModel.getDisplayedLeftColumns();\n  };\n\n  ColumnApi.prototype.getDisplayedCenterColumns = function () {\n    return this.columnModel.getDisplayedCenterColumns();\n  };\n\n  ColumnApi.prototype.getDisplayedRightColumns = function () {\n    return this.columnModel.getDisplayedRightColumns();\n  };\n\n  ColumnApi.prototype.getAllDisplayedColumns = function () {\n    return this.columnModel.getAllDisplayedColumns();\n  };\n\n  ColumnApi.prototype.getAllDisplayedVirtualColumns = function () {\n    return this.columnModel.getViewportColumns();\n  };\n\n  ColumnApi.prototype.moveColumn = function (key, toIndex) {\n    if (typeof key === 'number') {\n      // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name\n      console.warn('AG Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');\n      this.columnModel.moveColumnByIndex(key, toIndex, 'api');\n    } else {\n      this.columnModel.moveColumn(key, toIndex, 'api');\n    }\n  };\n\n  ColumnApi.prototype.moveColumnByIndex = function (fromIndex, toIndex) {\n    this.columnModel.moveColumnByIndex(fromIndex, toIndex, 'api');\n  };\n\n  ColumnApi.prototype.moveColumns = function (columnsToMoveKeys, toIndex) {\n    this.columnModel.moveColumns(columnsToMoveKeys, toIndex, 'api');\n  };\n\n  ColumnApi.prototype.moveRowGroupColumn = function (fromIndex, toIndex) {\n    this.columnModel.moveRowGroupColumn(fromIndex, toIndex);\n  };\n\n  ColumnApi.prototype.setColumnAggFunc = function (key, aggFunc) {\n    this.columnModel.setColumnAggFunc(key, aggFunc);\n  };\n\n  ColumnApi.prototype.setColumnWidth = function (key, newWidth, finished, source) {\n    if (finished === void 0) {\n      finished = true;\n    }\n\n    this.columnModel.setColumnWidths([{\n      key: key,\n      newWidth: newWidth\n    }], false, finished, source);\n  };\n\n  ColumnApi.prototype.setColumnWidths = function (columnWidths, finished, source) {\n    if (finished === void 0) {\n      finished = true;\n    }\n\n    this.columnModel.setColumnWidths(columnWidths, false, finished, source);\n  };\n\n  ColumnApi.prototype.setPivotMode = function (pivotMode) {\n    this.columnModel.setPivotMode(pivotMode);\n  };\n\n  ColumnApi.prototype.isPivotMode = function () {\n    return this.columnModel.isPivotMode();\n  };\n\n  ColumnApi.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) {\n    return this.columnModel.getSecondaryPivotColumn(pivotKeys, valueColKey);\n  };\n\n  ColumnApi.prototype.setValueColumns = function (colKeys) {\n    this.columnModel.setValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.getValueColumns = function () {\n    return this.columnModel.getValueColumns();\n  };\n\n  ColumnApi.prototype.removeValueColumn = function (colKey) {\n    this.columnModel.removeValueColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.removeValueColumns = function (colKeys) {\n    this.columnModel.removeValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.addValueColumn = function (colKey) {\n    this.columnModel.addValueColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.addValueColumns = function (colKeys) {\n    this.columnModel.addValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.setRowGroupColumns = function (colKeys) {\n    this.columnModel.setRowGroupColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.removeRowGroupColumn = function (colKey) {\n    this.columnModel.removeRowGroupColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.removeRowGroupColumns = function (colKeys) {\n    this.columnModel.removeRowGroupColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.addRowGroupColumn = function (colKey) {\n    this.columnModel.addRowGroupColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.addRowGroupColumns = function (colKeys) {\n    this.columnModel.addRowGroupColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.getRowGroupColumns = function () {\n    return this.columnModel.getRowGroupColumns();\n  };\n\n  ColumnApi.prototype.setPivotColumns = function (colKeys) {\n    this.columnModel.setPivotColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.removePivotColumn = function (colKey) {\n    this.columnModel.removePivotColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.removePivotColumns = function (colKeys) {\n    this.columnModel.removePivotColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.addPivotColumn = function (colKey) {\n    this.columnModel.addPivotColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.addPivotColumns = function (colKeys) {\n    this.columnModel.addPivotColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.getPivotColumns = function () {\n    return this.columnModel.getPivotColumns();\n  };\n\n  ColumnApi.prototype.getLeftDisplayedColumnGroups = function () {\n    return this.columnModel.getDisplayedTreeLeft();\n  };\n\n  ColumnApi.prototype.getCenterDisplayedColumnGroups = function () {\n    return this.columnModel.getDisplayedTreeCentre();\n  };\n\n  ColumnApi.prototype.getRightDisplayedColumnGroups = function () {\n    return this.columnModel.getDisplayedTreeRight();\n  };\n\n  ColumnApi.prototype.getAllDisplayedColumnGroups = function () {\n    return this.columnModel.getAllDisplayedTrees();\n  };\n\n  ColumnApi.prototype.autoSizeColumn = function (key, skipHeader) {\n    return this.columnModel.autoSizeColumn(key, skipHeader, 'api');\n  };\n\n  ColumnApi.prototype.autoSizeColumns = function (keys, skipHeader) {\n    return this.columnModel.autoSizeColumns(keys, skipHeader, 'api');\n  };\n\n  ColumnApi.prototype.autoSizeAllColumns = function (skipHeader) {\n    this.columnModel.autoSizeAllColumns(skipHeader, 'api');\n  };\n\n  ColumnApi.prototype.setSecondaryColumns = function (colDefs) {\n    this.columnModel.setSecondaryColumns(colDefs, 'api');\n  };\n\n  ColumnApi.prototype.getSecondaryColumns = function () {\n    return this.columnModel.getSecondaryColumns();\n  };\n\n  ColumnApi.prototype.getPrimaryColumns = function () {\n    return this.columnModel.getAllPrimaryColumns();\n  };\n\n  ColumnApi.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function () {\n    // some users were raising support issues with regards memory leaks. the problem was the customers applications\n    // were keeping references to the API. trying to educate them all would be difficult, easier to just remove\n    // all references in teh API so at least the core grid can be garbage collected.\n    //\n    // wait about 100ms before clearing down the references, in case user has some cleanup to do,\n    // and needs to deference the API first\n    setTimeout(_.removeAllReferences.bind(window, this, 'Column API'), 100);\n  }; // below goes through deprecated items, prints message to user, then calls the new version of the same method\n  // public getColumnDefs(): (ColDef | ColGroupDef)[] {\n  //     this.setColumnGroupOpened(group, newValue);\n  //     return null;\n  // }\n\n\n  ColumnApi.prototype.columnGroupOpened = function (group, newValue) {\n    console.error('AG Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');\n    this.setColumnGroupOpened(group, newValue);\n  };\n\n  ColumnApi.prototype.hideColumns = function (colIds, hide) {\n    console.error('AG Grid: hideColumns is deprecated, use setColumnsVisible');\n    this.columnModel.setColumnsVisible(colIds, !hide, 'api');\n  };\n\n  ColumnApi.prototype.hideColumn = function (colId, hide) {\n    console.error('AG Grid: hideColumn is deprecated, use setColumnVisible');\n    this.columnModel.setColumnVisible(colId, !hide, 'api');\n  };\n\n  ColumnApi.prototype.setState = function (columnState) {\n    console.error('AG Grid: setState is deprecated, use setColumnState');\n    return this.setColumnState(columnState);\n  };\n\n  ColumnApi.prototype.getState = function () {\n    console.error('AG Grid: getState is deprecated, use getColumnState');\n    return this.getColumnState();\n  };\n\n  ColumnApi.prototype.resetState = function () {\n    console.error('AG Grid: resetState is deprecated, use resetColumnState');\n    this.resetColumnState();\n  };\n\n  ColumnApi.prototype.getAggregationColumns = function () {\n    console.error('AG Grid: getAggregationColumns is deprecated, use getValueColumns');\n    return this.columnModel.getValueColumns();\n  };\n\n  ColumnApi.prototype.removeAggregationColumn = function (colKey) {\n    console.error('AG Grid: removeAggregationColumn is deprecated, use removeValueColumn');\n    this.columnModel.removeValueColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.removeAggregationColumns = function (colKeys) {\n    console.error('AG Grid: removeAggregationColumns is deprecated, use removeValueColumns');\n    this.columnModel.removeValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.addAggregationColumn = function (colKey) {\n    console.error('AG Grid: addAggregationColumn is deprecated, use addValueColumn');\n    this.columnModel.addValueColumn(colKey, 'api');\n  };\n\n  ColumnApi.prototype.addAggregationColumns = function (colKeys) {\n    console.error('AG Grid: addAggregationColumns is deprecated, use addValueColumns');\n    this.columnModel.addValueColumns(colKeys, 'api');\n  };\n\n  ColumnApi.prototype.setColumnAggFunction = function (column, aggFunc) {\n    console.error('AG Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');\n    this.columnModel.setColumnAggFunc(column, aggFunc, 'api');\n  };\n\n  ColumnApi.prototype.getDisplayNameForCol = function (column) {\n    console.error('AG Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');\n    return this.getDisplayNameForColumn(column, null);\n  };\n\n  ColumnApi.prototype.setColumnState = function (columnState) {\n    return this.columnModel.applyColumnState({\n      state: columnState,\n      applyOrder: true\n    }, 'api');\n  };\n\n  __decorate([Autowired('columnModel')], ColumnApi.prototype, \"columnModel\", void 0);\n\n  __decorate([PreDestroy], ColumnApi.prototype, \"cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid\", null);\n\n  ColumnApi = __decorate([Bean('columnApi')], ColumnApi);\n  return ColumnApi;\n}();\n\nexport { ColumnApi };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-community/core/dist/es6/columns/columnApi.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","Autowired","Bean","PreDestroy","_","ColumnApi","prototype","sizeColumnsToFit","gridWidth","console","error","columnModel","setColumnGroupOpened","group","newValue","getColumnGroup","name","instanceId","getOriginalColumnGroup","getDisplayNameForColumn","column","location","getDisplayNameForColumnGroup","columnGroup","getColumn","getPrimaryColumn","applyColumnState","params","getColumnState","resetColumnState","getColumnGroupState","setColumnGroupState","stateItems","resetColumnGroupState","isPinning","isPinningLeft","isPinningRight","getDisplayedColAfter","col","getDisplayedColBefore","setColumnVisible","visible","setColumnsVisible","keys","setColumnPinned","pinned","setColumnsPinned","getAllColumns","getAllPrimaryColumns","getAllGridColumns","getDisplayedLeftColumns","getDisplayedCenterColumns","getDisplayedRightColumns","getAllDisplayedColumns","getAllDisplayedVirtualColumns","getViewportColumns","moveColumn","toIndex","warn","moveColumnByIndex","fromIndex","moveColumns","columnsToMoveKeys","moveRowGroupColumn","setColumnAggFunc","aggFunc","setColumnWidth","newWidth","finished","source","setColumnWidths","columnWidths","setPivotMode","pivotMode","isPivotMode","getSecondaryPivotColumn","pivotKeys","valueColKey","setValueColumns","colKeys","getValueColumns","removeValueColumn","colKey","removeValueColumns","addValueColumn","addValueColumns","setRowGroupColumns","removeRowGroupColumn","removeRowGroupColumns","addRowGroupColumn","addRowGroupColumns","getRowGroupColumns","setPivotColumns","removePivotColumn","removePivotColumns","addPivotColumn","addPivotColumns","getPivotColumns","getLeftDisplayedColumnGroups","getDisplayedTreeLeft","getCenterDisplayedColumnGroups","getDisplayedTreeCentre","getRightDisplayedColumnGroups","getDisplayedTreeRight","getAllDisplayedColumnGroups","getAllDisplayedTrees","autoSizeColumn","skipHeader","autoSizeColumns","autoSizeAllColumns","setSecondaryColumns","colDefs","getSecondaryColumns","getPrimaryColumns","cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid","setTimeout","removeAllReferences","bind","window","columnGroupOpened","hideColumns","colIds","hide","hideColumn","colId","setState","columnState","setColumnState","getState","resetState","getAggregationColumns","removeAggregationColumn","removeAggregationColumns","addAggregationColumn","addAggregationColumns","setColumnAggFunction","getDisplayNameForCol","state","applyOrder"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,SAASQ,SAAT,EAAoBC,IAApB,EAA0BC,UAA1B,QAA4C,oBAA5C;AACA,SAASC,CAAT,QAAkB,UAAlB;;AACA,IAAIC,SAAS,GAAkB,YAAY;AACvC,WAASA,SAAT,GAAqB,CACpB;;AACDA,EAAAA,SAAS,CAACC,SAAV,CAAoBC,gBAApB,GAAuC,UAAUC,SAAV,EAAqB;AACxD;AACA;AACA,QAAI,OAAOA,SAAP,KAAqB,WAAzB,EAAsC;AAClCC,MAAAA,OAAO,CAACC,KAAR,CAAc,qEAAd;AACH;;AACD,SAAKC,WAAL,CAAiBJ,gBAAjB,CAAkCC,SAAlC,EAA6C,KAA7C;AACH,GAPD;;AAQAH,EAAAA,SAAS,CAACC,SAAV,CAAoBM,oBAApB,GAA2C,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;AAAE,SAAKH,WAAL,CAAiBC,oBAAjB,CAAsCC,KAAtC,EAA6CC,QAA7C,EAAuD,KAAvD;AAAgE,GAAxI;;AACAT,EAAAA,SAAS,CAACC,SAAV,CAAoBS,cAApB,GAAqC,UAAUC,IAAV,EAAgBC,UAAhB,EAA4B;AAAE,WAAO,KAAKN,WAAL,CAAiBI,cAAjB,CAAgCC,IAAhC,EAAsCC,UAAtC,CAAP;AAA2D,GAA9H;;AACAZ,EAAAA,SAAS,CAACC,SAAV,CAAoBY,sBAApB,GAA6C,UAAUF,IAAV,EAAgB;AAAE,WAAO,KAAKL,WAAL,CAAiBO,sBAAjB,CAAwCF,IAAxC,CAAP;AAAuD,GAAtH;;AACAX,EAAAA,SAAS,CAACC,SAAV,CAAoBa,uBAApB,GAA8C,UAAUC,MAAV,EAAkBC,QAAlB,EAA4B;AAAE,WAAO,KAAKV,WAAL,CAAiBQ,uBAAjB,CAAyCC,MAAzC,EAAiDC,QAAjD,KAA8D,EAArE;AAA0E,GAAtJ;;AACAhB,EAAAA,SAAS,CAACC,SAAV,CAAoBgB,4BAApB,GAAmD,UAAUC,WAAV,EAAuBF,QAAvB,EAAiC;AAAE,WAAO,KAAKV,WAAL,CAAiBW,4BAAjB,CAA8CC,WAA9C,EAA2DF,QAA3D,KAAwE,EAA/E;AAAoF,GAA1K;;AACAhB,EAAAA,SAAS,CAACC,SAAV,CAAoBkB,SAApB,GAAgC,UAAUpC,GAAV,EAAe;AAAE,WAAO,KAAKuB,WAAL,CAAiBc,gBAAjB,CAAkCrC,GAAlC,CAAP;AAAgD,GAAjG;;AACAiB,EAAAA,SAAS,CAACC,SAAV,CAAoBoB,gBAApB,GAAuC,UAAUC,MAAV,EAAkB;AAAE,WAAO,KAAKhB,WAAL,CAAiBe,gBAAjB,CAAkCC,MAAlC,EAA0C,KAA1C,CAAP;AAA0D,GAArH;;AACAtB,EAAAA,SAAS,CAACC,SAAV,CAAoBsB,cAApB,GAAqC,YAAY;AAAE,WAAO,KAAKjB,WAAL,CAAiBiB,cAAjB,EAAP;AAA2C,GAA9F;;AACAvB,EAAAA,SAAS,CAACC,SAAV,CAAoBuB,gBAApB,GAAuC,YAAY;AAAE,SAAKlB,WAAL,CAAiBkB,gBAAjB,CAAkC,KAAlC;AAA2C,GAAhG;;AACAxB,EAAAA,SAAS,CAACC,SAAV,CAAoBwB,mBAApB,GAA0C,YAAY;AAAE,WAAO,KAAKnB,WAAL,CAAiBmB,mBAAjB,EAAP;AAAgD,GAAxG;;AACAzB,EAAAA,SAAS,CAACC,SAAV,CAAoByB,mBAApB,GAA0C,UAAUC,UAAV,EAAsB;AAAE,SAAKrB,WAAL,CAAiBoB,mBAAjB,CAAqCC,UAArC,EAAiD,KAAjD;AAA0D,GAA5H;;AACA3B,EAAAA,SAAS,CAACC,SAAV,CAAoB2B,qBAApB,GAA4C,YAAY;AAAE,SAAKtB,WAAL,CAAiBsB,qBAAjB,CAAuC,KAAvC;AAAgD,GAA1G;;AACA5B,EAAAA,SAAS,CAACC,SAAV,CAAoB4B,SAApB,GAAgC,YAAY;AAAE,WAAO,KAAKvB,WAAL,CAAiBwB,aAAjB,MAAoC,KAAKxB,WAAL,CAAiByB,cAAjB,EAA3C;AAA+E,GAA7H;;AACA/B,EAAAA,SAAS,CAACC,SAAV,CAAoB6B,aAApB,GAAoC,YAAY;AAAE,WAAO,KAAKxB,WAAL,CAAiBwB,aAAjB,EAAP;AAA0C,GAA5F;;AACA9B,EAAAA,SAAS,CAACC,SAAV,CAAoB8B,cAApB,GAAqC,YAAY;AAAE,WAAO,KAAKzB,WAAL,CAAiByB,cAAjB,EAAP;AAA2C,GAA9F;;AACA/B,EAAAA,SAAS,CAACC,SAAV,CAAoB+B,oBAApB,GAA2C,UAAUC,GAAV,EAAe;AAAE,WAAO,KAAK3B,WAAL,CAAiB0B,oBAAjB,CAAsCC,GAAtC,CAAP;AAAoD,GAAhH;;AACAjC,EAAAA,SAAS,CAACC,SAAV,CAAoBiC,qBAApB,GAA4C,UAAUD,GAAV,EAAe;AAAE,WAAO,KAAK3B,WAAL,CAAiB4B,qBAAjB,CAAuCD,GAAvC,CAAP;AAAqD,GAAlH;;AACAjC,EAAAA,SAAS,CAACC,SAAV,CAAoBkC,gBAApB,GAAuC,UAAUpD,GAAV,EAAeqD,OAAf,EAAwB;AAAE,SAAK9B,WAAL,CAAiB6B,gBAAjB,CAAkCpD,GAAlC,EAAuCqD,OAAvC,EAAgD,KAAhD;AAAyD,GAA1H;;AACApC,EAAAA,SAAS,CAACC,SAAV,CAAoBoC,iBAApB,GAAwC,UAAUC,IAAV,EAAgBF,OAAhB,EAAyB;AAAE,SAAK9B,WAAL,CAAiB+B,iBAAjB,CAAmCC,IAAnC,EAAyCF,OAAzC,EAAkD,KAAlD;AAA2D,GAA9H;;AACApC,EAAAA,SAAS,CAACC,SAAV,CAAoBsC,eAApB,GAAsC,UAAUxD,GAAV,EAAeyD,MAAf,EAAuB;AAAE,SAAKlC,WAAL,CAAiBiC,eAAjB,CAAiCxD,GAAjC,EAAsCyD,MAAtC,EAA8C,KAA9C;AAAuD,GAAtH;;AACAxC,EAAAA,SAAS,CAACC,SAAV,CAAoBwC,gBAApB,GAAuC,UAAUH,IAAV,EAAgBE,MAAhB,EAAwB;AAAE,SAAKlC,WAAL,CAAiBmC,gBAAjB,CAAkCH,IAAlC,EAAwCE,MAAxC,EAAgD,KAAhD;AAAyD,GAA1H;;AACAxC,EAAAA,SAAS,CAACC,SAAV,CAAoByC,aAApB,GAAoC,YAAY;AAAE,WAAO,KAAKpC,WAAL,CAAiBqC,oBAAjB,EAAP;AAAiD,GAAnG;;AACA3C,EAAAA,SAAS,CAACC,SAAV,CAAoB2C,iBAApB,GAAwC,YAAY;AAAE,WAAO,KAAKtC,WAAL,CAAiBsC,iBAAjB,EAAP;AAA8C,GAApG;;AACA5C,EAAAA,SAAS,CAACC,SAAV,CAAoB4C,uBAApB,GAA8C,YAAY;AAAE,WAAO,KAAKvC,WAAL,CAAiBuC,uBAAjB,EAAP;AAAoD,GAAhH;;AACA7C,EAAAA,SAAS,CAACC,SAAV,CAAoB6C,yBAApB,GAAgD,YAAY;AAAE,WAAO,KAAKxC,WAAL,CAAiBwC,yBAAjB,EAAP;AAAsD,GAApH;;AACA9C,EAAAA,SAAS,CAACC,SAAV,CAAoB8C,wBAApB,GAA+C,YAAY;AAAE,WAAO,KAAKzC,WAAL,CAAiByC,wBAAjB,EAAP;AAAqD,GAAlH;;AACA/C,EAAAA,SAAS,CAACC,SAAV,CAAoB+C,sBAApB,GAA6C,YAAY;AAAE,WAAO,KAAK1C,WAAL,CAAiB0C,sBAAjB,EAAP;AAAmD,GAA9G;;AACAhD,EAAAA,SAAS,CAACC,SAAV,CAAoBgD,6BAApB,GAAoD,YAAY;AAAE,WAAO,KAAK3C,WAAL,CAAiB4C,kBAAjB,EAAP;AAA+C,GAAjH;;AACAlD,EAAAA,SAAS,CAACC,SAAV,CAAoBkD,UAApB,GAAiC,UAAUpE,GAAV,EAAeqE,OAAf,EAAwB;AACrD,QAAI,OAAOrE,GAAP,KAAe,QAAnB,EAA6B;AACzB;AACAqB,MAAAA,OAAO,CAACiD,IAAR,CAAa,6LAAb;AACA,WAAK/C,WAAL,CAAiBgD,iBAAjB,CAAmCvE,GAAnC,EAAwCqE,OAAxC,EAAiD,KAAjD;AACH,KAJD,MAKK;AACD,WAAK9C,WAAL,CAAiB6C,UAAjB,CAA4BpE,GAA5B,EAAiCqE,OAAjC,EAA0C,KAA1C;AACH;AACJ,GATD;;AAUApD,EAAAA,SAAS,CAACC,SAAV,CAAoBqD,iBAApB,GAAwC,UAAUC,SAAV,EAAqBH,OAArB,EAA8B;AAAE,SAAK9C,WAAL,CAAiBgD,iBAAjB,CAAmCC,SAAnC,EAA8CH,OAA9C,EAAuD,KAAvD;AAAgE,GAAxI;;AACApD,EAAAA,SAAS,CAACC,SAAV,CAAoBuD,WAApB,GAAkC,UAAUC,iBAAV,EAA6BL,OAA7B,EAAsC;AAAE,SAAK9C,WAAL,CAAiBkD,WAAjB,CAA6BC,iBAA7B,EAAgDL,OAAhD,EAAyD,KAAzD;AAAkE,GAA5I;;AACApD,EAAAA,SAAS,CAACC,SAAV,CAAoByD,kBAApB,GAAyC,UAAUH,SAAV,EAAqBH,OAArB,EAA8B;AAAE,SAAK9C,WAAL,CAAiBoD,kBAAjB,CAAoCH,SAApC,EAA+CH,OAA/C;AAA0D,GAAnI;;AACApD,EAAAA,SAAS,CAACC,SAAV,CAAoB0D,gBAApB,GAAuC,UAAU5E,GAAV,EAAe6E,OAAf,EAAwB;AAAE,SAAKtD,WAAL,CAAiBqD,gBAAjB,CAAkC5E,GAAlC,EAAuC6E,OAAvC;AAAkD,GAAnH;;AACA5D,EAAAA,SAAS,CAACC,SAAV,CAAoB4D,cAApB,GAAqC,UAAU9E,GAAV,EAAe+E,QAAf,EAAyBC,QAAzB,EAAmCC,MAAnC,EAA2C;AAC5E,QAAID,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,MAAAA,QAAQ,GAAG,IAAX;AAAkB;;AAC7C,SAAKzD,WAAL,CAAiB2D,eAAjB,CAAiC,CAAC;AAAElF,MAAAA,GAAG,EAAEA,GAAP;AAAY+E,MAAAA,QAAQ,EAAEA;AAAtB,KAAD,CAAjC,EAAqE,KAArE,EAA4EC,QAA5E,EAAsFC,MAAtF;AACH,GAHD;;AAIAhE,EAAAA,SAAS,CAACC,SAAV,CAAoBgE,eAApB,GAAsC,UAAUC,YAAV,EAAwBH,QAAxB,EAAkCC,MAAlC,EAA0C;AAC5E,QAAID,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,MAAAA,QAAQ,GAAG,IAAX;AAAkB;;AAC7C,SAAKzD,WAAL,CAAiB2D,eAAjB,CAAiCC,YAAjC,EAA+C,KAA/C,EAAsDH,QAAtD,EAAgEC,MAAhE;AACH,GAHD;;AAIAhE,EAAAA,SAAS,CAACC,SAAV,CAAoBkE,YAApB,GAAmC,UAAUC,SAAV,EAAqB;AAAE,SAAK9D,WAAL,CAAiB6D,YAAjB,CAA8BC,SAA9B;AAA2C,GAArG;;AACApE,EAAAA,SAAS,CAACC,SAAV,CAAoBoE,WAApB,GAAkC,YAAY;AAAE,WAAO,KAAK/D,WAAL,CAAiB+D,WAAjB,EAAP;AAAwC,GAAxF;;AACArE,EAAAA,SAAS,CAACC,SAAV,CAAoBqE,uBAApB,GAA8C,UAAUC,SAAV,EAAqBC,WAArB,EAAkC;AAAE,WAAO,KAAKlE,WAAL,CAAiBgE,uBAAjB,CAAyCC,SAAzC,EAAoDC,WAApD,CAAP;AAA0E,GAA5J;;AACAxE,EAAAA,SAAS,CAACC,SAAV,CAAoBwE,eAApB,GAAsC,UAAUC,OAAV,EAAmB;AAAE,SAAKpE,WAAL,CAAiBmE,eAAjB,CAAiCC,OAAjC,EAA0C,KAA1C;AAAmD,GAA9G;;AACA1E,EAAAA,SAAS,CAACC,SAAV,CAAoB0E,eAApB,GAAsC,YAAY;AAAE,WAAO,KAAKrE,WAAL,CAAiBqE,eAAjB,EAAP;AAA4C,GAAhG;;AACA3E,EAAAA,SAAS,CAACC,SAAV,CAAoB2E,iBAApB,GAAwC,UAAUC,MAAV,EAAkB;AAAE,SAAKvE,WAAL,CAAiBsE,iBAAjB,CAAmCC,MAAnC,EAA2C,KAA3C;AAAoD,GAAhH;;AACA7E,EAAAA,SAAS,CAACC,SAAV,CAAoB6E,kBAApB,GAAyC,UAAUJ,OAAV,EAAmB;AAAE,SAAKpE,WAAL,CAAiBwE,kBAAjB,CAAoCJ,OAApC,EAA6C,KAA7C;AAAsD,GAApH;;AACA1E,EAAAA,SAAS,CAACC,SAAV,CAAoB8E,cAApB,GAAqC,UAAUF,MAAV,EAAkB;AAAE,SAAKvE,WAAL,CAAiByE,cAAjB,CAAgCF,MAAhC,EAAwC,KAAxC;AAAiD,GAA1G;;AACA7E,EAAAA,SAAS,CAACC,SAAV,CAAoB+E,eAApB,GAAsC,UAAUN,OAAV,EAAmB;AAAE,SAAKpE,WAAL,CAAiB0E,eAAjB,CAAiCN,OAAjC,EAA0C,KAA1C;AAAmD,GAA9G;;AACA1E,EAAAA,SAAS,CAACC,SAAV,CAAoBgF,kBAApB,GAAyC,UAAUP,OAAV,EAAmB;AAAE,SAAKpE,WAAL,CAAiB2E,kBAAjB,CAAoCP,OAApC,EAA6C,KAA7C;AAAsD,GAApH;;AACA1E,EAAAA,SAAS,CAACC,SAAV,CAAoBiF,oBAApB,GAA2C,UAAUL,MAAV,EAAkB;AAAE,SAAKvE,WAAL,CAAiB4E,oBAAjB,CAAsCL,MAAtC,EAA8C,KAA9C;AAAuD,GAAtH;;AACA7E,EAAAA,SAAS,CAACC,SAAV,CAAoBkF,qBAApB,GAA4C,UAAUT,OAAV,EAAmB;AAAE,SAAKpE,WAAL,CAAiB6E,qBAAjB,CAAuCT,OAAvC,EAAgD,KAAhD;AAAyD,GAA1H;;AACA1E,EAAAA,SAAS,CAACC,SAAV,CAAoBmF,iBAApB,GAAwC,UAAUP,MAAV,EAAkB;AAAE,SAAKvE,WAAL,CAAiB8E,iBAAjB,CAAmCP,MAAnC,EAA2C,KAA3C;AAAoD,GAAhH;;AACA7E,EAAAA,SAAS,CAACC,SAAV,CAAoBoF,kBAApB,GAAyC,UAAUX,OAAV,EAAmB;AAAE,SAAKpE,WAAL,CAAiB+E,kBAAjB,CAAoCX,OAApC,EAA6C,KAA7C;AAAsD,GAApH;;AACA1E,EAAAA,SAAS,CAACC,SAAV,CAAoBqF,kBAApB,GAAyC,YAAY;AAAE,WAAO,KAAKhF,WAAL,CAAiBgF,kBAAjB,EAAP;AAA+C,GAAtG;;AACAtF,EAAAA,SAAS,CAACC,SAAV,CAAoBsF,eAApB,GAAsC,UAAUb,OAAV,EAAmB;AAAE,SAAKpE,WAAL,CAAiBiF,eAAjB,CAAiCb,OAAjC,EAA0C,KAA1C;AAAmD,GAA9G;;AACA1E,EAAAA,SAAS,CAACC,SAAV,CAAoBuF,iBAApB,GAAwC,UAAUX,MAAV,EAAkB;AAAE,SAAKvE,WAAL,CAAiBkF,iBAAjB,CAAmCX,MAAnC,EAA2C,KAA3C;AAAoD,GAAhH;;AACA7E,EAAAA,SAAS,CAACC,SAAV,CAAoBwF,kBAApB,GAAyC,UAAUf,OAAV,EAAmB;AAAE,SAAKpE,WAAL,CAAiBmF,kBAAjB,CAAoCf,OAApC,EAA6C,KAA7C;AAAsD,GAApH;;AACA1E,EAAAA,SAAS,CAACC,SAAV,CAAoByF,cAApB,GAAqC,UAAUb,MAAV,EAAkB;AAAE,SAAKvE,WAAL,CAAiBoF,cAAjB,CAAgCb,MAAhC,EAAwC,KAAxC;AAAiD,GAA1G;;AACA7E,EAAAA,SAAS,CAACC,SAAV,CAAoB0F,eAApB,GAAsC,UAAUjB,OAAV,EAAmB;AAAE,SAAKpE,WAAL,CAAiBqF,eAAjB,CAAiCjB,OAAjC,EAA0C,KAA1C;AAAmD,GAA9G;;AACA1E,EAAAA,SAAS,CAACC,SAAV,CAAoB2F,eAApB,GAAsC,YAAY;AAAE,WAAO,KAAKtF,WAAL,CAAiBsF,eAAjB,EAAP;AAA4C,GAAhG;;AACA5F,EAAAA,SAAS,CAACC,SAAV,CAAoB4F,4BAApB,GAAmD,YAAY;AAAE,WAAO,KAAKvF,WAAL,CAAiBwF,oBAAjB,EAAP;AAAiD,GAAlH;;AACA9F,EAAAA,SAAS,CAACC,SAAV,CAAoB8F,8BAApB,GAAqD,YAAY;AAAE,WAAO,KAAKzF,WAAL,CAAiB0F,sBAAjB,EAAP;AAAmD,GAAtH;;AACAhG,EAAAA,SAAS,CAACC,SAAV,CAAoBgG,6BAApB,GAAoD,YAAY;AAAE,WAAO,KAAK3F,WAAL,CAAiB4F,qBAAjB,EAAP;AAAkD,GAApH;;AACAlG,EAAAA,SAAS,CAACC,SAAV,CAAoBkG,2BAApB,GAAkD,YAAY;AAAE,WAAO,KAAK7F,WAAL,CAAiB8F,oBAAjB,EAAP;AAAiD,GAAjH;;AACApG,EAAAA,SAAS,CAACC,SAAV,CAAoBoG,cAApB,GAAqC,UAAUtH,GAAV,EAAeuH,UAAf,EAA2B;AAAE,WAAO,KAAKhG,WAAL,CAAiB+F,cAAjB,CAAgCtH,GAAhC,EAAqCuH,UAArC,EAAiD,KAAjD,CAAP;AAAiE,GAAnI;;AACAtG,EAAAA,SAAS,CAACC,SAAV,CAAoBsG,eAApB,GAAsC,UAAUjE,IAAV,EAAgBgE,UAAhB,EAA4B;AAAE,WAAO,KAAKhG,WAAL,CAAiBiG,eAAjB,CAAiCjE,IAAjC,EAAuCgE,UAAvC,EAAmD,KAAnD,CAAP;AAAmE,GAAvI;;AACAtG,EAAAA,SAAS,CAACC,SAAV,CAAoBuG,kBAApB,GAAyC,UAAUF,UAAV,EAAsB;AAAE,SAAKhG,WAAL,CAAiBkG,kBAAjB,CAAoCF,UAApC,EAAgD,KAAhD;AAAyD,GAA1H;;AACAtG,EAAAA,SAAS,CAACC,SAAV,CAAoBwG,mBAApB,GAA0C,UAAUC,OAAV,EAAmB;AAAE,SAAKpG,WAAL,CAAiBmG,mBAAjB,CAAqCC,OAArC,EAA8C,KAA9C;AAAuD,GAAtH;;AACA1G,EAAAA,SAAS,CAACC,SAAV,CAAoB0G,mBAApB,GAA0C,YAAY;AAAE,WAAO,KAAKrG,WAAL,CAAiBqG,mBAAjB,EAAP;AAAgD,GAAxG;;AACA3G,EAAAA,SAAS,CAACC,SAAV,CAAoB2G,iBAApB,GAAwC,YAAY;AAAE,WAAO,KAAKtG,WAAL,CAAiBqC,oBAAjB,EAAP;AAAiD,GAAvG;;AACA3C,EAAAA,SAAS,CAACC,SAAV,CAAoB4G,sFAApB,GAA6G,YAAY;AACrH;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,UAAU,CAAC/G,CAAC,CAACgH,mBAAF,CAAsBC,IAAtB,CAA2BC,MAA3B,EAAmC,IAAnC,EAAyC,YAAzC,CAAD,EAAyD,GAAzD,CAAV;AACH,GARD,CA5FuC,CAqGvC;AACA;AACA;AACA;AACA;;;AACAjH,EAAAA,SAAS,CAACC,SAAV,CAAoBiH,iBAApB,GAAwC,UAAU1G,KAAV,EAAiBC,QAAjB,EAA2B;AAC/DL,IAAAA,OAAO,CAACC,KAAR,CAAc,uEAAd;AACA,SAAKE,oBAAL,CAA0BC,KAA1B,EAAiCC,QAAjC;AACH,GAHD;;AAIAT,EAAAA,SAAS,CAACC,SAAV,CAAoBkH,WAApB,GAAkC,UAAUC,MAAV,EAAkBC,IAAlB,EAAwB;AACtDjH,IAAAA,OAAO,CAACC,KAAR,CAAc,2DAAd;AACA,SAAKC,WAAL,CAAiB+B,iBAAjB,CAAmC+E,MAAnC,EAA2C,CAACC,IAA5C,EAAkD,KAAlD;AACH,GAHD;;AAIArH,EAAAA,SAAS,CAACC,SAAV,CAAoBqH,UAApB,GAAiC,UAAUC,KAAV,EAAiBF,IAAjB,EAAuB;AACpDjH,IAAAA,OAAO,CAACC,KAAR,CAAc,yDAAd;AACA,SAAKC,WAAL,CAAiB6B,gBAAjB,CAAkCoF,KAAlC,EAAyC,CAACF,IAA1C,EAAgD,KAAhD;AACH,GAHD;;AAIArH,EAAAA,SAAS,CAACC,SAAV,CAAoBuH,QAApB,GAA+B,UAAUC,WAAV,EAAuB;AAClDrH,IAAAA,OAAO,CAACC,KAAR,CAAc,qDAAd;AACA,WAAO,KAAKqH,cAAL,CAAoBD,WAApB,CAAP;AACH,GAHD;;AAIAzH,EAAAA,SAAS,CAACC,SAAV,CAAoB0H,QAApB,GAA+B,YAAY;AACvCvH,IAAAA,OAAO,CAACC,KAAR,CAAc,qDAAd;AACA,WAAO,KAAKkB,cAAL,EAAP;AACH,GAHD;;AAIAvB,EAAAA,SAAS,CAACC,SAAV,CAAoB2H,UAApB,GAAiC,YAAY;AACzCxH,IAAAA,OAAO,CAACC,KAAR,CAAc,yDAAd;AACA,SAAKmB,gBAAL;AACH,GAHD;;AAIAxB,EAAAA,SAAS,CAACC,SAAV,CAAoB4H,qBAApB,GAA4C,YAAY;AACpDzH,IAAAA,OAAO,CAACC,KAAR,CAAc,mEAAd;AACA,WAAO,KAAKC,WAAL,CAAiBqE,eAAjB,EAAP;AACH,GAHD;;AAIA3E,EAAAA,SAAS,CAACC,SAAV,CAAoB6H,uBAApB,GAA8C,UAAUjD,MAAV,EAAkB;AAC5DzE,IAAAA,OAAO,CAACC,KAAR,CAAc,uEAAd;AACA,SAAKC,WAAL,CAAiBsE,iBAAjB,CAAmCC,MAAnC,EAA2C,KAA3C;AACH,GAHD;;AAIA7E,EAAAA,SAAS,CAACC,SAAV,CAAoB8H,wBAApB,GAA+C,UAAUrD,OAAV,EAAmB;AAC9DtE,IAAAA,OAAO,CAACC,KAAR,CAAc,yEAAd;AACA,SAAKC,WAAL,CAAiBwE,kBAAjB,CAAoCJ,OAApC,EAA6C,KAA7C;AACH,GAHD;;AAIA1E,EAAAA,SAAS,CAACC,SAAV,CAAoB+H,oBAApB,GAA2C,UAAUnD,MAAV,EAAkB;AACzDzE,IAAAA,OAAO,CAACC,KAAR,CAAc,iEAAd;AACA,SAAKC,WAAL,CAAiByE,cAAjB,CAAgCF,MAAhC,EAAwC,KAAxC;AACH,GAHD;;AAIA7E,EAAAA,SAAS,CAACC,SAAV,CAAoBgI,qBAApB,GAA4C,UAAUvD,OAAV,EAAmB;AAC3DtE,IAAAA,OAAO,CAACC,KAAR,CAAc,mEAAd;AACA,SAAKC,WAAL,CAAiB0E,eAAjB,CAAiCN,OAAjC,EAA0C,KAA1C;AACH,GAHD;;AAIA1E,EAAAA,SAAS,CAACC,SAAV,CAAoBiI,oBAApB,GAA2C,UAAUnH,MAAV,EAAkB6C,OAAlB,EAA2B;AAClExD,IAAAA,OAAO,CAACC,KAAR,CAAc,mEAAd;AACA,SAAKC,WAAL,CAAiBqD,gBAAjB,CAAkC5C,MAAlC,EAA0C6C,OAA1C,EAAmD,KAAnD;AACH,GAHD;;AAIA5D,EAAAA,SAAS,CAACC,SAAV,CAAoBkI,oBAApB,GAA2C,UAAUpH,MAAV,EAAkB;AACzDX,IAAAA,OAAO,CAACC,KAAR,CAAc,0EAAd;AACA,WAAO,KAAKS,uBAAL,CAA6BC,MAA7B,EAAqC,IAArC,CAAP;AACH,GAHD;;AAIAf,EAAAA,SAAS,CAACC,SAAV,CAAoByH,cAApB,GAAqC,UAAUD,WAAV,EAAuB;AACxD,WAAO,KAAKnH,WAAL,CAAiBe,gBAAjB,CAAkC;AAAE+G,MAAAA,KAAK,EAAEX,WAAT;AAAsBY,MAAAA,UAAU,EAAE;AAAlC,KAAlC,EAA4E,KAA5E,CAAP;AACH,GAFD;;AAGAzJ,EAAAA,UAAU,CAAC,CACPgB,SAAS,CAAC,aAAD,CADF,CAAD,EAEPI,SAAS,CAACC,SAFH,EAEc,aAFd,EAE6B,KAAK,CAFlC,CAAV;;AAGArB,EAAAA,UAAU,CAAC,CACPkB,UADO,CAAD,EAEPE,SAAS,CAACC,SAFH,EAEc,wFAFd,EAEwG,IAFxG,CAAV;;AAGAD,EAAAA,SAAS,GAAGpB,UAAU,CAAC,CACnBiB,IAAI,CAAC,WAAD,CADe,CAAD,EAEnBG,SAFmB,CAAtB;AAGA,SAAOA,SAAP;AACH,CA3K8B,EAA/B;;AA4KA,SAASA,SAAT","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.0.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PreDestroy } from \"../context/context\";\nimport { _ } from \"../utils\";\nvar ColumnApi = /** @class */ (function () {\n    function ColumnApi() {\n    }\n    ColumnApi.prototype.sizeColumnsToFit = function (gridWidth) {\n        // AG-3403 validate that gridWidth is provided because this method has the same name as\n        // a method on the grid API that takes no arguments, and it's easy to confuse the two\n        if (typeof gridWidth === \"undefined\") {\n            console.error('AG Grid: missing parameter to columnApi.sizeColumnsToFit(gridWidth)');\n        }\n        this.columnModel.sizeColumnsToFit(gridWidth, 'api');\n    };\n    ColumnApi.prototype.setColumnGroupOpened = function (group, newValue) { this.columnModel.setColumnGroupOpened(group, newValue, 'api'); };\n    ColumnApi.prototype.getColumnGroup = function (name, instanceId) { return this.columnModel.getColumnGroup(name, instanceId); };\n    ColumnApi.prototype.getOriginalColumnGroup = function (name) { return this.columnModel.getOriginalColumnGroup(name); };\n    ColumnApi.prototype.getDisplayNameForColumn = function (column, location) { return this.columnModel.getDisplayNameForColumn(column, location) || ''; };\n    ColumnApi.prototype.getDisplayNameForColumnGroup = function (columnGroup, location) { return this.columnModel.getDisplayNameForColumnGroup(columnGroup, location) || ''; };\n    ColumnApi.prototype.getColumn = function (key) { return this.columnModel.getPrimaryColumn(key); };\n    ColumnApi.prototype.applyColumnState = function (params) { return this.columnModel.applyColumnState(params, 'api'); };\n    ColumnApi.prototype.getColumnState = function () { return this.columnModel.getColumnState(); };\n    ColumnApi.prototype.resetColumnState = function () { this.columnModel.resetColumnState('api'); };\n    ColumnApi.prototype.getColumnGroupState = function () { return this.columnModel.getColumnGroupState(); };\n    ColumnApi.prototype.setColumnGroupState = function (stateItems) { this.columnModel.setColumnGroupState(stateItems, 'api'); };\n    ColumnApi.prototype.resetColumnGroupState = function () { this.columnModel.resetColumnGroupState('api'); };\n    ColumnApi.prototype.isPinning = function () { return this.columnModel.isPinningLeft() || this.columnModel.isPinningRight(); };\n    ColumnApi.prototype.isPinningLeft = function () { return this.columnModel.isPinningLeft(); };\n    ColumnApi.prototype.isPinningRight = function () { return this.columnModel.isPinningRight(); };\n    ColumnApi.prototype.getDisplayedColAfter = function (col) { return this.columnModel.getDisplayedColAfter(col); };\n    ColumnApi.prototype.getDisplayedColBefore = function (col) { return this.columnModel.getDisplayedColBefore(col); };\n    ColumnApi.prototype.setColumnVisible = function (key, visible) { this.columnModel.setColumnVisible(key, visible, 'api'); };\n    ColumnApi.prototype.setColumnsVisible = function (keys, visible) { this.columnModel.setColumnsVisible(keys, visible, 'api'); };\n    ColumnApi.prototype.setColumnPinned = function (key, pinned) { this.columnModel.setColumnPinned(key, pinned, 'api'); };\n    ColumnApi.prototype.setColumnsPinned = function (keys, pinned) { this.columnModel.setColumnsPinned(keys, pinned, 'api'); };\n    ColumnApi.prototype.getAllColumns = function () { return this.columnModel.getAllPrimaryColumns(); };\n    ColumnApi.prototype.getAllGridColumns = function () { return this.columnModel.getAllGridColumns(); };\n    ColumnApi.prototype.getDisplayedLeftColumns = function () { return this.columnModel.getDisplayedLeftColumns(); };\n    ColumnApi.prototype.getDisplayedCenterColumns = function () { return this.columnModel.getDisplayedCenterColumns(); };\n    ColumnApi.prototype.getDisplayedRightColumns = function () { return this.columnModel.getDisplayedRightColumns(); };\n    ColumnApi.prototype.getAllDisplayedColumns = function () { return this.columnModel.getAllDisplayedColumns(); };\n    ColumnApi.prototype.getAllDisplayedVirtualColumns = function () { return this.columnModel.getViewportColumns(); };\n    ColumnApi.prototype.moveColumn = function (key, toIndex) {\n        if (typeof key === 'number') {\n            // moveColumn used to take indexes, so this is advising user who hasn't moved to new method name\n            console.warn('AG Grid: you are using moveColumn(fromIndex, toIndex) - moveColumn takes a column key and a destination index, not two indexes, to move with indexes use moveColumnByIndex(from,to) instead');\n            this.columnModel.moveColumnByIndex(key, toIndex, 'api');\n        }\n        else {\n            this.columnModel.moveColumn(key, toIndex, 'api');\n        }\n    };\n    ColumnApi.prototype.moveColumnByIndex = function (fromIndex, toIndex) { this.columnModel.moveColumnByIndex(fromIndex, toIndex, 'api'); };\n    ColumnApi.prototype.moveColumns = function (columnsToMoveKeys, toIndex) { this.columnModel.moveColumns(columnsToMoveKeys, toIndex, 'api'); };\n    ColumnApi.prototype.moveRowGroupColumn = function (fromIndex, toIndex) { this.columnModel.moveRowGroupColumn(fromIndex, toIndex); };\n    ColumnApi.prototype.setColumnAggFunc = function (key, aggFunc) { this.columnModel.setColumnAggFunc(key, aggFunc); };\n    ColumnApi.prototype.setColumnWidth = function (key, newWidth, finished, source) {\n        if (finished === void 0) { finished = true; }\n        this.columnModel.setColumnWidths([{ key: key, newWidth: newWidth }], false, finished, source);\n    };\n    ColumnApi.prototype.setColumnWidths = function (columnWidths, finished, source) {\n        if (finished === void 0) { finished = true; }\n        this.columnModel.setColumnWidths(columnWidths, false, finished, source);\n    };\n    ColumnApi.prototype.setPivotMode = function (pivotMode) { this.columnModel.setPivotMode(pivotMode); };\n    ColumnApi.prototype.isPivotMode = function () { return this.columnModel.isPivotMode(); };\n    ColumnApi.prototype.getSecondaryPivotColumn = function (pivotKeys, valueColKey) { return this.columnModel.getSecondaryPivotColumn(pivotKeys, valueColKey); };\n    ColumnApi.prototype.setValueColumns = function (colKeys) { this.columnModel.setValueColumns(colKeys, 'api'); };\n    ColumnApi.prototype.getValueColumns = function () { return this.columnModel.getValueColumns(); };\n    ColumnApi.prototype.removeValueColumn = function (colKey) { this.columnModel.removeValueColumn(colKey, 'api'); };\n    ColumnApi.prototype.removeValueColumns = function (colKeys) { this.columnModel.removeValueColumns(colKeys, 'api'); };\n    ColumnApi.prototype.addValueColumn = function (colKey) { this.columnModel.addValueColumn(colKey, 'api'); };\n    ColumnApi.prototype.addValueColumns = function (colKeys) { this.columnModel.addValueColumns(colKeys, 'api'); };\n    ColumnApi.prototype.setRowGroupColumns = function (colKeys) { this.columnModel.setRowGroupColumns(colKeys, 'api'); };\n    ColumnApi.prototype.removeRowGroupColumn = function (colKey) { this.columnModel.removeRowGroupColumn(colKey, 'api'); };\n    ColumnApi.prototype.removeRowGroupColumns = function (colKeys) { this.columnModel.removeRowGroupColumns(colKeys, 'api'); };\n    ColumnApi.prototype.addRowGroupColumn = function (colKey) { this.columnModel.addRowGroupColumn(colKey, 'api'); };\n    ColumnApi.prototype.addRowGroupColumns = function (colKeys) { this.columnModel.addRowGroupColumns(colKeys, 'api'); };\n    ColumnApi.prototype.getRowGroupColumns = function () { return this.columnModel.getRowGroupColumns(); };\n    ColumnApi.prototype.setPivotColumns = function (colKeys) { this.columnModel.setPivotColumns(colKeys, 'api'); };\n    ColumnApi.prototype.removePivotColumn = function (colKey) { this.columnModel.removePivotColumn(colKey, 'api'); };\n    ColumnApi.prototype.removePivotColumns = function (colKeys) { this.columnModel.removePivotColumns(colKeys, 'api'); };\n    ColumnApi.prototype.addPivotColumn = function (colKey) { this.columnModel.addPivotColumn(colKey, 'api'); };\n    ColumnApi.prototype.addPivotColumns = function (colKeys) { this.columnModel.addPivotColumns(colKeys, 'api'); };\n    ColumnApi.prototype.getPivotColumns = function () { return this.columnModel.getPivotColumns(); };\n    ColumnApi.prototype.getLeftDisplayedColumnGroups = function () { return this.columnModel.getDisplayedTreeLeft(); };\n    ColumnApi.prototype.getCenterDisplayedColumnGroups = function () { return this.columnModel.getDisplayedTreeCentre(); };\n    ColumnApi.prototype.getRightDisplayedColumnGroups = function () { return this.columnModel.getDisplayedTreeRight(); };\n    ColumnApi.prototype.getAllDisplayedColumnGroups = function () { return this.columnModel.getAllDisplayedTrees(); };\n    ColumnApi.prototype.autoSizeColumn = function (key, skipHeader) { return this.columnModel.autoSizeColumn(key, skipHeader, 'api'); };\n    ColumnApi.prototype.autoSizeColumns = function (keys, skipHeader) { return this.columnModel.autoSizeColumns(keys, skipHeader, 'api'); };\n    ColumnApi.prototype.autoSizeAllColumns = function (skipHeader) { this.columnModel.autoSizeAllColumns(skipHeader, 'api'); };\n    ColumnApi.prototype.setSecondaryColumns = function (colDefs) { this.columnModel.setSecondaryColumns(colDefs, 'api'); };\n    ColumnApi.prototype.getSecondaryColumns = function () { return this.columnModel.getSecondaryColumns(); };\n    ColumnApi.prototype.getPrimaryColumns = function () { return this.columnModel.getAllPrimaryColumns(); };\n    ColumnApi.prototype.cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid = function () {\n        // some users were raising support issues with regards memory leaks. the problem was the customers applications\n        // were keeping references to the API. trying to educate them all would be difficult, easier to just remove\n        // all references in teh API so at least the core grid can be garbage collected.\n        //\n        // wait about 100ms before clearing down the references, in case user has some cleanup to do,\n        // and needs to deference the API first\n        setTimeout(_.removeAllReferences.bind(window, this, 'Column API'), 100);\n    };\n    // below goes through deprecated items, prints message to user, then calls the new version of the same method\n    // public getColumnDefs(): (ColDef | ColGroupDef)[] {\n    //     this.setColumnGroupOpened(group, newValue);\n    //     return null;\n    // }\n    ColumnApi.prototype.columnGroupOpened = function (group, newValue) {\n        console.error('AG Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');\n        this.setColumnGroupOpened(group, newValue);\n    };\n    ColumnApi.prototype.hideColumns = function (colIds, hide) {\n        console.error('AG Grid: hideColumns is deprecated, use setColumnsVisible');\n        this.columnModel.setColumnsVisible(colIds, !hide, 'api');\n    };\n    ColumnApi.prototype.hideColumn = function (colId, hide) {\n        console.error('AG Grid: hideColumn is deprecated, use setColumnVisible');\n        this.columnModel.setColumnVisible(colId, !hide, 'api');\n    };\n    ColumnApi.prototype.setState = function (columnState) {\n        console.error('AG Grid: setState is deprecated, use setColumnState');\n        return this.setColumnState(columnState);\n    };\n    ColumnApi.prototype.getState = function () {\n        console.error('AG Grid: getState is deprecated, use getColumnState');\n        return this.getColumnState();\n    };\n    ColumnApi.prototype.resetState = function () {\n        console.error('AG Grid: resetState is deprecated, use resetColumnState');\n        this.resetColumnState();\n    };\n    ColumnApi.prototype.getAggregationColumns = function () {\n        console.error('AG Grid: getAggregationColumns is deprecated, use getValueColumns');\n        return this.columnModel.getValueColumns();\n    };\n    ColumnApi.prototype.removeAggregationColumn = function (colKey) {\n        console.error('AG Grid: removeAggregationColumn is deprecated, use removeValueColumn');\n        this.columnModel.removeValueColumn(colKey, 'api');\n    };\n    ColumnApi.prototype.removeAggregationColumns = function (colKeys) {\n        console.error('AG Grid: removeAggregationColumns is deprecated, use removeValueColumns');\n        this.columnModel.removeValueColumns(colKeys, 'api');\n    };\n    ColumnApi.prototype.addAggregationColumn = function (colKey) {\n        console.error('AG Grid: addAggregationColumn is deprecated, use addValueColumn');\n        this.columnModel.addValueColumn(colKey, 'api');\n    };\n    ColumnApi.prototype.addAggregationColumns = function (colKeys) {\n        console.error('AG Grid: addAggregationColumns is deprecated, use addValueColumns');\n        this.columnModel.addValueColumns(colKeys, 'api');\n    };\n    ColumnApi.prototype.setColumnAggFunction = function (column, aggFunc) {\n        console.error('AG Grid: setColumnAggFunction is deprecated, use setColumnAggFunc');\n        this.columnModel.setColumnAggFunc(column, aggFunc, 'api');\n    };\n    ColumnApi.prototype.getDisplayNameForCol = function (column) {\n        console.error('AG Grid: getDisplayNameForCol is deprecated, use getDisplayNameForColumn');\n        return this.getDisplayNameForColumn(column, null);\n    };\n    ColumnApi.prototype.setColumnState = function (columnState) {\n        return this.columnModel.applyColumnState({ state: columnState, applyOrder: true }, 'api');\n    };\n    __decorate([\n        Autowired('columnModel')\n    ], ColumnApi.prototype, \"columnModel\", void 0);\n    __decorate([\n        PreDestroy\n    ], ColumnApi.prototype, \"cleanDownReferencesToAvoidMemoryLeakInCaseApplicationIsKeepingReferenceToDestroyedGrid\", null);\n    ColumnApi = __decorate([\n        Bean('columnApi')\n    ], ColumnApi);\n    return ColumnApi;\n}());\nexport { ColumnApi };\n"]},"metadata":{},"sourceType":"module"}