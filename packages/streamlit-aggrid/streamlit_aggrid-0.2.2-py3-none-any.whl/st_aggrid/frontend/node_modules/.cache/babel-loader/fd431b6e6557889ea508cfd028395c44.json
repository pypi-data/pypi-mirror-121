{"ast":null,"code":"// @ag-grid-community/react v26.0.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar core_1 = require(\"@ag-grid-community/core\");\n\nvar agGridColumn_1 = require(\"../agGridColumn\");\n\nvar changeDetectionService_1 = require(\"../changeDetectionService\");\n\nvar reactFrameworkOverrides_1 = require(\"./reactFrameworkOverrides\");\n\nvar gridComp_1 = __importDefault(require(\"./gridComp\"));\n\nvar AgGridReactFire = function (_super) {\n  __extends(AgGridReactFire, _super);\n\n  function AgGridReactFire(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.props = props;\n    _this.destroyFuncs = [];\n    _this.changeDetectionService = new changeDetectionService_1.ChangeDetectionService();\n    _this.eGui = react_1.default.createRef();\n    _this.state = {\n      context: undefined\n    };\n    return _this;\n  }\n\n  AgGridReactFire.prototype.render = function () {\n    return react_1.default.createElement(\"div\", {\n      style: this.createStyleForDiv(),\n      className: this.props.className,\n      ref: this.eGui\n    }, this.state.context && react_1.default.createElement(gridComp_1.default, {\n      context: this.state.context\n    }));\n  };\n\n  AgGridReactFire.prototype.createStyleForDiv = function () {\n    return __assign({\n      height: '100%'\n    }, this.props.containerStyle || {});\n  };\n\n  AgGridReactFire.prototype.componentDidMount = function () {\n    var _this = this;\n\n    var modules = this.props.modules || [];\n    var gridParams = {\n      // providedBeanInstances: {\n      //     agGridReact: this,\n      //     frameworkComponentWrapper: new ReactFrameworkComponentWrapper(this)\n      // },\n      modules: modules,\n      frameworkOverrides: new reactFrameworkOverrides_1.ReactFrameworkOverrides()\n    };\n    this.gridOptions = __assign({}, this.props.gridOptions);\n    var children = this.props.children;\n\n    if (agGridColumn_1.AgGridColumn.hasChildColumns(children)) {\n      this.gridOptions.columnDefs = agGridColumn_1.AgGridColumn.mapChildColumnDefs(children);\n    }\n\n    this.gridOptions = core_1.ComponentUtil.copyAttributesToGridOptions(this.gridOptions, this.props); // don't need the return value\n\n    var gridCoreCreator = new core_1.GridCoreCreator();\n    gridCoreCreator.create(this.eGui.current, this.gridOptions, function (context) {\n      _this.setState({\n        context: context\n      });\n    }, gridParams);\n    this.destroyFuncs.push(function () {\n      return _this.gridOptions.api.destroy();\n    });\n    this.api = this.gridOptions.api;\n    this.columnApi = this.gridOptions.columnApi;\n    this.props.setGridApi(this.api, this.columnApi);\n  };\n\n  AgGridReactFire.prototype.componentWillUnmount = function () {\n    this.destroyFuncs.forEach(function (f) {\n      return f();\n    });\n  };\n\n  AgGridReactFire.prototype.componentDidUpdate = function (prevProps) {\n    this.processPropsChanges(prevProps, this.props);\n  };\n\n  AgGridReactFire.prototype.processPropsChanges = function (prevProps, nextProps) {\n    var changes = {};\n    this.extractGridPropertyChanges(prevProps, nextProps, changes);\n    this.extractDeclarativeColDefChanges(nextProps, changes);\n    this.processChanges(changes);\n  };\n\n  AgGridReactFire.prototype.extractDeclarativeColDefChanges = function (nextProps, changes) {\n    // if columnDefs are provided on gridOptions we use those - you can't combine both\n    // we also skip if columnDefs are provided as a prop directly on AgGridReact\n    if (this.props.gridOptions && this.props.gridOptions.columnDefs || this.props.columnDefs) {\n      return;\n    }\n\n    var debugLogging = !!nextProps.debug;\n    var propKey = 'columnDefs';\n    var currentColDefs = this.gridOptions.columnDefs;\n\n    if (agGridColumn_1.AgGridColumn.hasChildColumns(nextProps.children)) {\n      var detectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));\n      var newColDefs = agGridColumn_1.AgGridColumn.mapChildColumnDefs(nextProps.children);\n\n      if (!detectionStrategy.areEqual(currentColDefs, newColDefs)) {\n        if (debugLogging) {\n          console.log(\"agGridReact: colDefs definitions changed\");\n        }\n\n        changes[propKey] = {\n          previousValue: currentColDefs,\n          currentValue: newColDefs\n        };\n      }\n    } else if (currentColDefs && currentColDefs.length > 0) {\n      changes[propKey] = {\n        previousValue: currentColDefs,\n        currentValue: []\n      };\n    }\n  };\n\n  AgGridReactFire.prototype.extractGridPropertyChanges = function (prevProps, nextProps, changes) {\n    var _this = this;\n\n    var debugLogging = !!nextProps.debug;\n    Object.keys(nextProps).forEach(function (propKey) {\n      if (core_1._.includes(core_1.ComponentUtil.ALL_PROPERTIES, propKey)) {\n        var changeDetectionStrategy = _this.changeDetectionService.getStrategy(_this.getStrategyTypeForProp(propKey));\n\n        if (!changeDetectionStrategy.areEqual(prevProps[propKey], nextProps[propKey])) {\n          if (debugLogging) {\n            console.log(\"agGridReact: [\" + propKey + \"] property changed\");\n          }\n\n          changes[propKey] = {\n            previousValue: prevProps[propKey],\n            currentValue: nextProps[propKey]\n          };\n        }\n      }\n    });\n    core_1.ComponentUtil.getEventCallbacks().forEach(function (funcName) {\n      if (_this.props[funcName] !== nextProps[funcName]) {\n        if (debugLogging) {\n          console.log(\"agGridReact: [\" + funcName + \"] event callback changed\");\n        }\n\n        changes[funcName] = {\n          previousValue: prevProps[funcName],\n          currentValue: nextProps[funcName]\n        };\n      }\n    });\n  };\n\n  AgGridReactFire.prototype.processChanges = function (changes) {\n    if (this.api) {\n      core_1.ComponentUtil.processOnChange(changes, this.gridOptions, this.api, this.columnApi);\n    }\n  };\n\n  AgGridReactFire.prototype.getStrategyTypeForProp = function (propKey) {\n    if (propKey === 'rowData') {\n      if (this.props.rowDataChangeDetectionStrategy) {\n        return this.props.rowDataChangeDetectionStrategy;\n      }\n\n      if (this.isImmutableDataActive()) {\n        return changeDetectionService_1.ChangeDetectionStrategyType.IdentityCheck;\n      }\n    } // all other cases will default to DeepValueCheck\n\n\n    return changeDetectionService_1.ChangeDetectionStrategyType.DeepValueCheck;\n  };\n\n  AgGridReactFire.prototype.isImmutableDataActive = function () {\n    return this.props.deltaRowDataMode || this.props.immutableData || this.props.gridOptions && (this.props.gridOptions.deltaRowDataMode || this.props.gridOptions.immutableData);\n  };\n\n  return AgGridReactFire;\n}(react_1.Component);\n\nexports.AgGridReactFire = AgGridReactFire;","map":{"version":3,"sources":["next/agGridReactFire.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { _, ColumnApi, ComponentUtil, Context, GridApi, GridCoreCreator, GridOptions, GridParams } from '@ag-grid-community/core';\nimport { AgGridColumn } from '../agGridColumn';\nimport { ChangeDetectionService, ChangeDetectionStrategyType } from '../changeDetectionService';\nimport { AgReactUiProps } from '../interfaces';\nimport { ReactFrameworkOverrides } from './reactFrameworkOverrides';\nimport GridComp from './gridComp';\n\nexport class AgGridReactFire extends Component<AgReactUiProps, { context: Context | undefined }> {\n\n    public api!: GridApi;\n    public columnApi!: ColumnApi;\n\n    private gridOptions!: GridOptions;\n\n    private destroyFuncs: (() => void)[] = [];\n    private changeDetectionService = new ChangeDetectionService();\n    private eGui = React.createRef<HTMLDivElement>();\n\n    constructor(public props: any) {\n        super(props);\n        this.state = {context: undefined};\n    }\n\n    public render() {\n        return (\n            <div style={ this.createStyleForDiv() } className={ this.props.className } ref={ this.eGui }>\n                { this.state.context && <GridComp context={ this.state.context }/> }\n            </div>\n        );\n    }\n\n    private createStyleForDiv() {\n        return {\n            height: '100%',\n            ...(this.props.containerStyle || {})\n        };\n    }\n\n    public componentDidMount() {\n\n        const modules = this.props.modules || [];\n        const gridParams: GridParams = {\n            // providedBeanInstances: {\n            //     agGridReact: this,\n            //     frameworkComponentWrapper: new ReactFrameworkComponentWrapper(this)\n            // },\n            modules,\n            frameworkOverrides: new ReactFrameworkOverrides()\n        };\n\n        this.gridOptions = {...this.props.gridOptions};\n        const {children} = this.props;\n\n        if (AgGridColumn.hasChildColumns(children)) {\n            this.gridOptions.columnDefs = AgGridColumn.mapChildColumnDefs(children);\n        }\n\n        this.gridOptions = ComponentUtil.copyAttributesToGridOptions(this.gridOptions, this.props);\n\n        // don't need the return value\n        const gridCoreCreator = new GridCoreCreator();\n        gridCoreCreator.create(this.eGui.current!, this.gridOptions, context => {\n            this.setState({context: context});\n        }, gridParams);\n\n        this.destroyFuncs.push(() => this.gridOptions.api!.destroy());\n\n        this.api = this.gridOptions.api!;\n        this.columnApi = this.gridOptions.columnApi!;\n\n        this.props.setGridApi(this.api, this.columnApi);\n    }\n\n    public componentWillUnmount() {\n        this.destroyFuncs.forEach(f => f());\n    }\n\n    public componentDidUpdate(prevProps: any) {\n        this.processPropsChanges(prevProps, this.props);\n    }\n\n    public processPropsChanges(prevProps: any, nextProps: any) {\n        const changes = {};\n\n        this.extractGridPropertyChanges(prevProps, nextProps, changes);\n        this.extractDeclarativeColDefChanges(nextProps, changes);\n\n        this.processChanges(changes);\n    }\n\n    private extractDeclarativeColDefChanges(nextProps: any, changes: any) {\n        // if columnDefs are provided on gridOptions we use those - you can't combine both\n        // we also skip if columnDefs are provided as a prop directly on AgGridReact\n        if ((this.props.gridOptions && this.props.gridOptions.columnDefs) || this.props.columnDefs) {\n            return;\n        }\n\n        const debugLogging = !!nextProps.debug;\n        const propKey = 'columnDefs';\n        const currentColDefs = this.gridOptions.columnDefs;\n\n        if (AgGridColumn.hasChildColumns(nextProps.children)) {\n            const detectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));\n            const newColDefs = AgGridColumn.mapChildColumnDefs(nextProps.children);\n\n            if (!detectionStrategy.areEqual(currentColDefs, newColDefs)) {\n                if (debugLogging) {\n                    console.log(`agGridReact: colDefs definitions changed`);\n                }\n\n                changes[propKey] =\n                    {\n                        previousValue: currentColDefs,\n                        currentValue: newColDefs\n                    };\n            }\n        } else if (currentColDefs && currentColDefs.length > 0) {\n            changes[propKey] =\n                {\n                    previousValue: currentColDefs,\n                    currentValue: []\n                };\n        }\n    }\n\n    private extractGridPropertyChanges(prevProps: any, nextProps: any, changes: any) {\n        const debugLogging = !!nextProps.debug;\n\n        Object.keys(nextProps).forEach(propKey => {\n            if (_.includes(ComponentUtil.ALL_PROPERTIES, propKey)) {\n                const changeDetectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));\n\n                if (!changeDetectionStrategy.areEqual(prevProps[propKey], nextProps[propKey])) {\n                    if (debugLogging) {\n                        console.log(`agGridReact: [${propKey}] property changed`);\n                    }\n\n                    changes[propKey] = {\n                        previousValue: prevProps[propKey],\n                        currentValue: nextProps[propKey]\n                    };\n                }\n            }\n        });\n\n        ComponentUtil.getEventCallbacks().forEach(funcName => {\n            if (this.props[funcName] !== nextProps[funcName]) {\n                if (debugLogging) {\n                    console.log(`agGridReact: [${funcName}] event callback changed`);\n                }\n\n                changes[funcName] = {\n                    previousValue: prevProps[funcName],\n                    currentValue: nextProps[funcName]\n                };\n            }\n        });\n    }\n\n    private processChanges(changes: {}) {\n        if (this.api) {\n            ComponentUtil.processOnChange(changes, this.gridOptions, this.api, this.columnApi)\n        }\n    }\n\n    private getStrategyTypeForProp(propKey: string) {\n        if (propKey === 'rowData') {\n            if (this.props.rowDataChangeDetectionStrategy) {\n                return this.props.rowDataChangeDetectionStrategy;\n            }\n            if (this.isImmutableDataActive()) {\n                return ChangeDetectionStrategyType.IdentityCheck;\n            }\n        }\n\n        // all other cases will default to DeepValueCheck\n        return ChangeDetectionStrategyType.DeepValueCheck;\n    }\n\n    private isImmutableDataActive() {\n        return (this.props.deltaRowDataMode || this.props.immutableData) ||\n            (this.props.gridOptions && (this.props.gridOptions.deltaRowDataMode || this.props.gridOptions.immutableData));\n    }\n}\n"]},"metadata":{},"sourceType":"script"}