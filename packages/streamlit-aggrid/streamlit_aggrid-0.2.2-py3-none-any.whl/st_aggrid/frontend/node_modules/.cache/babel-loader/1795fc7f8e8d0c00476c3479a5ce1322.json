{"ast":null,"code":"import { _ } from \"@ag-grid-community/core\";\n\nvar BaseGridSerializingSession = function () {\n  function BaseGridSerializingSession(config) {\n    this.groupColumns = [];\n    var columnModel = config.columnModel,\n        valueService = config.valueService,\n        gridOptionsWrapper = config.gridOptionsWrapper,\n        processCellCallback = config.processCellCallback,\n        processHeaderCallback = config.processHeaderCallback,\n        processGroupHeaderCallback = config.processGroupHeaderCallback,\n        processRowGroupCallback = config.processRowGroupCallback;\n    this.columnModel = columnModel;\n    this.valueService = valueService;\n    this.gridOptionsWrapper = gridOptionsWrapper;\n    this.processCellCallback = processCellCallback;\n    this.processHeaderCallback = processHeaderCallback;\n    this.processGroupHeaderCallback = processGroupHeaderCallback;\n    this.processRowGroupCallback = processRowGroupCallback;\n  }\n\n  BaseGridSerializingSession.prototype.prepare = function (columnsToExport) {\n    this.groupColumns = _.filter(columnsToExport, function (col) {\n      return !!col.getColDef().showRowGroup;\n    });\n  };\n\n  BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {\n    var value = this.getHeaderName(this.processHeaderCallback, column);\n    return value != null ? value : '';\n  };\n\n  BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, accumulatedRowIndex, type, node) {\n    // we render the group summary text e.g. \"-> Parent -> Child\"...\n    var groupIndex = this.gridOptionsWrapper.isGroupMultiAutoColumn() ? node.rowGroupIndex : 0;\n    var renderGroupSummaryCell = // on group rows\n    node && node.group && ( // in the group column if groups appear in regular grid cells\n    index === groupIndex && this.groupColumns.indexOf(column) !== -1 // or the first cell in the row, if we're doing full width rows\n    || index === 0 && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnModel.isPivotMode()));\n    var valueForCell;\n\n    if (renderGroupSummaryCell) {\n      valueForCell = this.createValueForGroupNode(node);\n    } else {\n      valueForCell = this.valueService.getValue(column, node);\n    }\n\n    var value = this.processCell(accumulatedRowIndex, node, column, valueForCell, this.processCellCallback, type);\n    return value != null ? value : '';\n  };\n\n  BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {\n    if (callback) {\n      return callback({\n        column: column,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext()\n      });\n    }\n\n    return this.columnModel.getDisplayNameForColumn(column, 'csv', true);\n  };\n\n  BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {\n    if (this.processRowGroupCallback) {\n      return this.processRowGroupCallback({\n        node: node,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext()\n      });\n    }\n\n    var keys = [node.key];\n\n    if (!this.gridOptionsWrapper.isGroupMultiAutoColumn()) {\n      while (node.parent) {\n        node = node.parent;\n        keys.push(node.key);\n      }\n    }\n\n    return keys.reverse().join(' -> ');\n  };\n\n  BaseGridSerializingSession.prototype.processCell = function (accumulatedRowIndex, rowNode, column, value, processCellCallback, type) {\n    if (processCellCallback) {\n      return processCellCallback({\n        accumulatedRowIndex: accumulatedRowIndex,\n        column: column,\n        node: rowNode,\n        value: value,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext(),\n        type: type\n      });\n    }\n\n    return value != null ? value : '';\n  };\n\n  return BaseGridSerializingSession;\n}();\n\nexport { BaseGridSerializingSession };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/sessions/baseGridSerializingSession.js"],"names":["_","BaseGridSerializingSession","config","groupColumns","columnModel","valueService","gridOptionsWrapper","processCellCallback","processHeaderCallback","processGroupHeaderCallback","processRowGroupCallback","prototype","prepare","columnsToExport","filter","col","getColDef","showRowGroup","extractHeaderValue","column","value","getHeaderName","extractRowCellValue","index","accumulatedRowIndex","type","node","groupIndex","isGroupMultiAutoColumn","rowGroupIndex","renderGroupSummaryCell","group","indexOf","isGroupUseEntireRow","isPivotMode","valueForCell","createValueForGroupNode","getValue","processCell","callback","api","getApi","columnApi","getColumnApi","context","getContext","getDisplayNameForColumn","keys","key","parent","push","reverse","join","rowNode"],"mappings":"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","sourcesContent":["import { _ } from \"@ag-grid-community/core\";\nvar BaseGridSerializingSession = /** @class */ (function () {\n    function BaseGridSerializingSession(config) {\n        this.groupColumns = [];\n        var columnModel = config.columnModel, valueService = config.valueService, gridOptionsWrapper = config.gridOptionsWrapper, processCellCallback = config.processCellCallback, processHeaderCallback = config.processHeaderCallback, processGroupHeaderCallback = config.processGroupHeaderCallback, processRowGroupCallback = config.processRowGroupCallback;\n        this.columnModel = columnModel;\n        this.valueService = valueService;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.processCellCallback = processCellCallback;\n        this.processHeaderCallback = processHeaderCallback;\n        this.processGroupHeaderCallback = processGroupHeaderCallback;\n        this.processRowGroupCallback = processRowGroupCallback;\n    }\n    BaseGridSerializingSession.prototype.prepare = function (columnsToExport) {\n        this.groupColumns = _.filter(columnsToExport, function (col) { return !!col.getColDef().showRowGroup; });\n    };\n    BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {\n        var value = this.getHeaderName(this.processHeaderCallback, column);\n        return value != null ? value : '';\n    };\n    BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, accumulatedRowIndex, type, node) {\n        // we render the group summary text e.g. \"-> Parent -> Child\"...\n        var groupIndex = this.gridOptionsWrapper.isGroupMultiAutoColumn() ? node.rowGroupIndex : 0;\n        var renderGroupSummaryCell = \n        // on group rows\n        node && node.group\n            && (\n            // in the group column if groups appear in regular grid cells\n            index === groupIndex && this.groupColumns.indexOf(column) !== -1\n                // or the first cell in the row, if we're doing full width rows\n                || (index === 0 && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnModel.isPivotMode())));\n        var valueForCell;\n        if (renderGroupSummaryCell) {\n            valueForCell = this.createValueForGroupNode(node);\n        }\n        else {\n            valueForCell = this.valueService.getValue(column, node);\n        }\n        var value = this.processCell(accumulatedRowIndex, node, column, valueForCell, this.processCellCallback, type);\n        return value != null ? value : '';\n    };\n    BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {\n        if (callback) {\n            return callback({\n                column: column,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext()\n            });\n        }\n        return this.columnModel.getDisplayNameForColumn(column, 'csv', true);\n    };\n    BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {\n        if (this.processRowGroupCallback) {\n            return this.processRowGroupCallback({\n                node: node,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n            });\n        }\n        var keys = [node.key];\n        if (!this.gridOptionsWrapper.isGroupMultiAutoColumn()) {\n            while (node.parent) {\n                node = node.parent;\n                keys.push(node.key);\n            }\n        }\n        return keys.reverse().join(' -> ');\n    };\n    BaseGridSerializingSession.prototype.processCell = function (accumulatedRowIndex, rowNode, column, value, processCellCallback, type) {\n        if (processCellCallback) {\n            return processCellCallback({\n                accumulatedRowIndex: accumulatedRowIndex,\n                column: column,\n                node: rowNode,\n                value: value,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n                type: type\n            });\n        }\n        return value != null ? value : '';\n    };\n    return BaseGridSerializingSession;\n}());\nexport { BaseGridSerializingSession };\n"]},"metadata":{},"sourceType":"module"}