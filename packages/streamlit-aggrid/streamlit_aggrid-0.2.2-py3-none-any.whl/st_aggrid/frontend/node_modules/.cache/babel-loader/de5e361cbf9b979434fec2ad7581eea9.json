{"ast":null,"code":"import interpolateValue from \"../interpolate/value\";\nimport interpolateNumber from \"../interpolate/number\";\nimport { bisectRight } from \"../util/bisect\";\nimport { ascending } from \"../util/compare\";\nexport var constant = function constant(x) {\n  return function () {\n    return x;\n  };\n};\nexport var identity = function identity(x) {\n  return x;\n};\n\nfunction clamper(domain) {\n  var _a;\n\n  var a = domain[0];\n  var b = domain[domain.length - 1];\n\n  if (a > b) {\n    _a = [b, a], a = _a[0], b = _a[1];\n  }\n\n  return function (x) {\n    return Math.max(a, Math.min(b, x));\n  };\n}\n\nvar ContinuousScale = function () {\n  function ContinuousScale() {\n    /**\n     * The output value of the scale for `undefined` or `NaN` input values.\n     */\n    this.unknown = undefined;\n    this._clamp = identity;\n    this._domain = [0, 1];\n    this._range = [0, 1];\n    this.transform = identity; // transforms domain value\n\n    this.untransform = identity; // untransforms domain value\n\n    this._interpolate = interpolateValue;\n    this.rescale();\n  }\n\n  Object.defineProperty(ContinuousScale.prototype, \"clamp\", {\n    get: function get() {\n      return this._clamp !== identity;\n    },\n    set: function set(value) {\n      this._clamp = value ? clamper(this.domain) : identity;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ContinuousScale.prototype.setDomain = function (values) {\n    this._domain = Array.prototype.map.call(values, function (v) {\n      return +v;\n    });\n\n    if (this._clamp !== identity) {\n      this._clamp = clamper(this.domain);\n    }\n\n    this.rescale();\n  };\n\n  ContinuousScale.prototype.getDomain = function () {\n    return this._domain.slice();\n  };\n\n  Object.defineProperty(ContinuousScale.prototype, \"domain\", {\n    get: function get() {\n      return this.getDomain();\n    },\n    set: function set(values) {\n      this.setDomain(values);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ContinuousScale.prototype, \"range\", {\n    get: function get() {\n      return this._range.slice();\n    },\n    set: function set(values) {\n      this._range = Array.prototype.slice.call(values);\n      this.rescale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ContinuousScale.prototype, \"interpolate\", {\n    get: function get() {\n      return this._interpolate;\n    },\n    set: function set(value) {\n      this._interpolate = value;\n      this.rescale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ContinuousScale.prototype.rescale = function () {\n    if (Math.min(this.domain.length, this.range.length) > 2) {\n      this.piecewise = this.polymap;\n    } else {\n      this.piecewise = this.bimap;\n    }\n\n    this.output = undefined;\n    this.input = undefined;\n  };\n  /**\n   * Returns a function that converts `x` in `[a, b]` to `t` in `[0, 1]`. Non-clamping.\n   * @param a\n   * @param b\n   */\n\n\n  ContinuousScale.prototype.normalize = function (a, b) {\n    return (b -= a = +a) ? function (x) {\n      return (x - a) / b;\n    } : constant(isNaN(b) ? NaN : 0.5);\n  };\n\n  ContinuousScale.prototype.bimap = function (domain, range, interpolate) {\n    var x0 = domain[0];\n    var x1 = domain[1];\n    var y0 = range[0];\n    var y1 = range[1];\n    var xt;\n    var ty;\n\n    if (x1 < x0) {\n      xt = this.normalize(x1, x0);\n      ty = interpolate(y1, y0);\n    } else {\n      xt = this.normalize(x0, x1);\n      ty = interpolate(y0, y1);\n    }\n\n    return function (x) {\n      return ty(xt(x));\n    }; // domain value x --> t in [0, 1] --> range value y\n  };\n\n  ContinuousScale.prototype.polymap = function (domain, range, interpolate) {\n    var _this = this; // number of segments in the polylinear scale\n\n\n    var n = Math.min(domain.length, range.length) - 1;\n\n    if (domain[n] < domain[0]) {\n      domain = domain.slice().reverse();\n      range = range.slice().reverse();\n    } // deinterpolators from domain segment value to t\n\n\n    var dt = Array.from({\n      length: n\n    }, function (_, i) {\n      return _this.normalize(domain[i], domain[i + 1]);\n    }); // reinterpolators from t to range segment value\n\n    var tr = Array.from({\n      length: n\n    }, function (_, i) {\n      return interpolate(range[i], range[i + 1]);\n    });\n    return function (x) {\n      var i = bisectRight(domain, x, ascending, 1, n) - 1; // Find the domain segment that `x` belongs to.\n      // This also tells us which deinterpolator/reinterpolator pair to use.\n\n      return tr[i](dt[i](x));\n    };\n  };\n\n  ContinuousScale.prototype.convert = function (x) {\n    x = +x;\n\n    if (isNaN(x)) {\n      return this.unknown;\n    } else {\n      if (!this.output) {\n        this.output = this.piecewise(this.domain.map(this.transform), this.range, this.interpolate);\n      }\n\n      return this.output(this.transform(this._clamp(x)));\n    }\n  };\n\n  ContinuousScale.prototype.invert = function (y) {\n    if (!this.input) {\n      this.input = this.piecewise(this.range, this.domain.map(this.transform), interpolateNumber);\n    }\n\n    return this._clamp(this.untransform(this.input(y)));\n  };\n\n  return ContinuousScale;\n}();\n\nexport default ContinuousScale;","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/ag-charts-community/dist/es6/scale/continuousScale.js"],"names":["interpolateValue","interpolateNumber","bisectRight","ascending","constant","x","identity","clamper","domain","_a","a","b","length","Math","max","min","ContinuousScale","unknown","undefined","_clamp","_domain","_range","transform","untransform","_interpolate","rescale","Object","defineProperty","prototype","get","set","value","enumerable","configurable","setDomain","values","Array","map","call","v","getDomain","slice","range","piecewise","polymap","bimap","output","input","normalize","isNaN","NaN","interpolate","x0","x1","y0","y1","xt","ty","_this","n","reverse","dt","from","_","i","tr","convert","invert","y"],"mappings":"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","sourcesContent":["import interpolateValue from \"../interpolate/value\";\nimport interpolateNumber from \"../interpolate/number\";\nimport { bisectRight } from \"../util/bisect\";\nimport { ascending } from \"../util/compare\";\nexport var constant = function (x) { return function () { return x; }; };\nexport var identity = function (x) { return x; };\nfunction clamper(domain) {\n    var _a;\n    var a = domain[0];\n    var b = domain[domain.length - 1];\n    if (a > b) {\n        _a = [b, a], a = _a[0], b = _a[1];\n    }\n    return function (x) { return Math.max(a, Math.min(b, x)); };\n}\nvar ContinuousScale = /** @class */ (function () {\n    function ContinuousScale() {\n        /**\n         * The output value of the scale for `undefined` or `NaN` input values.\n         */\n        this.unknown = undefined;\n        this._clamp = identity;\n        this._domain = [0, 1];\n        this._range = [0, 1];\n        this.transform = identity; // transforms domain value\n        this.untransform = identity; // untransforms domain value\n        this._interpolate = interpolateValue;\n        this.rescale();\n    }\n    Object.defineProperty(ContinuousScale.prototype, \"clamp\", {\n        get: function () {\n            return this._clamp !== identity;\n        },\n        set: function (value) {\n            this._clamp = value ? clamper(this.domain) : identity;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ContinuousScale.prototype.setDomain = function (values) {\n        this._domain = Array.prototype.map.call(values, function (v) { return +v; });\n        if (this._clamp !== identity) {\n            this._clamp = clamper(this.domain);\n        }\n        this.rescale();\n    };\n    ContinuousScale.prototype.getDomain = function () {\n        return this._domain.slice();\n    };\n    Object.defineProperty(ContinuousScale.prototype, \"domain\", {\n        get: function () {\n            return this.getDomain();\n        },\n        set: function (values) {\n            this.setDomain(values);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContinuousScale.prototype, \"range\", {\n        get: function () {\n            return this._range.slice();\n        },\n        set: function (values) {\n            this._range = Array.prototype.slice.call(values);\n            this.rescale();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContinuousScale.prototype, \"interpolate\", {\n        get: function () {\n            return this._interpolate;\n        },\n        set: function (value) {\n            this._interpolate = value;\n            this.rescale();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ContinuousScale.prototype.rescale = function () {\n        if (Math.min(this.domain.length, this.range.length) > 2) {\n            this.piecewise = this.polymap;\n        }\n        else {\n            this.piecewise = this.bimap;\n        }\n        this.output = undefined;\n        this.input = undefined;\n    };\n    /**\n     * Returns a function that converts `x` in `[a, b]` to `t` in `[0, 1]`. Non-clamping.\n     * @param a\n     * @param b\n     */\n    ContinuousScale.prototype.normalize = function (a, b) {\n        return (b -= (a = +a))\n            ? function (x) { return (x - a) / b; }\n            : constant(isNaN(b) ? NaN : 0.5);\n    };\n    ContinuousScale.prototype.bimap = function (domain, range, interpolate) {\n        var x0 = domain[0];\n        var x1 = domain[1];\n        var y0 = range[0];\n        var y1 = range[1];\n        var xt;\n        var ty;\n        if (x1 < x0) {\n            xt = this.normalize(x1, x0);\n            ty = interpolate(y1, y0);\n        }\n        else {\n            xt = this.normalize(x0, x1);\n            ty = interpolate(y0, y1);\n        }\n        return function (x) { return ty(xt(x)); }; // domain value x --> t in [0, 1] --> range value y\n    };\n    ContinuousScale.prototype.polymap = function (domain, range, interpolate) {\n        var _this = this;\n        // number of segments in the polylinear scale\n        var n = Math.min(domain.length, range.length) - 1;\n        if (domain[n] < domain[0]) {\n            domain = domain.slice().reverse();\n            range = range.slice().reverse();\n        }\n        // deinterpolators from domain segment value to t\n        var dt = Array.from({ length: n }, function (_, i) { return _this.normalize(domain[i], domain[i + 1]); });\n        // reinterpolators from t to range segment value\n        var tr = Array.from({ length: n }, function (_, i) { return interpolate(range[i], range[i + 1]); });\n        return function (x) {\n            var i = bisectRight(domain, x, ascending, 1, n) - 1; // Find the domain segment that `x` belongs to.\n            // This also tells us which deinterpolator/reinterpolator pair to use.\n            return tr[i](dt[i](x));\n        };\n    };\n    ContinuousScale.prototype.convert = function (x) {\n        x = +x;\n        if (isNaN(x)) {\n            return this.unknown;\n        }\n        else {\n            if (!this.output) {\n                this.output = this.piecewise(this.domain.map(this.transform), this.range, this.interpolate);\n            }\n            return this.output(this.transform(this._clamp(x)));\n        }\n    };\n    ContinuousScale.prototype.invert = function (y) {\n        if (!this.input) {\n            this.input = this.piecewise(this.range, this.domain.map(this.transform), interpolateNumber);\n        }\n        return this._clamp(this.untransform(this.input(y)));\n    };\n    return ContinuousScale;\n}());\nexport default ContinuousScale;\n"]},"metadata":{},"sourceType":"module"}