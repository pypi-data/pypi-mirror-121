{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport { Constants, _ } from \"@ag-grid-community/core\";\nimport { BaseGridSerializingSession, RowType } from \"@ag-grid-community/csv-export\";\nimport { getHeightFromProperty } from \"./assets/excelUtils\";\n\nvar BaseExcelSerializingSession = function (_super) {\n  __extends(BaseExcelSerializingSession, _super);\n\n  function BaseExcelSerializingSession(config) {\n    var _this = _super.call(this, config) || this;\n\n    _this.mixedStyles = {};\n    _this.mixedStyleCounter = 0;\n    _this.rows = [];\n    _this.config = _.assign({}, config);\n    _this.stylesByIds = {};\n\n    _this.config.baseExcelStyles.forEach(function (style) {\n      _this.stylesByIds[style.id] = style;\n    });\n\n    _this.excelStyles = __spreadArrays(_this.config.baseExcelStyles);\n    return _this;\n  }\n\n  BaseExcelSerializingSession.prototype.addCustomContent = function (customContent) {\n    var _this = this;\n\n    customContent.forEach(function (row) {\n      var rowLen = _this.rows.length + 1;\n\n      _this.rows.push({\n        height: getHeightFromProperty(rowLen, _this.config.rowHeight),\n        cells: row.map(function (cell, idx) {\n          var image = _this.addImage(rowLen, _this.columnsToExport[idx], cell.data.value);\n\n          var ret = __assign({}, cell);\n\n          if (image) {\n            ret.data = {};\n\n            if (image.value != null) {\n              ret.data.value = image.value;\n            } else {\n              ret.data.type = 'e';\n              ret.data.value = null;\n            }\n          }\n\n          return ret;\n        })\n      });\n    });\n  };\n\n  BaseExcelSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n    var _this = this;\n\n    var currentCells = [];\n    this.rows.push({\n      cells: currentCells,\n      height: getHeightFromProperty(this.rows.length + 1, this.config.headerRowHeight)\n    });\n    return {\n      onColumn: function (header, index, span) {\n        var styleIds = _this.config.styleLinker(RowType.HEADER_GROUPING, 1, \"grouping-\" + header, undefined, undefined);\n\n        currentCells.push(_this.createMergedCell(_this.getStyleId(styleIds), _this.getDataTypeForValue('string'), header, span));\n      }\n    };\n  };\n\n  BaseExcelSerializingSession.prototype.onNewHeaderRow = function () {\n    return this.onNewRow(this.onNewHeaderColumn, this.config.headerRowHeight);\n  };\n\n  BaseExcelSerializingSession.prototype.onNewBodyRow = function () {\n    return this.onNewRow(this.onNewBodyColumn, this.config.rowHeight);\n  };\n\n  BaseExcelSerializingSession.prototype.prepare = function (columnsToExport) {\n    var _this = this;\n\n    _super.prototype.prepare.call(this, columnsToExport);\n\n    this.columnsToExport = __spreadArrays(columnsToExport);\n    this.cols = columnsToExport.map(function (col, i) {\n      return _this.convertColumnToExcel(col, i);\n    });\n  };\n\n  BaseExcelSerializingSession.prototype.parse = function () {\n    // adding custom content might have made some rows wider than the grid, so add new columns\n    var longestRow = this.rows.reduce(function (a, b) {\n      return Math.max(a, b.cells.length);\n    }, 0);\n\n    while (this.cols.length < longestRow) {\n      this.cols.push(this.convertColumnToExcel(null, this.cols.length + 1));\n    }\n\n    var data = {\n      name: this.config.sheetName,\n      table: {\n        columns: this.cols,\n        rows: this.rows\n      }\n    };\n    return this.createExcel(data);\n  };\n\n  BaseExcelSerializingSession.prototype.isFormula = function (value) {\n    if (value == null) {\n      return false;\n    }\n\n    return this.config.autoConvertFormulas && _.startsWith(value.toString(), '=');\n  };\n\n  BaseExcelSerializingSession.prototype.getStyleById = function (styleId) {\n    if (styleId == null) {\n      return null;\n    }\n\n    return this.stylesByIds[styleId] || null;\n  };\n\n  BaseExcelSerializingSession.prototype.convertColumnToExcel = function (column, index) {\n    var columnWidth = this.config.columnWidth;\n\n    if (columnWidth) {\n      if (typeof columnWidth === 'number') {\n        return {\n          width: columnWidth\n        };\n      }\n\n      return {\n        width: columnWidth({\n          column: column,\n          index: index\n        })\n      };\n    }\n\n    if (column) {\n      var smallestUsefulWidth = 75;\n      return {\n        width: Math.max(column.getActualWidth(), smallestUsefulWidth)\n      };\n    }\n\n    return {};\n  };\n\n  BaseExcelSerializingSession.prototype.onNewHeaderColumn = function (rowIndex, currentCells) {\n    var _this = this;\n\n    return function (column, index) {\n      var nameForCol = _this.extractHeaderValue(column);\n\n      var styleIds = _this.config.styleLinker(RowType.HEADER, rowIndex, nameForCol, column, undefined);\n\n      currentCells.push(_this.createCell(_this.getStyleId(styleIds), _this.getDataTypeForValue('string'), nameForCol));\n    };\n  };\n\n  BaseExcelSerializingSession.prototype.onNewRow = function (onNewColumnAccumulator, height) {\n    var currentCells = [];\n    this.rows.push({\n      cells: currentCells,\n      height: getHeightFromProperty(this.rows.length + 1, height)\n    });\n    return {\n      onColumn: onNewColumnAccumulator.bind(this, this.rows.length, currentCells)()\n    };\n  };\n\n  BaseExcelSerializingSession.prototype.onNewBodyColumn = function (rowIndex, currentCells) {\n    var _this = this;\n\n    var skipCols = 0;\n    return function (column, index, node) {\n      if (skipCols > 0) {\n        skipCols -= 1;\n        return;\n      }\n\n      var valueForCell = _this.extractRowCellValue(column, index, rowIndex, Constants.EXPORT_TYPE_EXCEL, node);\n\n      var styleIds = _this.config.styleLinker(RowType.BODY, rowIndex, valueForCell, column, node);\n\n      var excelStyleId = _this.getStyleId(styleIds);\n\n      var colSpan = column.getColSpan(node);\n\n      var addedImage = _this.addImage(rowIndex, column, valueForCell);\n\n      if (addedImage) {\n        currentCells.push(_this.createCell(excelStyleId, _this.getDataTypeForValue(addedImage.value), addedImage.value == null ? '' : addedImage.value));\n      } else if (colSpan > 1) {\n        skipCols = colSpan - 1;\n        currentCells.push(_this.createMergedCell(excelStyleId, _this.getDataTypeForValue(valueForCell), valueForCell, colSpan - 1));\n      } else {\n        currentCells.push(_this.createCell(excelStyleId, _this.getDataTypeForValue(valueForCell), valueForCell));\n      }\n    };\n  };\n\n  BaseExcelSerializingSession.prototype.getStyleId = function (styleIds) {\n    if (!styleIds || !styleIds.length) {\n      return null;\n    }\n\n    if (styleIds.length === 1) {\n      return styleIds[0];\n    }\n\n    var key = styleIds.join(\"-\");\n\n    if (!this.mixedStyles[key]) {\n      this.addNewMixedStyle(styleIds);\n    }\n\n    return this.mixedStyles[key].excelID;\n  };\n\n  BaseExcelSerializingSession.prototype.addNewMixedStyle = function (styleIds) {\n    var _this = this;\n\n    this.mixedStyleCounter += 1;\n    var excelId = \"mixedStyle\" + this.mixedStyleCounter;\n    var resultantStyle = {};\n    styleIds.forEach(function (styleId) {\n      _this.excelStyles.forEach(function (excelStyle) {\n        if (excelStyle.id === styleId) {\n          _.mergeDeep(resultantStyle, _.deepCloneObject(excelStyle));\n        }\n      });\n    });\n    resultantStyle.id = excelId;\n    resultantStyle.name = excelId;\n    var key = styleIds.join(\"-\");\n    this.mixedStyles[key] = {\n      excelID: excelId,\n      key: key,\n      result: resultantStyle\n    };\n    this.excelStyles.push(resultantStyle);\n    this.stylesByIds[excelId] = resultantStyle;\n  };\n\n  return BaseExcelSerializingSession;\n}(BaseGridSerializingSession);\n\nexport { BaseExcelSerializingSession };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/excel-export/dist/es6/excelExport/baseExcelSerializingSession.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__spreadArrays","il","r","k","a","j","jl","Constants","_","BaseGridSerializingSession","RowType","getHeightFromProperty","BaseExcelSerializingSession","_super","config","_this","mixedStyles","mixedStyleCounter","rows","stylesByIds","baseExcelStyles","forEach","style","id","excelStyles","addCustomContent","customContent","row","rowLen","push","height","rowHeight","cells","map","cell","idx","image","addImage","columnsToExport","data","value","ret","type","onNewHeaderGroupingRow","currentCells","headerRowHeight","onColumn","header","index","span","styleIds","styleLinker","HEADER_GROUPING","undefined","createMergedCell","getStyleId","getDataTypeForValue","onNewHeaderRow","onNewRow","onNewHeaderColumn","onNewBodyRow","onNewBodyColumn","prepare","cols","col","convertColumnToExcel","parse","longestRow","reduce","Math","max","name","sheetName","table","columns","createExcel","isFormula","autoConvertFormulas","startsWith","toString","getStyleById","styleId","column","columnWidth","width","smallestUsefulWidth","getActualWidth","rowIndex","nameForCol","extractHeaderValue","HEADER","createCell","onNewColumnAccumulator","bind","skipCols","node","valueForCell","extractRowCellValue","EXPORT_TYPE_EXCEL","BODY","excelStyleId","colSpan","getColSpan","addedImage","key","join","addNewMixedStyle","excelID","excelId","resultantStyle","excelStyle","mergeDeep","deepCloneObject","result"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { Constants, _ } from \"@ag-grid-community/core\";\nimport { BaseGridSerializingSession, RowType } from \"@ag-grid-community/csv-export\";\nimport { getHeightFromProperty } from \"./assets/excelUtils\";\nvar BaseExcelSerializingSession = /** @class */ (function (_super) {\n    __extends(BaseExcelSerializingSession, _super);\n    function BaseExcelSerializingSession(config) {\n        var _this = _super.call(this, config) || this;\n        _this.mixedStyles = {};\n        _this.mixedStyleCounter = 0;\n        _this.rows = [];\n        _this.config = _.assign({}, config);\n        _this.stylesByIds = {};\n        _this.config.baseExcelStyles.forEach(function (style) {\n            _this.stylesByIds[style.id] = style;\n        });\n        _this.excelStyles = __spreadArrays(_this.config.baseExcelStyles);\n        return _this;\n    }\n    BaseExcelSerializingSession.prototype.addCustomContent = function (customContent) {\n        var _this = this;\n        customContent.forEach(function (row) {\n            var rowLen = _this.rows.length + 1;\n            _this.rows.push({\n                height: getHeightFromProperty(rowLen, _this.config.rowHeight),\n                cells: row.map(function (cell, idx) {\n                    var image = _this.addImage(rowLen, _this.columnsToExport[idx], cell.data.value);\n                    var ret = __assign({}, cell);\n                    if (image) {\n                        ret.data = {};\n                        if (image.value != null) {\n                            ret.data.value = image.value;\n                        }\n                        else {\n                            ret.data.type = 'e';\n                            ret.data.value = null;\n                        }\n                    }\n                    return ret;\n                })\n            });\n        });\n    };\n    BaseExcelSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n        var _this = this;\n        var currentCells = [];\n        this.rows.push({\n            cells: currentCells,\n            height: getHeightFromProperty(this.rows.length + 1, this.config.headerRowHeight)\n        });\n        return {\n            onColumn: function (header, index, span) {\n                var styleIds = _this.config.styleLinker(RowType.HEADER_GROUPING, 1, \"grouping-\" + header, undefined, undefined);\n                currentCells.push(_this.createMergedCell(_this.getStyleId(styleIds), _this.getDataTypeForValue('string'), header, span));\n            }\n        };\n    };\n    BaseExcelSerializingSession.prototype.onNewHeaderRow = function () {\n        return this.onNewRow(this.onNewHeaderColumn, this.config.headerRowHeight);\n    };\n    BaseExcelSerializingSession.prototype.onNewBodyRow = function () {\n        return this.onNewRow(this.onNewBodyColumn, this.config.rowHeight);\n    };\n    BaseExcelSerializingSession.prototype.prepare = function (columnsToExport) {\n        var _this = this;\n        _super.prototype.prepare.call(this, columnsToExport);\n        this.columnsToExport = __spreadArrays(columnsToExport);\n        this.cols = columnsToExport.map(function (col, i) { return _this.convertColumnToExcel(col, i); });\n    };\n    BaseExcelSerializingSession.prototype.parse = function () {\n        // adding custom content might have made some rows wider than the grid, so add new columns\n        var longestRow = this.rows.reduce(function (a, b) { return Math.max(a, b.cells.length); }, 0);\n        while (this.cols.length < longestRow) {\n            this.cols.push(this.convertColumnToExcel(null, this.cols.length + 1));\n        }\n        var data = {\n            name: this.config.sheetName,\n            table: {\n                columns: this.cols,\n                rows: this.rows\n            }\n        };\n        return this.createExcel(data);\n    };\n    BaseExcelSerializingSession.prototype.isFormula = function (value) {\n        if (value == null) {\n            return false;\n        }\n        return this.config.autoConvertFormulas && _.startsWith(value.toString(), '=');\n    };\n    BaseExcelSerializingSession.prototype.getStyleById = function (styleId) {\n        if (styleId == null) {\n            return null;\n        }\n        return this.stylesByIds[styleId] || null;\n    };\n    BaseExcelSerializingSession.prototype.convertColumnToExcel = function (column, index) {\n        var columnWidth = this.config.columnWidth;\n        if (columnWidth) {\n            if (typeof columnWidth === 'number') {\n                return { width: columnWidth };\n            }\n            return { width: columnWidth({ column: column, index: index }) };\n        }\n        if (column) {\n            var smallestUsefulWidth = 75;\n            return { width: Math.max(column.getActualWidth(), smallestUsefulWidth) };\n        }\n        return {};\n    };\n    BaseExcelSerializingSession.prototype.onNewHeaderColumn = function (rowIndex, currentCells) {\n        var _this = this;\n        return function (column, index) {\n            var nameForCol = _this.extractHeaderValue(column);\n            var styleIds = _this.config.styleLinker(RowType.HEADER, rowIndex, nameForCol, column, undefined);\n            currentCells.push(_this.createCell(_this.getStyleId(styleIds), _this.getDataTypeForValue('string'), nameForCol));\n        };\n    };\n    BaseExcelSerializingSession.prototype.onNewRow = function (onNewColumnAccumulator, height) {\n        var currentCells = [];\n        this.rows.push({\n            cells: currentCells,\n            height: getHeightFromProperty(this.rows.length + 1, height)\n        });\n        return {\n            onColumn: onNewColumnAccumulator.bind(this, this.rows.length, currentCells)()\n        };\n    };\n    BaseExcelSerializingSession.prototype.onNewBodyColumn = function (rowIndex, currentCells) {\n        var _this = this;\n        var skipCols = 0;\n        return function (column, index, node) {\n            if (skipCols > 0) {\n                skipCols -= 1;\n                return;\n            }\n            var valueForCell = _this.extractRowCellValue(column, index, rowIndex, Constants.EXPORT_TYPE_EXCEL, node);\n            var styleIds = _this.config.styleLinker(RowType.BODY, rowIndex, valueForCell, column, node);\n            var excelStyleId = _this.getStyleId(styleIds);\n            var colSpan = column.getColSpan(node);\n            var addedImage = _this.addImage(rowIndex, column, valueForCell);\n            if (addedImage) {\n                currentCells.push(_this.createCell(excelStyleId, _this.getDataTypeForValue(addedImage.value), addedImage.value == null ? '' : addedImage.value));\n            }\n            else if (colSpan > 1) {\n                skipCols = colSpan - 1;\n                currentCells.push(_this.createMergedCell(excelStyleId, _this.getDataTypeForValue(valueForCell), valueForCell, colSpan - 1));\n            }\n            else {\n                currentCells.push(_this.createCell(excelStyleId, _this.getDataTypeForValue(valueForCell), valueForCell));\n            }\n        };\n    };\n    BaseExcelSerializingSession.prototype.getStyleId = function (styleIds) {\n        if (!styleIds || !styleIds.length) {\n            return null;\n        }\n        if (styleIds.length === 1) {\n            return styleIds[0];\n        }\n        var key = styleIds.join(\"-\");\n        if (!this.mixedStyles[key]) {\n            this.addNewMixedStyle(styleIds);\n        }\n        return this.mixedStyles[key].excelID;\n    };\n    BaseExcelSerializingSession.prototype.addNewMixedStyle = function (styleIds) {\n        var _this = this;\n        this.mixedStyleCounter += 1;\n        var excelId = \"mixedStyle\" + this.mixedStyleCounter;\n        var resultantStyle = {};\n        styleIds.forEach(function (styleId) {\n            _this.excelStyles.forEach(function (excelStyle) {\n                if (excelStyle.id === styleId) {\n                    _.mergeDeep(resultantStyle, _.deepCloneObject(excelStyle));\n                }\n            });\n        });\n        resultantStyle.id = excelId;\n        resultantStyle.name = excelId;\n        var key = styleIds.join(\"-\");\n        this.mixedStyles[key] = {\n            excelID: excelId,\n            key: key,\n            result: resultantStyle\n        };\n        this.excelStyles.push(resultantStyle);\n        this.stylesByIds[excelId] = resultantStyle;\n    };\n    return BaseExcelSerializingSession;\n}(BaseGridSerializingSession));\nexport { BaseExcelSerializingSession };\n"]},"metadata":{},"sourceType":"module"}