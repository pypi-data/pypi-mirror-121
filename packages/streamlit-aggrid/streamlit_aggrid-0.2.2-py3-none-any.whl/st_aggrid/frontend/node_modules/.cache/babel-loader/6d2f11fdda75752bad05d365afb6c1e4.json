{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport { _, Events, RowNode } from \"@ag-grid-community/core\";\n\nvar ClientSideNodeManager = function () {\n  function ClientSideNodeManager(rootNode, gridOptionsWrapper, context, eventService, columnModel, gridApi, columnApi, selectionService) {\n    this.nextId = 0; // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n\n    this.allNodesMap = {};\n    this.rootNode = rootNode;\n    this.gridOptionsWrapper = gridOptionsWrapper;\n    this.context = context;\n    this.eventService = eventService;\n    this.columnModel = columnModel;\n    this.gridApi = gridApi;\n    this.columnApi = columnApi;\n    this.selectionService = selectionService;\n    this.rootNode.group = true;\n    this.rootNode.level = -1;\n    this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;\n    this.rootNode.allLeafChildren = [];\n    this.rootNode.childrenAfterGroup = [];\n    this.rootNode.childrenAfterSort = [];\n    this.rootNode.childrenAfterFilter = []; // if we make this class a bean, then can annotate postConstruct\n\n    this.postConstruct();\n  } // @PostConstruct - this is not a bean, so postConstruct called by constructor\n\n\n  ClientSideNodeManager.prototype.postConstruct = function () {\n    // func below doesn't have 'this' pointer, so need to pull out these bits\n    this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();\n    this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();\n    this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n    this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();\n  };\n\n  ClientSideNodeManager.prototype.getCopyOfNodesMap = function () {\n    return _.cloneObject(this.allNodesMap);\n  };\n\n  ClientSideNodeManager.prototype.getRowNode = function (id) {\n    return this.allNodesMap[id];\n  };\n\n  ClientSideNodeManager.prototype.setRowData = function (rowData) {\n    this.rootNode.childrenAfterFilter = null;\n    this.rootNode.childrenAfterGroup = null;\n    this.rootNode.childrenAfterSort = null;\n    this.rootNode.childrenMapped = null;\n    this.rootNode.updateHasChildren();\n    this.nextId = 0;\n    this.allNodesMap = {};\n\n    if (!rowData) {\n      this.rootNode.allLeafChildren = [];\n      this.rootNode.childrenAfterGroup = [];\n      return;\n    } // kick off recursion\n    // we add rootNode as the parent, however if using ag-grid-enterprise, the grouping stage\n    // sets the parent node on each row (even if we are not grouping). so setting parent node\n    // here is for benefit of ag-grid-community users\n\n\n    this.rootNode.allLeafChildren = this.recursiveFunction(rowData, this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n  };\n\n  ClientSideNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n    var rowNodeTransaction = {\n      remove: [],\n      update: [],\n      add: []\n    };\n    var nodesToUnselect = [];\n    this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n    this.executeAdd(rowDataTran, rowNodeTransaction);\n    this.updateSelection(nodesToUnselect);\n\n    if (rowNodeOrder) {\n      _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n    }\n\n    return rowNodeTransaction;\n  };\n\n  ClientSideNodeManager.prototype.updateSelection = function (nodesToUnselect) {\n    var selectionChanged = nodesToUnselect.length > 0;\n\n    if (selectionChanged) {\n      nodesToUnselect.forEach(function (rowNode) {\n        rowNode.setSelected(false, false, true);\n      });\n    } // we do this regardless of nodes to unselect or not, as it's possible\n    // a new node was inserted, so a parent that was previously selected (as all\n    // children were selected) should not be tri-state (as new one unselected against\n    // all other selected children).\n\n\n    this.selectionService.updateGroupsFromChildrenSelections();\n\n    if (selectionChanged) {\n      var event_1 = {\n        type: Events.EVENT_SELECTION_CHANGED,\n        api: this.gridApi,\n        columnApi: this.columnApi\n      };\n      this.eventService.dispatchEvent(event_1);\n    }\n  };\n\n  ClientSideNodeManager.prototype.executeAdd = function (rowDataTran, rowNodeTransaction) {\n    var _this = this;\n\n    var add = rowDataTran.add,\n        addIndex = rowDataTran.addIndex;\n\n    if (_.missingOrEmpty(add)) {\n      return;\n    } // create new row nodes for each data item\n\n\n    var newNodes = add.map(function (item) {\n      return _this.createNode(item, _this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n    }); // add new row nodes to the root nodes 'allLeafChildren'\n\n    var useIndex = typeof addIndex === 'number' && addIndex >= 0;\n\n    if (useIndex) {\n      // new rows are inserted in one go by concatenating them in between the existing rows at the desired index.\n      // this is much faster than splicing them individually into 'allLeafChildren' when there are large inserts.\n      var existingLeafChildren = this.rootNode.allLeafChildren;\n      var nodesBeforeIndex = existingLeafChildren.slice(0, addIndex);\n      var nodesAfterIndex = existingLeafChildren.slice(addIndex, existingLeafChildren.length);\n      this.rootNode.allLeafChildren = __spreadArrays(nodesBeforeIndex, newNodes, nodesAfterIndex);\n    } else {\n      this.rootNode.allLeafChildren = __spreadArrays(this.rootNode.allLeafChildren, newNodes);\n    } // add new row nodes to the transaction add items\n\n\n    rowNodeTransaction.add = newNodes;\n  };\n\n  ClientSideNodeManager.prototype.executeRemove = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    var _this = this;\n\n    var remove = rowDataTran.remove;\n\n    if (_.missingOrEmpty(remove)) {\n      return;\n    }\n\n    var rowIdsRemoved = {};\n    remove.forEach(function (item) {\n      var rowNode = _this.lookupRowNode(item);\n\n      if (!rowNode) {\n        return;\n      } // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n      // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n\n\n      if (rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      } // so row renderer knows to fade row out (and not reposition it)\n\n\n      rowNode.clearRowTopAndRowIndex(); // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially\n      // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n\n      rowIdsRemoved[rowNode.id] = true; // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n\n      delete _this.allNodesMap[rowNode.id];\n      rowNodeTransaction.remove.push(rowNode);\n    });\n    this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function (rowNode) {\n      return !rowIdsRemoved[rowNode.id];\n    });\n  };\n\n  ClientSideNodeManager.prototype.executeUpdate = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n    var _this = this;\n\n    var update = rowDataTran.update;\n\n    if (_.missingOrEmpty(update)) {\n      return;\n    }\n\n    update.forEach(function (item) {\n      var rowNode = _this.lookupRowNode(item);\n\n      if (!rowNode) {\n        return;\n      }\n\n      rowNode.updateData(item);\n\n      if (!rowNode.selectable && rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      }\n\n      _this.setMasterForRow(rowNode, item, ClientSideNodeManager.TOP_LEVEL, false);\n\n      rowNodeTransaction.update.push(rowNode);\n    });\n  };\n\n  ClientSideNodeManager.prototype.lookupRowNode = function (data) {\n    var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n    var rowNode;\n\n    if (_.exists(rowNodeIdFunc)) {\n      // find rowNode using id\n      var id = rowNodeIdFunc(data);\n      rowNode = this.allNodesMap[id];\n\n      if (!rowNode) {\n        console.error(\"AG Grid: could not find row id=\" + id + \", data item was not found for this id\");\n        return null;\n      }\n    } else {\n      // find rowNode using object references\n      rowNode = _.find(this.rootNode.allLeafChildren, function (node) {\n        return node.data === data;\n      });\n\n      if (!rowNode) {\n        console.error(\"AG Grid: could not find data item as object was not found\", data);\n        console.error(\"Consider using getRowNodeId to help the Grid find matching row data\");\n        return null;\n      }\n    }\n\n    return rowNode;\n  };\n\n  ClientSideNodeManager.prototype.recursiveFunction = function (rowData, parent, level) {\n    var _this = this; // make sure the rowData is an array and not a string of json - this was a commonly reported problem on the forum\n\n\n    if (typeof rowData === 'string') {\n      console.warn('AG Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');\n      return;\n    }\n\n    var rowNodes = [];\n    rowData.forEach(function (dataItem) {\n      var node = _this.createNode(dataItem, parent, level);\n\n      rowNodes.push(node);\n    });\n    return rowNodes;\n  };\n\n  ClientSideNodeManager.prototype.createNode = function (dataItem, parent, level) {\n    var node = new RowNode();\n    this.context.createBean(node);\n    node.group = false;\n    this.setMasterForRow(node, dataItem, level, true);\n\n    if (parent && !this.suppressParentsInRowNodes) {\n      node.parent = parent;\n    }\n\n    node.level = level;\n    node.setDataAndId(dataItem, this.nextId.toString());\n\n    if (this.allNodesMap[node.id]) {\n      console.warn(\"ag-grid: duplicate node id '\" + node.id + \"' detected from getRowNodeId callback, this could cause issues in your grid.\");\n    }\n\n    this.allNodesMap[node.id] = node;\n    this.nextId++;\n    return node;\n  };\n\n  ClientSideNodeManager.prototype.setMasterForRow = function (rowNode, data, level, setExpanded) {\n    if (this.doingTreeData) {\n      rowNode.setMaster(false);\n\n      if (setExpanded) {\n        rowNode.expanded = false;\n      }\n    } else {\n      // this is the default, for when doing grid data\n      if (this.doingMasterDetail) {\n        // if we are doing master detail, then the\n        // default is that everything can be a Master Row.\n        if (this.isRowMasterFunc) {\n          rowNode.setMaster(this.isRowMasterFunc(data));\n        } else {\n          rowNode.setMaster(true);\n        }\n      } else {\n        rowNode.setMaster(false);\n      }\n\n      if (setExpanded) {\n        var rowGroupColumns = this.columnModel.getRowGroupColumns();\n        var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0; // need to take row group into account when determining level\n\n        var masterRowLevel = level + numRowGroupColumns;\n        rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n      }\n    }\n  };\n\n  ClientSideNodeManager.prototype.isExpanded = function (level) {\n    var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();\n\n    if (expandByDefault === -1) {\n      return true;\n    }\n\n    return level < expandByDefault;\n  };\n\n  ClientSideNodeManager.TOP_LEVEL = 0;\n  ClientSideNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';\n  return ClientSideNodeManager;\n}();\n\nexport { ClientSideNodeManager };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/clientSideNodeManager.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","_","Events","RowNode","ClientSideNodeManager","rootNode","gridOptionsWrapper","context","eventService","columnModel","gridApi","columnApi","selectionService","nextId","allNodesMap","group","level","id","ROOT_NODE_ID","allLeafChildren","childrenAfterGroup","childrenAfterSort","childrenAfterFilter","postConstruct","prototype","suppressParentsInRowNodes","isSuppressParentsInRowNodes","isRowMasterFunc","getIsRowMasterFunc","doingTreeData","isTreeData","doingMasterDetail","isMasterDetail","getCopyOfNodesMap","cloneObject","getRowNode","setRowData","rowData","childrenMapped","updateHasChildren","recursiveFunction","TOP_LEVEL","updateRowData","rowDataTran","rowNodeOrder","rowNodeTransaction","remove","update","add","nodesToUnselect","executeRemove","executeUpdate","executeAdd","updateSelection","sortRowNodesByOrder","selectionChanged","forEach","rowNode","setSelected","updateGroupsFromChildrenSelections","event_1","type","EVENT_SELECTION_CHANGED","api","dispatchEvent","_this","addIndex","missingOrEmpty","newNodes","map","item","createNode","useIndex","existingLeafChildren","nodesBeforeIndex","slice","nodesAfterIndex","rowIdsRemoved","lookupRowNode","isSelected","push","clearRowTopAndRowIndex","filter","updateData","selectable","setMasterForRow","data","rowNodeIdFunc","getRowNodeIdFunc","exists","console","error","find","node","parent","warn","rowNodes","dataItem","createBean","setDataAndId","toString","setExpanded","setMaster","expanded","rowGroupColumns","getRowGroupColumns","numRowGroupColumns","masterRowLevel","master","isExpanded","expandByDefault","getGroupDefaultExpanded"],"mappings":"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","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { _, Events, RowNode } from \"@ag-grid-community/core\";\nvar ClientSideNodeManager = /** @class */ (function () {\n    function ClientSideNodeManager(rootNode, gridOptionsWrapper, context, eventService, columnModel, gridApi, columnApi, selectionService) {\n        this.nextId = 0;\n        // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n        this.allNodesMap = {};\n        this.rootNode = rootNode;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.context = context;\n        this.eventService = eventService;\n        this.columnModel = columnModel;\n        this.gridApi = gridApi;\n        this.columnApi = columnApi;\n        this.selectionService = selectionService;\n        this.rootNode.group = true;\n        this.rootNode.level = -1;\n        this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;\n        this.rootNode.allLeafChildren = [];\n        this.rootNode.childrenAfterGroup = [];\n        this.rootNode.childrenAfterSort = [];\n        this.rootNode.childrenAfterFilter = [];\n        // if we make this class a bean, then can annotate postConstruct\n        this.postConstruct();\n    }\n    // @PostConstruct - this is not a bean, so postConstruct called by constructor\n    ClientSideNodeManager.prototype.postConstruct = function () {\n        // func below doesn't have 'this' pointer, so need to pull out these bits\n        this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();\n        this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();\n        this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();\n    };\n    ClientSideNodeManager.prototype.getCopyOfNodesMap = function () {\n        return _.cloneObject(this.allNodesMap);\n    };\n    ClientSideNodeManager.prototype.getRowNode = function (id) {\n        return this.allNodesMap[id];\n    };\n    ClientSideNodeManager.prototype.setRowData = function (rowData) {\n        this.rootNode.childrenAfterFilter = null;\n        this.rootNode.childrenAfterGroup = null;\n        this.rootNode.childrenAfterSort = null;\n        this.rootNode.childrenMapped = null;\n        this.rootNode.updateHasChildren();\n        this.nextId = 0;\n        this.allNodesMap = {};\n        if (!rowData) {\n            this.rootNode.allLeafChildren = [];\n            this.rootNode.childrenAfterGroup = [];\n            return;\n        }\n        // kick off recursion\n        // we add rootNode as the parent, however if using ag-grid-enterprise, the grouping stage\n        // sets the parent node on each row (even if we are not grouping). so setting parent node\n        // here is for benefit of ag-grid-community users\n        this.rootNode.allLeafChildren = this.recursiveFunction(rowData, this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n    };\n    ClientSideNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n        var rowNodeTransaction = {\n            remove: [],\n            update: [],\n            add: []\n        };\n        var nodesToUnselect = [];\n        this.executeRemove(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.executeUpdate(rowDataTran, rowNodeTransaction, nodesToUnselect);\n        this.executeAdd(rowDataTran, rowNodeTransaction);\n        this.updateSelection(nodesToUnselect);\n        if (rowNodeOrder) {\n            _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n        }\n        return rowNodeTransaction;\n    };\n    ClientSideNodeManager.prototype.updateSelection = function (nodesToUnselect) {\n        var selectionChanged = nodesToUnselect.length > 0;\n        if (selectionChanged) {\n            nodesToUnselect.forEach(function (rowNode) {\n                rowNode.setSelected(false, false, true);\n            });\n        }\n        // we do this regardless of nodes to unselect or not, as it's possible\n        // a new node was inserted, so a parent that was previously selected (as all\n        // children were selected) should not be tri-state (as new one unselected against\n        // all other selected children).\n        this.selectionService.updateGroupsFromChildrenSelections();\n        if (selectionChanged) {\n            var event_1 = {\n                type: Events.EVENT_SELECTION_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n    };\n    ClientSideNodeManager.prototype.executeAdd = function (rowDataTran, rowNodeTransaction) {\n        var _this = this;\n        var add = rowDataTran.add, addIndex = rowDataTran.addIndex;\n        if (_.missingOrEmpty(add)) {\n            return;\n        }\n        // create new row nodes for each data item\n        var newNodes = add.map(function (item) { return _this.createNode(item, _this.rootNode, ClientSideNodeManager.TOP_LEVEL); });\n        // add new row nodes to the root nodes 'allLeafChildren'\n        var useIndex = typeof addIndex === 'number' && addIndex >= 0;\n        if (useIndex) {\n            // new rows are inserted in one go by concatenating them in between the existing rows at the desired index.\n            // this is much faster than splicing them individually into 'allLeafChildren' when there are large inserts.\n            var existingLeafChildren = this.rootNode.allLeafChildren;\n            var nodesBeforeIndex = existingLeafChildren.slice(0, addIndex);\n            var nodesAfterIndex = existingLeafChildren.slice(addIndex, existingLeafChildren.length);\n            this.rootNode.allLeafChildren = __spreadArrays(nodesBeforeIndex, newNodes, nodesAfterIndex);\n        }\n        else {\n            this.rootNode.allLeafChildren = __spreadArrays(this.rootNode.allLeafChildren, newNodes);\n        }\n        // add new row nodes to the transaction add items\n        rowNodeTransaction.add = newNodes;\n    };\n    ClientSideNodeManager.prototype.executeRemove = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        var _this = this;\n        var remove = rowDataTran.remove;\n        if (_.missingOrEmpty(remove)) {\n            return;\n        }\n        var rowIdsRemoved = {};\n        remove.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            // do delete - setting 'suppressFinishActions = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n            // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n            if (rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            // so row renderer knows to fade row out (and not reposition it)\n            rowNode.clearRowTopAndRowIndex();\n            // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially\n            // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n            rowIdsRemoved[rowNode.id] = true;\n            // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n            delete _this.allNodesMap[rowNode.id];\n            rowNodeTransaction.remove.push(rowNode);\n        });\n        this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function (rowNode) { return !rowIdsRemoved[rowNode.id]; });\n    };\n    ClientSideNodeManager.prototype.executeUpdate = function (rowDataTran, rowNodeTransaction, nodesToUnselect) {\n        var _this = this;\n        var update = rowDataTran.update;\n        if (_.missingOrEmpty(update)) {\n            return;\n        }\n        update.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            rowNode.updateData(item);\n            if (!rowNode.selectable && rowNode.isSelected()) {\n                nodesToUnselect.push(rowNode);\n            }\n            _this.setMasterForRow(rowNode, item, ClientSideNodeManager.TOP_LEVEL, false);\n            rowNodeTransaction.update.push(rowNode);\n        });\n    };\n    ClientSideNodeManager.prototype.lookupRowNode = function (data) {\n        var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n        var rowNode;\n        if (_.exists(rowNodeIdFunc)) {\n            // find rowNode using id\n            var id = rowNodeIdFunc(data);\n            rowNode = this.allNodesMap[id];\n            if (!rowNode) {\n                console.error(\"AG Grid: could not find row id=\" + id + \", data item was not found for this id\");\n                return null;\n            }\n        }\n        else {\n            // find rowNode using object references\n            rowNode = _.find(this.rootNode.allLeafChildren, function (node) { return node.data === data; });\n            if (!rowNode) {\n                console.error(\"AG Grid: could not find data item as object was not found\", data);\n                console.error(\"Consider using getRowNodeId to help the Grid find matching row data\");\n                return null;\n            }\n        }\n        return rowNode;\n    };\n    ClientSideNodeManager.prototype.recursiveFunction = function (rowData, parent, level) {\n        var _this = this;\n        // make sure the rowData is an array and not a string of json - this was a commonly reported problem on the forum\n        if (typeof rowData === 'string') {\n            console.warn('AG Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');\n            return;\n        }\n        var rowNodes = [];\n        rowData.forEach(function (dataItem) {\n            var node = _this.createNode(dataItem, parent, level);\n            rowNodes.push(node);\n        });\n        return rowNodes;\n    };\n    ClientSideNodeManager.prototype.createNode = function (dataItem, parent, level) {\n        var node = new RowNode();\n        this.context.createBean(node);\n        node.group = false;\n        this.setMasterForRow(node, dataItem, level, true);\n        if (parent && !this.suppressParentsInRowNodes) {\n            node.parent = parent;\n        }\n        node.level = level;\n        node.setDataAndId(dataItem, this.nextId.toString());\n        if (this.allNodesMap[node.id]) {\n            console.warn(\"ag-grid: duplicate node id '\" + node.id + \"' detected from getRowNodeId callback, this could cause issues in your grid.\");\n        }\n        this.allNodesMap[node.id] = node;\n        this.nextId++;\n        return node;\n    };\n    ClientSideNodeManager.prototype.setMasterForRow = function (rowNode, data, level, setExpanded) {\n        if (this.doingTreeData) {\n            rowNode.setMaster(false);\n            if (setExpanded) {\n                rowNode.expanded = false;\n            }\n        }\n        else {\n            // this is the default, for when doing grid data\n            if (this.doingMasterDetail) {\n                // if we are doing master detail, then the\n                // default is that everything can be a Master Row.\n                if (this.isRowMasterFunc) {\n                    rowNode.setMaster(this.isRowMasterFunc(data));\n                }\n                else {\n                    rowNode.setMaster(true);\n                }\n            }\n            else {\n                rowNode.setMaster(false);\n            }\n            if (setExpanded) {\n                var rowGroupColumns = this.columnModel.getRowGroupColumns();\n                var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;\n                // need to take row group into account when determining level\n                var masterRowLevel = level + numRowGroupColumns;\n                rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n            }\n        }\n    };\n    ClientSideNodeManager.prototype.isExpanded = function (level) {\n        var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();\n        if (expandByDefault === -1) {\n            return true;\n        }\n        return level < expandByDefault;\n    };\n    ClientSideNodeManager.TOP_LEVEL = 0;\n    ClientSideNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';\n    return ClientSideNodeManager;\n}());\nexport { ClientSideNodeManager };\n"]},"metadata":{},"sourceType":"module"}