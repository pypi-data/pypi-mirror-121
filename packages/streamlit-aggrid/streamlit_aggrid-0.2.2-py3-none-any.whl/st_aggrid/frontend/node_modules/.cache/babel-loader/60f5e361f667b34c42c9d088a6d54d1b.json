{"ast":null,"code":"var HierarchyNode = function () {\n  function HierarchyNode(data) {\n    this.value = 0;\n    this.depth = 0;\n    this.height = 0;\n    this.parent = undefined;\n    this.children = undefined;\n    this.data = data;\n  }\n\n  HierarchyNode.prototype.countFn = function (node) {\n    var sum = 0,\n        children = node.children;\n\n    if (!children || !children.length) {\n      sum = 1;\n    } else {\n      var i = children.length;\n\n      while (--i >= 0) {\n        sum += children[i].value;\n      }\n    }\n\n    node.value = sum;\n  };\n\n  HierarchyNode.prototype.count = function () {\n    return this.eachAfter(this.countFn);\n  };\n\n  HierarchyNode.prototype.each = function (callback, scope) {\n    var _this = this;\n\n    var index = -1;\n    this.iterator(function (node) {\n      callback.call(scope, node, ++index, _this);\n    });\n    return this;\n  };\n  /**\n   * Invokes the given callback for each node in post-order traversal.\n   * @param callback\n   * @param scope\n   */\n\n\n  HierarchyNode.prototype.eachAfter = function (callback, scope) {\n    var node = this;\n    var nodes = [node];\n    var next = [];\n\n    while (node = nodes.pop()) {\n      next.push(node);\n      var children = node.children;\n\n      if (children) {\n        for (var i = 0, n = children.length; i < n; ++i) {\n          nodes.push(children[i]);\n        }\n      }\n    }\n\n    var index = -1;\n\n    while (node = next.pop()) {\n      callback.call(scope, node, ++index, this);\n    }\n\n    return this;\n  };\n  /**\n   * Invokes the given callback for each node in pre-order traversal.\n   * @param callback\n   * @param scope\n   */\n\n\n  HierarchyNode.prototype.eachBefore = function (callback, scope) {\n    var node = this;\n    var nodes = [node];\n    var index = -1;\n\n    while (node = nodes.pop()) {\n      callback.call(scope, node, ++index, this);\n      var children = node.children;\n\n      if (children) {\n        for (var i = children.length - 1; i >= 0; --i) {\n          var child = children[i];\n          nodes.push(child);\n        }\n      }\n    }\n\n    return this;\n  };\n\n  HierarchyNode.prototype.find = function (callback, scope) {\n    var _this = this;\n\n    var index = -1;\n    var result;\n    this.iterator(function (node) {\n      if (callback.call(scope, node, ++index, _this)) {\n        result = node;\n        return false;\n      }\n    });\n    return result;\n  };\n\n  HierarchyNode.prototype.sum = function (value) {\n    return this.eachAfter(function (node) {\n      var sum = +value(node.data) || 0;\n      var children = node.children;\n\n      if (children) {\n        var i = children.length;\n\n        while (--i >= 0) {\n          sum += children[i].value;\n        }\n      }\n\n      node.value = sum;\n    });\n  };\n\n  HierarchyNode.prototype.sort = function (compare) {\n    return this.eachBefore(function (node) {\n      if (node.children) {\n        node.children.sort(compare);\n      }\n    });\n  };\n\n  HierarchyNode.prototype.path = function (end) {\n    var start = this;\n    var ancestor = leastCommonAncestor(start, end);\n    var nodes = [start];\n\n    while (start !== ancestor) {\n      start = start.parent;\n      nodes.push(start);\n    }\n\n    var k = nodes.length;\n\n    while (end !== ancestor) {\n      nodes.splice(k, 0, end);\n      end = end.parent;\n    } // const otherBranch = [];\n    // while (end !== ancestor) {\n    //     otherBranch.push(end);\n    //     end = end.parent;\n    // }\n    // nodes.concat(otherBranch.reverse());\n\n\n    return nodes;\n  };\n\n  HierarchyNode.prototype.ancestors = function () {\n    var node = this;\n    var nodes = [node];\n\n    while (node = node.parent) {\n      nodes.push(node);\n    }\n\n    return nodes;\n  };\n\n  HierarchyNode.prototype.descendants = function () {\n    var nodes = [];\n    this.iterator(function (node) {\n      return nodes.push(node);\n    });\n    return nodes;\n  };\n\n  HierarchyNode.prototype.leaves = function () {\n    var leaves = [];\n    this.eachBefore(function (node) {\n      if (!node.children) {\n        leaves.push(node);\n      }\n    });\n    return leaves;\n  };\n\n  HierarchyNode.prototype.links = function () {\n    var root = this;\n    var links = [];\n    root.each(function (node) {\n      if (node !== root) {\n        // Don’t include the root’s parent, if any.\n        links.push({\n          source: node.parent,\n          target: node\n        });\n      }\n    });\n    return links;\n  };\n\n  HierarchyNode.prototype.copy = function () {// TODO\n  };\n\n  HierarchyNode.prototype.iterator = function (callback) {\n    var node = this;\n    var next = [node];\n    var current;\n\n    doLoop: do {\n      current = next.reverse();\n      next = [];\n\n      while (node = current.pop()) {\n        if (callback(node) === false) {\n          break doLoop;\n        }\n\n        var children = node.children;\n\n        if (children) {\n          for (var i = 0, n = children.length; i < n; ++i) {\n            next.push(children[i]);\n          }\n        }\n      }\n    } while (next.length);\n  };\n\n  return HierarchyNode;\n}();\n\nexport { HierarchyNode };\nexport function hierarchy(data, children) {\n  if (data instanceof Map) {\n    data = [undefined, data];\n\n    if (children === undefined) {\n      children = mapChildren;\n    }\n  } else if (children === undefined) {\n    children = objectChildren;\n  }\n\n  var root = new HierarchyNode(data);\n  var nodes = [root];\n  var node;\n  var child, childs, i, n;\n\n  while (node = nodes.pop()) {\n    if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n      node.children = childs;\n\n      for (i = n - 1; i >= 0; --i) {\n        nodes.push(child = childs[i] = new HierarchyNode(childs[i]));\n        child.parent = node;\n        child.depth = node.depth + 1;\n      }\n    }\n  }\n\n  return root.eachBefore(computeHeight);\n}\n\nfunction computeHeight(node) {\n  var height = 0;\n\n  do {\n    node.height = height;\n  } while ((node = node.parent) && node.height < ++height);\n}\n\nfunction mapChildren(d) {\n  return Array.isArray(d) ? d[1] : undefined;\n}\n\nfunction objectChildren(d) {\n  return d.children;\n}\n\nfunction leastCommonAncestor(a, b) {\n  if (!(a && b)) {\n    return undefined;\n  }\n\n  if (a === b) {\n    return a;\n  }\n\n  var aNodes = a.ancestors();\n  var bNodes = b.ancestors();\n  var c = undefined;\n  a = aNodes.pop();\n  b = bNodes.pop();\n\n  while (a === b) {\n    c = a;\n    a = aNodes.pop();\n    b = bNodes.pop();\n  }\n\n  return c;\n}","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/ag-charts-community/dist/es6/layout/hierarchy.js"],"names":["HierarchyNode","data","value","depth","height","parent","undefined","children","prototype","countFn","node","sum","length","i","count","eachAfter","each","callback","scope","_this","index","iterator","call","nodes","next","pop","push","n","eachBefore","child","find","result","sort","compare","path","end","start","ancestor","leastCommonAncestor","k","splice","ancestors","descendants","leaves","links","root","source","target","copy","current","doLoop","reverse","hierarchy","Map","mapChildren","objectChildren","childs","Array","from","computeHeight","d","isArray","a","b","aNodes","bNodes","c"],"mappings":"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","sourcesContent":["var HierarchyNode = /** @class */ (function () {\n    function HierarchyNode(data) {\n        this.value = 0;\n        this.depth = 0;\n        this.height = 0;\n        this.parent = undefined;\n        this.children = undefined;\n        this.data = data;\n    }\n    HierarchyNode.prototype.countFn = function (node) {\n        var sum = 0, children = node.children;\n        if (!children || !children.length) {\n            sum = 1;\n        }\n        else {\n            var i = children.length;\n            while (--i >= 0) {\n                sum += children[i].value;\n            }\n        }\n        node.value = sum;\n    };\n    HierarchyNode.prototype.count = function () {\n        return this.eachAfter(this.countFn);\n    };\n    HierarchyNode.prototype.each = function (callback, scope) {\n        var _this = this;\n        var index = -1;\n        this.iterator(function (node) {\n            callback.call(scope, node, ++index, _this);\n        });\n        return this;\n    };\n    /**\n     * Invokes the given callback for each node in post-order traversal.\n     * @param callback\n     * @param scope\n     */\n    HierarchyNode.prototype.eachAfter = function (callback, scope) {\n        var node = this;\n        var nodes = [node];\n        var next = [];\n        while (node = nodes.pop()) {\n            next.push(node);\n            var children = node.children;\n            if (children) {\n                for (var i = 0, n = children.length; i < n; ++i) {\n                    nodes.push(children[i]);\n                }\n            }\n        }\n        var index = -1;\n        while (node = next.pop()) {\n            callback.call(scope, node, ++index, this);\n        }\n        return this;\n    };\n    /**\n     * Invokes the given callback for each node in pre-order traversal.\n     * @param callback\n     * @param scope\n     */\n    HierarchyNode.prototype.eachBefore = function (callback, scope) {\n        var node = this;\n        var nodes = [node];\n        var index = -1;\n        while (node = nodes.pop()) {\n            callback.call(scope, node, ++index, this);\n            var children = node.children;\n            if (children) {\n                for (var i = children.length - 1; i >= 0; --i) {\n                    var child = children[i];\n                    nodes.push(child);\n                }\n            }\n        }\n        return this;\n    };\n    HierarchyNode.prototype.find = function (callback, scope) {\n        var _this = this;\n        var index = -1;\n        var result;\n        this.iterator(function (node) {\n            if (callback.call(scope, node, ++index, _this)) {\n                result = node;\n                return false;\n            }\n        });\n        return result;\n    };\n    HierarchyNode.prototype.sum = function (value) {\n        return this.eachAfter(function (node) {\n            var sum = +value(node.data) || 0;\n            var children = node.children;\n            if (children) {\n                var i = children.length;\n                while (--i >= 0) {\n                    sum += children[i].value;\n                }\n            }\n            node.value = sum;\n        });\n    };\n    HierarchyNode.prototype.sort = function (compare) {\n        return this.eachBefore(function (node) {\n            if (node.children) {\n                node.children.sort(compare);\n            }\n        });\n    };\n    HierarchyNode.prototype.path = function (end) {\n        var start = this;\n        var ancestor = leastCommonAncestor(start, end);\n        var nodes = [start];\n        while (start !== ancestor) {\n            start = start.parent;\n            nodes.push(start);\n        }\n        var k = nodes.length;\n        while (end !== ancestor) {\n            nodes.splice(k, 0, end);\n            end = end.parent;\n        }\n        // const otherBranch = [];\n        // while (end !== ancestor) {\n        //     otherBranch.push(end);\n        //     end = end.parent;\n        // }\n        // nodes.concat(otherBranch.reverse());\n        return nodes;\n    };\n    HierarchyNode.prototype.ancestors = function () {\n        var node = this;\n        var nodes = [node];\n        while (node = node.parent) {\n            nodes.push(node);\n        }\n        return nodes;\n    };\n    HierarchyNode.prototype.descendants = function () {\n        var nodes = [];\n        this.iterator(function (node) { return nodes.push(node); });\n        return nodes;\n    };\n    HierarchyNode.prototype.leaves = function () {\n        var leaves = [];\n        this.eachBefore(function (node) {\n            if (!node.children) {\n                leaves.push(node);\n            }\n        });\n        return leaves;\n    };\n    HierarchyNode.prototype.links = function () {\n        var root = this;\n        var links = [];\n        root.each(function (node) {\n            if (node !== root) { // Don’t include the root’s parent, if any.\n                links.push({ source: node.parent, target: node });\n            }\n        });\n        return links;\n    };\n    HierarchyNode.prototype.copy = function () {\n        // TODO\n    };\n    HierarchyNode.prototype.iterator = function (callback) {\n        var node = this;\n        var next = [node];\n        var current;\n        doLoop: do {\n            current = next.reverse();\n            next = [];\n            while (node = current.pop()) {\n                if (callback(node) === false) {\n                    break doLoop;\n                }\n                var children = node.children;\n                if (children) {\n                    for (var i = 0, n = children.length; i < n; ++i) {\n                        next.push(children[i]);\n                    }\n                }\n            }\n        } while (next.length);\n    };\n    return HierarchyNode;\n}());\nexport { HierarchyNode };\nexport function hierarchy(data, children) {\n    if (data instanceof Map) {\n        data = [undefined, data];\n        if (children === undefined) {\n            children = mapChildren;\n        }\n    }\n    else if (children === undefined) {\n        children = objectChildren;\n    }\n    var root = new HierarchyNode(data);\n    var nodes = [root];\n    var node;\n    var child, childs, i, n;\n    while (node = nodes.pop()) {\n        if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {\n            node.children = childs;\n            for (i = n - 1; i >= 0; --i) {\n                nodes.push(child = childs[i] = new HierarchyNode(childs[i]));\n                child.parent = node;\n                child.depth = node.depth + 1;\n            }\n        }\n    }\n    return root.eachBefore(computeHeight);\n}\nfunction computeHeight(node) {\n    var height = 0;\n    do {\n        node.height = height;\n    } while ((node = node.parent) && (node.height < ++height));\n}\nfunction mapChildren(d) {\n    return Array.isArray(d) ? d[1] : undefined;\n}\nfunction objectChildren(d) {\n    return d.children;\n}\nfunction leastCommonAncestor(a, b) {\n    if (!(a && b)) {\n        return undefined;\n    }\n    if (a === b) {\n        return a;\n    }\n    var aNodes = a.ancestors();\n    var bNodes = b.ancestors();\n    var c = undefined;\n    a = aNodes.pop();\n    b = bNodes.pop();\n    while (a === b) {\n        c = a;\n        a = aNodes.pop();\n        b = bNodes.pop();\n    }\n    return c;\n}\n"]},"metadata":{},"sourceType":"module"}