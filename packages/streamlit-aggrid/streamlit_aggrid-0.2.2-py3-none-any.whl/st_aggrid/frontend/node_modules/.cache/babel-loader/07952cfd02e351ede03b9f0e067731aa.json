{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, Autowired, BeanStub, ChartType, Events, PostConstruct } from \"@ag-grid-community/core\";\nimport { ChartDataModel } from \"./chartDataModel\";\nimport { getChartTheme } from \"ag-charts-community\";\n\nvar ChartController = function (_super) {\n  __extends(ChartController, _super);\n\n  function ChartController(model) {\n    var _this = _super.call(this) || this;\n\n    _this.model = model;\n    return _this;\n  }\n\n  ChartController.prototype.init = function () {\n    var _this = this;\n\n    this.setChartRange();\n    this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, function (event) {\n      if (event.id && event.id === _this.model.getChartId()) {\n        _this.updateForRangeChange();\n      }\n    });\n\n    if (this.model.isUnlinked()) {\n      if (this.rangeService) {\n        this.rangeService.setCellRanges([]);\n      }\n    }\n\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.updateForGridChange.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.updateForGridChange.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.updateForGridChange.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.updateForGridChange.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.updateForGridChange.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.updateForDataChange.bind(this));\n  };\n\n  ChartController.prototype.updateForGridChange = function () {\n    if (this.model.isUnlinked()) {\n      return;\n    }\n\n    this.model.updateCellRanges();\n    this.setChartRange();\n  };\n\n  ChartController.prototype.updateForDataChange = function () {\n    if (this.model.isUnlinked()) {\n      return;\n    }\n\n    this.model.updateData();\n    this.raiseChartUpdatedEvent();\n  };\n\n  ChartController.prototype.updateForRangeChange = function () {\n    this.updateForGridChange();\n    this.raiseChartRangeSelectionChangedEvent();\n  };\n\n  ChartController.prototype.updateForPanelChange = function (updatedCol) {\n    this.model.updateCellRanges(updatedCol);\n    this.setChartRange();\n    this.raiseChartRangeSelectionChangedEvent();\n  };\n\n  ChartController.prototype.getChartModel = function () {\n    var modelType = this.model.isPivotChart() ? 'pivot' : 'range';\n    return {\n      modelType: modelType,\n      chartId: this.model.getChartId(),\n      chartType: this.model.getChartType(),\n      chartThemeName: this.getThemeName(),\n      chartOptions: this.chartProxy.getChartOptions(),\n      cellRange: this.model.getCellRangeParams(),\n      suppressChartRanges: this.model.isSuppressChartRanges(),\n      aggFunc: this.model.getAggFunc(),\n      unlinkChart: this.model.isUnlinked()\n    };\n  };\n\n  ChartController.prototype.getChartType = function () {\n    return this.model.getChartType();\n  };\n\n  ChartController.prototype.isPivotChart = function () {\n    return this.model.isPivotChart();\n  };\n\n  ChartController.prototype.isGrouping = function () {\n    return this.model.isGrouping();\n  };\n\n  ChartController.prototype.getThemeName = function () {\n    return this.model.getChartThemeName();\n  };\n\n  ChartController.prototype.getThemes = function () {\n    return this.gridOptionsWrapper.getChartThemes();\n  };\n\n  ChartController.prototype.getPalettes = function () {\n    var _this = this;\n\n    var customPalette = this.chartProxy.getCustomPalette();\n\n    if (customPalette) {\n      return [customPalette];\n    }\n\n    var themeNames = this.gridOptionsWrapper.getChartThemes();\n    return themeNames.map(function (themeName) {\n      var theme = _this.chartProxy.isStockTheme(themeName) ? themeName : _this.chartProxy.lookupCustomChartTheme(themeName);\n      return getChartTheme(theme).palette;\n    });\n  };\n\n  ChartController.prototype.setChartType = function (chartType) {\n    this.model.setChartType(chartType);\n    this.raiseChartUpdatedEvent();\n    this.raiseChartOptionsChangedEvent();\n  };\n\n  ChartController.prototype.setChartThemeName = function (chartThemeName) {\n    this.model.setChartThemeName(chartThemeName);\n    this.raiseChartUpdatedEvent();\n    this.raiseChartOptionsChangedEvent();\n  };\n\n  ChartController.prototype.getColStateForMenu = function () {\n    return {\n      dimensionCols: this.model.getDimensionColState(),\n      valueCols: this.model.getValueColState()\n    };\n  };\n\n  ChartController.prototype.isDefaultCategorySelected = function () {\n    return this.model.getSelectedDimension().colId === ChartDataModel.DEFAULT_CATEGORY;\n  };\n\n  ChartController.prototype.setChartRange = function (silent) {\n    if (silent === void 0) {\n      silent = false;\n    }\n\n    if (this.rangeService && !this.model.isSuppressChartRanges() && !this.model.isUnlinked()) {\n      this.rangeService.setCellRanges(this.model.getCellRanges());\n    }\n\n    if (!silent) {\n      this.raiseChartUpdatedEvent();\n    }\n  };\n\n  ChartController.prototype.detachChartRange = function () {\n    // when chart is detached it won't listen to changes from the grid\n    this.model.toggleUnlinked();\n\n    if (this.model.isUnlinked()) {\n      // remove range from grid\n      if (this.rangeService) {\n        this.rangeService.setCellRanges([]);\n      }\n    } else {\n      // update chart data may have changed\n      this.updateForGridChange();\n    }\n  };\n\n  ChartController.prototype.setChartProxy = function (chartProxy) {\n    this.chartProxy = chartProxy;\n  };\n\n  ChartController.prototype.getChartProxy = function () {\n    return this.chartProxy;\n  };\n\n  ChartController.prototype.isActiveXYChart = function () {\n    return _.includes([ChartType.Scatter, ChartType.Bubble], this.getChartType());\n  };\n\n  ChartController.prototype.isChartLinked = function () {\n    return !this.model.isUnlinked();\n  };\n\n  ChartController.prototype.raiseChartUpdatedEvent = function () {\n    var event = Object.freeze({\n      type: ChartController.EVENT_CHART_UPDATED\n    });\n    this.dispatchEvent(event);\n  };\n\n  ChartController.prototype.raiseChartOptionsChangedEvent = function () {\n    this.chartProxy.raiseChartOptionsChangedEvent();\n  };\n\n  ChartController.prototype.raiseChartRangeSelectionChangedEvent = function () {\n    var event = Object.freeze({\n      type: Events.EVENT_CHART_RANGE_SELECTION_CHANGED,\n      id: this.model.getChartId(),\n      chartId: this.model.getChartId(),\n      cellRange: this.model.getCellRangeParams(),\n      api: this.gridApi,\n      columnApi: this.columnApi\n    });\n    this.eventService.dispatchEvent(event);\n  };\n\n  ChartController.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    if (this.rangeService) {\n      this.rangeService.setCellRanges([]);\n    }\n  };\n\n  ChartController.EVENT_CHART_UPDATED = 'chartUpdated';\n\n  __decorate([Autowired('rangeService')], ChartController.prototype, \"rangeService\", void 0);\n\n  __decorate([Autowired('gridApi')], ChartController.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired('columnApi')], ChartController.prototype, \"columnApi\", void 0);\n\n  __decorate([PostConstruct], ChartController.prototype, \"init\", null);\n\n  return ChartController;\n}(BeanStub);\n\nexport { ChartController };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/charts/dist/es6/charts/chartComp/chartController.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","Autowired","BeanStub","ChartType","Events","PostConstruct","ChartDataModel","getChartTheme","ChartController","_super","model","_this","call","init","setChartRange","addManagedListener","eventService","EVENT_RANGE_SELECTION_CHANGED","event","id","getChartId","updateForRangeChange","isUnlinked","rangeService","setCellRanges","EVENT_COLUMN_MOVED","updateForGridChange","bind","EVENT_COLUMN_PINNED","EVENT_COLUMN_VISIBLE","EVENT_COLUMN_ROW_GROUP_CHANGED","EVENT_MODEL_UPDATED","EVENT_CELL_VALUE_CHANGED","updateForDataChange","updateCellRanges","updateData","raiseChartUpdatedEvent","raiseChartRangeSelectionChangedEvent","updateForPanelChange","updatedCol","getChartModel","modelType","isPivotChart","chartId","chartType","getChartType","chartThemeName","getThemeName","chartOptions","chartProxy","getChartOptions","cellRange","getCellRangeParams","suppressChartRanges","isSuppressChartRanges","aggFunc","getAggFunc","unlinkChart","isGrouping","getChartThemeName","getThemes","gridOptionsWrapper","getChartThemes","getPalettes","customPalette","getCustomPalette","themeNames","map","themeName","theme","isStockTheme","lookupCustomChartTheme","palette","setChartType","raiseChartOptionsChangedEvent","setChartThemeName","getColStateForMenu","dimensionCols","getDimensionColState","valueCols","getValueColState","isDefaultCategorySelected","getSelectedDimension","colId","DEFAULT_CATEGORY","silent","getCellRanges","detachChartRange","toggleUnlinked","setChartProxy","getChartProxy","isActiveXYChart","includes","Scatter","Bubble","isChartLinked","freeze","type","EVENT_CHART_UPDATED","dispatchEvent","EVENT_CHART_RANGE_SELECTION_CHANGED","api","gridApi","columnApi","destroy"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, BeanStub, ChartType, Events, PostConstruct, } from \"@ag-grid-community/core\";\nimport { ChartDataModel } from \"./chartDataModel\";\nimport { getChartTheme } from \"ag-charts-community\";\nvar ChartController = /** @class */ (function (_super) {\n    __extends(ChartController, _super);\n    function ChartController(model) {\n        var _this = _super.call(this) || this;\n        _this.model = model;\n        return _this;\n    }\n    ChartController.prototype.init = function () {\n        var _this = this;\n        this.setChartRange();\n        this.addManagedListener(this.eventService, Events.EVENT_RANGE_SELECTION_CHANGED, function (event) {\n            if (event.id && event.id === _this.model.getChartId()) {\n                _this.updateForRangeChange();\n            }\n        });\n        if (this.model.isUnlinked()) {\n            if (this.rangeService) {\n                this.rangeService.setCellRanges([]);\n            }\n        }\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_MOVED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PINNED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_VISIBLE, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_ROW_GROUP_CHANGED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, this.updateForGridChange.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_CELL_VALUE_CHANGED, this.updateForDataChange.bind(this));\n    };\n    ChartController.prototype.updateForGridChange = function () {\n        if (this.model.isUnlinked()) {\n            return;\n        }\n        this.model.updateCellRanges();\n        this.setChartRange();\n    };\n    ChartController.prototype.updateForDataChange = function () {\n        if (this.model.isUnlinked()) {\n            return;\n        }\n        this.model.updateData();\n        this.raiseChartUpdatedEvent();\n    };\n    ChartController.prototype.updateForRangeChange = function () {\n        this.updateForGridChange();\n        this.raiseChartRangeSelectionChangedEvent();\n    };\n    ChartController.prototype.updateForPanelChange = function (updatedCol) {\n        this.model.updateCellRanges(updatedCol);\n        this.setChartRange();\n        this.raiseChartRangeSelectionChangedEvent();\n    };\n    ChartController.prototype.getChartModel = function () {\n        var modelType = this.model.isPivotChart() ? 'pivot' : 'range';\n        return {\n            modelType: modelType,\n            chartId: this.model.getChartId(),\n            chartType: this.model.getChartType(),\n            chartThemeName: this.getThemeName(),\n            chartOptions: this.chartProxy.getChartOptions(),\n            cellRange: this.model.getCellRangeParams(),\n            suppressChartRanges: this.model.isSuppressChartRanges(),\n            aggFunc: this.model.getAggFunc(),\n            unlinkChart: this.model.isUnlinked(),\n        };\n    };\n    ChartController.prototype.getChartType = function () {\n        return this.model.getChartType();\n    };\n    ChartController.prototype.isPivotChart = function () {\n        return this.model.isPivotChart();\n    };\n    ChartController.prototype.isGrouping = function () {\n        return this.model.isGrouping();\n    };\n    ChartController.prototype.getThemeName = function () {\n        return this.model.getChartThemeName();\n    };\n    ChartController.prototype.getThemes = function () {\n        return this.gridOptionsWrapper.getChartThemes();\n    };\n    ChartController.prototype.getPalettes = function () {\n        var _this = this;\n        var customPalette = this.chartProxy.getCustomPalette();\n        if (customPalette) {\n            return [customPalette];\n        }\n        var themeNames = this.gridOptionsWrapper.getChartThemes();\n        return themeNames.map(function (themeName) {\n            var theme = _this.chartProxy.isStockTheme(themeName) ?\n                themeName : _this.chartProxy.lookupCustomChartTheme(themeName);\n            return getChartTheme(theme).palette;\n        });\n    };\n    ChartController.prototype.setChartType = function (chartType) {\n        this.model.setChartType(chartType);\n        this.raiseChartUpdatedEvent();\n        this.raiseChartOptionsChangedEvent();\n    };\n    ChartController.prototype.setChartThemeName = function (chartThemeName) {\n        this.model.setChartThemeName(chartThemeName);\n        this.raiseChartUpdatedEvent();\n        this.raiseChartOptionsChangedEvent();\n    };\n    ChartController.prototype.getColStateForMenu = function () {\n        return { dimensionCols: this.model.getDimensionColState(), valueCols: this.model.getValueColState() };\n    };\n    ChartController.prototype.isDefaultCategorySelected = function () {\n        return this.model.getSelectedDimension().colId === ChartDataModel.DEFAULT_CATEGORY;\n    };\n    ChartController.prototype.setChartRange = function (silent) {\n        if (silent === void 0) { silent = false; }\n        if (this.rangeService && !this.model.isSuppressChartRanges() && !this.model.isUnlinked()) {\n            this.rangeService.setCellRanges(this.model.getCellRanges());\n        }\n        if (!silent) {\n            this.raiseChartUpdatedEvent();\n        }\n    };\n    ChartController.prototype.detachChartRange = function () {\n        // when chart is detached it won't listen to changes from the grid\n        this.model.toggleUnlinked();\n        if (this.model.isUnlinked()) {\n            // remove range from grid\n            if (this.rangeService) {\n                this.rangeService.setCellRanges([]);\n            }\n        }\n        else {\n            // update chart data may have changed\n            this.updateForGridChange();\n        }\n    };\n    ChartController.prototype.setChartProxy = function (chartProxy) {\n        this.chartProxy = chartProxy;\n    };\n    ChartController.prototype.getChartProxy = function () {\n        return this.chartProxy;\n    };\n    ChartController.prototype.isActiveXYChart = function () {\n        return _.includes([ChartType.Scatter, ChartType.Bubble], this.getChartType());\n    };\n    ChartController.prototype.isChartLinked = function () {\n        return !this.model.isUnlinked();\n    };\n    ChartController.prototype.raiseChartUpdatedEvent = function () {\n        var event = Object.freeze({\n            type: ChartController.EVENT_CHART_UPDATED\n        });\n        this.dispatchEvent(event);\n    };\n    ChartController.prototype.raiseChartOptionsChangedEvent = function () {\n        this.chartProxy.raiseChartOptionsChangedEvent();\n    };\n    ChartController.prototype.raiseChartRangeSelectionChangedEvent = function () {\n        var event = Object.freeze({\n            type: Events.EVENT_CHART_RANGE_SELECTION_CHANGED,\n            id: this.model.getChartId(),\n            chartId: this.model.getChartId(),\n            cellRange: this.model.getCellRangeParams(),\n            api: this.gridApi,\n            columnApi: this.columnApi,\n        });\n        this.eventService.dispatchEvent(event);\n    };\n    ChartController.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n        if (this.rangeService) {\n            this.rangeService.setCellRanges([]);\n        }\n    };\n    ChartController.EVENT_CHART_UPDATED = 'chartUpdated';\n    __decorate([\n        Autowired('rangeService')\n    ], ChartController.prototype, \"rangeService\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], ChartController.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], ChartController.prototype, \"columnApi\", void 0);\n    __decorate([\n        PostConstruct\n    ], ChartController.prototype, \"init\", null);\n    return ChartController;\n}(BeanStub));\nexport { ChartController };\n"]},"metadata":{},"sourceType":"module"}