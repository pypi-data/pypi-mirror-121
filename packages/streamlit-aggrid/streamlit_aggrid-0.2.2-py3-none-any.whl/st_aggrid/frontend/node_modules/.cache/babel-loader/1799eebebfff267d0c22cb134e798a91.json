{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { _ } from '@ag-grid-community/core';\nimport { ExcelXmlFactory } from './excelXmlFactory';\nimport { BaseExcelSerializingSession } from './baseExcelSerializingSession';\n\nvar ExcelXmlSerializingSession = function (_super) {\n  __extends(ExcelXmlSerializingSession, _super);\n\n  function ExcelXmlSerializingSession() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ExcelXmlSerializingSession.prototype.createExcel = function (data) {\n    return ExcelXmlFactory.createExcel(this.excelStyles, data);\n  };\n\n  ExcelXmlSerializingSession.prototype.getDataTypeForValue = function (valueForCell) {\n    return _.isNumeric(valueForCell) ? 'Number' : 'String';\n  };\n\n  ExcelXmlSerializingSession.prototype.getType = function (type, style, value) {\n    if (this.isFormula(value)) {\n      return 'Formula';\n    }\n\n    if (style && style.dataType) {\n      switch (style.dataType.toLocaleLowerCase()) {\n        case 'string':\n          return 'Formula';\n\n        case 'number':\n          return 'Number';\n\n        case 'datetime':\n          return 'DateTime';\n\n        case 'error':\n          return 'Error';\n\n        case 'boolean':\n          return 'Boolean';\n\n        default:\n          console.warn(\"ag-grid: Unrecognized data type for excel export [\" + style.id + \".dataType=\" + style.dataType + \"]\");\n      }\n    }\n\n    return type;\n  };\n\n  ExcelXmlSerializingSession.prototype.addImage = function () {\n    return;\n  };\n\n  ExcelXmlSerializingSession.prototype.createCell = function (styleId, type, value) {\n    var actualStyle = this.getStyleById(styleId);\n    var typeTransformed = this.getType(type, actualStyle, value) || type;\n    return {\n      styleId: !!actualStyle ? styleId : undefined,\n      data: {\n        type: typeTransformed,\n        value: this.getValueTransformed(typeTransformed, value)\n      }\n    };\n  };\n\n  ExcelXmlSerializingSession.prototype.getValueTransformed = function (typeTransformed, value) {\n    var _this = this;\n\n    var wrapText = function wrapText(val) {\n      if (_this.config.suppressTextAsCDATA) {\n        return _.escapeString(val);\n      }\n\n      var cdataStart = '<![CDATA[';\n      var cdataEnd = ']]>';\n      var cdataEndRegex = new RegExp(cdataEnd, \"g\");\n      return cdataStart // CDATA sections are closed by the character sequence ']]>' and there is no\n      // way of escaping this, so if the text contains the offending sequence, emit\n      // multiple CDATA sections and split the characters between them.\n      + String(val).replace(cdataEndRegex, ']]' + cdataEnd + cdataStart + '>') + cdataEnd;\n    };\n\n    var convertBoolean = function convertBoolean(val) {\n      if (!val || val === '0' || val === 'false') {\n        return '0';\n      }\n\n      return '1';\n    };\n\n    switch (typeTransformed) {\n      case 'String':\n        return wrapText(value);\n\n      case 'Number':\n        return Number(value).valueOf() + '';\n\n      case 'Boolean':\n        return convertBoolean(value);\n\n      default:\n        return value;\n    }\n  };\n\n  ExcelXmlSerializingSession.prototype.createMergedCell = function (styleId, type, value, numOfCells) {\n    return {\n      styleId: !!this.getStyleById(styleId) ? styleId : undefined,\n      data: {\n        type: type,\n        value: value\n      },\n      mergeAcross: numOfCells\n    };\n  };\n\n  return ExcelXmlSerializingSession;\n}(BaseExcelSerializingSession);\n\nexport { ExcelXmlSerializingSession };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/excel-export/dist/es6/excelExport/excelXmlSerializingSession.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","_","ExcelXmlFactory","BaseExcelSerializingSession","ExcelXmlSerializingSession","_super","apply","arguments","createExcel","data","excelStyles","getDataTypeForValue","valueForCell","isNumeric","getType","type","style","value","isFormula","dataType","toLocaleLowerCase","console","warn","id","addImage","createCell","styleId","actualStyle","getStyleById","typeTransformed","undefined","getValueTransformed","_this","wrapText","val","config","suppressTextAsCDATA","escapeString","cdataStart","cdataEnd","cdataEndRegex","RegExp","String","replace","convertBoolean","Number","valueOf","createMergedCell","numOfCells","mergeAcross"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { _ } from '@ag-grid-community/core';\nimport { ExcelXmlFactory } from './excelXmlFactory';\nimport { BaseExcelSerializingSession } from './baseExcelSerializingSession';\nvar ExcelXmlSerializingSession = /** @class */ (function (_super) {\n    __extends(ExcelXmlSerializingSession, _super);\n    function ExcelXmlSerializingSession() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ExcelXmlSerializingSession.prototype.createExcel = function (data) {\n        return ExcelXmlFactory.createExcel(this.excelStyles, data);\n    };\n    ExcelXmlSerializingSession.prototype.getDataTypeForValue = function (valueForCell) {\n        return _.isNumeric(valueForCell) ? 'Number' : 'String';\n    };\n    ExcelXmlSerializingSession.prototype.getType = function (type, style, value) {\n        if (this.isFormula(value)) {\n            return 'Formula';\n        }\n        if (style && style.dataType) {\n            switch (style.dataType.toLocaleLowerCase()) {\n                case 'string':\n                    return 'Formula';\n                case 'number':\n                    return 'Number';\n                case 'datetime':\n                    return 'DateTime';\n                case 'error':\n                    return 'Error';\n                case 'boolean':\n                    return 'Boolean';\n                default:\n                    console.warn(\"ag-grid: Unrecognized data type for excel export [\" + style.id + \".dataType=\" + style.dataType + \"]\");\n            }\n        }\n        return type;\n    };\n    ExcelXmlSerializingSession.prototype.addImage = function () {\n        return;\n    };\n    ExcelXmlSerializingSession.prototype.createCell = function (styleId, type, value) {\n        var actualStyle = this.getStyleById(styleId);\n        var typeTransformed = (this.getType(type, actualStyle, value) || type);\n        return {\n            styleId: !!actualStyle ? styleId : undefined,\n            data: {\n                type: typeTransformed,\n                value: this.getValueTransformed(typeTransformed, value)\n            }\n        };\n    };\n    ExcelXmlSerializingSession.prototype.getValueTransformed = function (typeTransformed, value) {\n        var _this = this;\n        var wrapText = function (val) {\n            if (_this.config.suppressTextAsCDATA) {\n                return _.escapeString(val);\n            }\n            var cdataStart = '<![CDATA[';\n            var cdataEnd = ']]>';\n            var cdataEndRegex = new RegExp(cdataEnd, \"g\");\n            return cdataStart\n                // CDATA sections are closed by the character sequence ']]>' and there is no\n                // way of escaping this, so if the text contains the offending sequence, emit\n                // multiple CDATA sections and split the characters between them.\n                + String(val).replace(cdataEndRegex, ']]' + cdataEnd + cdataStart + '>')\n                + cdataEnd;\n        };\n        var convertBoolean = function (val) {\n            if (!val || val === '0' || val === 'false') {\n                return '0';\n            }\n            return '1';\n        };\n        switch (typeTransformed) {\n            case 'String':\n                return wrapText(value);\n            case 'Number':\n                return Number(value).valueOf() + '';\n            case 'Boolean':\n                return convertBoolean(value);\n            default:\n                return value;\n        }\n    };\n    ExcelXmlSerializingSession.prototype.createMergedCell = function (styleId, type, value, numOfCells) {\n        return {\n            styleId: !!this.getStyleById(styleId) ? styleId : undefined,\n            data: {\n                type: type,\n                value: value\n            },\n            mergeAcross: numOfCells\n        };\n    };\n    return ExcelXmlSerializingSession;\n}(BaseExcelSerializingSession));\nexport { ExcelXmlSerializingSession };\n"]},"metadata":{},"sourceType":"module"}