{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { ChartProxy } from \"../chartProxy\";\nimport { _ } from \"@ag-grid-community/core\";\nimport { AreaSeries, LineSeries, CategoryAxis, ChartAxisPosition, find, GroupedCategoryAxis, NumberAxis, TimeAxis } from \"ag-charts-community\";\nimport { ChartDataModel } from \"../../chartDataModel\";\nimport { isDate } from \"../../typeChecker\";\nimport { deepMerge } from \"../../object\";\nimport { ChartController } from \"../../chartController\";\nvar AXIS_TYPE;\n\n(function (AXIS_TYPE) {\n  AXIS_TYPE[AXIS_TYPE[\"REGULAR\"] = 0] = \"REGULAR\";\n  AXIS_TYPE[AXIS_TYPE[\"SPECIAL\"] = 1] = \"SPECIAL\";\n})(AXIS_TYPE || (AXIS_TYPE = {}));\n\nvar CartesianChartProxy = function (_super) {\n  __extends(CartesianChartProxy, _super);\n\n  function CartesianChartProxy(params) {\n    var _this = _super.call(this, params) || this;\n\n    _this.prevAxisLabelRotation = 0;\n    _this.axisTypeToClassMap = {\n      number: NumberAxis,\n      category: CategoryAxis,\n      groupedCategory: GroupedCategoryAxis,\n      time: TimeAxis\n    };\n    return _this;\n  }\n\n  CartesianChartProxy.prototype.extractIChartOptionsFromTheme = function (theme) {\n    var _a;\n\n    var options = _super.prototype.extractIChartOptionsFromTheme.call(this, theme);\n\n    var standaloneChartType = this.getStandaloneChartType();\n    var flipXY = standaloneChartType === 'bar';\n    var xAxisType = standaloneChartType === 'scatter' || standaloneChartType === 'histogram' ? 'number' : 'category';\n    var yAxisType = 'number';\n\n    if (flipXY) {\n      _a = [yAxisType, xAxisType], xAxisType = _a[0], yAxisType = _a[1];\n    }\n\n    var xAxisTheme = {};\n    var yAxisTheme = {};\n    xAxisTheme = deepMerge(xAxisTheme, theme.getConfig(standaloneChartType + '.axes.' + xAxisType));\n    xAxisTheme = deepMerge(xAxisTheme, theme.getConfig(standaloneChartType + '.axes.' + xAxisType + '.bottom'));\n    yAxisTheme = deepMerge(yAxisTheme, theme.getConfig(standaloneChartType + '.axes.' + yAxisType));\n    yAxisTheme = deepMerge(yAxisTheme, theme.getConfig(standaloneChartType + '.axes.' + yAxisType + '.left'));\n    options.xAxis = xAxisTheme;\n    options.yAxis = yAxisTheme;\n    return options;\n  };\n\n  CartesianChartProxy.prototype.getAxisProperty = function (expression) {\n    return _.get(this.iChartOptions.xAxis, expression, undefined);\n  };\n\n  CartesianChartProxy.prototype.setAxisProperty = function (expression, value) {\n    _.set(this.iChartOptions.xAxis, expression, value);\n\n    _.set(this.iChartOptions.yAxis, expression, value);\n\n    var chart = this.chart;\n    this.chart.axes.forEach(function (axis) {\n      return _.set(axis, expression, value);\n    });\n    chart.performLayout();\n    this.raiseChartOptionsChangedEvent();\n  };\n\n  CartesianChartProxy.prototype.updateLabelRotation = function (categoryId, isHorizontalChart, axisType) {\n    if (isHorizontalChart === void 0) {\n      isHorizontalChart = false;\n    }\n\n    if (axisType === void 0) {\n      axisType = 'category';\n    }\n\n    var axisPosition = isHorizontalChart ? ChartAxisPosition.Left : ChartAxisPosition.Bottom;\n    var axis = find(this.chart.axes, function (currentAxis) {\n      return currentAxis.position === axisPosition;\n    });\n    var isSpecialCategory = categoryId === ChartDataModel.DEFAULT_CATEGORY || this.chartProxyParams.grouping;\n\n    if (isSpecialCategory && this.prevCategory === AXIS_TYPE.REGULAR && axis) {\n      this.prevAxisLabelRotation = axis.label.rotation;\n    }\n\n    var labelRotation = 0;\n\n    if (!isSpecialCategory) {\n      if (this.prevCategory === AXIS_TYPE.REGULAR) {\n        return;\n      }\n\n      if (_.exists(this.prevCategory)) {\n        labelRotation = this.prevAxisLabelRotation;\n      } else {\n        var rotationFromTheme = this.getUserThemeOverrideRotation(isHorizontalChart, axisType);\n        labelRotation = rotationFromTheme !== undefined ? rotationFromTheme : 335;\n      }\n    }\n\n    if (axis) {\n      axis.label.rotation = labelRotation;\n\n      _.set(this.iChartOptions.xAxis, \"label.rotation\", labelRotation);\n    }\n\n    var event = Object.freeze({\n      type: ChartController.EVENT_CHART_UPDATED\n    });\n    this.chartProxyParams.eventService.dispatchEvent(event);\n    this.prevCategory = isSpecialCategory ? AXIS_TYPE.SPECIAL : AXIS_TYPE.REGULAR;\n  };\n\n  CartesianChartProxy.prototype.getUserThemeOverrideRotation = function (isHorizontalChart, axisType) {\n    if (isHorizontalChart === void 0) {\n      isHorizontalChart = false;\n    }\n\n    if (axisType === void 0) {\n      axisType = 'category';\n    }\n\n    if (!this.mergedThemeOverrides || !this.mergedThemeOverrides.overrides) {\n      return;\n    }\n\n    var chartType = this.getStandaloneChartType();\n    var overrides = this.mergedThemeOverrides.overrides;\n    var axisPosition = isHorizontalChart ? ChartAxisPosition.Left : ChartAxisPosition.Bottom;\n\n    var chartTypePositionRotation = _.get(overrides, chartType + \".axes.\" + axisType + \".\" + axisPosition + \".label.rotation\", undefined);\n\n    if (typeof chartTypePositionRotation === 'number' && isFinite(chartTypePositionRotation)) {\n      return chartTypePositionRotation;\n    }\n\n    var chartTypeRotation = _.get(overrides, chartType + \".axes.\" + axisType + \".label.rotation\", undefined);\n\n    if (typeof chartTypeRotation === 'number' && isFinite(chartTypeRotation)) {\n      return chartTypeRotation;\n    }\n\n    var cartesianPositionRotation = _.get(overrides, \"cartesian.axes.\" + axisType + \".\" + axisPosition + \".label.rotation\", undefined);\n\n    if (typeof cartesianPositionRotation === 'number' && isFinite(cartesianPositionRotation)) {\n      return cartesianPositionRotation;\n    }\n\n    var cartesianRotation = _.get(overrides, \"cartesian.axes.\" + axisType + \".label.rotation\", undefined);\n\n    if (typeof cartesianRotation === 'number' && isFinite(cartesianRotation)) {\n      return cartesianRotation;\n    }\n  };\n\n  CartesianChartProxy.prototype.getDefaultAxisOptions = function () {\n    var fontOptions = this.getDefaultFontOptions();\n    var stroke = this.getAxisGridColor();\n    var axisColor = \"rgba(195, 195, 195, 1)\";\n    return {\n      title: __assign(__assign({}, fontOptions), {\n        enabled: false,\n        fontSize: 14\n      }),\n      line: {\n        color: axisColor,\n        width: 1\n      },\n      tick: {\n        color: axisColor,\n        size: 6,\n        width: 1\n      },\n      label: __assign(__assign({}, fontOptions), {\n        padding: 5,\n        rotation: 0\n      }),\n      gridStyle: [{\n        stroke: stroke,\n        lineDash: [4, 2]\n      }]\n    };\n  };\n\n  CartesianChartProxy.prototype.getDefaultCartesianChartOptions = function () {\n    var options = this.getDefaultChartOptions();\n    options.xAxis = this.getDefaultAxisOptions();\n    options.yAxis = this.getDefaultAxisOptions();\n    return options;\n  };\n\n  CartesianChartProxy.prototype.updateAxes = function (baseAxisType, isHorizontalChart) {\n    if (baseAxisType === void 0) {\n      baseAxisType = 'category';\n    }\n\n    if (isHorizontalChart === void 0) {\n      isHorizontalChart = false;\n    }\n\n    var baseAxis = isHorizontalChart ? this.getYAxis() : this.getXAxis();\n\n    if (!baseAxis) {\n      return;\n    } // when grouping we only recreate the chart if the axis is not a 'groupedCategory' axis, otherwise return\n\n\n    if (this.chartProxyParams.grouping) {\n      if (!(baseAxis instanceof GroupedCategoryAxis)) {\n        this.recreateChart();\n      }\n\n      return;\n    } // only update the axis type when the axis has changed and recreate the chart (e.g. when switching from a\n    // 'category' axis to a 'time' axis)\n\n\n    var axisTypeChanged = !(baseAxis instanceof this.axisTypeToClassMap[baseAxisType]);\n\n    if (axisTypeChanged) {\n      (isHorizontalChart ? this.iChartOptions.yAxis : this.iChartOptions.xAxis).type = baseAxisType;\n      this.recreateChart();\n    }\n  };\n\n  CartesianChartProxy.prototype.isTimeAxis = function (params) {\n    if (params.category && params.category.chartDataType) {\n      return params.category.chartDataType === 'time';\n    }\n\n    var testDatum = params.data[0];\n    var testValue = testDatum && testDatum[params.category.id];\n    return isDate(testValue);\n  };\n\n  CartesianChartProxy.prototype.getXAxisDefaults = function (xAxisType, options) {\n    if (xAxisType === 'time') {\n      var xAxisTheme = {};\n      var standaloneChartType = this.getStandaloneChartType();\n      xAxisTheme = deepMerge(xAxisTheme, this.chartTheme.getConfig(standaloneChartType + '.axes.time'));\n      xAxisTheme = deepMerge(xAxisTheme, this.chartTheme.getConfig(standaloneChartType + '.axes.time.bottom'));\n      return xAxisTheme;\n    }\n\n    return options.xAxis;\n  };\n\n  CartesianChartProxy.prototype.getXAxis = function () {\n    return find(this.chart.axes, function (a) {\n      return a.position === ChartAxisPosition.Bottom;\n    });\n  };\n\n  CartesianChartProxy.prototype.getYAxis = function () {\n    return find(this.chart.axes, function (a) {\n      return a.position === ChartAxisPosition.Left;\n    });\n  };\n\n  CartesianChartProxy.prototype.processDataForCrossFiltering = function (data, colId, params) {\n    var yKey = colId;\n    var atLeastOneSelectedPoint = false;\n\n    if (this.crossFiltering) {\n      data.forEach(function (d) {\n        d[colId + '-total'] = d[colId] + d[colId + '-filtered-out'];\n\n        if (d[colId + '-filtered-out'] > 0) {\n          atLeastOneSelectedPoint = true;\n        }\n      });\n      var lastSelectedChartId = params.getCrossFilteringContext().lastSelectedChartId;\n\n      if (lastSelectedChartId === params.chartId) {\n        yKey = colId + '-total';\n      }\n    }\n\n    return {\n      yKey: yKey,\n      atLeastOneSelectedPoint: atLeastOneSelectedPoint\n    };\n  };\n\n  CartesianChartProxy.prototype.updateSeriesForCrossFiltering = function (series, colId, chart, params, atLeastOneSelectedPoint) {\n    if (this.crossFiltering) {\n      // special custom marker handling to show and hide points\n      series.marker.enabled = true;\n\n      series.marker.formatter = function (p) {\n        return {\n          fill: p.highlighted ? 'yellow' : p.fill,\n          size: p.highlighted ? 12 : p.datum[colId] > 0 ? 8 : 0\n        };\n      };\n\n      chart.tooltip.delay = 500; // make line opaque when some points are deselected\n\n      var ctx = params.getCrossFilteringContext();\n      var lastSelectionOnThisChart = ctx.lastSelectedChartId === params.chartId;\n      var deselectedPoints = lastSelectionOnThisChart && atLeastOneSelectedPoint;\n\n      if (series instanceof AreaSeries) {\n        series.fillOpacity = deselectedPoints ? 0.3 : 1;\n      }\n\n      if (series instanceof LineSeries) {\n        series.strokeOpacity = deselectedPoints ? 0.3 : 1;\n      } // add node click cross filtering callback to series\n\n\n      series.addEventListener('nodeClick', this.crossFilterCallback);\n    }\n  };\n\n  return CartesianChartProxy;\n}(ChartProxy);\n\nexport { CartesianChartProxy };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/charts/dist/es6/charts/chartComp/chartProxies/cartesian/cartesianChartProxy.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","ChartProxy","_","AreaSeries","LineSeries","CategoryAxis","ChartAxisPosition","find","GroupedCategoryAxis","NumberAxis","TimeAxis","ChartDataModel","isDate","deepMerge","ChartController","AXIS_TYPE","CartesianChartProxy","_super","params","_this","prevAxisLabelRotation","axisTypeToClassMap","number","category","groupedCategory","time","extractIChartOptionsFromTheme","theme","_a","options","standaloneChartType","getStandaloneChartType","flipXY","xAxisType","yAxisType","xAxisTheme","yAxisTheme","getConfig","xAxis","yAxis","getAxisProperty","expression","get","iChartOptions","undefined","setAxisProperty","value","set","chart","axes","forEach","axis","performLayout","raiseChartOptionsChangedEvent","updateLabelRotation","categoryId","isHorizontalChart","axisType","axisPosition","Left","Bottom","currentAxis","position","isSpecialCategory","DEFAULT_CATEGORY","chartProxyParams","grouping","prevCategory","REGULAR","label","rotation","labelRotation","exists","rotationFromTheme","getUserThemeOverrideRotation","event","freeze","type","EVENT_CHART_UPDATED","eventService","dispatchEvent","SPECIAL","mergedThemeOverrides","overrides","chartType","chartTypePositionRotation","isFinite","chartTypeRotation","cartesianPositionRotation","cartesianRotation","getDefaultAxisOptions","fontOptions","getDefaultFontOptions","stroke","getAxisGridColor","axisColor","title","enabled","fontSize","line","color","width","tick","size","padding","gridStyle","lineDash","getDefaultCartesianChartOptions","getDefaultChartOptions","updateAxes","baseAxisType","baseAxis","getYAxis","getXAxis","recreateChart","axisTypeChanged","isTimeAxis","chartDataType","testDatum","data","testValue","id","getXAxisDefaults","chartTheme","a","processDataForCrossFiltering","colId","yKey","atLeastOneSelectedPoint","crossFiltering","lastSelectedChartId","getCrossFilteringContext","chartId","updateSeriesForCrossFiltering","series","marker","formatter","fill","highlighted","datum","tooltip","delay","ctx","lastSelectionOnThisChart","deselectedPoints","fillOpacity","strokeOpacity","addEventListener","crossFilterCallback"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,IAAII,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGV,MAAM,CAACW,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAIV,CAAT,IAAcS,CAAd,EAAiB,IAAIb,MAAM,CAACQ,SAAP,CAAiBH,cAAjB,CAAgCa,IAAhC,CAAqCL,CAArC,EAAwCT,CAAxC,CAAJ,EACbQ,CAAC,CAACR,CAAD,CAAD,GAAOS,CAAC,CAACT,CAAD,CAAR;AACP;;AACD,WAAOQ,CAAP;AACH,GAPD;;AAQA,SAAOF,QAAQ,CAACS,KAAT,CAAe,IAAf,EAAqBH,SAArB,CAAP;AACH,CAVD;;AAWA,SAASI,UAAT,QAA2B,eAA3B;AACA,SAASC,CAAT,QAAkB,yBAAlB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,YAAjC,EAA+CC,iBAA/C,EAAkEC,IAAlE,EAAwEC,mBAAxE,EAA6FC,UAA7F,EAAyGC,QAAzG,QAAyH,qBAAzH;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,IAAIC,SAAJ;;AACA,CAAC,UAAUA,SAAV,EAAqB;AAClBA,EAAAA,SAAS,CAACA,SAAS,CAAC,SAAD,CAAT,GAAuB,CAAxB,CAAT,GAAsC,SAAtC;AACAA,EAAAA,SAAS,CAACA,SAAS,CAAC,SAAD,CAAT,GAAuB,CAAxB,CAAT,GAAsC,SAAtC;AACH,CAHD,EAGGA,SAAS,KAAKA,SAAS,GAAG,EAAjB,CAHZ;;AAIA,IAAIC,mBAAmB,GAAkB,UAAUC,MAAV,EAAkB;AACvDxC,EAAAA,SAAS,CAACuC,mBAAD,EAAsBC,MAAtB,CAAT;;AACA,WAASD,mBAAT,CAA6BE,MAA7B,EAAqC;AACjC,QAAIC,KAAK,GAAGF,MAAM,CAAClB,IAAP,CAAY,IAAZ,EAAkBmB,MAAlB,KAA6B,IAAzC;;AACAC,IAAAA,KAAK,CAACC,qBAAN,GAA8B,CAA9B;AACAD,IAAAA,KAAK,CAACE,kBAAN,GAA2B;AACvBC,MAAAA,MAAM,EAAEb,UADe;AAEvBc,MAAAA,QAAQ,EAAElB,YAFa;AAGvBmB,MAAAA,eAAe,EAAEhB,mBAHM;AAIvBiB,MAAAA,IAAI,EAAEf;AAJiB,KAA3B;AAMA,WAAOS,KAAP;AACH;;AACDH,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8BqC,6BAA9B,GAA8D,UAAUC,KAAV,EAAiB;AAC3E,QAAIC,EAAJ;;AACA,QAAIC,OAAO,GAAGZ,MAAM,CAAC5B,SAAP,CAAiBqC,6BAAjB,CAA+C3B,IAA/C,CAAoD,IAApD,EAA0D4B,KAA1D,CAAd;;AACA,QAAIG,mBAAmB,GAAG,KAAKC,sBAAL,EAA1B;AACA,QAAIC,MAAM,GAAGF,mBAAmB,KAAK,KAArC;AACA,QAAIG,SAAS,GAAIH,mBAAmB,KAAK,SAAxB,IAAqCA,mBAAmB,KAAK,WAA9D,GAA6E,QAA7E,GAAwF,UAAxG;AACA,QAAII,SAAS,GAAG,QAAhB;;AACA,QAAIF,MAAJ,EAAY;AACRJ,MAAAA,EAAE,GAAG,CAACM,SAAD,EAAYD,SAAZ,CAAL,EAA6BA,SAAS,GAAGL,EAAE,CAAC,CAAD,CAA3C,EAAgDM,SAAS,GAAGN,EAAE,CAAC,CAAD,CAA9D;AACH;;AACD,QAAIO,UAAU,GAAG,EAAjB;AACA,QAAIC,UAAU,GAAG,EAAjB;AACAD,IAAAA,UAAU,GAAGtB,SAAS,CAACsB,UAAD,EAAaR,KAAK,CAACU,SAAN,CAAgBP,mBAAmB,GAAG,QAAtB,GAAiCG,SAAjD,CAAb,CAAtB;AACAE,IAAAA,UAAU,GAAGtB,SAAS,CAACsB,UAAD,EAAaR,KAAK,CAACU,SAAN,CAAgBP,mBAAmB,GAAG,QAAtB,GAAiCG,SAAjC,GAA6C,SAA7D,CAAb,CAAtB;AACAG,IAAAA,UAAU,GAAGvB,SAAS,CAACuB,UAAD,EAAaT,KAAK,CAACU,SAAN,CAAgBP,mBAAmB,GAAG,QAAtB,GAAiCI,SAAjD,CAAb,CAAtB;AACAE,IAAAA,UAAU,GAAGvB,SAAS,CAACuB,UAAD,EAAaT,KAAK,CAACU,SAAN,CAAgBP,mBAAmB,GAAG,QAAtB,GAAiCI,SAAjC,GAA6C,OAA7D,CAAb,CAAtB;AACAL,IAAAA,OAAO,CAACS,KAAR,GAAgBH,UAAhB;AACAN,IAAAA,OAAO,CAACU,KAAR,GAAgBH,UAAhB;AACA,WAAOP,OAAP;AACH,GAnBD;;AAoBAb,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8BmD,eAA9B,GAAgD,UAAUC,UAAV,EAAsB;AAClE,WAAOvC,CAAC,CAACwC,GAAF,CAAM,KAAKC,aAAL,CAAmBL,KAAzB,EAAgCG,UAAhC,EAA4CG,SAA5C,CAAP;AACH,GAFD;;AAGA5B,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8BwD,eAA9B,GAAgD,UAAUJ,UAAV,EAAsBK,KAAtB,EAA6B;AACzE5C,IAAAA,CAAC,CAAC6C,GAAF,CAAM,KAAKJ,aAAL,CAAmBL,KAAzB,EAAgCG,UAAhC,EAA4CK,KAA5C;;AACA5C,IAAAA,CAAC,CAAC6C,GAAF,CAAM,KAAKJ,aAAL,CAAmBJ,KAAzB,EAAgCE,UAAhC,EAA4CK,KAA5C;;AACA,QAAIE,KAAK,GAAG,KAAKA,KAAjB;AACA,SAAKA,KAAL,CAAWC,IAAX,CAAgBC,OAAhB,CAAwB,UAAUC,IAAV,EAAgB;AAAE,aAAOjD,CAAC,CAAC6C,GAAF,CAAMI,IAAN,EAAYV,UAAZ,EAAwBK,KAAxB,CAAP;AAAwC,KAAlF;AACAE,IAAAA,KAAK,CAACI,aAAN;AACA,SAAKC,6BAAL;AACH,GAPD;;AAQArC,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8BiE,mBAA9B,GAAoD,UAAUC,UAAV,EAAsBC,iBAAtB,EAAyCC,QAAzC,EAAmD;AACnG,QAAID,iBAAiB,KAAK,KAAK,CAA/B,EAAkC;AAAEA,MAAAA,iBAAiB,GAAG,KAApB;AAA4B;;AAChE,QAAIC,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,MAAAA,QAAQ,GAAG,UAAX;AAAwB;;AACnD,QAAIC,YAAY,GAAGF,iBAAiB,GAAGlD,iBAAiB,CAACqD,IAArB,GAA4BrD,iBAAiB,CAACsD,MAAlF;AACA,QAAIT,IAAI,GAAG5C,IAAI,CAAC,KAAKyC,KAAL,CAAWC,IAAZ,EAAkB,UAAUY,WAAV,EAAuB;AAAE,aAAOA,WAAW,CAACC,QAAZ,KAAyBJ,YAAhC;AAA+C,KAA1F,CAAf;AACA,QAAIK,iBAAiB,GAAGR,UAAU,KAAK5C,cAAc,CAACqD,gBAA9B,IAAkD,KAAKC,gBAAL,CAAsBC,QAAhG;;AACA,QAAIH,iBAAiB,IAAI,KAAKI,YAAL,KAAsBpD,SAAS,CAACqD,OAArD,IAAgEjB,IAApE,EAA0E;AACtE,WAAK/B,qBAAL,GAA6B+B,IAAI,CAACkB,KAAL,CAAWC,QAAxC;AACH;;AACD,QAAIC,aAAa,GAAG,CAApB;;AACA,QAAI,CAACR,iBAAL,EAAwB;AACpB,UAAI,KAAKI,YAAL,KAAsBpD,SAAS,CAACqD,OAApC,EAA6C;AACzC;AACH;;AACD,UAAIlE,CAAC,CAACsE,MAAF,CAAS,KAAKL,YAAd,CAAJ,EAAiC;AAC7BI,QAAAA,aAAa,GAAG,KAAKnD,qBAArB;AACH,OAFD,MAGK;AACD,YAAIqD,iBAAiB,GAAG,KAAKC,4BAAL,CAAkClB,iBAAlC,EAAqDC,QAArD,CAAxB;AACAc,QAAAA,aAAa,GAAGE,iBAAiB,KAAK7B,SAAtB,GAAkC6B,iBAAlC,GAAsD,GAAtE;AACH;AACJ;;AACD,QAAItB,IAAJ,EAAU;AACNA,MAAAA,IAAI,CAACkB,KAAL,CAAWC,QAAX,GAAsBC,aAAtB;;AACArE,MAAAA,CAAC,CAAC6C,GAAF,CAAM,KAAKJ,aAAL,CAAmBL,KAAzB,EAAgC,gBAAhC,EAAkDiC,aAAlD;AACH;;AACD,QAAII,KAAK,GAAG9F,MAAM,CAAC+F,MAAP,CAAc;AAAEC,MAAAA,IAAI,EAAE/D,eAAe,CAACgE;AAAxB,KAAd,CAAZ;AACA,SAAKb,gBAAL,CAAsBc,YAAtB,CAAmCC,aAAnC,CAAiDL,KAAjD;AACA,SAAKR,YAAL,GAAoBJ,iBAAiB,GAAGhD,SAAS,CAACkE,OAAb,GAAuBlE,SAAS,CAACqD,OAAtE;AACH,GA7BD;;AA8BApD,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8BqF,4BAA9B,GAA6D,UAAUlB,iBAAV,EAA6BC,QAA7B,EAAuC;AAChG,QAAID,iBAAiB,KAAK,KAAK,CAA/B,EAAkC;AAAEA,MAAAA,iBAAiB,GAAG,KAApB;AAA4B;;AAChE,QAAIC,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,MAAAA,QAAQ,GAAG,UAAX;AAAwB;;AACnD,QAAI,CAAC,KAAKyB,oBAAN,IAA8B,CAAC,KAAKA,oBAAL,CAA0BC,SAA7D,EAAwE;AACpE;AACH;;AACD,QAAIC,SAAS,GAAG,KAAKrD,sBAAL,EAAhB;AACA,QAAIoD,SAAS,GAAG,KAAKD,oBAAL,CAA0BC,SAA1C;AACA,QAAIzB,YAAY,GAAGF,iBAAiB,GAAGlD,iBAAiB,CAACqD,IAArB,GAA4BrD,iBAAiB,CAACsD,MAAlF;;AACA,QAAIyB,yBAAyB,GAAGnF,CAAC,CAACwC,GAAF,CAAMyC,SAAN,EAAiBC,SAAS,GAAG,QAAZ,GAAuB3B,QAAvB,GAAkC,GAAlC,GAAwCC,YAAxC,GAAuD,iBAAxE,EAA2Fd,SAA3F,CAAhC;;AACA,QAAI,OAAOyC,yBAAP,KAAqC,QAArC,IAAiDC,QAAQ,CAACD,yBAAD,CAA7D,EAA0F;AACtF,aAAOA,yBAAP;AACH;;AACD,QAAIE,iBAAiB,GAAGrF,CAAC,CAACwC,GAAF,CAAMyC,SAAN,EAAiBC,SAAS,GAAG,QAAZ,GAAuB3B,QAAvB,GAAkC,iBAAnD,EAAsEb,SAAtE,CAAxB;;AACA,QAAI,OAAO2C,iBAAP,KAA6B,QAA7B,IAAyCD,QAAQ,CAACC,iBAAD,CAArD,EAA0E;AACtE,aAAOA,iBAAP;AACH;;AACD,QAAIC,yBAAyB,GAAGtF,CAAC,CAACwC,GAAF,CAAMyC,SAAN,EAAiB,oBAAoB1B,QAApB,GAA+B,GAA/B,GAAqCC,YAArC,GAAoD,iBAArE,EAAwFd,SAAxF,CAAhC;;AACA,QAAI,OAAO4C,yBAAP,KAAqC,QAArC,IAAiDF,QAAQ,CAACE,yBAAD,CAA7D,EAA0F;AACtF,aAAOA,yBAAP;AACH;;AACD,QAAIC,iBAAiB,GAAGvF,CAAC,CAACwC,GAAF,CAAMyC,SAAN,EAAiB,oBAAoB1B,QAApB,GAA+B,iBAAhD,EAAmEb,SAAnE,CAAxB;;AACA,QAAI,OAAO6C,iBAAP,KAA6B,QAA7B,IAAyCH,QAAQ,CAACG,iBAAD,CAArD,EAA0E;AACtE,aAAOA,iBAAP;AACH;AACJ,GAzBD;;AA0BAzE,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8BqG,qBAA9B,GAAsD,YAAY;AAC9D,QAAIC,WAAW,GAAG,KAAKC,qBAAL,EAAlB;AACA,QAAIC,MAAM,GAAG,KAAKC,gBAAL,EAAb;AACA,QAAIC,SAAS,GAAG,wBAAhB;AACA,WAAO;AACHC,MAAAA,KAAK,EAAEzG,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKoG,WAAL,CAAT,EAA4B;AAAEM,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,QAAQ,EAAE;AAA5B,OAA5B,CADZ;AAEHC,MAAAA,IAAI,EAAE;AACFC,QAAAA,KAAK,EAAEL,SADL;AAEFM,QAAAA,KAAK,EAAE;AAFL,OAFH;AAMHC,MAAAA,IAAI,EAAE;AACFF,QAAAA,KAAK,EAAEL,SADL;AAEFQ,QAAAA,IAAI,EAAE,CAFJ;AAGFF,QAAAA,KAAK,EAAE;AAHL,OANH;AAWHhC,MAAAA,KAAK,EAAE9E,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKoG,WAAL,CAAT,EAA4B;AAAEa,QAAAA,OAAO,EAAE,CAAX;AAAclC,QAAAA,QAAQ,EAAE;AAAxB,OAA5B,CAXZ;AAYHmC,MAAAA,SAAS,EAAE,CAAC;AACJZ,QAAAA,MAAM,EAAEA,MADJ;AAEJa,QAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFN,OAAD;AAZR,KAAP;AAiBH,GArBD;;AAsBA1F,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8BsH,+BAA9B,GAAgE,YAAY;AACxE,QAAI9E,OAAO,GAAG,KAAK+E,sBAAL,EAAd;AACA/E,IAAAA,OAAO,CAACS,KAAR,GAAgB,KAAKoD,qBAAL,EAAhB;AACA7D,IAAAA,OAAO,CAACU,KAAR,GAAgB,KAAKmD,qBAAL,EAAhB;AACA,WAAO7D,OAAP;AACH,GALD;;AAMAb,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8BwH,UAA9B,GAA2C,UAAUC,YAAV,EAAwBtD,iBAAxB,EAA2C;AAClF,QAAIsD,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAAEA,MAAAA,YAAY,GAAG,UAAf;AAA4B;;AAC3D,QAAItD,iBAAiB,KAAK,KAAK,CAA/B,EAAkC;AAAEA,MAAAA,iBAAiB,GAAG,KAApB;AAA4B;;AAChE,QAAIuD,QAAQ,GAAGvD,iBAAiB,GAAG,KAAKwD,QAAL,EAAH,GAAqB,KAAKC,QAAL,EAArD;;AACA,QAAI,CAACF,QAAL,EAAe;AACX;AACH,KANiF,CAOlF;;;AACA,QAAI,KAAK9C,gBAAL,CAAsBC,QAA1B,EAAoC;AAChC,UAAI,EAAE6C,QAAQ,YAAYvG,mBAAtB,CAAJ,EAAgD;AAC5C,aAAK0G,aAAL;AACH;;AACD;AACH,KAbiF,CAclF;AACA;;;AACA,QAAIC,eAAe,GAAG,EAAEJ,QAAQ,YAAY,KAAK1F,kBAAL,CAAwByF,YAAxB,CAAtB,CAAtB;;AACA,QAAIK,eAAJ,EAAqB;AACjB,OAAC3D,iBAAiB,GAAG,KAAKb,aAAL,CAAmBJ,KAAtB,GAA8B,KAAKI,aAAL,CAAmBL,KAAnE,EAA0EuC,IAA1E,GAAiFiC,YAAjF;AACA,WAAKI,aAAL;AACH;AACJ,GArBD;;AAsBAlG,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8B+H,UAA9B,GAA2C,UAAUlG,MAAV,EAAkB;AACzD,QAAIA,MAAM,CAACK,QAAP,IAAmBL,MAAM,CAACK,QAAP,CAAgB8F,aAAvC,EAAsD;AAClD,aAAOnG,MAAM,CAACK,QAAP,CAAgB8F,aAAhB,KAAkC,MAAzC;AACH;;AACD,QAAIC,SAAS,GAAGpG,MAAM,CAACqG,IAAP,CAAY,CAAZ,CAAhB;AACA,QAAIC,SAAS,GAAGF,SAAS,IAAIA,SAAS,CAACpG,MAAM,CAACK,QAAP,CAAgBkG,EAAjB,CAAtC;AACA,WAAO7G,MAAM,CAAC4G,SAAD,CAAb;AACH,GAPD;;AAQAxG,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8BqI,gBAA9B,GAAiD,UAAUzF,SAAV,EAAqBJ,OAArB,EAA8B;AAC3E,QAAII,SAAS,KAAK,MAAlB,EAA0B;AACtB,UAAIE,UAAU,GAAG,EAAjB;AACA,UAAIL,mBAAmB,GAAG,KAAKC,sBAAL,EAA1B;AACAI,MAAAA,UAAU,GAAGtB,SAAS,CAACsB,UAAD,EAAa,KAAKwF,UAAL,CAAgBtF,SAAhB,CAA0BP,mBAAmB,GAAG,YAAhD,CAAb,CAAtB;AACAK,MAAAA,UAAU,GAAGtB,SAAS,CAACsB,UAAD,EAAa,KAAKwF,UAAL,CAAgBtF,SAAhB,CAA0BP,mBAAmB,GAAG,mBAAhD,CAAb,CAAtB;AACA,aAAOK,UAAP;AACH;;AACD,WAAON,OAAO,CAACS,KAAf;AACH,GATD;;AAUAtB,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8B4H,QAA9B,GAAyC,YAAY;AACjD,WAAO1G,IAAI,CAAC,KAAKyC,KAAL,CAAWC,IAAZ,EAAkB,UAAU2E,CAAV,EAAa;AAAE,aAAOA,CAAC,CAAC9D,QAAF,KAAexD,iBAAiB,CAACsD,MAAxC;AAAiD,KAAlF,CAAX;AACH,GAFD;;AAGA5C,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8B2H,QAA9B,GAAyC,YAAY;AACjD,WAAOzG,IAAI,CAAC,KAAKyC,KAAL,CAAWC,IAAZ,EAAkB,UAAU2E,CAAV,EAAa;AAAE,aAAOA,CAAC,CAAC9D,QAAF,KAAexD,iBAAiB,CAACqD,IAAxC;AAA+C,KAAhF,CAAX;AACH,GAFD;;AAGA3C,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8BwI,4BAA9B,GAA6D,UAAUN,IAAV,EAAgBO,KAAhB,EAAuB5G,MAAvB,EAA+B;AACxF,QAAI6G,IAAI,GAAGD,KAAX;AACA,QAAIE,uBAAuB,GAAG,KAA9B;;AACA,QAAI,KAAKC,cAAT,EAAyB;AACrBV,MAAAA,IAAI,CAACrE,OAAL,CAAa,UAAUvE,CAAV,EAAa;AACtBA,QAAAA,CAAC,CAACmJ,KAAK,GAAG,QAAT,CAAD,GAAsBnJ,CAAC,CAACmJ,KAAD,CAAD,GAAWnJ,CAAC,CAACmJ,KAAK,GAAG,eAAT,CAAlC;;AACA,YAAInJ,CAAC,CAACmJ,KAAK,GAAG,eAAT,CAAD,GAA6B,CAAjC,EAAoC;AAChCE,UAAAA,uBAAuB,GAAG,IAA1B;AACH;AACJ,OALD;AAMA,UAAIE,mBAAmB,GAAGhH,MAAM,CAACiH,wBAAP,GAAkCD,mBAA5D;;AACA,UAAIA,mBAAmB,KAAKhH,MAAM,CAACkH,OAAnC,EAA4C;AACxCL,QAAAA,IAAI,GAAGD,KAAK,GAAG,QAAf;AACH;AACJ;;AACD,WAAO;AAAEC,MAAAA,IAAI,EAAEA,IAAR;AAAcC,MAAAA,uBAAuB,EAAEA;AAAvC,KAAP;AACH,GAhBD;;AAiBAhH,EAAAA,mBAAmB,CAAC3B,SAApB,CAA8BgJ,6BAA9B,GAA8D,UAAUC,MAAV,EAAkBR,KAAlB,EAAyB9E,KAAzB,EAAgC9B,MAAhC,EAAwC8G,uBAAxC,EAAiE;AAC3H,QAAI,KAAKC,cAAT,EAAyB;AACrB;AACAK,MAAAA,MAAM,CAACC,MAAP,CAActC,OAAd,GAAwB,IAAxB;;AACAqC,MAAAA,MAAM,CAACC,MAAP,CAAcC,SAAd,GAA0B,UAAUvJ,CAAV,EAAa;AACnC,eAAO;AACHwJ,UAAAA,IAAI,EAAExJ,CAAC,CAACyJ,WAAF,GAAgB,QAAhB,GAA2BzJ,CAAC,CAACwJ,IADhC;AAEHlC,UAAAA,IAAI,EAAEtH,CAAC,CAACyJ,WAAF,GAAgB,EAAhB,GAAqBzJ,CAAC,CAAC0J,KAAF,CAAQb,KAAR,IAAiB,CAAjB,GAAqB,CAArB,GAAyB;AAFjD,SAAP;AAIH,OALD;;AAMA9E,MAAAA,KAAK,CAAC4F,OAAN,CAAcC,KAAd,GAAsB,GAAtB,CATqB,CAUrB;;AACA,UAAIC,GAAG,GAAG5H,MAAM,CAACiH,wBAAP,EAAV;AACA,UAAIY,wBAAwB,GAAGD,GAAG,CAACZ,mBAAJ,KAA4BhH,MAAM,CAACkH,OAAlE;AACA,UAAIY,gBAAgB,GAAGD,wBAAwB,IAAIf,uBAAnD;;AACA,UAAIM,MAAM,YAAYnI,UAAtB,EAAkC;AAC9BmI,QAAAA,MAAM,CAACW,WAAP,GAAqBD,gBAAgB,GAAG,GAAH,GAAS,CAA9C;AACH;;AACD,UAAIV,MAAM,YAAYlI,UAAtB,EAAkC;AAC9BkI,QAAAA,MAAM,CAACY,aAAP,GAAuBF,gBAAgB,GAAG,GAAH,GAAS,CAAhD;AACH,OAnBoB,CAoBrB;;;AACAV,MAAAA,MAAM,CAACa,gBAAP,CAAwB,WAAxB,EAAqC,KAAKC,mBAA1C;AACH;AACJ,GAxBD;;AAyBA,SAAOpI,mBAAP;AACH,CAzNwC,CAyNvCf,UAzNuC,CAAzC;;AA0NA,SAASe,mBAAT","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { ChartProxy } from \"../chartProxy\";\nimport { _ } from \"@ag-grid-community/core\";\nimport { AreaSeries, LineSeries, CategoryAxis, ChartAxisPosition, find, GroupedCategoryAxis, NumberAxis, TimeAxis } from \"ag-charts-community\";\nimport { ChartDataModel } from \"../../chartDataModel\";\nimport { isDate } from \"../../typeChecker\";\nimport { deepMerge } from \"../../object\";\nimport { ChartController } from \"../../chartController\";\nvar AXIS_TYPE;\n(function (AXIS_TYPE) {\n    AXIS_TYPE[AXIS_TYPE[\"REGULAR\"] = 0] = \"REGULAR\";\n    AXIS_TYPE[AXIS_TYPE[\"SPECIAL\"] = 1] = \"SPECIAL\";\n})(AXIS_TYPE || (AXIS_TYPE = {}));\nvar CartesianChartProxy = /** @class */ (function (_super) {\n    __extends(CartesianChartProxy, _super);\n    function CartesianChartProxy(params) {\n        var _this = _super.call(this, params) || this;\n        _this.prevAxisLabelRotation = 0;\n        _this.axisTypeToClassMap = {\n            number: NumberAxis,\n            category: CategoryAxis,\n            groupedCategory: GroupedCategoryAxis,\n            time: TimeAxis\n        };\n        return _this;\n    }\n    CartesianChartProxy.prototype.extractIChartOptionsFromTheme = function (theme) {\n        var _a;\n        var options = _super.prototype.extractIChartOptionsFromTheme.call(this, theme);\n        var standaloneChartType = this.getStandaloneChartType();\n        var flipXY = standaloneChartType === 'bar';\n        var xAxisType = (standaloneChartType === 'scatter' || standaloneChartType === 'histogram') ? 'number' : 'category';\n        var yAxisType = 'number';\n        if (flipXY) {\n            _a = [yAxisType, xAxisType], xAxisType = _a[0], yAxisType = _a[1];\n        }\n        var xAxisTheme = {};\n        var yAxisTheme = {};\n        xAxisTheme = deepMerge(xAxisTheme, theme.getConfig(standaloneChartType + '.axes.' + xAxisType));\n        xAxisTheme = deepMerge(xAxisTheme, theme.getConfig(standaloneChartType + '.axes.' + xAxisType + '.bottom'));\n        yAxisTheme = deepMerge(yAxisTheme, theme.getConfig(standaloneChartType + '.axes.' + yAxisType));\n        yAxisTheme = deepMerge(yAxisTheme, theme.getConfig(standaloneChartType + '.axes.' + yAxisType + '.left'));\n        options.xAxis = xAxisTheme;\n        options.yAxis = yAxisTheme;\n        return options;\n    };\n    CartesianChartProxy.prototype.getAxisProperty = function (expression) {\n        return _.get(this.iChartOptions.xAxis, expression, undefined);\n    };\n    CartesianChartProxy.prototype.setAxisProperty = function (expression, value) {\n        _.set(this.iChartOptions.xAxis, expression, value);\n        _.set(this.iChartOptions.yAxis, expression, value);\n        var chart = this.chart;\n        this.chart.axes.forEach(function (axis) { return _.set(axis, expression, value); });\n        chart.performLayout();\n        this.raiseChartOptionsChangedEvent();\n    };\n    CartesianChartProxy.prototype.updateLabelRotation = function (categoryId, isHorizontalChart, axisType) {\n        if (isHorizontalChart === void 0) { isHorizontalChart = false; }\n        if (axisType === void 0) { axisType = 'category'; }\n        var axisPosition = isHorizontalChart ? ChartAxisPosition.Left : ChartAxisPosition.Bottom;\n        var axis = find(this.chart.axes, function (currentAxis) { return currentAxis.position === axisPosition; });\n        var isSpecialCategory = categoryId === ChartDataModel.DEFAULT_CATEGORY || this.chartProxyParams.grouping;\n        if (isSpecialCategory && this.prevCategory === AXIS_TYPE.REGULAR && axis) {\n            this.prevAxisLabelRotation = axis.label.rotation;\n        }\n        var labelRotation = 0;\n        if (!isSpecialCategory) {\n            if (this.prevCategory === AXIS_TYPE.REGULAR) {\n                return;\n            }\n            if (_.exists(this.prevCategory)) {\n                labelRotation = this.prevAxisLabelRotation;\n            }\n            else {\n                var rotationFromTheme = this.getUserThemeOverrideRotation(isHorizontalChart, axisType);\n                labelRotation = rotationFromTheme !== undefined ? rotationFromTheme : 335;\n            }\n        }\n        if (axis) {\n            axis.label.rotation = labelRotation;\n            _.set(this.iChartOptions.xAxis, \"label.rotation\", labelRotation);\n        }\n        var event = Object.freeze({ type: ChartController.EVENT_CHART_UPDATED });\n        this.chartProxyParams.eventService.dispatchEvent(event);\n        this.prevCategory = isSpecialCategory ? AXIS_TYPE.SPECIAL : AXIS_TYPE.REGULAR;\n    };\n    CartesianChartProxy.prototype.getUserThemeOverrideRotation = function (isHorizontalChart, axisType) {\n        if (isHorizontalChart === void 0) { isHorizontalChart = false; }\n        if (axisType === void 0) { axisType = 'category'; }\n        if (!this.mergedThemeOverrides || !this.mergedThemeOverrides.overrides) {\n            return;\n        }\n        var chartType = this.getStandaloneChartType();\n        var overrides = this.mergedThemeOverrides.overrides;\n        var axisPosition = isHorizontalChart ? ChartAxisPosition.Left : ChartAxisPosition.Bottom;\n        var chartTypePositionRotation = _.get(overrides, chartType + \".axes.\" + axisType + \".\" + axisPosition + \".label.rotation\", undefined);\n        if (typeof chartTypePositionRotation === 'number' && isFinite(chartTypePositionRotation)) {\n            return chartTypePositionRotation;\n        }\n        var chartTypeRotation = _.get(overrides, chartType + \".axes.\" + axisType + \".label.rotation\", undefined);\n        if (typeof chartTypeRotation === 'number' && isFinite(chartTypeRotation)) {\n            return chartTypeRotation;\n        }\n        var cartesianPositionRotation = _.get(overrides, \"cartesian.axes.\" + axisType + \".\" + axisPosition + \".label.rotation\", undefined);\n        if (typeof cartesianPositionRotation === 'number' && isFinite(cartesianPositionRotation)) {\n            return cartesianPositionRotation;\n        }\n        var cartesianRotation = _.get(overrides, \"cartesian.axes.\" + axisType + \".label.rotation\", undefined);\n        if (typeof cartesianRotation === 'number' && isFinite(cartesianRotation)) {\n            return cartesianRotation;\n        }\n    };\n    CartesianChartProxy.prototype.getDefaultAxisOptions = function () {\n        var fontOptions = this.getDefaultFontOptions();\n        var stroke = this.getAxisGridColor();\n        var axisColor = \"rgba(195, 195, 195, 1)\";\n        return {\n            title: __assign(__assign({}, fontOptions), { enabled: false, fontSize: 14 }),\n            line: {\n                color: axisColor,\n                width: 1,\n            },\n            tick: {\n                color: axisColor,\n                size: 6,\n                width: 1,\n            },\n            label: __assign(__assign({}, fontOptions), { padding: 5, rotation: 0 }),\n            gridStyle: [{\n                    stroke: stroke,\n                    lineDash: [4, 2]\n                }]\n        };\n    };\n    CartesianChartProxy.prototype.getDefaultCartesianChartOptions = function () {\n        var options = this.getDefaultChartOptions();\n        options.xAxis = this.getDefaultAxisOptions();\n        options.yAxis = this.getDefaultAxisOptions();\n        return options;\n    };\n    CartesianChartProxy.prototype.updateAxes = function (baseAxisType, isHorizontalChart) {\n        if (baseAxisType === void 0) { baseAxisType = 'category'; }\n        if (isHorizontalChart === void 0) { isHorizontalChart = false; }\n        var baseAxis = isHorizontalChart ? this.getYAxis() : this.getXAxis();\n        if (!baseAxis) {\n            return;\n        }\n        // when grouping we only recreate the chart if the axis is not a 'groupedCategory' axis, otherwise return\n        if (this.chartProxyParams.grouping) {\n            if (!(baseAxis instanceof GroupedCategoryAxis)) {\n                this.recreateChart();\n            }\n            return;\n        }\n        // only update the axis type when the axis has changed and recreate the chart (e.g. when switching from a\n        // 'category' axis to a 'time' axis)\n        var axisTypeChanged = !(baseAxis instanceof this.axisTypeToClassMap[baseAxisType]);\n        if (axisTypeChanged) {\n            (isHorizontalChart ? this.iChartOptions.yAxis : this.iChartOptions.xAxis).type = baseAxisType;\n            this.recreateChart();\n        }\n    };\n    CartesianChartProxy.prototype.isTimeAxis = function (params) {\n        if (params.category && params.category.chartDataType) {\n            return params.category.chartDataType === 'time';\n        }\n        var testDatum = params.data[0];\n        var testValue = testDatum && testDatum[params.category.id];\n        return isDate(testValue);\n    };\n    CartesianChartProxy.prototype.getXAxisDefaults = function (xAxisType, options) {\n        if (xAxisType === 'time') {\n            var xAxisTheme = {};\n            var standaloneChartType = this.getStandaloneChartType();\n            xAxisTheme = deepMerge(xAxisTheme, this.chartTheme.getConfig(standaloneChartType + '.axes.time'));\n            xAxisTheme = deepMerge(xAxisTheme, this.chartTheme.getConfig(standaloneChartType + '.axes.time.bottom'));\n            return xAxisTheme;\n        }\n        return options.xAxis;\n    };\n    CartesianChartProxy.prototype.getXAxis = function () {\n        return find(this.chart.axes, function (a) { return a.position === ChartAxisPosition.Bottom; });\n    };\n    CartesianChartProxy.prototype.getYAxis = function () {\n        return find(this.chart.axes, function (a) { return a.position === ChartAxisPosition.Left; });\n    };\n    CartesianChartProxy.prototype.processDataForCrossFiltering = function (data, colId, params) {\n        var yKey = colId;\n        var atLeastOneSelectedPoint = false;\n        if (this.crossFiltering) {\n            data.forEach(function (d) {\n                d[colId + '-total'] = d[colId] + d[colId + '-filtered-out'];\n                if (d[colId + '-filtered-out'] > 0) {\n                    atLeastOneSelectedPoint = true;\n                }\n            });\n            var lastSelectedChartId = params.getCrossFilteringContext().lastSelectedChartId;\n            if (lastSelectedChartId === params.chartId) {\n                yKey = colId + '-total';\n            }\n        }\n        return { yKey: yKey, atLeastOneSelectedPoint: atLeastOneSelectedPoint };\n    };\n    CartesianChartProxy.prototype.updateSeriesForCrossFiltering = function (series, colId, chart, params, atLeastOneSelectedPoint) {\n        if (this.crossFiltering) {\n            // special custom marker handling to show and hide points\n            series.marker.enabled = true;\n            series.marker.formatter = function (p) {\n                return {\n                    fill: p.highlighted ? 'yellow' : p.fill,\n                    size: p.highlighted ? 12 : p.datum[colId] > 0 ? 8 : 0,\n                };\n            };\n            chart.tooltip.delay = 500;\n            // make line opaque when some points are deselected\n            var ctx = params.getCrossFilteringContext();\n            var lastSelectionOnThisChart = ctx.lastSelectedChartId === params.chartId;\n            var deselectedPoints = lastSelectionOnThisChart && atLeastOneSelectedPoint;\n            if (series instanceof AreaSeries) {\n                series.fillOpacity = deselectedPoints ? 0.3 : 1;\n            }\n            if (series instanceof LineSeries) {\n                series.strokeOpacity = deselectedPoints ? 0.3 : 1;\n            }\n            // add node click cross filtering callback to series\n            series.addEventListener('nodeClick', this.crossFilterCallback);\n        }\n    };\n    return CartesianChartProxy;\n}(ChartProxy));\nexport { CartesianChartProxy };\n"]},"metadata":{},"sourceType":"module"}