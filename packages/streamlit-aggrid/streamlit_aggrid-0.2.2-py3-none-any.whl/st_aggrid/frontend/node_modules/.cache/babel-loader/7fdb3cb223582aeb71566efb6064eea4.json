{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { AgChart } from \"ag-charts-community\";\nimport { _ } from \"@ag-grid-community/core\";\nimport { PolarChartProxy } from \"./polarChartProxy\";\n\nvar DoughnutChartProxy = function (_super) {\n  __extends(DoughnutChartProxy, _super);\n\n  function DoughnutChartProxy(params) {\n    var _this = _super.call(this, params) || this;\n\n    _this.initChartOptions();\n\n    _this.recreateChart();\n\n    return _this;\n  }\n\n  DoughnutChartProxy.prototype.createChart = function () {\n    var options = this.iChartOptions;\n    var agChartOptions = options;\n    agChartOptions.type = 'pie';\n    agChartOptions.autoSize = true;\n    agChartOptions.series = [];\n    return AgChart.create(agChartOptions, this.chartProxyParams.parentElement);\n  };\n\n  DoughnutChartProxy.prototype.update = function (params) {\n    var _this = this;\n\n    if (params.fields.length === 0) {\n      this.chart.removeAllSeries();\n      return;\n    }\n\n    var doughnutChart = this.chart;\n    var fieldIds = params.fields.map(function (f) {\n      return f.colId;\n    });\n    var seriesMap = {};\n    doughnutChart.series.forEach(function (series) {\n      var pieSeries = series;\n      var id = pieSeries.angleKey;\n\n      if (_.includes(fieldIds, id)) {\n        seriesMap[id] = pieSeries;\n      }\n    });\n    var seriesDefaults = this.iChartOptions.seriesDefaults;\n    var fills = seriesDefaults.fill.colors;\n    var strokes = seriesDefaults.stroke.colors;\n    var numFields = params.fields.length;\n    var offset = 0;\n\n    if (this.crossFiltering) {\n      params.fields.forEach(function (field, index) {\n        var filteredOutField = __assign({}, field);\n\n        filteredOutField.colId = field.colId + '-filtered-out';\n        params.data.forEach(function (d) {\n          d[field.colId + '-total'] = d[field.colId] + d[filteredOutField.colId];\n          d[field.colId] = d[field.colId] / d[field.colId + '-total'];\n          d[filteredOutField.colId] = 1;\n        });\n\n        var _a = _this.updateSeries({\n          seriesMap: seriesMap,\n          angleField: field,\n          field: filteredOutField,\n          seriesDefaults: seriesDefaults,\n          index: index,\n          params: params,\n          fills: fills,\n          strokes: strokes,\n          doughnutChart: doughnutChart,\n          offset: offset,\n          numFields: numFields,\n          opaqueSeries: undefined\n        }),\n            updatedOffset = _a.updatedOffset,\n            pieSeries = _a.pieSeries;\n\n        _this.updateSeries({\n          seriesMap: seriesMap,\n          angleField: field,\n          field: field,\n          seriesDefaults: seriesDefaults,\n          index: index,\n          params: params,\n          fills: fills,\n          strokes: strokes,\n          doughnutChart: doughnutChart,\n          offset: offset,\n          numFields: numFields,\n          opaqueSeries: pieSeries\n        });\n\n        offset = updatedOffset;\n      });\n    } else {\n      params.fields.forEach(function (f, index) {\n        var updatedOffset = _this.updateSeries({\n          seriesMap: seriesMap,\n          angleField: f,\n          field: f,\n          seriesDefaults: seriesDefaults,\n          index: index,\n          params: params,\n          fills: fills,\n          strokes: strokes,\n          doughnutChart: doughnutChart,\n          offset: offset,\n          numFields: numFields,\n          opaqueSeries: undefined\n        }).updatedOffset;\n\n        offset = updatedOffset;\n      });\n    } // Because repaints are automatic, it's important to remove/add/update series at once,\n    // so that we don't get painted twice.\n\n\n    doughnutChart.series = _.values(seriesMap);\n  };\n\n  DoughnutChartProxy.prototype.updateSeries = function (updateParams) {\n    var _this = this;\n\n    var existingSeries = updateParams.seriesMap[updateParams.field.colId];\n\n    var seriesOptions = __assign(__assign({}, updateParams.seriesDefaults), {\n      type: 'pie',\n      angleKey: this.crossFiltering ? updateParams.angleField.colId + '-total' : updateParams.angleField.colId,\n      radiusKey: this.crossFiltering ? updateParams.field.colId : undefined,\n      title: __assign(__assign({}, updateParams.seriesDefaults.title), {\n        text: updateParams.seriesDefaults.title.text || updateParams.field.displayName,\n        showInLegend: updateParams.numFields > 1\n      }),\n      fills: updateParams.seriesDefaults.fill.colors,\n      fillOpacity: updateParams.seriesDefaults.fill.opacity,\n      strokes: updateParams.seriesDefaults.stroke.colors,\n      strokeOpacity: updateParams.seriesDefaults.stroke.opacity,\n      strokeWidth: updateParams.seriesDefaults.stroke.width,\n      tooltip: {\n        enabled: updateParams.seriesDefaults.tooltip && updateParams.seriesDefaults.tooltip.enabled,\n        renderer: updateParams.seriesDefaults.tooltip && updateParams.seriesDefaults.tooltip.enabled && updateParams.seriesDefaults.tooltip.renderer || undefined\n      }\n    });\n\n    var calloutColors = seriesOptions.callout && seriesOptions.callout.colors || seriesOptions.strokes || [];\n    var pieSeries = existingSeries || AgChart.createComponent(seriesOptions, 'pie.series');\n\n    if (pieSeries.title) {\n      pieSeries.title.showInLegend = updateParams.numFields > 1;\n    }\n\n    if (!existingSeries) {\n      if (this.crossFiltering && !pieSeries.tooltip.renderer) {\n        // only add renderer if user hasn't provided one\n        this.addCrossFilteringTooltipRenderer(pieSeries);\n      }\n    }\n\n    pieSeries.angleName = updateParams.field.displayName;\n    pieSeries.labelKey = updateParams.params.category.id;\n    pieSeries.labelName = updateParams.params.category.name;\n    pieSeries.data = updateParams.params.data; // Normally all series provide legend items for every slice.\n    // For our use case, where all series have the same number of slices in the same order with the same labels\n    // (all of which can be different in other use cases) we don't want to show repeating labels in the legend,\n    // so we only show legend items for the first series, and then when the user toggles the slices of the\n    // first series in the legend, we programmatically toggle the corresponding slices of other series.\n\n    if (updateParams.index === 0) {\n      pieSeries.toggleSeriesItem = function (itemId, enabled) {\n        if (updateParams.doughnutChart) {\n          updateParams.doughnutChart.series.forEach(function (series) {\n            series.seriesItemEnabled[itemId] = enabled;\n          });\n        }\n\n        pieSeries.scheduleData();\n      };\n    }\n\n    if (this.crossFiltering) {\n      pieSeries.radiusMin = 0;\n      pieSeries.radiusMax = 1;\n      var isOpaqueSeries = !updateParams.opaqueSeries;\n\n      if (isOpaqueSeries) {\n        pieSeries.fills = updateParams.fills.map(function (fill) {\n          return _this.hexToRGBA(fill, '0.3');\n        });\n        pieSeries.strokes = updateParams.strokes.map(function (stroke) {\n          return _this.hexToRGBA(stroke, '0.3');\n        });\n        pieSeries.showInLegend = false;\n      } else {\n        updateParams.doughnutChart.legend.addEventListener('click', function (event) {\n          if (updateParams.opaqueSeries) {\n            updateParams.opaqueSeries.toggleSeriesItem(event.itemId, event.enabled);\n          }\n        });\n        pieSeries.fills = updateParams.fills;\n        pieSeries.strokes = updateParams.strokes;\n        pieSeries.callout.colors = calloutColors;\n      } // disable series highlighting by default\n\n\n      pieSeries.highlightStyle.fill = undefined;\n      pieSeries.addEventListener('nodeClick', this.crossFilterCallback);\n      updateParams.doughnutChart.tooltip.delay = 500;\n    } else {\n      pieSeries.fills = updateParams.fills;\n      pieSeries.strokes = updateParams.strokes;\n      pieSeries.callout.colors = calloutColors;\n    }\n\n    var offsetAmount = updateParams.numFields > 1 ? 20 : 40;\n    pieSeries.outerRadiusOffset = updateParams.offset;\n    updateParams.offset -= offsetAmount;\n    pieSeries.innerRadiusOffset = updateParams.offset;\n    updateParams.offset -= offsetAmount;\n\n    if (!existingSeries) {\n      updateParams.seriesMap[updateParams.field.colId] = pieSeries;\n    }\n\n    return {\n      updatedOffset: updateParams.offset,\n      pieSeries: pieSeries\n    };\n  };\n\n  DoughnutChartProxy.prototype.extractIChartOptionsFromTheme = function (theme) {\n    var options = _super.prototype.extractIChartOptionsFromTheme.call(this, theme);\n\n    var seriesDefaults = theme.getConfig('pie.series.pie');\n    options.seriesDefaults = {\n      title: seriesDefaults.title,\n      label: seriesDefaults.label,\n      callout: seriesDefaults.callout,\n      shadow: seriesDefaults.shadow,\n      tooltip: {\n        enabled: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled,\n        renderer: seriesDefaults.tooltip && seriesDefaults.tooltip.renderer\n      },\n      fill: {\n        colors: seriesDefaults.fills || theme.palette.fills,\n        opacity: seriesDefaults.fillOpacity\n      },\n      stroke: {\n        colors: seriesDefaults.strokes || theme.palette.strokes,\n        opacity: seriesDefaults.strokeOpacity,\n        width: seriesDefaults.strokeWidth\n      },\n      lineDash: seriesDefaults.lineDash,\n      lineDashOffset: seriesDefaults.lineDashOffset,\n      highlightStyle: seriesDefaults.highlightStyle,\n      listeners: seriesDefaults.listeners\n    };\n    return options;\n  };\n\n  DoughnutChartProxy.prototype.getDefaultOptions = function () {\n    var strokes = this.getPredefinedPalette().strokes;\n    var options = this.getDefaultChartOptions();\n    var fontOptions = this.getDefaultFontOptions();\n    options.seriesDefaults = __assign(__assign({}, options.seriesDefaults), {\n      title: __assign(__assign({}, fontOptions), {\n        enabled: true,\n        fontSize: 12,\n        fontWeight: 'bold'\n      }),\n      callout: {\n        colors: strokes,\n        length: 10,\n        strokeWidth: 2\n      },\n      label: __assign(__assign({}, fontOptions), {\n        enabled: false,\n        offset: 3,\n        minAngle: 0\n      }),\n      tooltip: {\n        enabled: true\n      },\n      shadow: this.getDefaultDropShadowOptions()\n    });\n    return options;\n  };\n\n  return DoughnutChartProxy;\n}(PolarChartProxy);\n\nexport { DoughnutChartProxy };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/charts/dist/es6/charts/chartComp/chartProxies/polar/doughnutChartProxy.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","AgChart","_","PolarChartProxy","DoughnutChartProxy","_super","params","_this","initChartOptions","recreateChart","createChart","options","iChartOptions","agChartOptions","type","autoSize","series","chartProxyParams","parentElement","update","fields","chart","removeAllSeries","doughnutChart","fieldIds","map","f","colId","seriesMap","forEach","pieSeries","id","angleKey","includes","seriesDefaults","fills","fill","colors","strokes","stroke","numFields","offset","crossFiltering","field","index","filteredOutField","data","_a","updateSeries","angleField","opaqueSeries","undefined","updatedOffset","values","updateParams","existingSeries","seriesOptions","radiusKey","title","text","displayName","showInLegend","fillOpacity","opacity","strokeOpacity","strokeWidth","width","tooltip","enabled","renderer","calloutColors","callout","createComponent","addCrossFilteringTooltipRenderer","angleName","labelKey","category","labelName","name","toggleSeriesItem","itemId","seriesItemEnabled","scheduleData","radiusMin","radiusMax","isOpaqueSeries","hexToRGBA","legend","addEventListener","event","highlightStyle","crossFilterCallback","delay","offsetAmount","outerRadiusOffset","innerRadiusOffset","extractIChartOptionsFromTheme","theme","getConfig","label","shadow","palette","lineDash","lineDashOffset","listeners","getDefaultOptions","getPredefinedPalette","getDefaultChartOptions","fontOptions","getDefaultFontOptions","fontSize","fontWeight","minAngle","getDefaultDropShadowOptions"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { AgChart } from \"ag-charts-community\";\nimport { _ } from \"@ag-grid-community/core\";\nimport { PolarChartProxy } from \"./polarChartProxy\";\nvar DoughnutChartProxy = /** @class */ (function (_super) {\n    __extends(DoughnutChartProxy, _super);\n    function DoughnutChartProxy(params) {\n        var _this = _super.call(this, params) || this;\n        _this.initChartOptions();\n        _this.recreateChart();\n        return _this;\n    }\n    DoughnutChartProxy.prototype.createChart = function () {\n        var options = this.iChartOptions;\n        var agChartOptions = options;\n        agChartOptions.type = 'pie';\n        agChartOptions.autoSize = true;\n        agChartOptions.series = [];\n        return AgChart.create(agChartOptions, this.chartProxyParams.parentElement);\n    };\n    DoughnutChartProxy.prototype.update = function (params) {\n        var _this = this;\n        if (params.fields.length === 0) {\n            this.chart.removeAllSeries();\n            return;\n        }\n        var doughnutChart = this.chart;\n        var fieldIds = params.fields.map(function (f) { return f.colId; });\n        var seriesMap = {};\n        doughnutChart.series.forEach(function (series) {\n            var pieSeries = series;\n            var id = pieSeries.angleKey;\n            if (_.includes(fieldIds, id)) {\n                seriesMap[id] = pieSeries;\n            }\n        });\n        var seriesDefaults = this.iChartOptions.seriesDefaults;\n        var fills = seriesDefaults.fill.colors;\n        var strokes = seriesDefaults.stroke.colors;\n        var numFields = params.fields.length;\n        var offset = 0;\n        if (this.crossFiltering) {\n            params.fields.forEach(function (field, index) {\n                var filteredOutField = __assign({}, field);\n                filteredOutField.colId = field.colId + '-filtered-out';\n                params.data.forEach(function (d) {\n                    d[field.colId + '-total'] = d[field.colId] + d[filteredOutField.colId];\n                    d[field.colId] = d[field.colId] / d[field.colId + '-total'];\n                    d[filteredOutField.colId] = 1;\n                });\n                var _a = _this.updateSeries({\n                    seriesMap: seriesMap,\n                    angleField: field,\n                    field: filteredOutField,\n                    seriesDefaults: seriesDefaults,\n                    index: index,\n                    params: params,\n                    fills: fills,\n                    strokes: strokes,\n                    doughnutChart: doughnutChart,\n                    offset: offset,\n                    numFields: numFields,\n                    opaqueSeries: undefined\n                }), updatedOffset = _a.updatedOffset, pieSeries = _a.pieSeries;\n                _this.updateSeries({\n                    seriesMap: seriesMap,\n                    angleField: field,\n                    field: field,\n                    seriesDefaults: seriesDefaults,\n                    index: index,\n                    params: params,\n                    fills: fills,\n                    strokes: strokes,\n                    doughnutChart: doughnutChart,\n                    offset: offset,\n                    numFields: numFields,\n                    opaqueSeries: pieSeries\n                });\n                offset = updatedOffset;\n            });\n        }\n        else {\n            params.fields.forEach(function (f, index) {\n                var updatedOffset = _this.updateSeries({\n                    seriesMap: seriesMap,\n                    angleField: f,\n                    field: f,\n                    seriesDefaults: seriesDefaults,\n                    index: index,\n                    params: params,\n                    fills: fills,\n                    strokes: strokes,\n                    doughnutChart: doughnutChart,\n                    offset: offset,\n                    numFields: numFields,\n                    opaqueSeries: undefined\n                }).updatedOffset;\n                offset = updatedOffset;\n            });\n        }\n        // Because repaints are automatic, it's important to remove/add/update series at once,\n        // so that we don't get painted twice.\n        doughnutChart.series = _.values(seriesMap);\n    };\n    DoughnutChartProxy.prototype.updateSeries = function (updateParams) {\n        var _this = this;\n        var existingSeries = updateParams.seriesMap[updateParams.field.colId];\n        var seriesOptions = __assign(__assign({}, updateParams.seriesDefaults), { type: 'pie', angleKey: this.crossFiltering ? updateParams.angleField.colId + '-total' : updateParams.angleField.colId, radiusKey: this.crossFiltering ? updateParams.field.colId : undefined, title: __assign(__assign({}, updateParams.seriesDefaults.title), { text: updateParams.seriesDefaults.title.text || updateParams.field.displayName, showInLegend: updateParams.numFields > 1 }), fills: updateParams.seriesDefaults.fill.colors, fillOpacity: updateParams.seriesDefaults.fill.opacity, strokes: updateParams.seriesDefaults.stroke.colors, strokeOpacity: updateParams.seriesDefaults.stroke.opacity, strokeWidth: updateParams.seriesDefaults.stroke.width, tooltip: {\n                enabled: updateParams.seriesDefaults.tooltip && updateParams.seriesDefaults.tooltip.enabled,\n                renderer: (updateParams.seriesDefaults.tooltip && updateParams.seriesDefaults.tooltip.enabled && updateParams.seriesDefaults.tooltip.renderer) || undefined,\n            } });\n        var calloutColors = seriesOptions.callout && seriesOptions.callout.colors || seriesOptions.strokes || [];\n        var pieSeries = existingSeries || AgChart.createComponent(seriesOptions, 'pie.series');\n        if (pieSeries.title) {\n            pieSeries.title.showInLegend = updateParams.numFields > 1;\n        }\n        if (!existingSeries) {\n            if (this.crossFiltering && !pieSeries.tooltip.renderer) {\n                // only add renderer if user hasn't provided one\n                this.addCrossFilteringTooltipRenderer(pieSeries);\n            }\n        }\n        pieSeries.angleName = updateParams.field.displayName;\n        pieSeries.labelKey = updateParams.params.category.id;\n        pieSeries.labelName = updateParams.params.category.name;\n        pieSeries.data = updateParams.params.data;\n        // Normally all series provide legend items for every slice.\n        // For our use case, where all series have the same number of slices in the same order with the same labels\n        // (all of which can be different in other use cases) we don't want to show repeating labels in the legend,\n        // so we only show legend items for the first series, and then when the user toggles the slices of the\n        // first series in the legend, we programmatically toggle the corresponding slices of other series.\n        if (updateParams.index === 0) {\n            pieSeries.toggleSeriesItem = function (itemId, enabled) {\n                if (updateParams.doughnutChart) {\n                    updateParams.doughnutChart.series.forEach(function (series) {\n                        series.seriesItemEnabled[itemId] = enabled;\n                    });\n                }\n                pieSeries.scheduleData();\n            };\n        }\n        if (this.crossFiltering) {\n            pieSeries.radiusMin = 0;\n            pieSeries.radiusMax = 1;\n            var isOpaqueSeries = !updateParams.opaqueSeries;\n            if (isOpaqueSeries) {\n                pieSeries.fills = updateParams.fills.map(function (fill) { return _this.hexToRGBA(fill, '0.3'); });\n                pieSeries.strokes = updateParams.strokes.map(function (stroke) { return _this.hexToRGBA(stroke, '0.3'); });\n                pieSeries.showInLegend = false;\n            }\n            else {\n                updateParams.doughnutChart.legend.addEventListener('click', function (event) {\n                    if (updateParams.opaqueSeries) {\n                        updateParams.opaqueSeries.toggleSeriesItem(event.itemId, event.enabled);\n                    }\n                });\n                pieSeries.fills = updateParams.fills;\n                pieSeries.strokes = updateParams.strokes;\n                pieSeries.callout.colors = calloutColors;\n            }\n            // disable series highlighting by default\n            pieSeries.highlightStyle.fill = undefined;\n            pieSeries.addEventListener('nodeClick', this.crossFilterCallback);\n            updateParams.doughnutChart.tooltip.delay = 500;\n        }\n        else {\n            pieSeries.fills = updateParams.fills;\n            pieSeries.strokes = updateParams.strokes;\n            pieSeries.callout.colors = calloutColors;\n        }\n        var offsetAmount = updateParams.numFields > 1 ? 20 : 40;\n        pieSeries.outerRadiusOffset = updateParams.offset;\n        updateParams.offset -= offsetAmount;\n        pieSeries.innerRadiusOffset = updateParams.offset;\n        updateParams.offset -= offsetAmount;\n        if (!existingSeries) {\n            updateParams.seriesMap[updateParams.field.colId] = pieSeries;\n        }\n        return { updatedOffset: updateParams.offset, pieSeries: pieSeries };\n    };\n    DoughnutChartProxy.prototype.extractIChartOptionsFromTheme = function (theme) {\n        var options = _super.prototype.extractIChartOptionsFromTheme.call(this, theme);\n        var seriesDefaults = theme.getConfig('pie.series.pie');\n        options.seriesDefaults = {\n            title: seriesDefaults.title,\n            label: seriesDefaults.label,\n            callout: seriesDefaults.callout,\n            shadow: seriesDefaults.shadow,\n            tooltip: {\n                enabled: seriesDefaults.tooltip && seriesDefaults.tooltip.enabled,\n                renderer: seriesDefaults.tooltip && seriesDefaults.tooltip.renderer\n            },\n            fill: {\n                colors: seriesDefaults.fills || theme.palette.fills,\n                opacity: seriesDefaults.fillOpacity\n            },\n            stroke: {\n                colors: seriesDefaults.strokes || theme.palette.strokes,\n                opacity: seriesDefaults.strokeOpacity,\n                width: seriesDefaults.strokeWidth\n            },\n            lineDash: seriesDefaults.lineDash,\n            lineDashOffset: seriesDefaults.lineDashOffset,\n            highlightStyle: seriesDefaults.highlightStyle,\n            listeners: seriesDefaults.listeners\n        };\n        return options;\n    };\n    DoughnutChartProxy.prototype.getDefaultOptions = function () {\n        var strokes = this.getPredefinedPalette().strokes;\n        var options = this.getDefaultChartOptions();\n        var fontOptions = this.getDefaultFontOptions();\n        options.seriesDefaults = __assign(__assign({}, options.seriesDefaults), { title: __assign(__assign({}, fontOptions), { enabled: true, fontSize: 12, fontWeight: 'bold' }), callout: {\n                colors: strokes,\n                length: 10,\n                strokeWidth: 2,\n            }, label: __assign(__assign({}, fontOptions), { enabled: false, offset: 3, minAngle: 0 }), tooltip: {\n                enabled: true,\n            }, shadow: this.getDefaultDropShadowOptions() });\n        return options;\n    };\n    return DoughnutChartProxy;\n}(PolarChartProxy));\nexport { DoughnutChartProxy };\n"]},"metadata":{},"sourceType":"module"}