{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, Autowired, Bean, BeanStub, Constants, Events, NumberSequence, PostConstruct, PreDestroy } from \"@ag-grid-community/core\";\nimport { InfiniteCache } from \"./infiniteCache\";\n\nvar InfiniteRowModel = function (_super) {\n  __extends(InfiniteRowModel, _super);\n\n  function InfiniteRowModel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  InfiniteRowModel.prototype.getRowBounds = function (index) {\n    return {\n      rowHeight: this.rowHeight,\n      rowTop: this.rowHeight * index\n    };\n  }; // we don't implement as lazy row heights is not supported in this row model\n\n\n  InfiniteRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    return false;\n  };\n\n  InfiniteRowModel.prototype.init = function () {\n    var _this = this;\n\n    if (!this.gridOptionsWrapper.isRowModelInfinite()) {\n      return;\n    }\n\n    this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n    this.addEventListeners();\n    this.addDestroyFunc(function () {\n      return _this.destroyCache();\n    });\n    this.verifyProps();\n  };\n\n  InfiniteRowModel.prototype.verifyProps = function () {\n    if (this.gridOptionsWrapper.getDefaultGroupOrderComparator() != null) {\n      var message_1 = \"AG Grid: defaultGroupOrderComparator cannot be used with Infinite Row Model. If using Infinite Row Model, then sorting is done on the server side, nothing to do with the client.\";\n\n      _.doOnce(function () {\n        return console.warn(message_1);\n      }, 'IRM.DefaultGroupOrderComparator');\n    }\n  };\n\n  InfiniteRowModel.prototype.start = function () {\n    this.setDatasource(this.gridOptionsWrapper.getDatasource());\n  };\n\n  InfiniteRowModel.prototype.destroyDatasource = function () {\n    if (this.datasource) {\n      this.getContext().destroyBean(this.datasource);\n      this.rowRenderer.datasourceChanged();\n      this.datasource = null;\n    }\n  };\n\n  InfiniteRowModel.prototype.addEventListeners = function () {\n    this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverything.bind(this));\n    this.addManagedListener(this.eventService, Events.EVENT_STORE_UPDATED, this.onCacheUpdated.bind(this));\n  };\n\n  InfiniteRowModel.prototype.onFilterChanged = function () {\n    this.reset();\n  };\n\n  InfiniteRowModel.prototype.onSortChanged = function () {\n    this.reset();\n  };\n\n  InfiniteRowModel.prototype.onColumnEverything = function () {\n    var resetRequired; // if cache params, we require reset only if sort model has changed. we don't need to check\n    // for filter model, as the filter manager will fire an event when columns change that result\n    // in the filter changing.\n\n    if (this.cacheParams) {\n      resetRequired = this.isSortModelDifferent();\n    } else {\n      // if no cacheParams, means first time creating the cache, so always create one\n      resetRequired = true;\n    }\n\n    if (resetRequired) {\n      this.reset();\n    }\n  };\n\n  InfiniteRowModel.prototype.isSortModelDifferent = function () {\n    return !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());\n  };\n\n  InfiniteRowModel.prototype.getType = function () {\n    return Constants.ROW_MODEL_TYPE_INFINITE;\n  };\n\n  InfiniteRowModel.prototype.setDatasource = function (datasource) {\n    this.destroyDatasource();\n    this.datasource = datasource; // only reset if we have a valid datasource to working with\n\n    if (datasource) {\n      this.reset();\n    }\n  };\n\n  InfiniteRowModel.prototype.isEmpty = function () {\n    return !this.infiniteCache;\n  };\n\n  InfiniteRowModel.prototype.isRowsToRender = function () {\n    return !!this.infiniteCache;\n  };\n\n  InfiniteRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n    return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];\n  };\n\n  InfiniteRowModel.prototype.reset = function () {\n    // important to return here, as the user could be setting filter or sort before\n    // data-source is set\n    if (!this.datasource) {\n      return;\n    } // if user is providing id's, then this means we can keep the selection between datasource hits,\n    // as the rows will keep their unique id's even if, for example, server side sorting or filtering\n    // is done.\n\n\n    var userGeneratingIds = _.exists(this.gridOptionsWrapper.getRowNodeIdFunc());\n\n    if (!userGeneratingIds) {\n      this.selectionService.reset();\n    }\n\n    this.resetCache();\n    var event = this.createModelUpdatedEvent();\n    this.eventService.dispatchEvent(event);\n  };\n\n  InfiniteRowModel.prototype.createModelUpdatedEvent = function () {\n    return {\n      type: Events.EVENT_MODEL_UPDATED,\n      api: this.gridApi,\n      columnApi: this.columnApi,\n      // not sure if these should all be false - noticed if after implementing,\n      // maybe they should be true?\n      newPage: false,\n      newData: false,\n      keepRenderedRows: true,\n      animate: false\n    };\n  };\n\n  InfiniteRowModel.prototype.resetCache = function () {\n    // if not first time creating a cache, need to destroy the old one\n    this.destroyCache();\n    var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();\n    this.cacheParams = {\n      // the user provided datasource\n      datasource: this.datasource,\n      // sort and filter model\n      filterModel: this.filterManager.getFilterModel(),\n      sortModel: this.sortController.getSortModel(),\n      rowNodeBlockLoader: this.rowNodeBlockLoader,\n      // properties - this way we take a snapshot of them, so if user changes any, they will be\n      // used next time we create a new cache, which is generally after a filter or sort change,\n      // or a new datasource is set\n      maxConcurrentRequests: this.defaultIfInvalid(maxConcurrentRequests, 2),\n      initialRowCount: this.defaultIfInvalid(this.gridOptionsWrapper.getInfiniteInitialRowCount(), 1),\n      maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),\n      rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),\n      // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past\n      // the current page and request first row of next page\n      overflowSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheOverflowSize(), 1),\n      // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the\n      // server for one page at a time. so the default if not specified is 100.\n      blockSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheBlockSize(), 100),\n      // the cache could create this, however it is also used by the pages, so handy to create it\n      // here as the settings are also passed to the pages\n      lastAccessedSequence: new NumberSequence()\n    };\n    this.infiniteCache = this.createBean(new InfiniteCache(this.cacheParams));\n  };\n\n  InfiniteRowModel.prototype.defaultIfInvalid = function (value, defaultValue) {\n    return value > 0 ? value : defaultValue;\n  };\n\n  InfiniteRowModel.prototype.destroyCache = function () {\n    if (this.infiniteCache) {\n      this.infiniteCache = this.destroyBean(this.infiniteCache);\n    }\n  };\n\n  InfiniteRowModel.prototype.onCacheUpdated = function () {\n    var event = this.createModelUpdatedEvent();\n    this.eventService.dispatchEvent(event);\n  };\n\n  InfiniteRowModel.prototype.getRow = function (rowIndex) {\n    if (!this.infiniteCache) {\n      return undefined;\n    }\n\n    if (rowIndex >= this.infiniteCache.getRowCount()) {\n      return undefined;\n    }\n\n    return this.infiniteCache.getRow(rowIndex);\n  };\n\n  InfiniteRowModel.prototype.getRowNode = function (id) {\n    var result = undefined;\n    this.forEachNode(function (rowNode) {\n      if (rowNode.id === id) {\n        result = rowNode;\n      }\n    });\n    return result;\n  };\n\n  InfiniteRowModel.prototype.forEachNode = function (callback) {\n    if (this.infiniteCache) {\n      this.infiniteCache.forEachNodeDeep(callback);\n    }\n  };\n\n  InfiniteRowModel.prototype.getTopLevelRowCount = function () {\n    return this.getRowCount();\n  };\n\n  InfiniteRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n    return topLevelIndex;\n  };\n\n  InfiniteRowModel.prototype.getRowIndexAtPixel = function (pixel) {\n    if (this.rowHeight !== 0) {\n      // avoid divide by zero error\n      var rowIndexForPixel = Math.floor(pixel / this.rowHeight);\n      var lastRowIndex = this.getRowCount() - 1;\n\n      if (rowIndexForPixel > lastRowIndex) {\n        return lastRowIndex;\n      } else {\n        return rowIndexForPixel;\n      }\n    } else {\n      return 0;\n    }\n  };\n\n  InfiniteRowModel.prototype.getRowCount = function () {\n    return this.infiniteCache ? this.infiniteCache.getRowCount() : 0;\n  };\n\n  InfiniteRowModel.prototype.isRowPresent = function (rowNode) {\n    var foundRowNode = this.getRowNode(rowNode.id);\n    return !!foundRowNode;\n  };\n\n  InfiniteRowModel.prototype.refreshCache = function () {\n    if (this.infiniteCache) {\n      this.infiniteCache.refreshCache();\n    }\n  };\n\n  InfiniteRowModel.prototype.purgeCache = function () {\n    if (this.infiniteCache) {\n      this.infiniteCache.purgeCache();\n    }\n  }; // for iRowModel\n\n\n  InfiniteRowModel.prototype.isLastRowIndexKnown = function () {\n    if (this.infiniteCache) {\n      return this.infiniteCache.isLastRowIndexKnown();\n    } else {\n      return false;\n    }\n  };\n\n  InfiniteRowModel.prototype.setRowCount = function (rowCount, lastRowIndexKnown) {\n    if (this.infiniteCache) {\n      this.infiniteCache.setRowCount(rowCount, lastRowIndexKnown);\n    }\n  };\n\n  __decorate([Autowired('filterManager')], InfiniteRowModel.prototype, \"filterManager\", void 0);\n\n  __decorate([Autowired('sortController')], InfiniteRowModel.prototype, \"sortController\", void 0);\n\n  __decorate([Autowired('selectionService')], InfiniteRowModel.prototype, \"selectionService\", void 0);\n\n  __decorate([Autowired('gridApi')], InfiniteRowModel.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired('columnApi')], InfiniteRowModel.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('rowRenderer')], InfiniteRowModel.prototype, \"rowRenderer\", void 0);\n\n  __decorate([Autowired('rowNodeBlockLoader')], InfiniteRowModel.prototype, \"rowNodeBlockLoader\", void 0);\n\n  __decorate([PostConstruct], InfiniteRowModel.prototype, \"init\", null);\n\n  __decorate([PreDestroy], InfiniteRowModel.prototype, \"destroyDatasource\", null);\n\n  InfiniteRowModel = __decorate([Bean('rowModel')], InfiniteRowModel);\n  return InfiniteRowModel;\n}(BeanStub);\n\nexport { InfiniteRowModel };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModel/infiniteRowModel.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","Autowired","Bean","BeanStub","Constants","Events","NumberSequence","PostConstruct","PreDestroy","InfiniteCache","InfiniteRowModel","_super","apply","getRowBounds","index","rowHeight","rowTop","ensureRowHeightsValid","startPixel","endPixel","startLimitIndex","endLimitIndex","init","_this","gridOptionsWrapper","isRowModelInfinite","getRowHeightAsNumber","addEventListeners","addDestroyFunc","destroyCache","verifyProps","getDefaultGroupOrderComparator","message_1","doOnce","console","warn","start","setDatasource","getDatasource","destroyDatasource","datasource","getContext","destroyBean","rowRenderer","datasourceChanged","addManagedListener","eventService","EVENT_FILTER_CHANGED","onFilterChanged","bind","EVENT_SORT_CHANGED","onSortChanged","EVENT_NEW_COLUMNS_LOADED","onColumnEverything","EVENT_STORE_UPDATED","onCacheUpdated","reset","resetRequired","cacheParams","isSortModelDifferent","jsonEquals","sortModel","sortController","getSortModel","getType","ROW_MODEL_TYPE_INFINITE","isEmpty","infiniteCache","isRowsToRender","getNodesInRangeForSelection","firstInRange","lastInRange","getRowNodesInRange","userGeneratingIds","exists","getRowNodeIdFunc","selectionService","resetCache","event","createModelUpdatedEvent","dispatchEvent","type","EVENT_MODEL_UPDATED","api","gridApi","columnApi","newPage","newData","keepRenderedRows","animate","maxConcurrentRequests","getMaxConcurrentDatasourceRequests","filterModel","filterManager","getFilterModel","rowNodeBlockLoader","defaultIfInvalid","initialRowCount","getInfiniteInitialRowCount","maxBlocksInCache","getMaxBlocksInCache","overflowSize","getCacheOverflowSize","blockSize","getCacheBlockSize","lastAccessedSequence","createBean","value","defaultValue","getRow","rowIndex","undefined","getRowCount","getRowNode","id","result","forEachNode","rowNode","callback","forEachNodeDeep","getTopLevelRowCount","getTopLevelRowDisplayedIndex","topLevelIndex","getRowIndexAtPixel","pixel","rowIndexForPixel","Math","floor","lastRowIndex","isRowPresent","foundRowNode","refreshCache","purgeCache","isLastRowIndexKnown","setRowCount","rowCount","lastRowIndexKnown"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, Constants, Events, NumberSequence, PostConstruct, PreDestroy } from \"@ag-grid-community/core\";\nimport { InfiniteCache } from \"./infiniteCache\";\nvar InfiniteRowModel = /** @class */ (function (_super) {\n    __extends(InfiniteRowModel, _super);\n    function InfiniteRowModel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    InfiniteRowModel.prototype.getRowBounds = function (index) {\n        return {\n            rowHeight: this.rowHeight,\n            rowTop: this.rowHeight * index\n        };\n    };\n    // we don't implement as lazy row heights is not supported in this row model\n    InfiniteRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n        return false;\n    };\n    InfiniteRowModel.prototype.init = function () {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isRowModelInfinite()) {\n            return;\n        }\n        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n        this.addEventListeners();\n        this.addDestroyFunc(function () { return _this.destroyCache(); });\n        this.verifyProps();\n    };\n    InfiniteRowModel.prototype.verifyProps = function () {\n        if (this.gridOptionsWrapper.getDefaultGroupOrderComparator() != null) {\n            var message_1 = \"AG Grid: defaultGroupOrderComparator cannot be used with Infinite Row Model. If using Infinite Row Model, then sorting is done on the server side, nothing to do with the client.\";\n            _.doOnce(function () { return console.warn(message_1); }, 'IRM.DefaultGroupOrderComparator');\n        }\n    };\n    InfiniteRowModel.prototype.start = function () {\n        this.setDatasource(this.gridOptionsWrapper.getDatasource());\n    };\n    InfiniteRowModel.prototype.destroyDatasource = function () {\n        if (this.datasource) {\n            this.getContext().destroyBean(this.datasource);\n            this.rowRenderer.datasourceChanged();\n            this.datasource = null;\n        }\n    };\n    InfiniteRowModel.prototype.addEventListeners = function () {\n        this.addManagedListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, this.onColumnEverything.bind(this));\n        this.addManagedListener(this.eventService, Events.EVENT_STORE_UPDATED, this.onCacheUpdated.bind(this));\n    };\n    InfiniteRowModel.prototype.onFilterChanged = function () {\n        this.reset();\n    };\n    InfiniteRowModel.prototype.onSortChanged = function () {\n        this.reset();\n    };\n    InfiniteRowModel.prototype.onColumnEverything = function () {\n        var resetRequired;\n        // if cache params, we require reset only if sort model has changed. we don't need to check\n        // for filter model, as the filter manager will fire an event when columns change that result\n        // in the filter changing.\n        if (this.cacheParams) {\n            resetRequired = this.isSortModelDifferent();\n        }\n        else {\n            // if no cacheParams, means first time creating the cache, so always create one\n            resetRequired = true;\n        }\n        if (resetRequired) {\n            this.reset();\n        }\n    };\n    InfiniteRowModel.prototype.isSortModelDifferent = function () {\n        return !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());\n    };\n    InfiniteRowModel.prototype.getType = function () {\n        return Constants.ROW_MODEL_TYPE_INFINITE;\n    };\n    InfiniteRowModel.prototype.setDatasource = function (datasource) {\n        this.destroyDatasource();\n        this.datasource = datasource;\n        // only reset if we have a valid datasource to working with\n        if (datasource) {\n            this.reset();\n        }\n    };\n    InfiniteRowModel.prototype.isEmpty = function () {\n        return !this.infiniteCache;\n    };\n    InfiniteRowModel.prototype.isRowsToRender = function () {\n        return !!this.infiniteCache;\n    };\n    InfiniteRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n        return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];\n    };\n    InfiniteRowModel.prototype.reset = function () {\n        // important to return here, as the user could be setting filter or sort before\n        // data-source is set\n        if (!this.datasource) {\n            return;\n        }\n        // if user is providing id's, then this means we can keep the selection between datasource hits,\n        // as the rows will keep their unique id's even if, for example, server side sorting or filtering\n        // is done.\n        var userGeneratingIds = _.exists(this.gridOptionsWrapper.getRowNodeIdFunc());\n        if (!userGeneratingIds) {\n            this.selectionService.reset();\n        }\n        this.resetCache();\n        var event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    };\n    InfiniteRowModel.prototype.createModelUpdatedEvent = function () {\n        return {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            // not sure if these should all be false - noticed if after implementing,\n            // maybe they should be true?\n            newPage: false,\n            newData: false,\n            keepRenderedRows: true,\n            animate: false\n        };\n    };\n    InfiniteRowModel.prototype.resetCache = function () {\n        // if not first time creating a cache, need to destroy the old one\n        this.destroyCache();\n        var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();\n        this.cacheParams = {\n            // the user provided datasource\n            datasource: this.datasource,\n            // sort and filter model\n            filterModel: this.filterManager.getFilterModel(),\n            sortModel: this.sortController.getSortModel(),\n            rowNodeBlockLoader: this.rowNodeBlockLoader,\n            // properties - this way we take a snapshot of them, so if user changes any, they will be\n            // used next time we create a new cache, which is generally after a filter or sort change,\n            // or a new datasource is set\n            maxConcurrentRequests: this.defaultIfInvalid(maxConcurrentRequests, 2),\n            initialRowCount: this.defaultIfInvalid(this.gridOptionsWrapper.getInfiniteInitialRowCount(), 1),\n            maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),\n            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),\n            // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past\n            // the current page and request first row of next page\n            overflowSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheOverflowSize(), 1),\n            // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the\n            // server for one page at a time. so the default if not specified is 100.\n            blockSize: this.defaultIfInvalid(this.gridOptionsWrapper.getCacheBlockSize(), 100),\n            // the cache could create this, however it is also used by the pages, so handy to create it\n            // here as the settings are also passed to the pages\n            lastAccessedSequence: new NumberSequence()\n        };\n        this.infiniteCache = this.createBean(new InfiniteCache(this.cacheParams));\n    };\n    InfiniteRowModel.prototype.defaultIfInvalid = function (value, defaultValue) {\n        return value > 0 ? value : defaultValue;\n    };\n    InfiniteRowModel.prototype.destroyCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache = this.destroyBean(this.infiniteCache);\n        }\n    };\n    InfiniteRowModel.prototype.onCacheUpdated = function () {\n        var event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    };\n    InfiniteRowModel.prototype.getRow = function (rowIndex) {\n        if (!this.infiniteCache) {\n            return undefined;\n        }\n        if (rowIndex >= this.infiniteCache.getRowCount()) {\n            return undefined;\n        }\n        return this.infiniteCache.getRow(rowIndex);\n    };\n    InfiniteRowModel.prototype.getRowNode = function (id) {\n        var result = undefined;\n        this.forEachNode(function (rowNode) {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n        });\n        return result;\n    };\n    InfiniteRowModel.prototype.forEachNode = function (callback) {\n        if (this.infiniteCache) {\n            this.infiniteCache.forEachNodeDeep(callback);\n        }\n    };\n    InfiniteRowModel.prototype.getTopLevelRowCount = function () {\n        return this.getRowCount();\n    };\n    InfiniteRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n        return topLevelIndex;\n    };\n    InfiniteRowModel.prototype.getRowIndexAtPixel = function (pixel) {\n        if (this.rowHeight !== 0) { // avoid divide by zero error\n            var rowIndexForPixel = Math.floor(pixel / this.rowHeight);\n            var lastRowIndex = this.getRowCount() - 1;\n            if (rowIndexForPixel > lastRowIndex) {\n                return lastRowIndex;\n            }\n            else {\n                return rowIndexForPixel;\n            }\n        }\n        else {\n            return 0;\n        }\n    };\n    InfiniteRowModel.prototype.getRowCount = function () {\n        return this.infiniteCache ? this.infiniteCache.getRowCount() : 0;\n    };\n    InfiniteRowModel.prototype.isRowPresent = function (rowNode) {\n        var foundRowNode = this.getRowNode(rowNode.id);\n        return !!foundRowNode;\n    };\n    InfiniteRowModel.prototype.refreshCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.refreshCache();\n        }\n    };\n    InfiniteRowModel.prototype.purgeCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.purgeCache();\n        }\n    };\n    // for iRowModel\n    InfiniteRowModel.prototype.isLastRowIndexKnown = function () {\n        if (this.infiniteCache) {\n            return this.infiniteCache.isLastRowIndexKnown();\n        }\n        else {\n            return false;\n        }\n    };\n    InfiniteRowModel.prototype.setRowCount = function (rowCount, lastRowIndexKnown) {\n        if (this.infiniteCache) {\n            this.infiniteCache.setRowCount(rowCount, lastRowIndexKnown);\n        }\n    };\n    __decorate([\n        Autowired('filterManager')\n    ], InfiniteRowModel.prototype, \"filterManager\", void 0);\n    __decorate([\n        Autowired('sortController')\n    ], InfiniteRowModel.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('selectionService')\n    ], InfiniteRowModel.prototype, \"selectionService\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], InfiniteRowModel.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], InfiniteRowModel.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], InfiniteRowModel.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        Autowired('rowNodeBlockLoader')\n    ], InfiniteRowModel.prototype, \"rowNodeBlockLoader\", void 0);\n    __decorate([\n        PostConstruct\n    ], InfiniteRowModel.prototype, \"init\", null);\n    __decorate([\n        PreDestroy\n    ], InfiniteRowModel.prototype, \"destroyDatasource\", null);\n    InfiniteRowModel = __decorate([\n        Bean('rowModel')\n    ], InfiniteRowModel);\n    return InfiniteRowModel;\n}(BeanStub));\nexport { InfiniteRowModel };\n"]},"metadata":{},"sourceType":"module"}