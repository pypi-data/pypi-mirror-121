{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, Autowired, Bean, BeanStub, Constants, Events, PostConstruct } from \"@ag-grid-community/core\";\n\nvar SortListener = function (_super) {\n  __extends(SortListener, _super);\n\n  function SortListener() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SortListener.prototype.postConstruct = function () {\n    // only want to be active if SSRM active, otherwise would be interfering with other row models\n    if (!this.gridOptionsWrapper.isRowModelServerSide()) {\n      return;\n    }\n\n    this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n  };\n\n  SortListener.prototype.extractSortModel = function () {\n    var sortModel = this.sortController.getSortModel(); // when using tree data we just return the sort model with the 'ag-Grid-AutoColumn' as is, i.e not broken out\n    // into it's constitute group columns as they are not defined up front and can vary per node.\n\n    if (this.gridOptionsWrapper.isTreeData()) {\n      return sortModel;\n    } // it autoCol is active, we don't want to send this to the server. instead we want to\n    // send the\n\n\n    this.replaceAutoGroupColumnWithActualRowGroupColumns(sortModel);\n    this.removeMultiColumnPrefixOnColumnIds(sortModel);\n    return sortModel;\n  };\n\n  SortListener.prototype.removeMultiColumnPrefixOnColumnIds = function (sortModel) {\n    if (this.gridOptionsWrapper.isGroupMultiAutoColumn()) {\n      var multiColumnPrefix = Constants.GROUP_AUTO_COLUMN_ID + \"-\";\n\n      for (var i = 0; i < sortModel.length; ++i) {\n        if (sortModel[i].colId.indexOf(multiColumnPrefix) > -1) {\n          sortModel[i].colId = sortModel[i].colId.substr(multiColumnPrefix.length);\n        }\n      }\n    }\n  };\n\n  SortListener.prototype.replaceAutoGroupColumnWithActualRowGroupColumns = function (sortModel) {\n    // find index of auto group column in sort model\n    var autoGroupSortModel = _.find(sortModel, function (sm) {\n      return sm.colId == Constants.GROUP_AUTO_COLUMN_ID;\n    }); // replace auto column with individual group columns\n\n\n    if (autoGroupSortModel) {\n      // remove auto group column\n      var autoGroupIndex = sortModel.indexOf(autoGroupSortModel);\n\n      _.removeFromArray(sortModel, autoGroupSortModel);\n\n      var isNotInSortModel = function isNotInSortModel(col) {\n        return sortModel.filter(function (sm) {\n          return sm.colId === col.getColId();\n        }).length == 0;\n      };\n\n      var mapColumnToSortModel = function mapColumnToSortModel(col) {\n        return {\n          colId: col.getId(),\n          sort: autoGroupSortModel.sort\n        };\n      };\n\n      var newModels = this.columnModel.getRowGroupColumns().filter(isNotInSortModel).map(mapColumnToSortModel);\n\n      _.insertArrayIntoArray(sortModel, newModels, autoGroupIndex);\n    }\n  };\n\n  SortListener.prototype.onSortChanged = function () {\n    var storeParams = this.serverSideRowModel.getParams();\n\n    if (!storeParams) {\n      return;\n    } // params is undefined if no datasource set\n\n\n    var newSortModel = this.extractSortModel();\n    var oldSortModel = storeParams.sortModel;\n    var changedColumns = this.findChangedColumnsInSort(newSortModel, oldSortModel);\n    var valueColChanged = this.listenerUtils.isSortingWithValueColumn(changedColumns);\n    var secondaryColChanged = this.listenerUtils.isSortingWithSecondaryColumn(changedColumns);\n    var alwaysReset = this.gridOptionsWrapper.isServerSideSortingAlwaysResets();\n    var params = {\n      valueColChanged: valueColChanged,\n      secondaryColChanged: secondaryColChanged,\n      alwaysReset: alwaysReset,\n      changedColumns: changedColumns\n    };\n    this.serverSideRowModel.refreshAfterSort(newSortModel, params);\n  }; // returns back all the cols that were effected by the sorting. eg if we were sorting by col A,\n  // and now we are sorting by col B, the list of impacted cols should be A and B. so if a cache\n  // is impacted by sorting on A or B then it needs to be refreshed. this includes where the cache\n  // was previously sorted by A and then the A sort now needs to be cleared.\n\n\n  SortListener.prototype.findChangedColumnsInSort = function (newSortModel, oldSortModel) {\n    var allColsInBothSorts = [];\n    [newSortModel, oldSortModel].forEach(function (sortModel) {\n      if (sortModel) {\n        var ids = sortModel.map(function (sm) {\n          return sm.colId;\n        });\n        allColsInBothSorts = allColsInBothSorts.concat(ids);\n      }\n    });\n\n    var differentSorts = function differentSorts(oldSortItem, newSortItem) {\n      var oldSort = oldSortItem ? oldSortItem.sort : null;\n      var newSort = newSortItem ? newSortItem.sort : null;\n      return oldSort !== newSort;\n    };\n\n    var differentIndexes = function differentIndexes(oldSortItem, newSortItem) {\n      var oldIndex = oldSortModel.indexOf(oldSortItem);\n      var newIndex = newSortModel.indexOf(newSortItem);\n      return oldIndex !== newIndex;\n    };\n\n    return allColsInBothSorts.filter(function (colId) {\n      var oldSortItem = _.find(oldSortModel, function (sm) {\n        return sm.colId === colId;\n      });\n\n      var newSortItem = _.find(newSortModel, function (sm) {\n        return sm.colId === colId;\n      });\n\n      return differentSorts(oldSortItem, newSortItem) || differentIndexes(oldSortItem, newSortItem);\n    });\n  };\n\n  __decorate([Autowired('sortController')], SortListener.prototype, \"sortController\", void 0);\n\n  __decorate([Autowired('columnModel')], SortListener.prototype, \"columnModel\", void 0);\n\n  __decorate([Autowired('rowModel')], SortListener.prototype, \"serverSideRowModel\", void 0);\n\n  __decorate([Autowired('ssrmListenerUtils')], SortListener.prototype, \"listenerUtils\", void 0);\n\n  __decorate([PostConstruct], SortListener.prototype, \"postConstruct\", null);\n\n  SortListener = __decorate([Bean('ssrmSortService')], SortListener);\n  return SortListener;\n}(BeanStub);\n\nexport { SortListener };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/server-side-row-model/dist/es6/serverSideRowModel/listeners/sortListener.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","Autowired","Bean","BeanStub","Constants","Events","PostConstruct","SortListener","_super","apply","postConstruct","gridOptionsWrapper","isRowModelServerSide","addManagedListener","eventService","EVENT_SORT_CHANGED","onSortChanged","bind","extractSortModel","sortModel","sortController","getSortModel","isTreeData","replaceAutoGroupColumnWithActualRowGroupColumns","removeMultiColumnPrefixOnColumnIds","isGroupMultiAutoColumn","multiColumnPrefix","GROUP_AUTO_COLUMN_ID","colId","indexOf","substr","autoGroupSortModel","find","sm","autoGroupIndex","removeFromArray","isNotInSortModel","col","filter","getColId","mapColumnToSortModel","getId","sort","newModels","columnModel","getRowGroupColumns","map","insertArrayIntoArray","storeParams","serverSideRowModel","getParams","newSortModel","oldSortModel","changedColumns","findChangedColumnsInSort","valueColChanged","listenerUtils","isSortingWithValueColumn","secondaryColChanged","isSortingWithSecondaryColumn","alwaysReset","isServerSideSortingAlwaysResets","params","refreshAfterSort","allColsInBothSorts","forEach","ids","concat","differentSorts","oldSortItem","newSortItem","oldSort","newSort","differentIndexes","oldIndex","newIndex"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,cAAa,GAAG,uBAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,cAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd;AAAiB,YAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAA1C;AAAwD,KAF9E;;AAGA,WAAOP,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,cAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,IAAII,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGd,MAAM,CAACmB,wBAAP,CAAgCP,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HhB,CAA3H;AACA,MAAI,OAAOsB,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EH,CAAC,GAAGE,OAAO,CAACC,QAAR,CAAiBV,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIQ,CAAC,GAAGX,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCK,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIxB,CAAC,GAAGa,UAAU,CAACW,CAAD,CAAlB,EAAuBJ,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACoB,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACc,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BpB,CAAC,CAACc,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAclB,MAAM,CAACuB,cAAP,CAAsBX,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,SAASM,CAAT,EAAYC,SAAZ,EAAuBC,IAAvB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,MAAlD,EAA0DC,aAA1D,QAA+E,yBAA/E;;AACA,IAAIC,YAAY,GAAkB,UAAUC,MAAV,EAAkB;AAChDpC,EAAAA,SAAS,CAACmC,YAAD,EAAeC,MAAf,CAAT;;AACA,WAASD,YAAT,GAAwB;AACpB,WAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBjB,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACDe,EAAAA,YAAY,CAACvB,SAAb,CAAuB0B,aAAvB,GAAuC,YAAY;AAC/C;AACA,QAAI,CAAC,KAAKC,kBAAL,CAAwBC,oBAAxB,EAAL,EAAqD;AACjD;AACH;;AACD,SAAKC,kBAAL,CAAwB,KAAKC,YAA7B,EAA2CT,MAAM,CAACU,kBAAlD,EAAsE,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAAtE;AACH,GAND;;AAOAV,EAAAA,YAAY,CAACvB,SAAb,CAAuBkC,gBAAvB,GAA0C,YAAY;AAClD,QAAIC,SAAS,GAAG,KAAKC,cAAL,CAAoBC,YAApB,EAAhB,CADkD,CAElD;AACA;;AACA,QAAI,KAAKV,kBAAL,CAAwBW,UAAxB,EAAJ,EAA0C;AACtC,aAAOH,SAAP;AACH,KANiD,CAOlD;AACA;;;AACA,SAAKI,+CAAL,CAAqDJ,SAArD;AACA,SAAKK,kCAAL,CAAwCL,SAAxC;AACA,WAAOA,SAAP;AACH,GAZD;;AAaAZ,EAAAA,YAAY,CAACvB,SAAb,CAAuBwC,kCAAvB,GAA4D,UAAUL,SAAV,EAAqB;AAC7E,QAAI,KAAKR,kBAAL,CAAwBc,sBAAxB,EAAJ,EAAsD;AAClD,UAAIC,iBAAiB,GAAGtB,SAAS,CAACuB,oBAAV,GAAiC,GAAzD;;AACA,WAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqB,SAAS,CAAC1B,MAA9B,EAAsC,EAAEK,CAAxC,EAA2C;AACvC,YAAIqB,SAAS,CAACrB,CAAD,CAAT,CAAa8B,KAAb,CAAmBC,OAAnB,CAA2BH,iBAA3B,IAAgD,CAAC,CAArD,EAAwD;AACpDP,UAAAA,SAAS,CAACrB,CAAD,CAAT,CAAa8B,KAAb,GAAqBT,SAAS,CAACrB,CAAD,CAAT,CAAa8B,KAAb,CAAmBE,MAAnB,CAA0BJ,iBAAiB,CAACjC,MAA5C,CAArB;AACH;AACJ;AACJ;AACJ,GATD;;AAUAc,EAAAA,YAAY,CAACvB,SAAb,CAAuBuC,+CAAvB,GAAyE,UAAUJ,SAAV,EAAqB;AAC1F;AACA,QAAIY,kBAAkB,GAAG/B,CAAC,CAACgC,IAAF,CAAOb,SAAP,EAAkB,UAAUc,EAAV,EAAc;AAAE,aAAOA,EAAE,CAACL,KAAH,IAAYxB,SAAS,CAACuB,oBAA7B;AAAoD,KAAtF,CAAzB,CAF0F,CAG1F;;;AACA,QAAII,kBAAJ,EAAwB;AACpB;AACA,UAAIG,cAAc,GAAGf,SAAS,CAACU,OAAV,CAAkBE,kBAAlB,CAArB;;AACA/B,MAAAA,CAAC,CAACmC,eAAF,CAAkBhB,SAAlB,EAA6BY,kBAA7B;;AACA,UAAIK,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAUC,GAAV,EAAe;AAAE,eAAOlB,SAAS,CAACmB,MAAV,CAAiB,UAAUL,EAAV,EAAc;AAAE,iBAAOA,EAAE,CAACL,KAAH,KAAaS,GAAG,CAACE,QAAJ,EAApB;AAAqC,SAAtE,EAAwE9C,MAAxE,IAAkF,CAAzF;AAA6F,OAArI;;AACA,UAAI+C,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAUH,GAAV,EAAe;AAAE,eAAQ;AAAET,UAAAA,KAAK,EAAES,GAAG,CAACI,KAAJ,EAAT;AAAsBC,UAAAA,IAAI,EAAEX,kBAAkB,CAACW;AAA/C,SAAR;AAAiE,OAA7G;;AACA,UAAIC,SAAS,GAAG,KAAKC,WAAL,CAAiBC,kBAAjB,GACXP,MADW,CACJF,gBADI,EAEXU,GAFW,CAEPN,oBAFO,CAAhB;;AAGAxC,MAAAA,CAAC,CAAC+C,oBAAF,CAAuB5B,SAAvB,EAAkCwB,SAAlC,EAA6CT,cAA7C;AACH;AACJ,GAfD;;AAgBA3B,EAAAA,YAAY,CAACvB,SAAb,CAAuBgC,aAAvB,GAAuC,YAAY;AAC/C,QAAIgC,WAAW,GAAG,KAAKC,kBAAL,CAAwBC,SAAxB,EAAlB;;AACA,QAAI,CAACF,WAAL,EAAkB;AACd;AACH,KAJ8C,CAI7C;;;AACF,QAAIG,YAAY,GAAG,KAAKjC,gBAAL,EAAnB;AACA,QAAIkC,YAAY,GAAGJ,WAAW,CAAC7B,SAA/B;AACA,QAAIkC,cAAc,GAAG,KAAKC,wBAAL,CAA8BH,YAA9B,EAA4CC,YAA5C,CAArB;AACA,QAAIG,eAAe,GAAG,KAAKC,aAAL,CAAmBC,wBAAnB,CAA4CJ,cAA5C,CAAtB;AACA,QAAIK,mBAAmB,GAAG,KAAKF,aAAL,CAAmBG,4BAAnB,CAAgDN,cAAhD,CAA1B;AACA,QAAIO,WAAW,GAAG,KAAKjD,kBAAL,CAAwBkD,+BAAxB,EAAlB;AACA,QAAIC,MAAM,GAAG;AACTP,MAAAA,eAAe,EAAEA,eADR;AAETG,MAAAA,mBAAmB,EAAEA,mBAFZ;AAGTE,MAAAA,WAAW,EAAEA,WAHJ;AAITP,MAAAA,cAAc,EAAEA;AAJP,KAAb;AAMA,SAAKJ,kBAAL,CAAwBc,gBAAxB,CAAyCZ,YAAzC,EAAuDW,MAAvD;AACH,GAlBD,CAnDgD,CAsEhD;AACA;AACA;AACA;;;AACAvD,EAAAA,YAAY,CAACvB,SAAb,CAAuBsE,wBAAvB,GAAkD,UAAUH,YAAV,EAAwBC,YAAxB,EAAsC;AACpF,QAAIY,kBAAkB,GAAG,EAAzB;AACA,KAACb,YAAD,EAAeC,YAAf,EAA6Ba,OAA7B,CAAqC,UAAU9C,SAAV,EAAqB;AACtD,UAAIA,SAAJ,EAAe;AACX,YAAI+C,GAAG,GAAG/C,SAAS,CAAC2B,GAAV,CAAc,UAAUb,EAAV,EAAc;AAAE,iBAAOA,EAAE,CAACL,KAAV;AAAkB,SAAhD,CAAV;AACAoC,QAAAA,kBAAkB,GAAGA,kBAAkB,CAACG,MAAnB,CAA0BD,GAA1B,CAArB;AACH;AACJ,KALD;;AAMA,QAAIE,cAAc,GAAG,SAAjBA,cAAiB,CAAUC,WAAV,EAAuBC,WAAvB,EAAoC;AACrD,UAAIC,OAAO,GAAGF,WAAW,GAAGA,WAAW,CAAC3B,IAAf,GAAsB,IAA/C;AACA,UAAI8B,OAAO,GAAGF,WAAW,GAAGA,WAAW,CAAC5B,IAAf,GAAsB,IAA/C;AACA,aAAO6B,OAAO,KAAKC,OAAnB;AACH,KAJD;;AAKA,QAAIC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAUJ,WAAV,EAAuBC,WAAvB,EAAoC;AACvD,UAAII,QAAQ,GAAGtB,YAAY,CAACvB,OAAb,CAAqBwC,WAArB,CAAf;AACA,UAAIM,QAAQ,GAAGxB,YAAY,CAACtB,OAAb,CAAqByC,WAArB,CAAf;AACA,aAAOI,QAAQ,KAAKC,QAApB;AACH,KAJD;;AAKA,WAAOX,kBAAkB,CAAC1B,MAAnB,CAA0B,UAAUV,KAAV,EAAiB;AAC9C,UAAIyC,WAAW,GAAGrE,CAAC,CAACgC,IAAF,CAAOoB,YAAP,EAAqB,UAAUnB,EAAV,EAAc;AAAE,eAAOA,EAAE,CAACL,KAAH,KAAaA,KAApB;AAA4B,OAAjE,CAAlB;;AACA,UAAI0C,WAAW,GAAGtE,CAAC,CAACgC,IAAF,CAAOmB,YAAP,EAAqB,UAAUlB,EAAV,EAAc;AAAE,eAAOA,EAAE,CAACL,KAAH,KAAaA,KAApB;AAA4B,OAAjE,CAAlB;;AACA,aAAOwC,cAAc,CAACC,WAAD,EAAcC,WAAd,CAAd,IAA4CG,gBAAgB,CAACJ,WAAD,EAAcC,WAAd,CAAnE;AACH,KAJM,CAAP;AAKH,GAvBD;;AAwBApF,EAAAA,UAAU,CAAC,CACPe,SAAS,CAAC,gBAAD,CADF,CAAD,EAEPM,YAAY,CAACvB,SAFN,EAEiB,gBAFjB,EAEmC,KAAK,CAFxC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPe,SAAS,CAAC,aAAD,CADF,CAAD,EAEPM,YAAY,CAACvB,SAFN,EAEiB,aAFjB,EAEgC,KAAK,CAFrC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPe,SAAS,CAAC,UAAD,CADF,CAAD,EAEPM,YAAY,CAACvB,SAFN,EAEiB,oBAFjB,EAEuC,KAAK,CAF5C,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPe,SAAS,CAAC,mBAAD,CADF,CAAD,EAEPM,YAAY,CAACvB,SAFN,EAEiB,eAFjB,EAEkC,KAAK,CAFvC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPoB,aADO,CAAD,EAEPC,YAAY,CAACvB,SAFN,EAEiB,eAFjB,EAEkC,IAFlC,CAAV;;AAGAuB,EAAAA,YAAY,GAAGrB,UAAU,CAAC,CACtBgB,IAAI,CAAC,iBAAD,CADkB,CAAD,EAEtBK,YAFsB,CAAzB;AAGA,SAAOA,YAAP;AACH,CArHiC,CAqHhCJ,QArHgC,CAAlC;;AAsHA,SAASI,YAAT","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, Constants, Events, PostConstruct } from \"@ag-grid-community/core\";\nvar SortListener = /** @class */ (function (_super) {\n    __extends(SortListener, _super);\n    function SortListener() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SortListener.prototype.postConstruct = function () {\n        // only want to be active if SSRM active, otherwise would be interfering with other row models\n        if (!this.gridOptionsWrapper.isRowModelServerSide()) {\n            return;\n        }\n        this.addManagedListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n    };\n    SortListener.prototype.extractSortModel = function () {\n        var sortModel = this.sortController.getSortModel();\n        // when using tree data we just return the sort model with the 'ag-Grid-AutoColumn' as is, i.e not broken out\n        // into it's constitute group columns as they are not defined up front and can vary per node.\n        if (this.gridOptionsWrapper.isTreeData()) {\n            return sortModel;\n        }\n        // it autoCol is active, we don't want to send this to the server. instead we want to\n        // send the\n        this.replaceAutoGroupColumnWithActualRowGroupColumns(sortModel);\n        this.removeMultiColumnPrefixOnColumnIds(sortModel);\n        return sortModel;\n    };\n    SortListener.prototype.removeMultiColumnPrefixOnColumnIds = function (sortModel) {\n        if (this.gridOptionsWrapper.isGroupMultiAutoColumn()) {\n            var multiColumnPrefix = Constants.GROUP_AUTO_COLUMN_ID + \"-\";\n            for (var i = 0; i < sortModel.length; ++i) {\n                if (sortModel[i].colId.indexOf(multiColumnPrefix) > -1) {\n                    sortModel[i].colId = sortModel[i].colId.substr(multiColumnPrefix.length);\n                }\n            }\n        }\n    };\n    SortListener.prototype.replaceAutoGroupColumnWithActualRowGroupColumns = function (sortModel) {\n        // find index of auto group column in sort model\n        var autoGroupSortModel = _.find(sortModel, function (sm) { return sm.colId == Constants.GROUP_AUTO_COLUMN_ID; });\n        // replace auto column with individual group columns\n        if (autoGroupSortModel) {\n            // remove auto group column\n            var autoGroupIndex = sortModel.indexOf(autoGroupSortModel);\n            _.removeFromArray(sortModel, autoGroupSortModel);\n            var isNotInSortModel = function (col) { return sortModel.filter(function (sm) { return sm.colId === col.getColId(); }).length == 0; };\n            var mapColumnToSortModel = function (col) { return ({ colId: col.getId(), sort: autoGroupSortModel.sort }); };\n            var newModels = this.columnModel.getRowGroupColumns()\n                .filter(isNotInSortModel)\n                .map(mapColumnToSortModel);\n            _.insertArrayIntoArray(sortModel, newModels, autoGroupIndex);\n        }\n    };\n    SortListener.prototype.onSortChanged = function () {\n        var storeParams = this.serverSideRowModel.getParams();\n        if (!storeParams) {\n            return;\n        } // params is undefined if no datasource set\n        var newSortModel = this.extractSortModel();\n        var oldSortModel = storeParams.sortModel;\n        var changedColumns = this.findChangedColumnsInSort(newSortModel, oldSortModel);\n        var valueColChanged = this.listenerUtils.isSortingWithValueColumn(changedColumns);\n        var secondaryColChanged = this.listenerUtils.isSortingWithSecondaryColumn(changedColumns);\n        var alwaysReset = this.gridOptionsWrapper.isServerSideSortingAlwaysResets();\n        var params = {\n            valueColChanged: valueColChanged,\n            secondaryColChanged: secondaryColChanged,\n            alwaysReset: alwaysReset,\n            changedColumns: changedColumns\n        };\n        this.serverSideRowModel.refreshAfterSort(newSortModel, params);\n    };\n    // returns back all the cols that were effected by the sorting. eg if we were sorting by col A,\n    // and now we are sorting by col B, the list of impacted cols should be A and B. so if a cache\n    // is impacted by sorting on A or B then it needs to be refreshed. this includes where the cache\n    // was previously sorted by A and then the A sort now needs to be cleared.\n    SortListener.prototype.findChangedColumnsInSort = function (newSortModel, oldSortModel) {\n        var allColsInBothSorts = [];\n        [newSortModel, oldSortModel].forEach(function (sortModel) {\n            if (sortModel) {\n                var ids = sortModel.map(function (sm) { return sm.colId; });\n                allColsInBothSorts = allColsInBothSorts.concat(ids);\n            }\n        });\n        var differentSorts = function (oldSortItem, newSortItem) {\n            var oldSort = oldSortItem ? oldSortItem.sort : null;\n            var newSort = newSortItem ? newSortItem.sort : null;\n            return oldSort !== newSort;\n        };\n        var differentIndexes = function (oldSortItem, newSortItem) {\n            var oldIndex = oldSortModel.indexOf(oldSortItem);\n            var newIndex = newSortModel.indexOf(newSortItem);\n            return oldIndex !== newIndex;\n        };\n        return allColsInBothSorts.filter(function (colId) {\n            var oldSortItem = _.find(oldSortModel, function (sm) { return sm.colId === colId; });\n            var newSortItem = _.find(newSortModel, function (sm) { return sm.colId === colId; });\n            return differentSorts(oldSortItem, newSortItem) || differentIndexes(oldSortItem, newSortItem);\n        });\n    };\n    __decorate([\n        Autowired('sortController')\n    ], SortListener.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('columnModel')\n    ], SortListener.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('rowModel')\n    ], SortListener.prototype, \"serverSideRowModel\", void 0);\n    __decorate([\n        Autowired('ssrmListenerUtils')\n    ], SortListener.prototype, \"listenerUtils\", void 0);\n    __decorate([\n        PostConstruct\n    ], SortListener.prototype, \"postConstruct\", null);\n    SortListener = __decorate([\n        Bean('ssrmSortService')\n    ], SortListener);\n    return SortListener;\n}(BeanStub));\nexport { SortListener };\n"]},"metadata":{},"sourceType":"module"}