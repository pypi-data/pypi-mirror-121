{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\streamlit-aggrid\\\\st_aggrid\\\\frontend\\\\src\\\\AgGrid.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport { AgGridReact } from '@ag-grid-community/react';\nimport { ModuleRegistry } from '@ag-grid-community/core';\nimport { AllCommunityModules } from '@ag-grid-community/all-modules';\nimport { AllModules } from '@ag-grid-enterprise/all-modules';\nimport { LicenseManager } from \"@ag-grid-enterprise/core\"; // import '@ag-grid-community/core/dist/styles/ag-grid.css';\n// import '@ag-grid-community/core/dist/styles/ag-theme-balham.css';\n// import '@ag-grid-community/core/dist/styles/ag-theme-balham-dark.css';\n// import 'Agrid.scss'\n\nimport { parseISO, compareAsc } from 'date-fns';\nimport { format } from 'date-fns-tz';\nimport deepMap from \"./utils\";\nimport { duration } from \"moment\";\nimport '@ag-grid-community/core/dist/styles/ag-theme-blue.css';\nimport '@ag-grid-community/core/dist/styles/ag-theme-fresh.css';\nimport '@ag-grid-community/core/dist/styles/ag-theme-material.css'; // import _ from 'lodash'\n\nimport './AgGrid.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AgGrid extends StreamlitComponentBase {\n  constructor(props) {\n    super(props);\n    this.frameDtypes = void 0;\n    this.api = void 0;\n    this.columnApi = void 0;\n    this.columnFormaters = void 0;\n    this.manualUpdateRequested = false;\n    this.allowUnsafeJsCode = false;\n    this.fitColumnsOnGridLoad = false;\n    this.gridOptions = void 0;\n\n    this.convertJavascriptCodeOnGridOptions = obj => {\n      return deepMap(obj, this.convertStringToFunction);\n    };\n\n    this.render = () => {\n      if (this.api !== undefined) {\n        if (this.state.should_update) {\n          this.api.setRowData(this.state.rowData);\n        }\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ag-theme-\" + this.props.args.theme,\n        style: this.defineContainerHeight(),\n        children: [/*#__PURE__*/_jsxDEV(this.ManualUpdateButton, {\n          manual_update: this.manualUpdateRequested,\n          onClick: e => this.returnGridValue(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(AgGridReact, {\n          onGridReady: e => this.onGridReady(e),\n          gridOptions: this.gridOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 7\n      }, this);\n    };\n\n    if (props.args.enable_enterprise_modules) {\n      ModuleRegistry.registerModules(AllModules);\n\n      if ('license_key' in props.args) {\n        LicenseManager.setLicenseKey(props.args['license_key']);\n      }\n    } else {\n      ModuleRegistry.registerModules(AllCommunityModules);\n    }\n\n    this.frameDtypes = this.props.args.frame_dtypes;\n    this.manualUpdateRequested = this.props.args.update_mode === 1;\n    this.allowUnsafeJsCode = this.props.args.allow_unsafe_jscode;\n    this.fitColumnsOnGridLoad = this.props.args.fit_columns_on_grid_load; // let themes = {\n    //   'streamlit':'ag-theme-streamlit',\n    //   'light':'ag-theme-light',\n    //   'dark':'ag-theme-dark',\n    //   'blue':'ag-theme-blue',\n    //   'fresh':'ag-theme-fresh',\n    //   'material':'ag-theme-material',\n    // }\n\n    this.columnFormaters = {\n      columnTypes: {\n        'dateColumnFilter': {\n          filter: 'agDateColumnFilter',\n          filterParams: {\n            comparator: (filterValue, cellValue) => compareAsc(parseISO(cellValue), filterValue)\n          }\n        },\n        'numberColumnFilter': {\n          filter: 'agNumberColumnFilter'\n        },\n        'shortDateTimeFormat': {\n          valueFormatter: params => this.dateFormatter(params.value, \"dd/MM/yyyy HH:mm\")\n        },\n        'customDateTimeFormat': {\n          valueFormatter: params => this.dateFormatter(params.value, params.column.colDef.custom_format_string)\n        },\n        'customNumericFormat': {\n          valueFormatter: params => {\n            var _params$column$colDef;\n\n            return this.numberFormatter(params.value, (_params$column$colDef = params.column.colDef.precision) !== null && _params$column$colDef !== void 0 ? _params$column$colDef : 2);\n          }\n        },\n        'customCurrencyFormat': {\n          valueFormatter: params => this.currencyFormatter(params.value, params.column.colDef.custom_currency_symbol)\n        },\n        'timedeltaFormat': {\n          valueFormatter: params => duration(params.value).humanize(true)\n        }\n      }\n    };\n    let gridOptions = Object.assign({}, this.columnFormaters, this.props.args.gridOptions);\n\n    if (this.allowUnsafeJsCode) {\n      console.warn(\"flag allow_unsafe_jscode is on.\");\n      gridOptions = this.convertJavascriptCodeOnGridOptions(gridOptions);\n    }\n\n    this.gridOptions = gridOptions;\n    this.state = {\n      rowData: JSON.parse(props.args.row_data),\n      gridHeight: this.props.args.height,\n      should_update: false\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.args.reload_data) {\n      // let old_row_data = state.rowData\n      let new_row_data = JSON.parse(props.args.row_data); //let should_update = _.isEqual(_.map(old_row_data, (v) => Object.keys(v)), _.map(new_row_data, (v) => Object.keys(v)))\n\n      return {\n        rowData: new_row_data,\n        gridHeight: props.args.height,\n        should_update: true\n      };\n    } else {\n      return {\n        gridHeight: props.args.height\n      };\n    }\n  }\n\n  convertStringToFunction(v) {\n    const JS_PLACEHOLDER = \"--x_x--0_0--\";\n    let funcReg = new RegExp(`${JS_PLACEHOLDER}\\\\s*(function\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`);\n    let match = funcReg.exec(v);\n\n    if (match) {\n      const funcStr = match[1]; // eslint-disable-next-line\n\n      return new Function(\"return \" + funcStr)();\n    } else {\n      return v;\n    }\n  }\n\n  setUpdateMode() {\n    if (this.manualUpdateRequested) {\n      return; //If manual update is set, no listeners will be added\n    }\n\n    let updateMode = this.props.args.update_mode;\n\n    if ((updateMode & 2) === 2) {\n      this.api.addEventListener('cellValueChanged', e => this.returnGridValue(e));\n    }\n\n    if ((updateMode & 4) === 4) {\n      this.api.addEventListener('selectionChanged', e => this.returnGridValue(e));\n    }\n\n    if ((updateMode & 8) === 8) {\n      this.api.addEventListener('filterChanged', e => this.returnGridValue(e));\n    }\n\n    if ((updateMode & 16) === 16) {\n      this.api.addEventListener('sortChanged', e => this.returnGridValue(e));\n    }\n  }\n\n  onGridReady(event) {\n    this.api = event.api;\n    this.columnApi = event.columnApi;\n    this.setUpdateMode();\n    this.api.addEventListener('firstDataRendered', e => this.fitColumns());\n    this.api.setRowData(this.state.rowData);\n\n    for (var idx in this.gridOptions['preSelectedRows']) {\n      this.api.selectIndex(this.gridOptions['preSelectedRows'][idx], true, true);\n    }\n  }\n\n  fitColumns() {\n    if (this.fitColumnsOnGridLoad) {\n      this.api.sizeColumnsToFit();\n    } else {\n      this.columnApi.autoSizeAllColumns();\n    }\n  }\n\n  dateFormatter(isoString, formaterString) {\n    try {\n      let date = parseISO(isoString);\n      return format(date, formaterString);\n    } catch {\n      return isoString;\n    } finally {}\n  }\n\n  currencyFormatter(number, currencySymbol) {\n    let n = Number.parseFloat(number);\n\n    if (!Number.isNaN(n)) {\n      return currencySymbol + n.toFixed(2);\n    } else {\n      return number;\n    }\n  }\n\n  numberFormatter(number, precision) {\n    let n = Number.parseFloat(number);\n\n    if (!Number.isNaN(n)) {\n      return n.toFixed(precision);\n    } else {\n      return number;\n    }\n  }\n\n  returnGridValue(e) {\n    let returnData = [];\n    let returnMode = this.props.args.data_return_mode;\n\n    switch (returnMode) {\n      case 0:\n        //ALL_DATA\n        this.api.forEachLeafNode(row => returnData.push(row.data));\n        break;\n\n      case 1:\n        //FILTERED_DATA\n        this.api.forEachNodeAfterFilter(row => {\n          if (!row.group) {\n            returnData.push(row.data);\n          }\n        });\n        break;\n\n      case 2:\n        //FILTERED_SORTED_DATA\n        this.api.forEachNodeAfterFilterAndSort(row => {\n          if (!row.group) {\n            returnData.push(row.data);\n          }\n        });\n        break;\n    }\n\n    let returnValue = {\n      originalDtypes: this.frameDtypes,\n      rowData: returnData,\n      selectedRows: this.api.getSelectedRows()\n    };\n    Streamlit.setComponentValue(returnValue);\n  }\n\n  ManualUpdateButton(props) {\n    if (props.manual_update) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: props.onClick,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 15\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 15\n      }, this);\n    }\n  }\n\n  defineContainerHeight() {\n    if ('domLayout' in this.gridOptions) {\n      if (this.gridOptions['domLayout'] === 'autoHeight') {\n        return {\n          width: this.props.width\n        };\n      }\n    }\n\n    return {\n      width: this.props.width,\n      height: this.state.gridHeight\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default _c = withStreamlitConnection(AgGrid);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/src/AgGrid.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AgGridReact","ModuleRegistry","AllCommunityModules","AllModules","LicenseManager","parseISO","compareAsc","format","deepMap","duration","AgGrid","constructor","props","frameDtypes","api","columnApi","columnFormaters","manualUpdateRequested","allowUnsafeJsCode","fitColumnsOnGridLoad","gridOptions","convertJavascriptCodeOnGridOptions","obj","convertStringToFunction","render","undefined","state","should_update","setRowData","rowData","args","theme","defineContainerHeight","e","returnGridValue","onGridReady","enable_enterprise_modules","registerModules","setLicenseKey","frame_dtypes","update_mode","allow_unsafe_jscode","fit_columns_on_grid_load","columnTypes","filter","filterParams","comparator","filterValue","cellValue","valueFormatter","params","dateFormatter","value","column","colDef","custom_format_string","numberFormatter","precision","currencyFormatter","custom_currency_symbol","humanize","Object","assign","console","warn","JSON","parse","row_data","gridHeight","height","getDerivedStateFromProps","reload_data","new_row_data","v","JS_PLACEHOLDER","funcReg","RegExp","match","exec","funcStr","Function","setUpdateMode","updateMode","addEventListener","event","fitColumns","idx","selectIndex","sizeColumnsToFit","autoSizeAllColumns","isoString","formaterString","date","number","currencySymbol","n","Number","parseFloat","isNaN","toFixed","returnData","returnMode","data_return_mode","forEachLeafNode","row","push","data","forEachNodeAfterFilter","group","forEachNodeAfterFilterAndSort","returnValue","originalDtypes","selectedRows","getSelectedRows","setComponentValue","ManualUpdateButton","manual_update","onClick","width"],"mappings":"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","sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection\r\n} from \"streamlit-component-lib\";\r\n\r\nimport React, { ReactNode } from \"react\"\r\n\r\nimport { AgGridReact } from '@ag-grid-community/react';\r\nimport { ColumnApi, GridApi } from '@ag-grid-community/core'\r\nimport { ModuleRegistry } from '@ag-grid-community/core';\r\nimport { AllCommunityModules } from '@ag-grid-community/all-modules'\r\nimport { AllModules } from '@ag-grid-enterprise/all-modules'\r\nimport { LicenseManager } from \"@ag-grid-enterprise/core\";\r\n\r\n// import '@ag-grid-community/core/dist/styles/ag-grid.css';\r\n// import '@ag-grid-community/core/dist/styles/ag-theme-balham.css';\r\n// import '@ag-grid-community/core/dist/styles/ag-theme-balham-dark.css';\r\n// import 'Agrid.scss'\r\n\r\nimport { parseISO, compareAsc } from 'date-fns'\r\nimport { format } from 'date-fns-tz'\r\nimport deepMap from \"./utils\"\r\nimport { duration } from \"moment\";\r\n\r\nimport '@ag-grid-community/core/dist/styles/ag-theme-blue.css';\r\nimport '@ag-grid-community/core/dist/styles/ag-theme-fresh.css';\r\nimport '@ag-grid-community/core/dist/styles/ag-theme-material.css';\r\n\r\n// import _ from 'lodash'\r\n\r\nimport'./AgGrid.scss'\r\n\r\ninterface State {\r\n  rowData: any\r\n  gridHeight: number\r\n  should_update: boolean\r\n}\r\n\r\nclass AgGrid extends StreamlitComponentBase<State> {\r\n  private frameDtypes: any\r\n  private api!: GridApi;\r\n  private columnApi!: ColumnApi\r\n  private columnFormaters: any\r\n  private manualUpdateRequested: boolean = false\r\n  private allowUnsafeJsCode: boolean = false\r\n  private fitColumnsOnGridLoad: boolean = false\r\n  private gridOptions: any\r\n\r\n  constructor(props: any) {\r\n    super(props)\r\n\r\n    if (props.args.enable_enterprise_modules) {\r\n      ModuleRegistry.registerModules(AllModules);\r\n      if ('license_key' in props.args) {\r\n        LicenseManager.setLicenseKey(props.args['license_key']);\r\n      }\r\n    } else {\r\n      ModuleRegistry.registerModules(AllCommunityModules);\r\n    }\r\n\r\n    this.frameDtypes = this.props.args.frame_dtypes\r\n    this.manualUpdateRequested = (this.props.args.update_mode === 1)\r\n    this.allowUnsafeJsCode = this.props.args.allow_unsafe_jscode\r\n    this.fitColumnsOnGridLoad = this.props.args.fit_columns_on_grid_load\r\n    \r\n    // let themes = {\r\n    //   'streamlit':'ag-theme-streamlit',\r\n    //   'light':'ag-theme-light',\r\n    //   'dark':'ag-theme-dark',\r\n    //   'blue':'ag-theme-blue',\r\n    //   'fresh':'ag-theme-fresh',\r\n    //   'material':'ag-theme-material',\r\n    // }\r\n\r\n    this.columnFormaters = {\r\n      columnTypes: {\r\n        'dateColumnFilter': {\r\n          filter: 'agDateColumnFilter',\r\n          filterParams: {\r\n            comparator: (filterValue: any, cellValue: string) => compareAsc(parseISO(cellValue), filterValue)\r\n          }\r\n        },\r\n        'numberColumnFilter': {\r\n          filter: 'agNumberColumnFilter'\r\n        },\r\n        'shortDateTimeFormat': {\r\n          valueFormatter: (params: any) => this.dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\r\n        },\r\n        'customDateTimeFormat': {\r\n          valueFormatter: (params: any) => this.dateFormatter(params.value, params.column.colDef.custom_format_string),\r\n        },\r\n        'customNumericFormat': {\r\n          valueFormatter: (params: any) => this.numberFormatter(params.value, params.column.colDef.precision ?? 2),\r\n        },\r\n        'customCurrencyFormat': {\r\n          valueFormatter: (params: any) => this.currencyFormatter(params.value, params.column.colDef.custom_currency_symbol),\r\n        },\r\n        'timedeltaFormat': {\r\n          valueFormatter: (params: any) => duration(params.value).humanize(true)\r\n        },\r\n      }\r\n    }\r\n\r\n    let gridOptions = Object.assign({}, this.columnFormaters, this.props.args.gridOptions)\r\n\r\n    if (this.allowUnsafeJsCode) {\r\n      console.warn(\"flag allow_unsafe_jscode is on.\")\r\n      gridOptions = this.convertJavascriptCodeOnGridOptions(gridOptions)\r\n    }\r\n    this.gridOptions = gridOptions\r\n\r\n    this.state = {\r\n      rowData: JSON.parse(props.args.row_data),\r\n      gridHeight: this.props.args.height,\r\n      should_update: false\r\n    }\r\n  }\r\n\r\n  static getDerivedStateFromProps(props: any, state: any) {\r\n    if (props.args.reload_data) {\r\n      // let old_row_data = state.rowData\r\n      let new_row_data = JSON.parse(props.args.row_data)\r\n      //let should_update = _.isEqual(_.map(old_row_data, (v) => Object.keys(v)), _.map(new_row_data, (v) => Object.keys(v)))\r\n      return {\r\n        rowData: new_row_data,\r\n        gridHeight: props.args.height,\r\n        should_update: true\r\n      }\r\n    } else {\r\n      return {\r\n        gridHeight: props.args.height\r\n      }\r\n    }\r\n  }\r\n\r\n  private convertStringToFunction(v: string) {\r\n    const JS_PLACEHOLDER = \"--x_x--0_0--\"\r\n\r\n    let funcReg = new RegExp(\r\n      `${JS_PLACEHOLDER}\\\\s*(function\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\r\n    )\r\n\r\n    let match = funcReg.exec(v)\r\n\r\n    if (match) {\r\n      const funcStr = match[1]\r\n      // eslint-disable-next-line\r\n      return new Function(\"return \" + funcStr)()\r\n\r\n    } else {\r\n      return v\r\n    }\r\n  }\r\n\r\n  private convertJavascriptCodeOnGridOptions = (obj: object) => {\r\n    return deepMap(obj, this.convertStringToFunction)\r\n  }\r\n\r\n  private setUpdateMode() {\r\n    if (this.manualUpdateRequested) {\r\n      return //If manual update is set, no listeners will be added\r\n    }\r\n\r\n    let updateMode = this.props.args.update_mode\r\n\r\n    if ((updateMode & 2) === 2) {\r\n      this.api.addEventListener('cellValueChanged', (e: any) => this.returnGridValue(e))\r\n    }\r\n\r\n    if ((updateMode & 4) === 4) {\r\n      this.api.addEventListener('selectionChanged', (e: any) => this.returnGridValue(e))\r\n    }\r\n\r\n    if ((updateMode & 8) === 8) {\r\n      this.api.addEventListener('filterChanged', (e: any) => this.returnGridValue(e))\r\n    }\r\n\r\n    if ((updateMode & 16) === 16) {\r\n      this.api.addEventListener('sortChanged', (e: any) => this.returnGridValue(e))\r\n    }\r\n  }\r\n\r\n  private onGridReady(event: any) {\r\n    this.api = event.api\r\n    this.columnApi = event.columnApi\r\n\r\n    this.setUpdateMode()\r\n    this.api.addEventListener('firstDataRendered', (e: any) => this.fitColumns())\r\n\r\n    this.api.setRowData(this.state.rowData)\r\n\r\n    for (var idx in this.gridOptions['preSelectedRows']) {\r\n      this.api.selectIndex(this.gridOptions['preSelectedRows'][idx], true, true)\r\n    }\r\n  }\r\n\r\n  private fitColumns() {\r\n    if (this.fitColumnsOnGridLoad) {\r\n      this.api.sizeColumnsToFit()\r\n    }\r\n    else {\r\n      this.columnApi.autoSizeAllColumns()\r\n    }\r\n  }\r\n\r\n  private dateFormatter(isoString: string, formaterString: string): String {\r\n    try {\r\n      let date = parseISO(isoString)\r\n      return format(date, formaterString)\r\n    } catch {\r\n      return isoString\r\n    }\r\n    finally { }\r\n  }\r\n\r\n  private currencyFormatter(number: any, currencySymbol: string): String {\r\n    let n = Number.parseFloat(number)\r\n    if (!Number.isNaN(n)) {\r\n      return currencySymbol + n.toFixed(2)\r\n    } else {\r\n      return number\r\n    }\r\n  }\r\n\r\n  private numberFormatter(number: any, precision: number): String {\r\n    let n = Number.parseFloat(number)\r\n    if (!Number.isNaN(n)) {\r\n      return n.toFixed(precision)\r\n    } else {\r\n      return number\r\n    }\r\n  }\r\n\r\n  private returnGridValue(e: any) {\r\n    let returnData: any[] = []\r\n    let returnMode = this.props.args.data_return_mode\r\n\r\n    switch (returnMode) {\r\n      case 0: //ALL_DATA\r\n        this.api.forEachLeafNode((row) => returnData.push(row.data))\r\n        break;\r\n\r\n      case 1: //FILTERED_DATA\r\n        this.api.forEachNodeAfterFilter((row) => { if (!row.group) { returnData.push(row.data) } })\r\n        break;\r\n\r\n      case 2: //FILTERED_SORTED_DATA\r\n        this.api.forEachNodeAfterFilterAndSort((row) => { if (!row.group) { returnData.push(row.data) } })\r\n        break;\r\n    }\r\n\r\n    let returnValue = {\r\n      originalDtypes: this.frameDtypes,\r\n      rowData: returnData,\r\n      selectedRows: this.api.getSelectedRows()\r\n    }\r\n\r\n    Streamlit.setComponentValue(returnValue)\r\n  }\r\n\r\n  private ManualUpdateButton(props: any) {\r\n    if (props.manual_update) {\r\n      return (<button onClick={props.onClick}>Update</button>)\r\n    }\r\n    else {\r\n      return (<span></span>)\r\n    }\r\n  }\r\n\r\n  private defineContainerHeight() {\r\n    if ('domLayout' in this.gridOptions) {\r\n      if (this.gridOptions['domLayout'] === 'autoHeight') {\r\n        return ({\r\n          width: this.props.width\r\n        })\r\n      }\r\n    }\r\n    return ({\r\n      width: this.props.width,\r\n      height: this.state.gridHeight\r\n    })\r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n\r\n    if (this.api !== undefined) {\r\n      if (this.state.should_update) {\r\n        this.api.setRowData(this.state.rowData)\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={\"ag-theme-\"+ this.props.args.theme} style={this.defineContainerHeight()} >\r\n        <this.ManualUpdateButton manual_update={this.manualUpdateRequested} onClick={(e: any) => this.returnGridValue(e)} />\r\n        <AgGridReact\r\n          onGridReady={(e) => this.onGridReady(e)}\r\n          gridOptions={this.gridOptions}\r\n        >\r\n        </AgGridReact>\r\n      </div >\r\n    )\r\n  }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(AgGrid)\r\n"]},"metadata":{},"sourceType":"module"}