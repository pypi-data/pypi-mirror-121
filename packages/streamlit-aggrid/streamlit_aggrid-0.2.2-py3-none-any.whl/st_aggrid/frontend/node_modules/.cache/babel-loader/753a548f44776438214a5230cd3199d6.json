{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport ContinuousScale, { identity } from \"./continuousScale\";\nimport ticks from \"../util/ticks\";\nimport { format } from \"../util/numberFormat\";\n\nvar LogScale = function (_super) {\n  __extends(LogScale, _super);\n\n  function LogScale() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'log';\n    _this._domain = [1, 10];\n    _this.baseLog = identity; // takes a log with base `base` of `x`\n\n    _this.basePow = identity; // raises `base` to the power of `x`\n\n    _this._base = 10;\n    return _this;\n  }\n\n  LogScale.prototype.setDomain = function (values) {\n    var df = values[0];\n    var dl = values[values.length - 1];\n\n    if (df === 0 || dl === 0 || df < 0 && dl > 0 || df > 0 && dl < 0) {\n      console.warn('Log scale domain should not start at, end at or cross zero.');\n\n      if (df === 0 && dl > 0) {\n        df = Number.EPSILON;\n      } else if (dl === 0 && df < 0) {\n        dl = -Number.EPSILON;\n      } else if (df < 0 && dl > 0) {\n        if (Math.abs(dl) >= Math.abs(df)) {\n          df = Number.EPSILON;\n        } else {\n          dl = -Number.EPSILON;\n        }\n      } else if (df > 0 && dl < 0) {\n        if (Math.abs(dl) >= Math.abs(df)) {\n          df = -Number.EPSILON;\n        } else {\n          dl = Number.EPSILON;\n        }\n      }\n\n      values = values.slice();\n      values[0] = df;\n      values[values.length - 1] = dl;\n    }\n\n    _super.prototype.setDomain.call(this, values);\n  };\n\n  LogScale.prototype.getDomain = function () {\n    return _super.prototype.getDomain.call(this);\n  };\n\n  Object.defineProperty(LogScale.prototype, \"base\", {\n    get: function () {\n      return this._base;\n    },\n    set: function (value) {\n      if (this._base !== value) {\n        this._base = value;\n        this.rescale();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LogScale.prototype.rescale = function () {\n    var base = this.base;\n    var baseLog = LogScale.makeLogFn(base);\n    var basePow = LogScale.makePowFn(base);\n\n    if (this.domain[0] < 0) {\n      baseLog = this.reflect(baseLog);\n      basePow = this.reflect(basePow);\n\n      this.transform = function (x) {\n        return -Math.log(-x);\n      };\n\n      this.untransform = function (x) {\n        return -Math.exp(-x);\n      };\n    } else {\n      this.transform = function (x) {\n        return Math.log(x);\n      };\n\n      this.untransform = function (x) {\n        return Math.exp(x);\n      };\n    }\n\n    this.baseLog = baseLog;\n    this.basePow = basePow;\n\n    _super.prototype.rescale.call(this);\n  };\n  /**\n   * For example, if `f` is `Math.log10`, we have\n   *\n   *     f(100) == 2\n   *     f(-100) == NaN\n   *     rf = reflect(f)\n   *     rf(-100) == -2\n   *\n   * @param f\n   */\n\n\n  LogScale.prototype.reflect = function (f) {\n    return function (x) {\n      return -f(-x);\n    };\n  };\n\n  LogScale.prototype.nice = function () {\n    var _a, _b;\n\n    var domain = this.domain;\n    var i0 = 0;\n    var i1 = domain.length - 1;\n    var x0 = domain[i0];\n    var x1 = domain[i1];\n\n    if (x1 < x0) {\n      _a = [i1, i0], i0 = _a[0], i1 = _a[1];\n      _b = [x1, x0], x0 = _b[0], x1 = _b[1];\n    } // For example, for base == 10:\n    // [ 50, 900] becomes [ 10, 1000 ]\n\n\n    domain[i0] = this.basePow(Math.floor(this.baseLog(x0)));\n    domain[i1] = this.basePow(Math.ceil(this.baseLog(x1)));\n    this.domain = domain;\n  };\n\n  LogScale.pow10 = function (x) {\n    return isFinite(x) ? +('1e' + x) // to avoid precision issues, e.g. Math.pow(10, -4) is not 0.0001\n    : x < 0 ? 0 : x;\n  };\n\n  LogScale.makePowFn = function (base) {\n    if (base === 10) {\n      return LogScale.pow10;\n    }\n\n    if (base === Math.E) {\n      return Math.exp;\n    }\n\n    return function (x) {\n      return Math.pow(base, x);\n    };\n  }; // Make a log function witn an arbitrary base or return a native function if exists.\n\n\n  LogScale.makeLogFn = function (base) {\n    if (base === Math.E) {\n      return Math.log;\n    }\n\n    if (base === 10) {\n      return Math.log10;\n    }\n\n    if (base === 2) {\n      return Math.log2;\n    }\n\n    var logBase = Math.log(base);\n    return function (x) {\n      return Math.log(x) / logBase;\n    };\n  };\n\n  LogScale.prototype.ticks = function (count) {\n    var _a;\n\n    if (count === void 0) {\n      count = 10;\n    }\n\n    var n = count == null ? 10 : +count;\n    var base = this.base;\n    var domain = this.domain;\n    var d0 = domain[0];\n    var d1 = domain[domain.length - 1];\n    var isReversed = d1 < d0;\n\n    if (isReversed) {\n      _a = [d1, d0], d0 = _a[0], d1 = _a[1];\n    }\n\n    var p0 = this.baseLog(d0);\n    var p1 = this.baseLog(d1);\n    var z = []; // if `base` is an integer and delta in order of magnitudes is less than n\n\n    if (!(base % 1) && p1 - p0 < n) {\n      // For example, if n == 10, base == 10 and domain == [10^2, 10^6]\n      // then p1 - p0 < n == true.\n      p0 = Math.round(p0) - 1;\n      p1 = Math.round(p1) + 1;\n\n      if (d0 > 0) {\n        for (; p0 < p1; ++p0) {\n          for (var k = 1, p = this.basePow(p0); k < base; ++k) {\n            var t = p * k; // The `t` checks are needed because we expanded the [p0, p1] by 1 in each direction.\n\n            if (t < d0) continue;\n            if (t > d1) break;\n            z.push(t);\n          }\n        }\n      } else {\n        for (; p0 < p1; ++p0) {\n          for (var k = base - 1, p = this.basePow(p0); k >= 1; --k) {\n            var t = p * k;\n            if (t < d0) continue;\n            if (t > d1) break;\n            z.push(t);\n          }\n        }\n      }\n\n      if (z.length * 2 < n) {\n        z = ticks(d0, d1, n);\n      }\n    } else {\n      // For example, if n == 4, base == 10 and domain == [10^2, 10^6]\n      // then p1 - p0 < n == false.\n      // `ticks` return [2, 3, 4, 5, 6], then mapped to [10^2, 10^3, 10^4, 10^5, 10^6].\n      z = ticks(p0, p1, Math.min(p1 - p0, n)).map(this.basePow);\n    }\n\n    return isReversed ? z.reverse() : z;\n  };\n\n  LogScale.prototype.tickFormat = function (count, specifier) {\n    var _this = this;\n\n    var base = this.base;\n\n    if (specifier == null) {\n      specifier = base === 10 ? '.0e' : ',';\n    }\n\n    if (typeof specifier !== 'function') {\n      specifier = format(specifier);\n    }\n\n    if (count === Infinity) {\n      return specifier;\n    }\n\n    if (count == null) {\n      count = 10;\n    }\n\n    var k = Math.max(1, base * count / this.ticks().length);\n    return function (d) {\n      var i = d / _this.basePow(Math.round(_this.baseLog(d)));\n\n      if (i * base < base - 0.5) {\n        i *= base;\n      }\n\n      return i <= k ? specifier(d) : '';\n    };\n  };\n\n  return LogScale;\n}(ContinuousScale);\n\nexport { LogScale };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/ag-charts-community/dist/es6/scale/logScale.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","ContinuousScale","identity","ticks","format","LogScale","_super","_this","apply","arguments","type","_domain","baseLog","basePow","_base","setDomain","values","df","dl","length","console","warn","Number","EPSILON","Math","abs","slice","call","getDomain","defineProperty","get","set","value","rescale","enumerable","configurable","base","makeLogFn","makePowFn","domain","reflect","transform","x","log","untransform","exp","f","nice","_a","_b","i0","i1","x0","x1","floor","ceil","pow10","isFinite","E","pow","log10","log2","logBase","count","n","d0","d1","isReversed","p0","p1","z","round","k","t","push","min","map","reverse","tickFormat","specifier","Infinity","max","i"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport ContinuousScale, { identity } from \"./continuousScale\";\nimport ticks from \"../util/ticks\";\nimport { format } from \"../util/numberFormat\";\nvar LogScale = /** @class */ (function (_super) {\n    __extends(LogScale, _super);\n    function LogScale() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'log';\n        _this._domain = [1, 10];\n        _this.baseLog = identity; // takes a log with base `base` of `x`\n        _this.basePow = identity; // raises `base` to the power of `x`\n        _this._base = 10;\n        return _this;\n    }\n    LogScale.prototype.setDomain = function (values) {\n        var df = values[0];\n        var dl = values[values.length - 1];\n        if (df === 0 || dl === 0 || df < 0 && dl > 0 || df > 0 && dl < 0) {\n            console.warn('Log scale domain should not start at, end at or cross zero.');\n            if (df === 0 && dl > 0) {\n                df = Number.EPSILON;\n            }\n            else if (dl === 0 && df < 0) {\n                dl = -Number.EPSILON;\n            }\n            else if (df < 0 && dl > 0) {\n                if (Math.abs(dl) >= Math.abs(df)) {\n                    df = Number.EPSILON;\n                }\n                else {\n                    dl = -Number.EPSILON;\n                }\n            }\n            else if (df > 0 && dl < 0) {\n                if (Math.abs(dl) >= Math.abs(df)) {\n                    df = -Number.EPSILON;\n                }\n                else {\n                    dl = Number.EPSILON;\n                }\n            }\n            values = values.slice();\n            values[0] = df;\n            values[values.length - 1] = dl;\n        }\n        _super.prototype.setDomain.call(this, values);\n    };\n    LogScale.prototype.getDomain = function () {\n        return _super.prototype.getDomain.call(this);\n    };\n    Object.defineProperty(LogScale.prototype, \"base\", {\n        get: function () {\n            return this._base;\n        },\n        set: function (value) {\n            if (this._base !== value) {\n                this._base = value;\n                this.rescale();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LogScale.prototype.rescale = function () {\n        var base = this.base;\n        var baseLog = LogScale.makeLogFn(base);\n        var basePow = LogScale.makePowFn(base);\n        if (this.domain[0] < 0) {\n            baseLog = this.reflect(baseLog);\n            basePow = this.reflect(basePow);\n            this.transform = function (x) { return -Math.log(-x); };\n            this.untransform = function (x) { return -Math.exp(-x); };\n        }\n        else {\n            this.transform = function (x) { return Math.log(x); };\n            this.untransform = function (x) { return Math.exp(x); };\n        }\n        this.baseLog = baseLog;\n        this.basePow = basePow;\n        _super.prototype.rescale.call(this);\n    };\n    /**\n     * For example, if `f` is `Math.log10`, we have\n     *\n     *     f(100) == 2\n     *     f(-100) == NaN\n     *     rf = reflect(f)\n     *     rf(-100) == -2\n     *\n     * @param f\n     */\n    LogScale.prototype.reflect = function (f) {\n        return function (x) { return -f(-x); };\n    };\n    LogScale.prototype.nice = function () {\n        var _a, _b;\n        var domain = this.domain;\n        var i0 = 0;\n        var i1 = domain.length - 1;\n        var x0 = domain[i0];\n        var x1 = domain[i1];\n        if (x1 < x0) {\n            _a = [i1, i0], i0 = _a[0], i1 = _a[1];\n            _b = [x1, x0], x0 = _b[0], x1 = _b[1];\n        }\n        // For example, for base == 10:\n        // [ 50, 900] becomes [ 10, 1000 ]\n        domain[i0] = this.basePow(Math.floor(this.baseLog(x0)));\n        domain[i1] = this.basePow(Math.ceil(this.baseLog(x1)));\n        this.domain = domain;\n    };\n    LogScale.pow10 = function (x) {\n        return isFinite(x)\n            ? +('1e' + x) // to avoid precision issues, e.g. Math.pow(10, -4) is not 0.0001\n            : x < 0\n                ? 0\n                : x;\n    };\n    LogScale.makePowFn = function (base) {\n        if (base === 10) {\n            return LogScale.pow10;\n        }\n        if (base === Math.E) {\n            return Math.exp;\n        }\n        return function (x) { return Math.pow(base, x); };\n    };\n    // Make a log function witn an arbitrary base or return a native function if exists.\n    LogScale.makeLogFn = function (base) {\n        if (base === Math.E) {\n            return Math.log;\n        }\n        if (base === 10) {\n            return Math.log10;\n        }\n        if (base === 2) {\n            return Math.log2;\n        }\n        var logBase = Math.log(base);\n        return function (x) { return Math.log(x) / logBase; };\n    };\n    LogScale.prototype.ticks = function (count) {\n        var _a;\n        if (count === void 0) { count = 10; }\n        var n = count == null ? 10 : +count;\n        var base = this.base;\n        var domain = this.domain;\n        var d0 = domain[0];\n        var d1 = domain[domain.length - 1];\n        var isReversed = d1 < d0;\n        if (isReversed) {\n            _a = [d1, d0], d0 = _a[0], d1 = _a[1];\n        }\n        var p0 = this.baseLog(d0);\n        var p1 = this.baseLog(d1);\n        var z = [];\n        // if `base` is an integer and delta in order of magnitudes is less than n\n        if (!(base % 1) && p1 - p0 < n) {\n            // For example, if n == 10, base == 10 and domain == [10^2, 10^6]\n            // then p1 - p0 < n == true.\n            p0 = Math.round(p0) - 1;\n            p1 = Math.round(p1) + 1;\n            if (d0 > 0) {\n                for (; p0 < p1; ++p0) {\n                    for (var k = 1, p = this.basePow(p0); k < base; ++k) {\n                        var t = p * k;\n                        // The `t` checks are needed because we expanded the [p0, p1] by 1 in each direction.\n                        if (t < d0)\n                            continue;\n                        if (t > d1)\n                            break;\n                        z.push(t);\n                    }\n                }\n            }\n            else {\n                for (; p0 < p1; ++p0) {\n                    for (var k = base - 1, p = this.basePow(p0); k >= 1; --k) {\n                        var t = p * k;\n                        if (t < d0)\n                            continue;\n                        if (t > d1)\n                            break;\n                        z.push(t);\n                    }\n                }\n            }\n            if (z.length * 2 < n) {\n                z = ticks(d0, d1, n);\n            }\n        }\n        else {\n            // For example, if n == 4, base == 10 and domain == [10^2, 10^6]\n            // then p1 - p0 < n == false.\n            // `ticks` return [2, 3, 4, 5, 6], then mapped to [10^2, 10^3, 10^4, 10^5, 10^6].\n            z = ticks(p0, p1, Math.min(p1 - p0, n)).map(this.basePow);\n        }\n        return isReversed ? z.reverse() : z;\n    };\n    LogScale.prototype.tickFormat = function (count, specifier) {\n        var _this = this;\n        var base = this.base;\n        if (specifier == null) {\n            specifier = (base === 10 ? '.0e' : ',');\n        }\n        if (typeof specifier !== 'function') {\n            specifier = format(specifier);\n        }\n        if (count === Infinity) {\n            return specifier;\n        }\n        if (count == null) {\n            count = 10;\n        }\n        var k = Math.max(1, base * count / this.ticks().length);\n        return function (d) {\n            var i = d / _this.basePow(Math.round(_this.baseLog(d)));\n            if (i * base < base - 0.5) {\n                i *= base;\n            }\n            return i <= k ? specifier(d) : '';\n        };\n    };\n    return LogScale;\n}(ContinuousScale));\nexport { LogScale };\n"]},"metadata":{},"sourceType":"module"}