{"ast":null,"code":"function slice(parent, x0, y0, x1, y1) {\n  var nodes = parent.children;\n  var k = parent.value && (y1 - y0) / parent.value;\n  nodes.forEach(function (node) {\n    node.x0 = x0;\n    node.x1 = x1;\n    node.y0 = y0;\n    node.y1 = y0 += node.value * k;\n  });\n}\n\nfunction dice(parent, x0, y0, x1, y1) {\n  var nodes = parent.children;\n  var k = parent.value && (x1 - x0) / parent.value;\n  nodes.forEach(function (node) {\n    node.x0 = x0;\n    node.x1 = x0 += node.value * k;\n    node.y0 = y0;\n    node.y1 = y1;\n  });\n}\n\nfunction roundNode(node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}\n\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [];\n  var nodes = parent.children;\n  var n = nodes.length;\n  var value = parent.value;\n  var i0 = 0;\n  var i1 = 0;\n  var dx;\n  var dy;\n  var nodeValue;\n  var sumValue;\n  var minValue;\n  var maxValue;\n  var newRatio;\n  var minRatio;\n  var alpha;\n  var beta;\n\n  while (i0 < n) {\n    dx = x1 - x0;\n    dy = y1 - y0; // Find the next non-empty node.\n\n    do {\n      sumValue = nodes[i1++].value;\n    } while (!sumValue && i1 < n);\n\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue); // Keep adding nodes while the aspect ratio maintains or improves.\n\n    for (; i1 < n; ++i1) {\n      nodeValue = nodes[i1].value;\n      sumValue += nodeValue;\n\n      if (nodeValue < minValue) {\n        minValue = nodeValue;\n      }\n\n      if (nodeValue > maxValue) {\n        maxValue = nodeValue;\n      }\n\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n\n      if (newRatio > minRatio) {\n        sumValue -= nodeValue;\n        break;\n      }\n\n      minRatio = newRatio;\n    } // Position and record the row orientation.\n\n\n    var row = {\n      value: sumValue,\n      dice: dx < dy,\n      children: nodes.slice(i0, i1)\n    };\n    rows.push(row);\n\n    if (row.dice) {\n      dice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n    } else {\n      slice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n    }\n\n    value -= sumValue;\n    i0 = i1;\n  }\n\n  return rows;\n}\nvar phi = (1 + Math.sqrt(5)) / 2;\n\nvar squarify = function custom(ratio) {\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n\n  squarify.ratio = function (x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n\n  return squarify;\n}(phi);\n\nvar Treemap = function () {\n  function Treemap() {\n    this.paddingStack = [0];\n    this.dx = 1;\n    this.dy = 1;\n    this.round = true;\n    this.tile = squarify;\n\n    this.paddingInner = function (_) {\n      return 0;\n    };\n\n    this.paddingTop = function (_) {\n      return 0;\n    };\n\n    this.paddingRight = function (_) {\n      return 0;\n    };\n\n    this.paddingBottom = function (_) {\n      return 0;\n    };\n\n    this.paddingLeft = function (_) {\n      return 0;\n    };\n  }\n\n  Object.defineProperty(Treemap.prototype, \"size\", {\n    get: function get() {\n      return [this.dx, this.dy];\n    },\n    set: function set(size) {\n      this.dx = size[0];\n      this.dy = size[1];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Treemap.prototype.processData = function (root) {\n    root.x0 = 0;\n    root.y0 = 0;\n    root.x1 = this.dx;\n    root.y1 = this.dy;\n    root.eachBefore(this.positionNode.bind(this));\n    this.paddingStack = [0];\n\n    if (this.round) {\n      root.eachBefore(roundNode);\n    }\n\n    return root;\n  };\n\n  Treemap.prototype.positionNode = function (node) {\n    var p = this.paddingStack[node.depth];\n    var x0 = node.x0 + p;\n    var y0 = node.y0 + p;\n    var x1 = node.x1 - p;\n    var y1 = node.y1 - p;\n\n    if (x1 < x0) {\n      x0 = x1 = (x0 + x1) / 2;\n    }\n\n    if (y1 < y0) {\n      y0 = y1 = (y0 + y1) / 2;\n    }\n\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n\n    if (node.children) {\n      p = this.paddingStack[node.depth + 1] = this.paddingInner(node) / 2;\n      x0 += this.paddingLeft(node) - p;\n      y0 += this.paddingTop(node) - p;\n      x1 -= this.paddingRight(node) - p;\n      y1 -= this.paddingBottom(node) - p;\n\n      if (x1 < x0) {\n        x0 = x1 = (x0 + x1) / 2;\n      }\n\n      if (y1 < y0) {\n        y0 = y1 = (y0 + y1) / 2;\n      }\n\n      this.tile(node, x0, y0, x1, y1);\n    }\n  };\n\n  return Treemap;\n}();\n\nexport { Treemap };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/ag-charts-community/dist/es6/layout/treemap.js"],"names":["slice","parent","x0","y0","x1","y1","nodes","children","k","value","forEach","node","dice","roundNode","Math","round","squarifyRatio","ratio","rows","n","length","i0","i1","dx","dy","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","max","row","push","phi","sqrt","squarify","custom","x","Treemap","paddingStack","tile","paddingInner","_","paddingTop","paddingRight","paddingBottom","paddingLeft","Object","defineProperty","prototype","get","set","size","enumerable","configurable","processData","root","eachBefore","positionNode","bind","p","depth"],"mappings":"AAAA,SAASA,KAAT,CAAeC,MAAf,EAAuBC,EAAvB,EAA2BC,EAA3B,EAA+BC,EAA/B,EAAmCC,EAAnC,EAAuC;AACnC,MAAIC,KAAK,GAAGL,MAAM,CAACM,QAAnB;AACA,MAAIC,CAAC,GAAGP,MAAM,CAACQ,KAAP,IAAgB,CAACJ,EAAE,GAAGF,EAAN,IAAYF,MAAM,CAACQ,KAA3C;AACAH,EAAAA,KAAK,CAACI,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC1BA,IAAAA,IAAI,CAACT,EAAL,GAAUA,EAAV;AACAS,IAAAA,IAAI,CAACP,EAAL,GAAUA,EAAV;AACAO,IAAAA,IAAI,CAACR,EAAL,GAAUA,EAAV;AACAQ,IAAAA,IAAI,CAACN,EAAL,GAAUF,EAAE,IAAIQ,IAAI,CAACF,KAAL,GAAaD,CAA7B;AACH,GALD;AAMH;;AACD,SAASI,IAAT,CAAcX,MAAd,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsC;AAClC,MAAIC,KAAK,GAAGL,MAAM,CAACM,QAAnB;AACA,MAAIC,CAAC,GAAGP,MAAM,CAACQ,KAAP,IAAgB,CAACL,EAAE,GAAGF,EAAN,IAAYD,MAAM,CAACQ,KAA3C;AACAH,EAAAA,KAAK,CAACI,OAAN,CAAc,UAAUC,IAAV,EAAgB;AAC1BA,IAAAA,IAAI,CAACT,EAAL,GAAUA,EAAV;AACAS,IAAAA,IAAI,CAACP,EAAL,GAAUF,EAAE,IAAIS,IAAI,CAACF,KAAL,GAAaD,CAA7B;AACAG,IAAAA,IAAI,CAACR,EAAL,GAAUA,EAAV;AACAQ,IAAAA,IAAI,CAACN,EAAL,GAAUA,EAAV;AACH,GALD;AAMH;;AACD,SAASQ,SAAT,CAAmBF,IAAnB,EAAyB;AACrBA,EAAAA,IAAI,CAACT,EAAL,GAAUY,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACT,EAAhB,CAAV;AACAS,EAAAA,IAAI,CAACR,EAAL,GAAUW,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACR,EAAhB,CAAV;AACAQ,EAAAA,IAAI,CAACP,EAAL,GAAUU,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACP,EAAhB,CAAV;AACAO,EAAAA,IAAI,CAACN,EAAL,GAAUS,IAAI,CAACC,KAAL,CAAWJ,IAAI,CAACN,EAAhB,CAAV;AACH;;AACD,OAAO,SAASW,aAAT,CAAuBC,KAAvB,EAA8BhB,MAA9B,EAAsCC,EAAtC,EAA0CC,EAA1C,EAA8CC,EAA9C,EAAkDC,EAAlD,EAAsD;AACzD,MAAIa,IAAI,GAAG,EAAX;AACA,MAAIZ,KAAK,GAAGL,MAAM,CAACM,QAAnB;AACA,MAAIY,CAAC,GAAGb,KAAK,CAACc,MAAd;AACA,MAAIX,KAAK,GAAGR,MAAM,CAACQ,KAAnB;AACA,MAAIY,EAAE,GAAG,CAAT;AACA,MAAIC,EAAE,GAAG,CAAT;AACA,MAAIC,EAAJ;AACA,MAAIC,EAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,IAAJ;;AACA,SAAOX,EAAE,GAAGF,CAAZ,EAAe;AACXI,IAAAA,EAAE,GAAGnB,EAAE,GAAGF,EAAV;AACAsB,IAAAA,EAAE,GAAGnB,EAAE,GAAGF,EAAV,CAFW,CAGX;;AACA,OAAG;AACCuB,MAAAA,QAAQ,GAAGpB,KAAK,CAACgB,EAAE,EAAH,CAAL,CAAYb,KAAvB;AACH,KAFD,QAES,CAACiB,QAAD,IAAaJ,EAAE,GAAGH,CAF3B;;AAGAQ,IAAAA,QAAQ,GAAGC,QAAQ,GAAGF,QAAtB;AACAK,IAAAA,KAAK,GAAGjB,IAAI,CAACmB,GAAL,CAAST,EAAE,GAAGD,EAAd,EAAkBA,EAAE,GAAGC,EAAvB,KAA8Bf,KAAK,GAAGQ,KAAtC,CAAR;AACAe,IAAAA,IAAI,GAAGN,QAAQ,GAAGA,QAAX,GAAsBK,KAA7B;AACAD,IAAAA,QAAQ,GAAGhB,IAAI,CAACmB,GAAL,CAASL,QAAQ,GAAGI,IAApB,EAA0BA,IAAI,GAAGL,QAAjC,CAAX,CAVW,CAWX;;AACA,WAAOL,EAAE,GAAGH,CAAZ,EAAe,EAAEG,EAAjB,EAAqB;AACjBG,MAAAA,SAAS,GAAGnB,KAAK,CAACgB,EAAD,CAAL,CAAUb,KAAtB;AACAiB,MAAAA,QAAQ,IAAID,SAAZ;;AACA,UAAIA,SAAS,GAAGE,QAAhB,EAA0B;AACtBA,QAAAA,QAAQ,GAAGF,SAAX;AACH;;AACD,UAAIA,SAAS,GAAGG,QAAhB,EAA0B;AACtBA,QAAAA,QAAQ,GAAGH,SAAX;AACH;;AACDO,MAAAA,IAAI,GAAGN,QAAQ,GAAGA,QAAX,GAAsBK,KAA7B;AACAF,MAAAA,QAAQ,GAAGf,IAAI,CAACmB,GAAL,CAASL,QAAQ,GAAGI,IAApB,EAA0BA,IAAI,GAAGL,QAAjC,CAAX;;AACA,UAAIE,QAAQ,GAAGC,QAAf,EAAyB;AACrBJ,QAAAA,QAAQ,IAAID,SAAZ;AACA;AACH;;AACDK,MAAAA,QAAQ,GAAGD,QAAX;AACH,KA5BU,CA6BX;;;AACA,QAAIK,GAAG,GAAG;AACNzB,MAAAA,KAAK,EAAEiB,QADD;AAENd,MAAAA,IAAI,EAAEW,EAAE,GAAGC,EAFL;AAGNjB,MAAAA,QAAQ,EAAED,KAAK,CAACN,KAAN,CAAYqB,EAAZ,EAAgBC,EAAhB;AAHJ,KAAV;AAKAJ,IAAAA,IAAI,CAACiB,IAAL,CAAUD,GAAV;;AACA,QAAIA,GAAG,CAACtB,IAAR,EAAc;AACVA,MAAAA,IAAI,CAACsB,GAAD,EAAMhC,EAAN,EAAUC,EAAV,EAAcC,EAAd,EAAkBK,KAAK,GAAGN,EAAE,IAAIqB,EAAE,GAAGE,QAAL,GAAgBjB,KAAzB,GAAiCJ,EAAxD,CAAJ;AACH,KAFD,MAGK;AACDL,MAAAA,KAAK,CAACkC,GAAD,EAAMhC,EAAN,EAAUC,EAAV,EAAcM,KAAK,GAAGP,EAAE,IAAIqB,EAAE,GAAGG,QAAL,GAAgBjB,KAAzB,GAAiCL,EAApD,EAAwDC,EAAxD,CAAL;AACH;;AACDI,IAAAA,KAAK,IAAIiB,QAAT;AACAL,IAAAA,EAAE,GAAGC,EAAL;AACH;;AACD,SAAOJ,IAAP;AACH;AACD,IAAIkB,GAAG,GAAG,CAAC,IAAItB,IAAI,CAACuB,IAAL,CAAU,CAAV,CAAL,IAAqB,CAA/B;;AACA,IAAIC,QAAQ,GAAI,SAASC,MAAT,CAAgBtB,KAAhB,EAAuB;AACnC,WAASqB,QAAT,CAAkBrC,MAAlB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsCC,EAAtC,EAA0C;AACtCW,IAAAA,aAAa,CAACC,KAAD,EAAQhB,MAAR,EAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,CAAb;AACH;;AACDiC,EAAAA,QAAQ,CAACrB,KAAT,GAAiB,UAAUuB,CAAV,EAAa;AAAE,WAAOD,MAAM,CAAC,CAACC,CAAC,GAAG,CAACA,CAAN,IAAW,CAAX,GAAeA,CAAf,GAAmB,CAApB,CAAb;AAAsC,GAAtE;;AACA,SAAOF,QAAP;AACH,CANc,CAMZF,GANY,CAAf;;AAOA,IAAIK,OAAO,GAAkB,YAAY;AACrC,WAASA,OAAT,GAAmB;AACf,SAAKC,YAAL,GAAoB,CAAC,CAAD,CAApB;AACA,SAAKnB,EAAL,GAAU,CAAV;AACA,SAAKC,EAAL,GAAU,CAAV;AACA,SAAKT,KAAL,GAAa,IAAb;AACA,SAAK4B,IAAL,GAAYL,QAAZ;;AACA,SAAKM,YAAL,GAAoB,UAAUC,CAAV,EAAa;AAAE,aAAO,CAAP;AAAW,KAA9C;;AACA,SAAKC,UAAL,GAAkB,UAAUD,CAAV,EAAa;AAAE,aAAO,CAAP;AAAW,KAA5C;;AACA,SAAKE,YAAL,GAAoB,UAAUF,CAAV,EAAa;AAAE,aAAO,CAAP;AAAW,KAA9C;;AACA,SAAKG,aAAL,GAAqB,UAAUH,CAAV,EAAa;AAAE,aAAO,CAAP;AAAW,KAA/C;;AACA,SAAKI,WAAL,GAAmB,UAAUJ,CAAV,EAAa;AAAE,aAAO,CAAP;AAAW,KAA7C;AACH;;AACDK,EAAAA,MAAM,CAACC,cAAP,CAAsBV,OAAO,CAACW,SAA9B,EAAyC,MAAzC,EAAiD;AAC7CC,IAAAA,GAAG,EAAE,eAAY;AACb,aAAO,CAAC,KAAK9B,EAAN,EAAU,KAAKC,EAAf,CAAP;AACH,KAH4C;AAI7C8B,IAAAA,GAAG,EAAE,aAAUC,IAAV,EAAgB;AACjB,WAAKhC,EAAL,GAAUgC,IAAI,CAAC,CAAD,CAAd;AACA,WAAK/B,EAAL,GAAU+B,IAAI,CAAC,CAAD,CAAd;AACH,KAP4C;AAQ7CC,IAAAA,UAAU,EAAE,IARiC;AAS7CC,IAAAA,YAAY,EAAE;AAT+B,GAAjD;;AAWAhB,EAAAA,OAAO,CAACW,SAAR,CAAkBM,WAAlB,GAAgC,UAAUC,IAAV,EAAgB;AAC5CA,IAAAA,IAAI,CAACzD,EAAL,GAAU,CAAV;AACAyD,IAAAA,IAAI,CAACxD,EAAL,GAAU,CAAV;AACAwD,IAAAA,IAAI,CAACvD,EAAL,GAAU,KAAKmB,EAAf;AACAoC,IAAAA,IAAI,CAACtD,EAAL,GAAU,KAAKmB,EAAf;AACAmC,IAAAA,IAAI,CAACC,UAAL,CAAgB,KAAKC,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAhB;AACA,SAAKpB,YAAL,GAAoB,CAAC,CAAD,CAApB;;AACA,QAAI,KAAK3B,KAAT,EAAgB;AACZ4C,MAAAA,IAAI,CAACC,UAAL,CAAgB/C,SAAhB;AACH;;AACD,WAAO8C,IAAP;AACH,GAXD;;AAYAlB,EAAAA,OAAO,CAACW,SAAR,CAAkBS,YAAlB,GAAiC,UAAUlD,IAAV,EAAgB;AAC7C,QAAIoD,CAAC,GAAG,KAAKrB,YAAL,CAAkB/B,IAAI,CAACqD,KAAvB,CAAR;AACA,QAAI9D,EAAE,GAAGS,IAAI,CAACT,EAAL,GAAU6D,CAAnB;AACA,QAAI5D,EAAE,GAAGQ,IAAI,CAACR,EAAL,GAAU4D,CAAnB;AACA,QAAI3D,EAAE,GAAGO,IAAI,CAACP,EAAL,GAAU2D,CAAnB;AACA,QAAI1D,EAAE,GAAGM,IAAI,CAACN,EAAL,GAAU0D,CAAnB;;AACA,QAAI3D,EAAE,GAAGF,EAAT,EAAa;AACTA,MAAAA,EAAE,GAAGE,EAAE,GAAG,CAACF,EAAE,GAAGE,EAAN,IAAY,CAAtB;AACH;;AACD,QAAIC,EAAE,GAAGF,EAAT,EAAa;AACTA,MAAAA,EAAE,GAAGE,EAAE,GAAG,CAACF,EAAE,GAAGE,EAAN,IAAY,CAAtB;AACH;;AACDM,IAAAA,IAAI,CAACT,EAAL,GAAUA,EAAV;AACAS,IAAAA,IAAI,CAACR,EAAL,GAAUA,EAAV;AACAQ,IAAAA,IAAI,CAACP,EAAL,GAAUA,EAAV;AACAO,IAAAA,IAAI,CAACN,EAAL,GAAUA,EAAV;;AACA,QAAIM,IAAI,CAACJ,QAAT,EAAmB;AACfwD,MAAAA,CAAC,GAAG,KAAKrB,YAAL,CAAkB/B,IAAI,CAACqD,KAAL,GAAa,CAA/B,IAAoC,KAAKpB,YAAL,CAAkBjC,IAAlB,IAA0B,CAAlE;AACAT,MAAAA,EAAE,IAAI,KAAK+C,WAAL,CAAiBtC,IAAjB,IAAyBoD,CAA/B;AACA5D,MAAAA,EAAE,IAAI,KAAK2C,UAAL,CAAgBnC,IAAhB,IAAwBoD,CAA9B;AACA3D,MAAAA,EAAE,IAAI,KAAK2C,YAAL,CAAkBpC,IAAlB,IAA0BoD,CAAhC;AACA1D,MAAAA,EAAE,IAAI,KAAK2C,aAAL,CAAmBrC,IAAnB,IAA2BoD,CAAjC;;AACA,UAAI3D,EAAE,GAAGF,EAAT,EAAa;AACTA,QAAAA,EAAE,GAAGE,EAAE,GAAG,CAACF,EAAE,GAAGE,EAAN,IAAY,CAAtB;AACH;;AACD,UAAIC,EAAE,GAAGF,EAAT,EAAa;AACTA,QAAAA,EAAE,GAAGE,EAAE,GAAG,CAACF,EAAE,GAAGE,EAAN,IAAY,CAAtB;AACH;;AACD,WAAKsC,IAAL,CAAUhC,IAAV,EAAgBT,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B;AACH;AACJ,GA9BD;;AA+BA,SAAOoC,OAAP;AACH,CApE4B,EAA7B;;AAqEA,SAASA,OAAT","sourcesContent":["function slice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children;\n    var k = parent.value && (y1 - y0) / parent.value;\n    nodes.forEach(function (node) {\n        node.x0 = x0;\n        node.x1 = x1;\n        node.y0 = y0;\n        node.y1 = y0 += node.value * k;\n    });\n}\nfunction dice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children;\n    var k = parent.value && (x1 - x0) / parent.value;\n    nodes.forEach(function (node) {\n        node.x0 = x0;\n        node.x1 = x0 += node.value * k;\n        node.y0 = y0;\n        node.y1 = y1;\n    });\n}\nfunction roundNode(node) {\n    node.x0 = Math.round(node.x0);\n    node.y0 = Math.round(node.y0);\n    node.x1 = Math.round(node.x1);\n    node.y1 = Math.round(node.y1);\n}\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n    var rows = [];\n    var nodes = parent.children;\n    var n = nodes.length;\n    var value = parent.value;\n    var i0 = 0;\n    var i1 = 0;\n    var dx;\n    var dy;\n    var nodeValue;\n    var sumValue;\n    var minValue;\n    var maxValue;\n    var newRatio;\n    var minRatio;\n    var alpha;\n    var beta;\n    while (i0 < n) {\n        dx = x1 - x0;\n        dy = y1 - y0;\n        // Find the next non-empty node.\n        do {\n            sumValue = nodes[i1++].value;\n        } while (!sumValue && i1 < n);\n        minValue = maxValue = sumValue;\n        alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n        beta = sumValue * sumValue * alpha;\n        minRatio = Math.max(maxValue / beta, beta / minValue);\n        // Keep adding nodes while the aspect ratio maintains or improves.\n        for (; i1 < n; ++i1) {\n            nodeValue = nodes[i1].value;\n            sumValue += nodeValue;\n            if (nodeValue < minValue) {\n                minValue = nodeValue;\n            }\n            if (nodeValue > maxValue) {\n                maxValue = nodeValue;\n            }\n            beta = sumValue * sumValue * alpha;\n            newRatio = Math.max(maxValue / beta, beta / minValue);\n            if (newRatio > minRatio) {\n                sumValue -= nodeValue;\n                break;\n            }\n            minRatio = newRatio;\n        }\n        // Position and record the row orientation.\n        var row = {\n            value: sumValue,\n            dice: dx < dy,\n            children: nodes.slice(i0, i1)\n        };\n        rows.push(row);\n        if (row.dice) {\n            dice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);\n        }\n        else {\n            slice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);\n        }\n        value -= sumValue;\n        i0 = i1;\n    }\n    return rows;\n}\nvar phi = (1 + Math.sqrt(5)) / 2;\nvar squarify = (function custom(ratio) {\n    function squarify(parent, x0, y0, x1, y1) {\n        squarifyRatio(ratio, parent, x0, y0, x1, y1);\n    }\n    squarify.ratio = function (x) { return custom((x = +x) > 1 ? x : 1); };\n    return squarify;\n})(phi);\nvar Treemap = /** @class */ (function () {\n    function Treemap() {\n        this.paddingStack = [0];\n        this.dx = 1;\n        this.dy = 1;\n        this.round = true;\n        this.tile = squarify;\n        this.paddingInner = function (_) { return 0; };\n        this.paddingTop = function (_) { return 0; };\n        this.paddingRight = function (_) { return 0; };\n        this.paddingBottom = function (_) { return 0; };\n        this.paddingLeft = function (_) { return 0; };\n    }\n    Object.defineProperty(Treemap.prototype, \"size\", {\n        get: function () {\n            return [this.dx, this.dy];\n        },\n        set: function (size) {\n            this.dx = size[0];\n            this.dy = size[1];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Treemap.prototype.processData = function (root) {\n        root.x0 = 0;\n        root.y0 = 0;\n        root.x1 = this.dx;\n        root.y1 = this.dy;\n        root.eachBefore(this.positionNode.bind(this));\n        this.paddingStack = [0];\n        if (this.round) {\n            root.eachBefore(roundNode);\n        }\n        return root;\n    };\n    Treemap.prototype.positionNode = function (node) {\n        var p = this.paddingStack[node.depth];\n        var x0 = node.x0 + p;\n        var y0 = node.y0 + p;\n        var x1 = node.x1 - p;\n        var y1 = node.y1 - p;\n        if (x1 < x0) {\n            x0 = x1 = (x0 + x1) / 2;\n        }\n        if (y1 < y0) {\n            y0 = y1 = (y0 + y1) / 2;\n        }\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n        if (node.children) {\n            p = this.paddingStack[node.depth + 1] = this.paddingInner(node) / 2;\n            x0 += this.paddingLeft(node) - p;\n            y0 += this.paddingTop(node) - p;\n            x1 -= this.paddingRight(node) - p;\n            y1 -= this.paddingBottom(node) - p;\n            if (x1 < x0) {\n                x0 = x1 = (x0 + x1) / 2;\n            }\n            if (y1 < y0) {\n                y0 = y1 = (y0 + y1) / 2;\n            }\n            this.tile(node, x0, y0, x1, y1);\n        }\n    };\n    return Treemap;\n}());\nexport { Treemap };\n"]},"metadata":{},"sourceType":"module"}