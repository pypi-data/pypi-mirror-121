{"ast":null,"code":"import { Constants, AgPromise, TextFilter, EventService, _ } from '@ag-grid-community/core';\nimport { ClientSideValuesExtractor } from '../clientSideValueExtractor';\nexport var SetFilterModelValuesType;\n\n(function (SetFilterModelValuesType) {\n  SetFilterModelValuesType[SetFilterModelValuesType[\"PROVIDED_LIST\"] = 0] = \"PROVIDED_LIST\";\n  SetFilterModelValuesType[SetFilterModelValuesType[\"PROVIDED_CALLBACK\"] = 1] = \"PROVIDED_CALLBACK\";\n  SetFilterModelValuesType[SetFilterModelValuesType[\"TAKEN_FROM_GRID_VALUES\"] = 2] = \"TAKEN_FROM_GRID_VALUES\";\n})(SetFilterModelValuesType || (SetFilterModelValuesType = {}));\n\nvar SetValueModel = function () {\n  function SetValueModel(filterParams, setIsLoading, valueFormatterService, translate) {\n    var _this = this;\n\n    this.filterParams = filterParams;\n    this.setIsLoading = setIsLoading;\n    this.valueFormatterService = valueFormatterService;\n    this.translate = translate;\n    this.localEventService = new EventService();\n    this.miniFilterText = null; // The lookup for a set is much faster than the lookup for an array, especially when the length of the array is\n    // thousands of records long, so where lookups are important we use a set.\n\n    /** Values provided to the filter for use. */\n\n    this.providedValues = null;\n    /** All possible values for the filter, sorted if required. */\n\n    this.allValues = [];\n    /** Remaining values when filters from other columns have been applied. */\n\n    this.availableValues = new Set();\n    /** All values that are currently displayed, after the mini-filter has been applied. */\n\n    this.displayedValues = [];\n    /** Values that have been selected for this filter. */\n\n    this.selectedValues = new Set();\n    this.initialised = false;\n    var column = filterParams.column,\n        colDef = filterParams.colDef,\n        textFormatter = filterParams.textFormatter,\n        doesRowPassOtherFilter = filterParams.doesRowPassOtherFilter,\n        suppressSorting = filterParams.suppressSorting,\n        comparator = filterParams.comparator,\n        rowModel = filterParams.rowModel,\n        valueGetter = filterParams.valueGetter,\n        values = filterParams.values;\n    this.column = column;\n    this.colDef = colDef;\n    this.formatter = textFormatter || TextFilter.DEFAULT_FORMATTER;\n    this.doesRowPassOtherFilters = doesRowPassOtherFilter;\n    this.suppressSorting = suppressSorting || false;\n    this.comparator = comparator || colDef.comparator || _.defaultComparator;\n\n    if (rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      this.clientSideValuesExtractor = new ClientSideValuesExtractor(rowModel, colDef, valueGetter);\n    }\n\n    if (values == null) {\n      this.valuesType = SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n    } else {\n      this.valuesType = Array.isArray(values) ? SetFilterModelValuesType.PROVIDED_LIST : SetFilterModelValuesType.PROVIDED_CALLBACK;\n      this.providedValues = values;\n    }\n\n    this.updateAllValues().then(function (updatedValues) {\n      return _this.resetSelectionState(updatedValues || []);\n    });\n  }\n\n  SetValueModel.prototype.addEventListener = function (eventType, listener, async) {\n    this.localEventService.addEventListener(eventType, listener, async);\n  };\n\n  SetValueModel.prototype.removeEventListener = function (eventType, listener, async) {\n    this.localEventService.removeEventListener(eventType, listener, async);\n  };\n  /**\n   * Re-fetches the values used in the filter from the value source.\n   * If keepSelection is false, the filter selection will be reset to everything selected,\n   * otherwise the current selection will be preserved.\n   */\n\n\n  SetValueModel.prototype.refreshValues = function (keepSelection) {\n    if (keepSelection === void 0) {\n      keepSelection = true;\n    }\n\n    var currentModel = this.getModel();\n    this.updateAllValues(); // ensure model is updated for new values\n\n    return this.setModel(keepSelection ? currentModel : null);\n  };\n  /**\n   * Overrides the current values being used for the set filter.\n   * If keepSelection is false, the filter selection will be reset to everything selected,\n   * otherwise the current selection will be preserved.\n   */\n\n\n  SetValueModel.prototype.overrideValues = function (valuesToUse, keepSelection) {\n    var _this = this;\n\n    if (keepSelection === void 0) {\n      keepSelection = true;\n    }\n\n    return new AgPromise(function (resolve) {\n      // wait for any existing values to be populated before overriding\n      _this.allValuesPromise.then(function () {\n        _this.valuesType = SetFilterModelValuesType.PROVIDED_LIST;\n        _this.providedValues = valuesToUse;\n\n        _this.refreshValues(keepSelection).then(function () {\n          return resolve();\n        });\n      });\n    });\n  };\n\n  SetValueModel.prototype.refreshAfterAnyFilterChanged = function () {\n    var _this = this;\n\n    return this.showAvailableOnly() ? this.allValuesPromise.then(function (values) {\n      return _this.updateAvailableValues(values || []);\n    }) : AgPromise.resolve();\n  };\n\n  SetValueModel.prototype.isInitialised = function () {\n    return this.initialised;\n  };\n\n  SetValueModel.prototype.updateAllValues = function () {\n    var _this = this;\n\n    this.allValuesPromise = new AgPromise(function (resolve) {\n      switch (_this.valuesType) {\n        case SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES:\n        case SetFilterModelValuesType.PROVIDED_LIST:\n          {\n            var values = _this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES ? _this.getValuesFromRows(false) : _.toStrings(_this.providedValues);\n\n            var sortedValues = _this.sortValues(values || []);\n\n            _this.allValues = sortedValues;\n            resolve(sortedValues);\n            break;\n          }\n\n        case SetFilterModelValuesType.PROVIDED_CALLBACK:\n          {\n            _this.setIsLoading(true);\n\n            var callback_1 = _this.providedValues;\n            var params_1 = {\n              success: function (values) {\n                var processedValues = _.toStrings(values);\n\n                _this.setIsLoading(false);\n\n                var sortedValues = _this.sortValues(processedValues || []);\n\n                _this.allValues = sortedValues;\n                resolve(sortedValues);\n              },\n              colDef: _this.colDef\n            };\n            window.setTimeout(function () {\n              return callback_1(params_1);\n            }, 0);\n            break;\n          }\n\n        default:\n          throw new Error('Unrecognised valuesType');\n      }\n    });\n    this.allValuesPromise.then(function (values) {\n      return _this.updateAvailableValues(values || []);\n    }).then(function () {\n      return _this.initialised = true;\n    });\n    return this.allValuesPromise;\n  };\n\n  SetValueModel.prototype.setValuesType = function (value) {\n    this.valuesType = value;\n  };\n\n  SetValueModel.prototype.getValuesType = function () {\n    return this.valuesType;\n  };\n\n  SetValueModel.prototype.isValueAvailable = function (value) {\n    return this.availableValues.has(value);\n  };\n\n  SetValueModel.prototype.showAvailableOnly = function () {\n    return this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES && !this.filterParams.suppressRemoveEntries;\n  };\n\n  SetValueModel.prototype.updateAvailableValues = function (allValues) {\n    var availableValues = this.showAvailableOnly() ? this.sortValues(this.getValuesFromRows(true)) : allValues;\n    this.availableValues = _.convertToSet(availableValues);\n    this.localEventService.dispatchEvent({\n      type: SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED\n    });\n    this.updateDisplayedValues();\n  };\n\n  SetValueModel.prototype.sortValues = function (values) {\n    if (this.suppressSorting) {\n      return values;\n    }\n\n    if (!this.filterParams.excelMode || values.indexOf(null) < 0) {\n      return values.sort(this.comparator);\n    } // ensure the blank value always appears last\n\n\n    return _.filter(values, function (v) {\n      return v != null;\n    }).sort(this.comparator).concat(null);\n  };\n\n  SetValueModel.prototype.getValuesFromRows = function (removeUnavailableValues) {\n    var _this = this;\n\n    if (removeUnavailableValues === void 0) {\n      removeUnavailableValues = false;\n    }\n\n    if (!this.clientSideValuesExtractor) {\n      console.error('AG Grid: Set Filter cannot initialise because you are using a row model that does not contain all rows in the browser. Either use a different filter type, or configure Set Filter such that you provide it with values');\n      return [];\n    }\n\n    var predicate = function (node) {\n      return !removeUnavailableValues || _this.doesRowPassOtherFilters(node);\n    };\n\n    return this.clientSideValuesExtractor.extractUniqueValues(predicate);\n  };\n  /** Sets mini filter value. Returns true if it changed from last value, otherwise false. */\n\n\n  SetValueModel.prototype.setMiniFilter = function (value) {\n    value = _.makeNull(value);\n\n    if (this.miniFilterText === value) {\n      //do nothing if filter has not changed\n      return false;\n    }\n\n    this.miniFilterText = value;\n    this.updateDisplayedValues();\n    return true;\n  };\n\n  SetValueModel.prototype.getMiniFilter = function () {\n    return this.miniFilterText;\n  };\n\n  SetValueModel.prototype.updateDisplayedValues = function () {\n    var _this = this; // if no filter, just display all available values\n\n\n    if (this.miniFilterText == null) {\n      this.displayedValues = _.values(this.availableValues);\n      return;\n    } // if filter present, we filter down the list\n\n\n    this.displayedValues = []; // to allow for case insensitive searches, upper-case both filter text and value\n\n    var formattedFilterText = (this.formatter(this.miniFilterText) || '').toUpperCase();\n\n    var matchesFilter = function (valueToCheck) {\n      return valueToCheck != null && valueToCheck.toUpperCase().indexOf(formattedFilterText) >= 0;\n    };\n\n    this.availableValues.forEach(function (value) {\n      if (value == null) {\n        if (_this.filterParams.excelMode && matchesFilter(_this.translate('blanks'))) {\n          _this.displayedValues.push(value);\n        }\n      } else {\n        var textFormatterValue = _this.formatter(value); // TODO: should this be applying the text formatter *after* the value formatter?\n\n\n        var valueFormatterValue = _this.valueFormatterService.formatValue(_this.column, null, null, textFormatterValue, _this.filterParams.valueFormatter, false);\n\n        if (matchesFilter(textFormatterValue) || matchesFilter(valueFormatterValue)) {\n          _this.displayedValues.push(value);\n        }\n      }\n    });\n  };\n\n  SetValueModel.prototype.getDisplayedValueCount = function () {\n    return this.displayedValues.length;\n  };\n\n  SetValueModel.prototype.getDisplayedValue = function (index) {\n    return this.displayedValues[index];\n  };\n\n  SetValueModel.prototype.hasSelections = function () {\n    return this.filterParams.defaultToNothingSelected ? this.selectedValues.size > 0 : this.allValues.length !== this.selectedValues.size;\n  };\n\n  SetValueModel.prototype.getUniqueValueCount = function () {\n    return this.allValues.length;\n  };\n\n  SetValueModel.prototype.getUniqueValue = function (index) {\n    return this.allValues[index];\n  };\n\n  SetValueModel.prototype.getValues = function () {\n    return this.allValues.slice();\n  };\n\n  SetValueModel.prototype.selectAllMatchingMiniFilter = function (clearExistingSelection) {\n    var _this = this;\n\n    if (clearExistingSelection === void 0) {\n      clearExistingSelection = false;\n    }\n\n    if (this.miniFilterText == null) {\n      // ensure everything is selected\n      this.selectedValues = _.convertToSet(this.allValues);\n    } else {\n      // ensure everything that matches the mini filter is selected\n      if (clearExistingSelection) {\n        this.selectedValues.clear();\n      }\n\n      _.forEach(this.displayedValues, function (value) {\n        return _this.selectedValues.add(value);\n      });\n    }\n  };\n\n  SetValueModel.prototype.deselectAllMatchingMiniFilter = function () {\n    var _this = this;\n\n    if (this.miniFilterText == null) {\n      // ensure everything is deselected\n      this.selectedValues.clear();\n    } else {\n      // ensure everything that matches the mini filter is deselected\n      _.forEach(this.displayedValues, function (value) {\n        return _this.selectedValues.delete(value);\n      });\n    }\n  };\n\n  SetValueModel.prototype.selectValue = function (value) {\n    this.selectedValues.add(value);\n  };\n\n  SetValueModel.prototype.deselectValue = function (value) {\n    if (this.filterParams.excelMode && this.isEverythingVisibleSelected()) {\n      // ensure we're starting from the correct \"everything selected\" state\n      this.resetSelectionState(this.displayedValues);\n    }\n\n    this.selectedValues.delete(value);\n  };\n\n  SetValueModel.prototype.isValueSelected = function (value) {\n    return this.selectedValues.has(value);\n  };\n\n  SetValueModel.prototype.isEverythingVisibleSelected = function () {\n    var _this = this;\n\n    return _.filter(this.displayedValues, function (it) {\n      return _this.isValueSelected(it);\n    }).length === this.displayedValues.length;\n  };\n\n  SetValueModel.prototype.isNothingVisibleSelected = function () {\n    var _this = this;\n\n    return _.filter(this.displayedValues, function (it) {\n      return _this.isValueSelected(it);\n    }).length === 0;\n  };\n\n  SetValueModel.prototype.getModel = function () {\n    return this.hasSelections() ? _.values(this.selectedValues) : null;\n  };\n\n  SetValueModel.prototype.setModel = function (model) {\n    var _this = this;\n\n    return this.allValuesPromise.then(function (values) {\n      if (model == null) {\n        _this.resetSelectionState(values || []);\n      } else {\n        // select all values from the model that exist in the filter\n        _this.selectedValues.clear();\n\n        var allValues_1 = _.convertToSet(values || []);\n\n        _.forEach(model, function (value) {\n          if (allValues_1.has(value)) {\n            _this.selectedValues.add(value);\n          }\n        });\n      }\n    });\n  };\n\n  SetValueModel.prototype.resetSelectionState = function (values) {\n    if (this.filterParams.defaultToNothingSelected) {\n      this.selectedValues.clear();\n    } else {\n      this.selectedValues = _.convertToSet(values || []);\n    }\n  };\n\n  SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED = 'availableValuesChanged';\n  return SetValueModel;\n}();\n\nexport { SetValueModel };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/set-filter/dist/es6/setFilter/setValueModel.js"],"names":["Constants","AgPromise","TextFilter","EventService","_","ClientSideValuesExtractor","SetFilterModelValuesType","SetValueModel","filterParams","setIsLoading","valueFormatterService","translate","_this","localEventService","miniFilterText","providedValues","allValues","availableValues","Set","displayedValues","selectedValues","initialised","column","colDef","textFormatter","doesRowPassOtherFilter","suppressSorting","comparator","rowModel","valueGetter","values","formatter","DEFAULT_FORMATTER","doesRowPassOtherFilters","defaultComparator","getType","ROW_MODEL_TYPE_CLIENT_SIDE","clientSideValuesExtractor","valuesType","TAKEN_FROM_GRID_VALUES","Array","isArray","PROVIDED_LIST","PROVIDED_CALLBACK","updateAllValues","then","updatedValues","resetSelectionState","prototype","addEventListener","eventType","listener","async","removeEventListener","refreshValues","keepSelection","currentModel","getModel","setModel","overrideValues","valuesToUse","resolve","allValuesPromise","refreshAfterAnyFilterChanged","showAvailableOnly","updateAvailableValues","isInitialised","getValuesFromRows","toStrings","sortedValues","sortValues","callback_1","params_1","success","processedValues","window","setTimeout","Error","setValuesType","value","getValuesType","isValueAvailable","has","suppressRemoveEntries","convertToSet","dispatchEvent","type","EVENT_AVAILABLE_VALUES_CHANGED","updateDisplayedValues","excelMode","indexOf","sort","filter","v","concat","removeUnavailableValues","console","error","predicate","node","extractUniqueValues","setMiniFilter","makeNull","getMiniFilter","formattedFilterText","toUpperCase","matchesFilter","valueToCheck","forEach","push","textFormatterValue","valueFormatterValue","formatValue","valueFormatter","getDisplayedValueCount","length","getDisplayedValue","index","hasSelections","defaultToNothingSelected","size","getUniqueValueCount","getUniqueValue","getValues","slice","selectAllMatchingMiniFilter","clearExistingSelection","clear","add","deselectAllMatchingMiniFilter","delete","selectValue","deselectValue","isEverythingVisibleSelected","isValueSelected","it","isNothingVisibleSelected","model","allValues_1"],"mappings":"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","sourcesContent":["import { Constants, AgPromise, TextFilter, EventService, _ } from '@ag-grid-community/core';\nimport { ClientSideValuesExtractor } from '../clientSideValueExtractor';\nexport var SetFilterModelValuesType;\n(function (SetFilterModelValuesType) {\n    SetFilterModelValuesType[SetFilterModelValuesType[\"PROVIDED_LIST\"] = 0] = \"PROVIDED_LIST\";\n    SetFilterModelValuesType[SetFilterModelValuesType[\"PROVIDED_CALLBACK\"] = 1] = \"PROVIDED_CALLBACK\";\n    SetFilterModelValuesType[SetFilterModelValuesType[\"TAKEN_FROM_GRID_VALUES\"] = 2] = \"TAKEN_FROM_GRID_VALUES\";\n})(SetFilterModelValuesType || (SetFilterModelValuesType = {}));\nvar SetValueModel = /** @class */ (function () {\n    function SetValueModel(filterParams, setIsLoading, valueFormatterService, translate) {\n        var _this = this;\n        this.filterParams = filterParams;\n        this.setIsLoading = setIsLoading;\n        this.valueFormatterService = valueFormatterService;\n        this.translate = translate;\n        this.localEventService = new EventService();\n        this.miniFilterText = null;\n        // The lookup for a set is much faster than the lookup for an array, especially when the length of the array is\n        // thousands of records long, so where lookups are important we use a set.\n        /** Values provided to the filter for use. */\n        this.providedValues = null;\n        /** All possible values for the filter, sorted if required. */\n        this.allValues = [];\n        /** Remaining values when filters from other columns have been applied. */\n        this.availableValues = new Set();\n        /** All values that are currently displayed, after the mini-filter has been applied. */\n        this.displayedValues = [];\n        /** Values that have been selected for this filter. */\n        this.selectedValues = new Set();\n        this.initialised = false;\n        var column = filterParams.column, colDef = filterParams.colDef, textFormatter = filterParams.textFormatter, doesRowPassOtherFilter = filterParams.doesRowPassOtherFilter, suppressSorting = filterParams.suppressSorting, comparator = filterParams.comparator, rowModel = filterParams.rowModel, valueGetter = filterParams.valueGetter, values = filterParams.values;\n        this.column = column;\n        this.colDef = colDef;\n        this.formatter = textFormatter || TextFilter.DEFAULT_FORMATTER;\n        this.doesRowPassOtherFilters = doesRowPassOtherFilter;\n        this.suppressSorting = suppressSorting || false;\n        this.comparator = comparator || colDef.comparator || _.defaultComparator;\n        if (rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            this.clientSideValuesExtractor = new ClientSideValuesExtractor(rowModel, colDef, valueGetter);\n        }\n        if (values == null) {\n            this.valuesType = SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES;\n        }\n        else {\n            this.valuesType = Array.isArray(values) ?\n                SetFilterModelValuesType.PROVIDED_LIST :\n                SetFilterModelValuesType.PROVIDED_CALLBACK;\n            this.providedValues = values;\n        }\n        this.updateAllValues().then(function (updatedValues) { return _this.resetSelectionState(updatedValues || []); });\n    }\n    SetValueModel.prototype.addEventListener = function (eventType, listener, async) {\n        this.localEventService.addEventListener(eventType, listener, async);\n    };\n    SetValueModel.prototype.removeEventListener = function (eventType, listener, async) {\n        this.localEventService.removeEventListener(eventType, listener, async);\n    };\n    /**\n     * Re-fetches the values used in the filter from the value source.\n     * If keepSelection is false, the filter selection will be reset to everything selected,\n     * otherwise the current selection will be preserved.\n     */\n    SetValueModel.prototype.refreshValues = function (keepSelection) {\n        if (keepSelection === void 0) { keepSelection = true; }\n        var currentModel = this.getModel();\n        this.updateAllValues();\n        // ensure model is updated for new values\n        return this.setModel(keepSelection ? currentModel : null);\n    };\n    /**\n     * Overrides the current values being used for the set filter.\n     * If keepSelection is false, the filter selection will be reset to everything selected,\n     * otherwise the current selection will be preserved.\n     */\n    SetValueModel.prototype.overrideValues = function (valuesToUse, keepSelection) {\n        var _this = this;\n        if (keepSelection === void 0) { keepSelection = true; }\n        return new AgPromise(function (resolve) {\n            // wait for any existing values to be populated before overriding\n            _this.allValuesPromise.then(function () {\n                _this.valuesType = SetFilterModelValuesType.PROVIDED_LIST;\n                _this.providedValues = valuesToUse;\n                _this.refreshValues(keepSelection).then(function () { return resolve(); });\n            });\n        });\n    };\n    SetValueModel.prototype.refreshAfterAnyFilterChanged = function () {\n        var _this = this;\n        return this.showAvailableOnly() ?\n            this.allValuesPromise.then(function (values) { return _this.updateAvailableValues(values || []); }) :\n            AgPromise.resolve();\n    };\n    SetValueModel.prototype.isInitialised = function () {\n        return this.initialised;\n    };\n    SetValueModel.prototype.updateAllValues = function () {\n        var _this = this;\n        this.allValuesPromise = new AgPromise(function (resolve) {\n            switch (_this.valuesType) {\n                case SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES:\n                case SetFilterModelValuesType.PROVIDED_LIST: {\n                    var values = _this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES ?\n                        _this.getValuesFromRows(false) : _.toStrings(_this.providedValues);\n                    var sortedValues = _this.sortValues(values || []);\n                    _this.allValues = sortedValues;\n                    resolve(sortedValues);\n                    break;\n                }\n                case SetFilterModelValuesType.PROVIDED_CALLBACK: {\n                    _this.setIsLoading(true);\n                    var callback_1 = _this.providedValues;\n                    var params_1 = {\n                        success: function (values) {\n                            var processedValues = _.toStrings(values);\n                            _this.setIsLoading(false);\n                            var sortedValues = _this.sortValues(processedValues || []);\n                            _this.allValues = sortedValues;\n                            resolve(sortedValues);\n                        },\n                        colDef: _this.colDef\n                    };\n                    window.setTimeout(function () { return callback_1(params_1); }, 0);\n                    break;\n                }\n                default:\n                    throw new Error('Unrecognised valuesType');\n            }\n        });\n        this.allValuesPromise.then(function (values) { return _this.updateAvailableValues(values || []); }).then(function () { return _this.initialised = true; });\n        return this.allValuesPromise;\n    };\n    SetValueModel.prototype.setValuesType = function (value) {\n        this.valuesType = value;\n    };\n    SetValueModel.prototype.getValuesType = function () {\n        return this.valuesType;\n    };\n    SetValueModel.prototype.isValueAvailable = function (value) {\n        return this.availableValues.has(value);\n    };\n    SetValueModel.prototype.showAvailableOnly = function () {\n        return this.valuesType === SetFilterModelValuesType.TAKEN_FROM_GRID_VALUES &&\n            !this.filterParams.suppressRemoveEntries;\n    };\n    SetValueModel.prototype.updateAvailableValues = function (allValues) {\n        var availableValues = this.showAvailableOnly() ? this.sortValues(this.getValuesFromRows(true)) : allValues;\n        this.availableValues = _.convertToSet(availableValues);\n        this.localEventService.dispatchEvent({ type: SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED });\n        this.updateDisplayedValues();\n    };\n    SetValueModel.prototype.sortValues = function (values) {\n        if (this.suppressSorting) {\n            return values;\n        }\n        if (!this.filterParams.excelMode || values.indexOf(null) < 0) {\n            return values.sort(this.comparator);\n        }\n        // ensure the blank value always appears last\n        return _.filter(values, function (v) { return v != null; }).sort(this.comparator).concat(null);\n    };\n    SetValueModel.prototype.getValuesFromRows = function (removeUnavailableValues) {\n        var _this = this;\n        if (removeUnavailableValues === void 0) { removeUnavailableValues = false; }\n        if (!this.clientSideValuesExtractor) {\n            console.error('AG Grid: Set Filter cannot initialise because you are using a row model that does not contain all rows in the browser. Either use a different filter type, or configure Set Filter such that you provide it with values');\n            return [];\n        }\n        var predicate = function (node) { return (!removeUnavailableValues || _this.doesRowPassOtherFilters(node)); };\n        return this.clientSideValuesExtractor.extractUniqueValues(predicate);\n    };\n    /** Sets mini filter value. Returns true if it changed from last value, otherwise false. */\n    SetValueModel.prototype.setMiniFilter = function (value) {\n        value = _.makeNull(value);\n        if (this.miniFilterText === value) {\n            //do nothing if filter has not changed\n            return false;\n        }\n        this.miniFilterText = value;\n        this.updateDisplayedValues();\n        return true;\n    };\n    SetValueModel.prototype.getMiniFilter = function () {\n        return this.miniFilterText;\n    };\n    SetValueModel.prototype.updateDisplayedValues = function () {\n        var _this = this;\n        // if no filter, just display all available values\n        if (this.miniFilterText == null) {\n            this.displayedValues = _.values(this.availableValues);\n            return;\n        }\n        // if filter present, we filter down the list\n        this.displayedValues = [];\n        // to allow for case insensitive searches, upper-case both filter text and value\n        var formattedFilterText = (this.formatter(this.miniFilterText) || '').toUpperCase();\n        var matchesFilter = function (valueToCheck) {\n            return valueToCheck != null && valueToCheck.toUpperCase().indexOf(formattedFilterText) >= 0;\n        };\n        this.availableValues.forEach(function (value) {\n            if (value == null) {\n                if (_this.filterParams.excelMode && matchesFilter(_this.translate('blanks'))) {\n                    _this.displayedValues.push(value);\n                }\n            }\n            else {\n                var textFormatterValue = _this.formatter(value);\n                // TODO: should this be applying the text formatter *after* the value formatter?\n                var valueFormatterValue = _this.valueFormatterService.formatValue(_this.column, null, null, textFormatterValue, _this.filterParams.valueFormatter, false);\n                if (matchesFilter(textFormatterValue) || matchesFilter(valueFormatterValue)) {\n                    _this.displayedValues.push(value);\n                }\n            }\n        });\n    };\n    SetValueModel.prototype.getDisplayedValueCount = function () {\n        return this.displayedValues.length;\n    };\n    SetValueModel.prototype.getDisplayedValue = function (index) {\n        return this.displayedValues[index];\n    };\n    SetValueModel.prototype.hasSelections = function () {\n        return this.filterParams.defaultToNothingSelected ?\n            this.selectedValues.size > 0 :\n            this.allValues.length !== this.selectedValues.size;\n    };\n    SetValueModel.prototype.getUniqueValueCount = function () {\n        return this.allValues.length;\n    };\n    SetValueModel.prototype.getUniqueValue = function (index) {\n        return this.allValues[index];\n    };\n    SetValueModel.prototype.getValues = function () {\n        return this.allValues.slice();\n    };\n    SetValueModel.prototype.selectAllMatchingMiniFilter = function (clearExistingSelection) {\n        var _this = this;\n        if (clearExistingSelection === void 0) { clearExistingSelection = false; }\n        if (this.miniFilterText == null) {\n            // ensure everything is selected\n            this.selectedValues = _.convertToSet(this.allValues);\n        }\n        else {\n            // ensure everything that matches the mini filter is selected\n            if (clearExistingSelection) {\n                this.selectedValues.clear();\n            }\n            _.forEach(this.displayedValues, function (value) { return _this.selectedValues.add(value); });\n        }\n    };\n    SetValueModel.prototype.deselectAllMatchingMiniFilter = function () {\n        var _this = this;\n        if (this.miniFilterText == null) {\n            // ensure everything is deselected\n            this.selectedValues.clear();\n        }\n        else {\n            // ensure everything that matches the mini filter is deselected\n            _.forEach(this.displayedValues, function (value) { return _this.selectedValues.delete(value); });\n        }\n    };\n    SetValueModel.prototype.selectValue = function (value) {\n        this.selectedValues.add(value);\n    };\n    SetValueModel.prototype.deselectValue = function (value) {\n        if (this.filterParams.excelMode && this.isEverythingVisibleSelected()) {\n            // ensure we're starting from the correct \"everything selected\" state\n            this.resetSelectionState(this.displayedValues);\n        }\n        this.selectedValues.delete(value);\n    };\n    SetValueModel.prototype.isValueSelected = function (value) {\n        return this.selectedValues.has(value);\n    };\n    SetValueModel.prototype.isEverythingVisibleSelected = function () {\n        var _this = this;\n        return _.filter(this.displayedValues, function (it) { return _this.isValueSelected(it); }).length === this.displayedValues.length;\n    };\n    SetValueModel.prototype.isNothingVisibleSelected = function () {\n        var _this = this;\n        return _.filter(this.displayedValues, function (it) { return _this.isValueSelected(it); }).length === 0;\n    };\n    SetValueModel.prototype.getModel = function () {\n        return this.hasSelections() ? _.values(this.selectedValues) : null;\n    };\n    SetValueModel.prototype.setModel = function (model) {\n        var _this = this;\n        return this.allValuesPromise.then(function (values) {\n            if (model == null) {\n                _this.resetSelectionState(values || []);\n            }\n            else {\n                // select all values from the model that exist in the filter\n                _this.selectedValues.clear();\n                var allValues_1 = _.convertToSet(values || []);\n                _.forEach(model, function (value) {\n                    if (allValues_1.has(value)) {\n                        _this.selectedValues.add(value);\n                    }\n                });\n            }\n        });\n    };\n    SetValueModel.prototype.resetSelectionState = function (values) {\n        if (this.filterParams.defaultToNothingSelected) {\n            this.selectedValues.clear();\n        }\n        else {\n            this.selectedValues = _.convertToSet(values || []);\n        }\n    };\n    SetValueModel.EVENT_AVAILABLE_VALUES_CHANGED = 'availableValuesChanged';\n    return SetValueModel;\n}());\nexport { SetValueModel };\n"]},"metadata":{},"sourceType":"module"}