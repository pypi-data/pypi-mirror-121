{"ast":null,"code":"import { _ } from \"@ag-grid-community/core\"; // table for crc calculation\n// from: https://referencesource.microsoft.com/#System/sys/System/IO/compression/Crc32Helper.cs,3b31978c7d7f7246,references\n\nvar crcTable = new Uint32Array([0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d]);\n\nvar ZipContainer = function () {\n  function ZipContainer() {}\n\n  ZipContainer.addFolders = function (paths) {\n    paths.forEach(this.addFolder.bind(this));\n  };\n\n  ZipContainer.addFolder = function (path) {\n    this.folders.push({\n      path: path,\n      created: new Date(),\n      isBase64: false\n    });\n  };\n\n  ZipContainer.addFile = function (path, content, isBase64) {\n    if (isBase64 === void 0) {\n      isBase64 = false;\n    }\n\n    this.files.push({\n      path: path,\n      created: new Date(),\n      content: content,\n      isBase64: isBase64\n    });\n  };\n\n  ZipContainer.getContent = function (mimeType) {\n    if (mimeType === void 0) {\n      mimeType = 'application/zip';\n    }\n\n    var textOutput = this.buildFileStream();\n    var uInt8Output = this.buildUint8Array(textOutput);\n    this.clearStream();\n    return new Blob([uInt8Output], {\n      type: mimeType\n    });\n  };\n\n  ZipContainer.clearStream = function () {\n    this.folders = [];\n    this.files = [];\n  };\n\n  ZipContainer.buildFileStream = function (fData) {\n    if (fData === void 0) {\n      fData = '';\n    }\n\n    var totalFiles = this.folders.concat(this.files);\n    var len = totalFiles.length;\n    var foData = '';\n    var lL = 0;\n    var cL = 0;\n\n    for (var _i = 0, totalFiles_1 = totalFiles; _i < totalFiles_1.length; _i++) {\n      var currentFile = totalFiles_1[_i];\n\n      var _a = this.getHeader(currentFile, lL),\n          fileHeader = _a.fileHeader,\n          folderHeader = _a.folderHeader,\n          content = _a.content;\n\n      lL += fileHeader.length + content.length;\n      cL += folderHeader.length;\n      fData += fileHeader + content;\n      foData += folderHeader;\n    }\n\n    var foEnd = this.buildFolderEnd(len, cL, lL);\n    return fData + foData + foEnd;\n  };\n\n  ZipContainer.getHeader = function (currentFile, offset) {\n    var content = currentFile.content,\n        path = currentFile.path,\n        created = currentFile.created,\n        isBase64 = currentFile.isBase64;\n    var utf8_encode = _.utf8_encode,\n        decToHex = _.decToHex;\n    var utfPath = utf8_encode(path);\n    var isUTF8 = utfPath !== path;\n    var time = this.convertTime(created);\n    var dt = this.convertDate(created);\n    var extraFields = '';\n\n    if (isUTF8) {\n      var uExtraFieldPath = decToHex(1, 1) + decToHex(this.getFromCrc32Table(utfPath), 4) + utfPath;\n      extraFields = \"\\x75\\x70\" + decToHex(uExtraFieldPath.length, 2) + uExtraFieldPath;\n    }\n\n    var _a = !content ? {\n      size: 0,\n      content: ''\n    } : this.getConvertedContent(content, isBase64),\n        size = _a.size,\n        convertedContent = _a.content;\n\n    var header = '\\x0A\\x00' + (isUTF8 ? '\\x00\\x08' : '\\x00\\x00') + '\\x00\\x00' + decToHex(time, 2) + // last modified time\n    decToHex(dt, 2) + // last modified date\n    decToHex(size ? this.getFromCrc32Table(convertedContent) : 0, 4) + decToHex(size, 4) + // compressed size\n    decToHex(size, 4) + // uncompressed size\n    decToHex(utfPath.length, 2) + // file name length\n    decToHex(extraFields.length, 2); // extra field length\n\n    var fileHeader = 'PK\\x03\\x04' + header + utfPath + extraFields;\n    var folderHeader = 'PK\\x01\\x02' + // central header\n    '\\x14\\x00' + header + // file header\n    '\\x00\\x00' + '\\x00\\x00' + '\\x00\\x00' + (content ? '\\x00\\x00\\x00\\x00' : '\\x10\\x00\\x00\\x00') + // external file attributes\n    decToHex(offset, 4) + // relative offset of local header\n    utfPath + // file name\n    extraFields; // extra field\n\n    return {\n      fileHeader: fileHeader,\n      folderHeader: folderHeader,\n      content: convertedContent || ''\n    };\n  };\n\n  ZipContainer.getConvertedContent = function (content, isBase64) {\n    if (isBase64 === void 0) {\n      isBase64 = false;\n    }\n\n    if (isBase64) {\n      content = content.split(';base64,')[1];\n    }\n\n    content = isBase64 ? atob(content) : content;\n    return {\n      size: content.length,\n      content: content\n    };\n  };\n\n  ZipContainer.buildFolderEnd = function (tLen, cLen, lLen) {\n    var decToHex = _.decToHex;\n    return 'PK\\x05\\x06' + // central folder end\n    '\\x00\\x00' + '\\x00\\x00' + decToHex(tLen, 2) + // total number of entries in the central folder\n    decToHex(tLen, 2) + // total number of entries in the central folder\n    decToHex(cLen, 4) + // size of the central folder\n    decToHex(lLen, 4) + // central folder start offset\n    '\\x00\\x00';\n  };\n\n  ZipContainer.buildUint8Array = function (content) {\n    var uint8 = new Uint8Array(content.length);\n\n    for (var i = 0; i < uint8.length; i++) {\n      uint8[i] = content.charCodeAt(i);\n    }\n\n    return uint8;\n  };\n\n  ZipContainer.getFromCrc32Table = function (content) {\n    if (!content.length) {\n      return 0;\n    }\n\n    var size = content.length;\n    var iterable = new Uint8Array(size);\n\n    for (var i = 0; i < size; i++) {\n      iterable[i] = content.charCodeAt(i);\n    }\n\n    var crc = 0 ^ -1;\n    var j = 0;\n    var k = 0;\n    var l = 0;\n\n    for (var i = 0; i < size; i++) {\n      j = iterable[i];\n      k = (crc ^ j) & 0xFF;\n      l = crcTable[k];\n      crc = crc >>> 8 ^ l;\n    }\n\n    return crc ^ -1;\n  };\n\n  ZipContainer.convertTime = function (date) {\n    var time = date.getHours();\n    time <<= 6;\n    time = time | date.getMinutes();\n    time <<= 5;\n    time = time | date.getSeconds() / 2;\n    return time;\n  };\n\n  ZipContainer.convertDate = function (date) {\n    var dt = date.getFullYear() - 1980;\n    dt <<= 4;\n    dt = dt | date.getMonth() + 1;\n    dt <<= 5;\n    dt = dt | date.getDate();\n    return dt;\n  };\n\n  ZipContainer.folders = [];\n  ZipContainer.files = [];\n  return ZipContainer;\n}();\n\nexport { ZipContainer };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/zipContainer.js"],"names":["_","crcTable","Uint32Array","ZipContainer","addFolders","paths","forEach","addFolder","bind","path","folders","push","created","Date","isBase64","addFile","content","files","getContent","mimeType","textOutput","buildFileStream","uInt8Output","buildUint8Array","clearStream","Blob","type","fData","totalFiles","concat","len","length","foData","lL","cL","_i","totalFiles_1","currentFile","_a","getHeader","fileHeader","folderHeader","foEnd","buildFolderEnd","offset","utf8_encode","decToHex","utfPath","isUTF8","time","convertTime","dt","convertDate","extraFields","uExtraFieldPath","getFromCrc32Table","size","getConvertedContent","convertedContent","header","split","atob","tLen","cLen","lLen","uint8","Uint8Array","i","charCodeAt","iterable","crc","j","k","l","date","getHours","getMinutes","getSeconds","getFullYear","getMonth","getDate"],"mappings":"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","sourcesContent":["import { _ } from \"@ag-grid-community/core\";\n// table for crc calculation\n// from: https://referencesource.microsoft.com/#System/sys/System/IO/compression/Crc32Helper.cs,3b31978c7d7f7246,references\nvar crcTable = new Uint32Array([\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f,\n    0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988,\n    0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2,\n    0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172,\n    0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c,\n    0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423,\n    0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106,\n    0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d,\n    0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e,\n    0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7,\n    0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0,\n    0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa,\n    0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81,\n    0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a,\n    0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84,\n    0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc,\n    0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e,\n    0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55,\n    0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28,\n    0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f,\n    0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38,\n    0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242,\n    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69,\n    0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2,\n    0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc,\n    0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693,\n    0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94,\n    0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d\n]);\nvar ZipContainer = /** @class */ (function () {\n    function ZipContainer() {\n    }\n    ZipContainer.addFolders = function (paths) {\n        paths.forEach(this.addFolder.bind(this));\n    };\n    ZipContainer.addFolder = function (path) {\n        this.folders.push({\n            path: path,\n            created: new Date(),\n            isBase64: false\n        });\n    };\n    ZipContainer.addFile = function (path, content, isBase64) {\n        if (isBase64 === void 0) { isBase64 = false; }\n        this.files.push({\n            path: path,\n            created: new Date(),\n            content: content,\n            isBase64: isBase64\n        });\n    };\n    ZipContainer.getContent = function (mimeType) {\n        if (mimeType === void 0) { mimeType = 'application/zip'; }\n        var textOutput = this.buildFileStream();\n        var uInt8Output = this.buildUint8Array(textOutput);\n        this.clearStream();\n        return new Blob([uInt8Output], { type: mimeType });\n    };\n    ZipContainer.clearStream = function () {\n        this.folders = [];\n        this.files = [];\n    };\n    ZipContainer.buildFileStream = function (fData) {\n        if (fData === void 0) { fData = ''; }\n        var totalFiles = this.folders.concat(this.files);\n        var len = totalFiles.length;\n        var foData = '';\n        var lL = 0;\n        var cL = 0;\n        for (var _i = 0, totalFiles_1 = totalFiles; _i < totalFiles_1.length; _i++) {\n            var currentFile = totalFiles_1[_i];\n            var _a = this.getHeader(currentFile, lL), fileHeader = _a.fileHeader, folderHeader = _a.folderHeader, content = _a.content;\n            lL += fileHeader.length + content.length;\n            cL += folderHeader.length;\n            fData += fileHeader + content;\n            foData += folderHeader;\n        }\n        var foEnd = this.buildFolderEnd(len, cL, lL);\n        return fData + foData + foEnd;\n    };\n    ZipContainer.getHeader = function (currentFile, offset) {\n        var content = currentFile.content, path = currentFile.path, created = currentFile.created, isBase64 = currentFile.isBase64;\n        var utf8_encode = _.utf8_encode, decToHex = _.decToHex;\n        var utfPath = utf8_encode(path);\n        var isUTF8 = utfPath !== path;\n        var time = this.convertTime(created);\n        var dt = this.convertDate(created);\n        var extraFields = '';\n        if (isUTF8) {\n            var uExtraFieldPath = decToHex(1, 1) + decToHex(this.getFromCrc32Table(utfPath), 4) + utfPath;\n            extraFields = \"\\x75\\x70\" + decToHex(uExtraFieldPath.length, 2) + uExtraFieldPath;\n        }\n        var _a = !content ? { size: 0, content: '' } : this.getConvertedContent(content, isBase64), size = _a.size, convertedContent = _a.content;\n        var header = '\\x0A\\x00' +\n            (isUTF8 ? '\\x00\\x08' : '\\x00\\x00') +\n            '\\x00\\x00' +\n            decToHex(time, 2) + // last modified time\n            decToHex(dt, 2) + // last modified date\n            decToHex(size ? this.getFromCrc32Table(convertedContent) : 0, 4) +\n            decToHex(size, 4) + // compressed size\n            decToHex(size, 4) + // uncompressed size\n            decToHex(utfPath.length, 2) + // file name length\n            decToHex(extraFields.length, 2); // extra field length\n        var fileHeader = 'PK\\x03\\x04' + header + utfPath + extraFields;\n        var folderHeader = 'PK\\x01\\x02' + // central header\n            '\\x14\\x00' +\n            header + // file header\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            (content ? '\\x00\\x00\\x00\\x00' : '\\x10\\x00\\x00\\x00') + // external file attributes\n            decToHex(offset, 4) + // relative offset of local header\n            utfPath + // file name\n            extraFields; // extra field\n        return { fileHeader: fileHeader, folderHeader: folderHeader, content: convertedContent || '' };\n    };\n    ZipContainer.getConvertedContent = function (content, isBase64) {\n        if (isBase64 === void 0) { isBase64 = false; }\n        if (isBase64) {\n            content = content.split(';base64,')[1];\n        }\n        content = isBase64 ? atob(content) : content;\n        return {\n            size: content.length,\n            content: content\n        };\n    };\n    ZipContainer.buildFolderEnd = function (tLen, cLen, lLen) {\n        var decToHex = _.decToHex;\n        return 'PK\\x05\\x06' + // central folder end\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            decToHex(tLen, 2) + // total number of entries in the central folder\n            decToHex(tLen, 2) + // total number of entries in the central folder\n            decToHex(cLen, 4) + // size of the central folder\n            decToHex(lLen, 4) + // central folder start offset\n            '\\x00\\x00';\n    };\n    ZipContainer.buildUint8Array = function (content) {\n        var uint8 = new Uint8Array(content.length);\n        for (var i = 0; i < uint8.length; i++) {\n            uint8[i] = content.charCodeAt(i);\n        }\n        return uint8;\n    };\n    ZipContainer.getFromCrc32Table = function (content) {\n        if (!content.length) {\n            return 0;\n        }\n        var size = content.length;\n        var iterable = new Uint8Array(size);\n        for (var i = 0; i < size; i++) {\n            iterable[i] = content.charCodeAt(i);\n        }\n        var crc = 0 ^ (-1);\n        var j = 0;\n        var k = 0;\n        var l = 0;\n        for (var i = 0; i < size; i++) {\n            j = iterable[i];\n            k = (crc ^ j) & 0xFF;\n            l = crcTable[k];\n            crc = (crc >>> 8) ^ l;\n        }\n        return crc ^ (-1);\n    };\n    ZipContainer.convertTime = function (date) {\n        var time = date.getHours();\n        time <<= 6;\n        time = time | date.getMinutes();\n        time <<= 5;\n        time = time | date.getSeconds() / 2;\n        return time;\n    };\n    ZipContainer.convertDate = function (date) {\n        var dt = date.getFullYear() - 1980;\n        dt <<= 4;\n        dt = dt | (date.getMonth() + 1);\n        dt <<= 5;\n        dt = dt | date.getDate();\n        return dt;\n    };\n    ZipContainer.folders = [];\n    ZipContainer.files = [];\n    return ZipContainer;\n}());\nexport { ZipContainer };\n"]},"metadata":{},"sourceType":"module"}