{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, AgCheckbox, Autowired, Column, Component, CssClassApplier, DragSourceType, Events, KeyCode, PostConstruct, RefSelector } from \"@ag-grid-community/core\";\n\nvar ToolPanelColumnComp = function (_super) {\n  __extends(ToolPanelColumnComp, _super);\n\n  function ToolPanelColumnComp(column, columnDept, allowDragging, groupsExist, focusWrapper) {\n    var _this = _super.call(this) || this;\n\n    _this.column = column;\n    _this.columnDept = columnDept;\n    _this.allowDragging = allowDragging;\n    _this.groupsExist = groupsExist;\n    _this.focusWrapper = focusWrapper;\n    _this.processingColumnStateChange = false;\n    return _this;\n  }\n\n  ToolPanelColumnComp.prototype.init = function () {\n    this.setTemplate(ToolPanelColumnComp.TEMPLATE);\n    this.eDragHandle = _.createIconNoSpan('columnDrag', this.gridOptionsWrapper);\n\n    _.addCssClass(this.eDragHandle, 'ag-drag-handle');\n\n    _.addCssClass(this.eDragHandle, 'ag-column-select-column-drag-handle');\n\n    this.cbSelect.getGui().insertAdjacentElement('afterend', this.eDragHandle);\n    this.displayName = this.columnModel.getDisplayNameForColumn(this.column, 'columnToolPanel');\n\n    var displayNameSanitised = _.escapeString(this.displayName);\n\n    this.eLabel.innerHTML = displayNameSanitised; // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for\n\n    var indent = this.columnDept;\n\n    if (this.groupsExist) {\n      this.addCssClass('ag-column-select-add-group-indent');\n    }\n\n    this.addCssClass(\"ag-column-select-indent-\" + indent);\n    this.setupDragging();\n    this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addManagedListener(this.column, Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addManagedListener(this.column, Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addManagedListener(this.column, Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addManagedListener(this.column, Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));\n    this.addManagedListener(this.gridOptionsWrapper, 'functionsReadOnly', this.onColumnStateChanged.bind(this));\n    this.addManagedListener(this.cbSelect, AgCheckbox.EVENT_CHANGED, this.onCheckboxChanged.bind(this));\n    this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n    this.onColumnStateChanged();\n    this.refreshAriaLabel();\n    this.setupTooltip();\n    CssClassApplier.addToolPanelClassesFromColDef(this.column.getColDef(), this.getGui(), this.gridOptionsWrapper, this.column, null);\n  };\n\n  ToolPanelColumnComp.prototype.setupTooltip = function () {\n    var _this = this;\n\n    var refresh = function refresh() {\n      var newTooltipText = _this.column.getColDef().headerTooltip;\n\n      _this.setTooltip(newTooltipText);\n    };\n\n    refresh();\n    this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n  };\n\n  ToolPanelColumnComp.prototype.getTooltipParams = function () {\n    var res = _super.prototype.getTooltipParams.call(this);\n\n    res.location = 'columnToolPanelColumn';\n    res.colDef = this.column.getColDef();\n    return res;\n  };\n\n  ToolPanelColumnComp.prototype.handleKeyDown = function (e) {\n    if (e.keyCode === KeyCode.SPACE) {\n      e.preventDefault();\n\n      if (this.isSelectable()) {\n        this.onSelectAllChanged(!this.isSelected());\n      }\n    }\n  };\n\n  ToolPanelColumnComp.prototype.onLabelClicked = function () {\n    if (this.gridOptionsWrapper.isFunctionsReadOnly()) {\n      return;\n    }\n\n    var nextState = !this.cbSelect.getValue();\n    this.onChangeCommon(nextState);\n  };\n\n  ToolPanelColumnComp.prototype.onCheckboxChanged = function (event) {\n    this.onChangeCommon(event.selected);\n  };\n\n  ToolPanelColumnComp.prototype.onChangeCommon = function (nextState) {\n    // ignore lock visible columns\n    if (this.cbSelect.isReadOnly()) {\n      return;\n    }\n\n    this.refreshAriaLabel(); // only want to action if the user clicked the checkbox, not if we are setting the checkbox because\n    // of a change in the model\n\n    if (this.processingColumnStateChange) {\n      return;\n    }\n\n    this.modelItemUtils.setColumn(this.column, nextState, 'toolPanelUi');\n  };\n\n  ToolPanelColumnComp.prototype.refreshAriaLabel = function () {\n    var translate = this.gridOptionsWrapper.getLocaleTextFunc();\n    var state = this.cbSelect.getValue() ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden');\n    var label = translate('ariaColumnToggleVisibility', 'column toggle visibility');\n\n    _.setAriaLabel(this.focusWrapper, this.displayName + \" \" + label + \" (\" + state + \")\");\n  };\n\n  ToolPanelColumnComp.prototype.setupDragging = function () {\n    var _this = this;\n\n    if (!this.allowDragging) {\n      _.setDisplayed(this.eDragHandle, false);\n\n      return;\n    }\n\n    var dragSource = {\n      type: DragSourceType.ToolPanel,\n      eElement: this.eDragHandle,\n      dragItemName: this.displayName,\n      getDragItem: function getDragItem() {\n        return _this.createDragItem();\n      }\n    };\n    this.dragAndDropService.addDragSource(dragSource, true);\n    this.addDestroyFunc(function () {\n      return _this.dragAndDropService.removeDragSource(dragSource);\n    });\n  };\n\n  ToolPanelColumnComp.prototype.createDragItem = function () {\n    var visibleState = {};\n    visibleState[this.column.getId()] = this.column.isVisible();\n    return {\n      columns: [this.column],\n      visibleState: visibleState\n    };\n  };\n\n  ToolPanelColumnComp.prototype.onColumnStateChanged = function () {\n    this.processingColumnStateChange = true;\n    var isPivotMode = this.columnModel.isPivotMode();\n\n    if (isPivotMode) {\n      // if reducing, checkbox means column is one of pivot, value or group\n      var anyFunctionActive = this.column.isAnyFunctionActive();\n      this.cbSelect.setValue(anyFunctionActive);\n    } else {\n      // if not reducing, the checkbox tells us if column is visible or not\n      this.cbSelect.setValue(this.column.isVisible());\n    }\n\n    var checkboxReadOnly;\n\n    if (isPivotMode) {\n      // when in pivot mode, the item should be read only if:\n      //  a) gui is not allowed make any changes\n      var functionsReadOnly = this.gridOptionsWrapper.isFunctionsReadOnly(); //  b) column is not allow any functions on it\n\n      var noFunctionsAllowed = !this.column.isAnyFunctionAllowed();\n      checkboxReadOnly = functionsReadOnly || noFunctionsAllowed;\n    } else {\n      // when in normal mode, the checkbox is read only if visibility is locked\n      checkboxReadOnly = !!this.column.getColDef().lockVisible;\n    }\n\n    this.cbSelect.setReadOnly(checkboxReadOnly);\n\n    _.addOrRemoveCssClass(this.getGui(), 'ag-column-select-column-readonly', checkboxReadOnly);\n\n    var checkboxPassive = isPivotMode && this.gridOptionsWrapper.isFunctionsPassive();\n    this.cbSelect.setPassive(checkboxPassive);\n    this.processingColumnStateChange = false;\n  };\n\n  ToolPanelColumnComp.prototype.getDisplayName = function () {\n    return this.displayName;\n  };\n\n  ToolPanelColumnComp.prototype.onSelectAllChanged = function (value) {\n    if (value !== this.cbSelect.getValue()) {\n      if (!this.cbSelect.isReadOnly()) {\n        this.cbSelect.toggle();\n      }\n    }\n  };\n\n  ToolPanelColumnComp.prototype.isSelected = function () {\n    return this.cbSelect.getValue();\n  };\n\n  ToolPanelColumnComp.prototype.isSelectable = function () {\n    return !this.cbSelect.isReadOnly();\n  };\n\n  ToolPanelColumnComp.prototype.isExpandable = function () {\n    return false;\n  };\n\n  ToolPanelColumnComp.prototype.setExpanded = function (value) {\n    console.warn('ag-grid: can not expand a column item that does not represent a column group header');\n  };\n\n  ToolPanelColumnComp.TEMPLATE = \"<div class=\\\"ag-column-select-column\\\" aria-hidden=\\\"true\\\">\\n            <ag-checkbox ref=\\\"cbSelect\\\" class=\\\"ag-column-select-checkbox\\\"></ag-checkbox>\\n            <span class=\\\"ag-column-select-column-label\\\" ref=\\\"eLabel\\\"></span>\\n        </div>\";\n\n  __decorate([Autowired('columnModel')], ToolPanelColumnComp.prototype, \"columnModel\", void 0);\n\n  __decorate([Autowired('dragAndDropService')], ToolPanelColumnComp.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([Autowired('modelItemUtils')], ToolPanelColumnComp.prototype, \"modelItemUtils\", void 0);\n\n  __decorate([RefSelector('eLabel')], ToolPanelColumnComp.prototype, \"eLabel\", void 0);\n\n  __decorate([RefSelector('cbSelect')], ToolPanelColumnComp.prototype, \"cbSelect\", void 0);\n\n  __decorate([PostConstruct], ToolPanelColumnComp.prototype, \"init\", null);\n\n  return ToolPanelColumnComp;\n}(Component);\n\nexport { ToolPanelColumnComp };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/column-tool-panel/dist/es6/columnToolPanel/toolPanelColumnComp.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","AgCheckbox","Autowired","Column","Component","CssClassApplier","DragSourceType","Events","KeyCode","PostConstruct","RefSelector","ToolPanelColumnComp","_super","column","columnDept","allowDragging","groupsExist","focusWrapper","_this","call","processingColumnStateChange","init","setTemplate","TEMPLATE","eDragHandle","createIconNoSpan","gridOptionsWrapper","addCssClass","cbSelect","getGui","insertAdjacentElement","displayName","columnModel","getDisplayNameForColumn","displayNameSanitised","escapeString","eLabel","innerHTML","indent","setupDragging","addManagedListener","eventService","EVENT_COLUMN_PIVOT_MODE_CHANGED","onColumnStateChanged","bind","EVENT_VALUE_CHANGED","EVENT_PIVOT_CHANGED","EVENT_ROW_GROUP_CHANGED","EVENT_VISIBLE_CHANGED","handleKeyDown","EVENT_CHANGED","onCheckboxChanged","onLabelClicked","refreshAriaLabel","setupTooltip","addToolPanelClassesFromColDef","getColDef","refresh","newTooltipText","headerTooltip","setTooltip","EVENT_NEW_COLUMNS_LOADED","getTooltipParams","res","location","colDef","e","keyCode","SPACE","preventDefault","isSelectable","onSelectAllChanged","isSelected","isFunctionsReadOnly","nextState","getValue","onChangeCommon","event","selected","isReadOnly","modelItemUtils","setColumn","translate","getLocaleTextFunc","state","label","setAriaLabel","setDisplayed","dragSource","type","ToolPanel","eElement","dragItemName","getDragItem","createDragItem","dragAndDropService","addDragSource","addDestroyFunc","removeDragSource","visibleState","getId","isVisible","columns","isPivotMode","anyFunctionActive","isAnyFunctionActive","setValue","checkboxReadOnly","functionsReadOnly","noFunctionsAllowed","isAnyFunctionAllowed","lockVisible","setReadOnly","addOrRemoveCssClass","checkboxPassive","isFunctionsPassive","setPassive","getDisplayName","value","toggle","isExpandable","setExpanded","console","warn"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, AgCheckbox, Autowired, Column, Component, CssClassApplier, DragSourceType, Events, KeyCode, PostConstruct, RefSelector } from \"@ag-grid-community/core\";\nvar ToolPanelColumnComp = /** @class */ (function (_super) {\n    __extends(ToolPanelColumnComp, _super);\n    function ToolPanelColumnComp(column, columnDept, allowDragging, groupsExist, focusWrapper) {\n        var _this = _super.call(this) || this;\n        _this.column = column;\n        _this.columnDept = columnDept;\n        _this.allowDragging = allowDragging;\n        _this.groupsExist = groupsExist;\n        _this.focusWrapper = focusWrapper;\n        _this.processingColumnStateChange = false;\n        return _this;\n    }\n    ToolPanelColumnComp.prototype.init = function () {\n        this.setTemplate(ToolPanelColumnComp.TEMPLATE);\n        this.eDragHandle = _.createIconNoSpan('columnDrag', this.gridOptionsWrapper);\n        _.addCssClass(this.eDragHandle, 'ag-drag-handle');\n        _.addCssClass(this.eDragHandle, 'ag-column-select-column-drag-handle');\n        this.cbSelect.getGui().insertAdjacentElement('afterend', this.eDragHandle);\n        this.displayName = this.columnModel.getDisplayNameForColumn(this.column, 'columnToolPanel');\n        var displayNameSanitised = _.escapeString(this.displayName);\n        this.eLabel.innerHTML = displayNameSanitised;\n        // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for\n        var indent = this.columnDept;\n        if (this.groupsExist) {\n            this.addCssClass('ag-column-select-add-group-indent');\n        }\n        this.addCssClass(\"ag-column-select-indent-\" + indent);\n        this.setupDragging();\n        this.addManagedListener(this.eventService, Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.column, Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.focusWrapper, 'keydown', this.handleKeyDown.bind(this));\n        this.addManagedListener(this.gridOptionsWrapper, 'functionsReadOnly', this.onColumnStateChanged.bind(this));\n        this.addManagedListener(this.cbSelect, AgCheckbox.EVENT_CHANGED, this.onCheckboxChanged.bind(this));\n        this.addManagedListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n        this.onColumnStateChanged();\n        this.refreshAriaLabel();\n        this.setupTooltip();\n        CssClassApplier.addToolPanelClassesFromColDef(this.column.getColDef(), this.getGui(), this.gridOptionsWrapper, this.column, null);\n    };\n    ToolPanelColumnComp.prototype.setupTooltip = function () {\n        var _this = this;\n        var refresh = function () {\n            var newTooltipText = _this.column.getColDef().headerTooltip;\n            _this.setTooltip(newTooltipText);\n        };\n        refresh();\n        this.addManagedListener(this.eventService, Events.EVENT_NEW_COLUMNS_LOADED, refresh);\n    };\n    ToolPanelColumnComp.prototype.getTooltipParams = function () {\n        var res = _super.prototype.getTooltipParams.call(this);\n        res.location = 'columnToolPanelColumn';\n        res.colDef = this.column.getColDef();\n        return res;\n    };\n    ToolPanelColumnComp.prototype.handleKeyDown = function (e) {\n        if (e.keyCode === KeyCode.SPACE) {\n            e.preventDefault();\n            if (this.isSelectable()) {\n                this.onSelectAllChanged(!this.isSelected());\n            }\n        }\n    };\n    ToolPanelColumnComp.prototype.onLabelClicked = function () {\n        if (this.gridOptionsWrapper.isFunctionsReadOnly()) {\n            return;\n        }\n        var nextState = !this.cbSelect.getValue();\n        this.onChangeCommon(nextState);\n    };\n    ToolPanelColumnComp.prototype.onCheckboxChanged = function (event) {\n        this.onChangeCommon(event.selected);\n    };\n    ToolPanelColumnComp.prototype.onChangeCommon = function (nextState) {\n        // ignore lock visible columns\n        if (this.cbSelect.isReadOnly()) {\n            return;\n        }\n        this.refreshAriaLabel();\n        // only want to action if the user clicked the checkbox, not if we are setting the checkbox because\n        // of a change in the model\n        if (this.processingColumnStateChange) {\n            return;\n        }\n        this.modelItemUtils.setColumn(this.column, nextState, 'toolPanelUi');\n    };\n    ToolPanelColumnComp.prototype.refreshAriaLabel = function () {\n        var translate = this.gridOptionsWrapper.getLocaleTextFunc();\n        var state = this.cbSelect.getValue() ? translate('ariaVisible', 'visible') : translate('ariaHidden', 'hidden');\n        var label = translate('ariaColumnToggleVisibility', 'column toggle visibility');\n        _.setAriaLabel(this.focusWrapper, this.displayName + \" \" + label + \" (\" + state + \")\");\n    };\n    ToolPanelColumnComp.prototype.setupDragging = function () {\n        var _this = this;\n        if (!this.allowDragging) {\n            _.setDisplayed(this.eDragHandle, false);\n            return;\n        }\n        var dragSource = {\n            type: DragSourceType.ToolPanel,\n            eElement: this.eDragHandle,\n            dragItemName: this.displayName,\n            getDragItem: function () { return _this.createDragItem(); }\n        };\n        this.dragAndDropService.addDragSource(dragSource, true);\n        this.addDestroyFunc(function () { return _this.dragAndDropService.removeDragSource(dragSource); });\n    };\n    ToolPanelColumnComp.prototype.createDragItem = function () {\n        var visibleState = {};\n        visibleState[this.column.getId()] = this.column.isVisible();\n        return {\n            columns: [this.column],\n            visibleState: visibleState\n        };\n    };\n    ToolPanelColumnComp.prototype.onColumnStateChanged = function () {\n        this.processingColumnStateChange = true;\n        var isPivotMode = this.columnModel.isPivotMode();\n        if (isPivotMode) {\n            // if reducing, checkbox means column is one of pivot, value or group\n            var anyFunctionActive = this.column.isAnyFunctionActive();\n            this.cbSelect.setValue(anyFunctionActive);\n        }\n        else {\n            // if not reducing, the checkbox tells us if column is visible or not\n            this.cbSelect.setValue(this.column.isVisible());\n        }\n        var checkboxReadOnly;\n        if (isPivotMode) {\n            // when in pivot mode, the item should be read only if:\n            //  a) gui is not allowed make any changes\n            var functionsReadOnly = this.gridOptionsWrapper.isFunctionsReadOnly();\n            //  b) column is not allow any functions on it\n            var noFunctionsAllowed = !this.column.isAnyFunctionAllowed();\n            checkboxReadOnly = functionsReadOnly || noFunctionsAllowed;\n        }\n        else {\n            // when in normal mode, the checkbox is read only if visibility is locked\n            checkboxReadOnly = !!this.column.getColDef().lockVisible;\n        }\n        this.cbSelect.setReadOnly(checkboxReadOnly);\n        _.addOrRemoveCssClass(this.getGui(), 'ag-column-select-column-readonly', checkboxReadOnly);\n        var checkboxPassive = isPivotMode && this.gridOptionsWrapper.isFunctionsPassive();\n        this.cbSelect.setPassive(checkboxPassive);\n        this.processingColumnStateChange = false;\n    };\n    ToolPanelColumnComp.prototype.getDisplayName = function () {\n        return this.displayName;\n    };\n    ToolPanelColumnComp.prototype.onSelectAllChanged = function (value) {\n        if (value !== this.cbSelect.getValue()) {\n            if (!this.cbSelect.isReadOnly()) {\n                this.cbSelect.toggle();\n            }\n        }\n    };\n    ToolPanelColumnComp.prototype.isSelected = function () {\n        return this.cbSelect.getValue();\n    };\n    ToolPanelColumnComp.prototype.isSelectable = function () {\n        return !this.cbSelect.isReadOnly();\n    };\n    ToolPanelColumnComp.prototype.isExpandable = function () {\n        return false;\n    };\n    ToolPanelColumnComp.prototype.setExpanded = function (value) {\n        console.warn('ag-grid: can not expand a column item that does not represent a column group header');\n    };\n    ToolPanelColumnComp.TEMPLATE = \"<div class=\\\"ag-column-select-column\\\" aria-hidden=\\\"true\\\">\\n            <ag-checkbox ref=\\\"cbSelect\\\" class=\\\"ag-column-select-checkbox\\\"></ag-checkbox>\\n            <span class=\\\"ag-column-select-column-label\\\" ref=\\\"eLabel\\\"></span>\\n        </div>\";\n    __decorate([\n        Autowired('columnModel')\n    ], ToolPanelColumnComp.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('dragAndDropService')\n    ], ToolPanelColumnComp.prototype, \"dragAndDropService\", void 0);\n    __decorate([\n        Autowired('modelItemUtils')\n    ], ToolPanelColumnComp.prototype, \"modelItemUtils\", void 0);\n    __decorate([\n        RefSelector('eLabel')\n    ], ToolPanelColumnComp.prototype, \"eLabel\", void 0);\n    __decorate([\n        RefSelector('cbSelect')\n    ], ToolPanelColumnComp.prototype, \"cbSelect\", void 0);\n    __decorate([\n        PostConstruct\n    ], ToolPanelColumnComp.prototype, \"init\", null);\n    return ToolPanelColumnComp;\n}(Component));\nexport { ToolPanelColumnComp };\n"]},"metadata":{},"sourceType":"module"}