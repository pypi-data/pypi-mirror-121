{"ast":null,"code":"// @ag-grid-community/react v26.0.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar prop_types_1 = __importDefault(require(\"prop-types\"));\n\nvar core_1 = require(\"@ag-grid-community/core\");\n\nvar agGridColumn_1 = require(\"./agGridColumn\");\n\nvar changeDetectionService_1 = require(\"./changeDetectionService\");\n\nvar legacyReactComponent_1 = require(\"./legacyReactComponent\");\n\nvar newReactComponent_1 = require(\"./newReactComponent\");\n\nvar AgGridReactLegacy = function (_super) {\n  __extends(AgGridReactLegacy, _super);\n\n  function AgGridReactLegacy(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.props = props;\n    _this.changeDetectionService = new changeDetectionService_1.ChangeDetectionService();\n    _this.api = null;\n    _this.portals = [];\n    _this.hasPendingPortalUpdate = false;\n    _this.destroyed = false;\n    _this.SYNCHRONOUS_CHANGE_PROPERTIES = ['context'];\n    return _this;\n  }\n\n  AgGridReactLegacy.prototype.render = function () {\n    var _this = this;\n\n    return react_1.default.createElement('div', {\n      style: this.createStyleForDiv(),\n      className: this.props.className,\n      ref: function ref(e) {\n        _this.eGridDiv = e;\n      }\n    }, this.portals);\n  };\n\n  AgGridReactLegacy.prototype.createStyleForDiv = function () {\n    return __assign({\n      height: '100%'\n    }, this.props.containerStyle || {});\n  };\n\n  AgGridReactLegacy.prototype.componentDidMount = function () {\n    var modules = this.props.modules || [];\n    var gridParams = {\n      providedBeanInstances: {\n        agGridReact: this,\n        frameworkComponentWrapper: new ReactFrameworkComponentWrapper(this)\n      },\n      modules: modules\n    };\n    var gridOptions = this.props.gridOptions || {};\n    var children = this.props.children;\n\n    if (agGridColumn_1.AgGridColumn.hasChildColumns(children)) {\n      gridOptions.columnDefs = agGridColumn_1.AgGridColumn.mapChildColumnDefs(children);\n    }\n\n    this.gridOptions = core_1.ComponentUtil.copyAttributesToGridOptions(gridOptions, this.props); // don't need the return value\n\n    new core_1.Grid(this.eGridDiv, this.gridOptions, gridParams);\n    this.api = this.gridOptions.api;\n    this.columnApi = this.gridOptions.columnApi;\n    this.props.setGridApi(this.api, this.columnApi);\n  };\n\n  AgGridReactLegacy.prototype.waitForInstance = function (reactComponent, resolve, startTime) {\n    var _this = this;\n\n    if (startTime === void 0) {\n      startTime = Date.now();\n    } // if the grid has been destroyed in the meantime just resolve\n\n\n    if (this.destroyed) {\n      resolve(null);\n      return;\n    }\n\n    if (reactComponent.rendered()) {\n      resolve(reactComponent);\n    } else {\n      if (Date.now() - startTime >= this.props.maxComponentCreationTimeMs && !this.hasPendingPortalUpdate) {\n        // last check - we check if this is a null value being rendered - we do this last as using SSR to check the value\n        // can mess up contexts\n        if (reactComponent.isNullValue()) {\n          resolve(reactComponent);\n          return;\n        }\n\n        console.error(\"AG Grid: React Component '\" + reactComponent.getReactComponentName() + \"' not created within \" + AgGridReactLegacy.MAX_COMPONENT_CREATION_TIME_IN_MS + \"ms\");\n        return;\n      }\n\n      window.setTimeout(function () {\n        _this.waitForInstance(reactComponent, resolve, startTime);\n      });\n    }\n  };\n  /**\n   * Mounts a react portal for components registered under the componentFramework.\n   * We do this because we want all portals to be in the same tree - in order to get\n   * Context to work properly.\n   */\n\n\n  AgGridReactLegacy.prototype.mountReactPortal = function (portal, reactComponent, resolve) {\n    this.portals = __spreadArrays(this.portals, [portal]);\n    this.waitForInstance(reactComponent, resolve);\n    this.batchUpdate();\n  };\n\n  AgGridReactLegacy.prototype.updateReactPortal = function (oldPortal, newPortal) {\n    this.portals[this.portals.indexOf(oldPortal)] = newPortal;\n    this.batchUpdate();\n  };\n\n  AgGridReactLegacy.prototype.batchUpdate = function () {\n    var _this = this;\n\n    if (this.hasPendingPortalUpdate) {\n      return;\n    }\n\n    setTimeout(function () {\n      if (_this.api) {\n        // destroyed?\n        _this.forceUpdate(function () {\n          _this.hasPendingPortalUpdate = false;\n        });\n      }\n    });\n    this.hasPendingPortalUpdate = true;\n  };\n\n  AgGridReactLegacy.prototype.destroyPortal = function (portal) {\n    this.portals = this.portals.filter(function (curPortal) {\n      return curPortal !== portal;\n    });\n    this.batchUpdate();\n  };\n\n  AgGridReactLegacy.prototype.getStrategyTypeForProp = function (propKey) {\n    if (propKey === 'rowData') {\n      if (this.props.rowDataChangeDetectionStrategy) {\n        return this.props.rowDataChangeDetectionStrategy;\n      } else if (this.isImmutableDataActive()) {\n        return changeDetectionService_1.ChangeDetectionStrategyType.IdentityCheck;\n      }\n    } // all other cases will default to DeepValueCheck\n\n\n    return changeDetectionService_1.ChangeDetectionStrategyType.DeepValueCheck;\n  };\n\n  AgGridReactLegacy.prototype.isImmutableDataActive = function () {\n    return this.props.deltaRowDataMode || this.props.immutableData || this.props.gridOptions && (this.props.gridOptions.deltaRowDataMode || this.props.gridOptions.immutableData);\n  };\n\n  AgGridReactLegacy.prototype.shouldComponentUpdate = function (nextProps) {\n    this.processPropsChanges(this.props, nextProps); // we want full control of the dom, as AG Grid doesn't use React internally,\n    // so for performance reasons we tell React we don't need render called after\n    // property changes.\n\n    return false;\n  };\n\n  AgGridReactLegacy.prototype.componentDidUpdate = function (prevProps) {\n    this.processPropsChanges(prevProps, this.props);\n  };\n\n  AgGridReactLegacy.prototype.processPropsChanges = function (prevProps, nextProps) {\n    var changes = {};\n    this.extractGridPropertyChanges(prevProps, nextProps, changes);\n    this.extractDeclarativeColDefChanges(nextProps, changes);\n    this.processSynchronousChanges(changes);\n    this.processAsynchronousChanges(changes);\n  };\n\n  AgGridReactLegacy.prototype.extractDeclarativeColDefChanges = function (nextProps, changes) {\n    // if columnDefs are provided on gridOptions we use those - you can't combine both\n    // we also skip if columnDefs are provided as a prop directly on AgGridReact\n    if (this.props.gridOptions && this.props.gridOptions.columnDefs || this.props.columnDefs) {\n      return;\n    }\n\n    var debugLogging = !!nextProps.debug;\n    var propKey = 'columnDefs';\n    var currentColDefs = this.gridOptions.columnDefs;\n\n    if (agGridColumn_1.AgGridColumn.hasChildColumns(nextProps.children)) {\n      var detectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));\n      var newColDefs = agGridColumn_1.AgGridColumn.mapChildColumnDefs(nextProps.children);\n\n      if (!detectionStrategy.areEqual(currentColDefs, newColDefs)) {\n        if (debugLogging) {\n          console.log(\"agGridReact: colDefs definitions changed\");\n        }\n\n        changes[propKey] = {\n          previousValue: currentColDefs,\n          currentValue: newColDefs\n        };\n      }\n    } else if (currentColDefs && currentColDefs.length > 0) {\n      changes[propKey] = {\n        previousValue: currentColDefs,\n        currentValue: []\n      };\n    }\n  };\n\n  AgGridReactLegacy.prototype.extractGridPropertyChanges = function (prevProps, nextProps, changes) {\n    var _this = this;\n\n    var debugLogging = !!nextProps.debug;\n    Object.keys(nextProps).forEach(function (propKey) {\n      if (core_1._.includes(core_1.ComponentUtil.ALL_PROPERTIES, propKey)) {\n        var changeDetectionStrategy = _this.changeDetectionService.getStrategy(_this.getStrategyTypeForProp(propKey));\n\n        if (!changeDetectionStrategy.areEqual(prevProps[propKey], nextProps[propKey])) {\n          if (debugLogging) {\n            console.log(\"agGridReact: [\" + propKey + \"] property changed\");\n          }\n\n          changes[propKey] = {\n            previousValue: prevProps[propKey],\n            currentValue: nextProps[propKey]\n          };\n        }\n      }\n    });\n    core_1.ComponentUtil.getEventCallbacks().forEach(function (funcName) {\n      var propsAny = _this.props;\n\n      if (propsAny[funcName] !== nextProps[funcName]) {\n        if (debugLogging) {\n          console.log(\"agGridReact: [\" + funcName + \"] event callback changed\");\n        }\n\n        changes[funcName] = {\n          previousValue: prevProps[funcName],\n          currentValue: nextProps[funcName]\n        };\n      }\n    });\n  };\n\n  AgGridReactLegacy.prototype.componentWillUnmount = function () {\n    if (this.api) {\n      this.api.destroy();\n      this.api = null;\n    }\n\n    this.destroyed = true;\n  };\n\n  AgGridReactLegacy.prototype.isDisableStaticMarkup = function () {\n    return this.props.disableStaticMarkup === true;\n  };\n\n  AgGridReactLegacy.prototype.isLegacyComponentRendering = function () {\n    return this.props.legacyComponentRendering === true;\n  };\n\n  AgGridReactLegacy.prototype.processSynchronousChanges = function (changes) {\n    var asyncChanges = __assign({}, changes);\n\n    if (Object.keys(asyncChanges).length > 0) {\n      var synchronousChanges_1 = {};\n      this.SYNCHRONOUS_CHANGE_PROPERTIES.forEach(function (synchronousChangeProperty) {\n        if (asyncChanges[synchronousChangeProperty]) {\n          synchronousChanges_1[synchronousChangeProperty] = asyncChanges[synchronousChangeProperty];\n          delete asyncChanges[synchronousChangeProperty];\n        }\n      });\n\n      if (Object.keys(synchronousChanges_1).length > 0 && !!this.api) {\n        core_1.ComponentUtil.processOnChange(synchronousChanges_1, this.gridOptions, this.api, this.columnApi);\n      }\n    }\n\n    return asyncChanges;\n  };\n\n  AgGridReactLegacy.prototype.processAsynchronousChanges = function (changes) {\n    var _this = this;\n\n    if (Object.keys(changes).length > 0) {\n      window.setTimeout(function () {\n        // destroyed?\n        if (_this.api) {\n          core_1.ComponentUtil.processOnChange(changes, _this.gridOptions, _this.api, _this.columnApi);\n        }\n      });\n    }\n  };\n\n  AgGridReactLegacy.MAX_COMPONENT_CREATION_TIME_IN_MS = 1000; // a second should be more than enough to instantiate a component\n\n  AgGridReactLegacy.defaultProps = {\n    legacyComponentRendering: false,\n    disableStaticMarkup: false,\n    maxComponentCreationTimeMs: AgGridReactLegacy.MAX_COMPONENT_CREATION_TIME_IN_MS\n  };\n  return AgGridReactLegacy;\n}(react_1.Component);\n\nexports.AgGridReactLegacy = AgGridReactLegacy;\nAgGridReactLegacy.propTypes = {\n  gridOptions: prop_types_1.default.object\n};\naddProperties(core_1.ComponentUtil.getEventCallbacks(), prop_types_1.default.func);\naddProperties(core_1.ComponentUtil.BOOLEAN_PROPERTIES, prop_types_1.default.bool);\naddProperties(core_1.ComponentUtil.STRING_PROPERTIES, prop_types_1.default.string);\naddProperties(core_1.ComponentUtil.OBJECT_PROPERTIES, prop_types_1.default.object);\naddProperties(core_1.ComponentUtil.ARRAY_PROPERTIES, prop_types_1.default.array);\naddProperties(core_1.ComponentUtil.NUMBER_PROPERTIES, prop_types_1.default.number);\naddProperties(core_1.ComponentUtil.FUNCTION_PROPERTIES, prop_types_1.default.func);\n\nfunction addProperties(listOfProps, propType) {\n  listOfProps.forEach(function (propKey) {\n    AgGridReactLegacy[propKey] = propType;\n  });\n}\n\nvar ReactFrameworkComponentWrapper = function (_super) {\n  __extends(ReactFrameworkComponentWrapper, _super);\n\n  function ReactFrameworkComponentWrapper(agGridReact) {\n    var _this = _super.call(this) || this;\n\n    _this.agGridReact = agGridReact;\n    return _this;\n  }\n\n  ReactFrameworkComponentWrapper.prototype.createWrapper = function (UserReactComponent, componentType) {\n    return this.agGridReact.isLegacyComponentRendering() ? new legacyReactComponent_1.LegacyReactComponent(UserReactComponent, this.agGridReact, componentType) : new newReactComponent_1.NewReactComponent(UserReactComponent, this.agGridReact, componentType);\n  };\n\n  return ReactFrameworkComponentWrapper;\n}(core_1.BaseComponentWrapper);","map":{"version":3,"sources":["agGridReactLegacy.ts"],"names":[],"mappings":"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","sourcesContent":["import React, { Component, ReactPortal } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    _,\n    BaseComponentWrapper,\n    ColumnApi,\n    ComponentType,\n    ComponentUtil,\n    FrameworkComponentWrapper,\n    Grid,\n    GridApi,\n    GridOptions,\n    WrappableInterface\n} from '@ag-grid-community/core';\nimport { AgGridColumn } from './agGridColumn';\nimport { ChangeDetectionService, ChangeDetectionStrategyType } from './changeDetectionService';\nimport { ReactComponent } from './reactComponent';\nimport { LegacyReactComponent } from './legacyReactComponent';\nimport { NewReactComponent } from './newReactComponent';\nimport { AgGridReactProps } from './interfaces';\n\nexport class AgGridReactLegacy extends Component<AgGridReactProps, {}> {\n    private static MAX_COMPONENT_CREATION_TIME_IN_MS: number = 1000; // a second should be more than enough to instantiate a component\n\n    static propTypes: any;\n\n    static defaultProps = {\n        legacyComponentRendering: false,\n        disableStaticMarkup: false,\n        maxComponentCreationTimeMs: AgGridReactLegacy.MAX_COMPONENT_CREATION_TIME_IN_MS\n    };\n\n    gridOptions!: GridOptions;\n\n    changeDetectionService = new ChangeDetectionService();\n\n    api: GridApi | null = null;\n    columnApi!: ColumnApi;\n    portals: ReactPortal[] = [];\n    hasPendingPortalUpdate = false;\n\n    destroyed = false;\n\n    protected eGridDiv!: HTMLElement;\n\n    readonly SYNCHRONOUS_CHANGE_PROPERTIES = ['context']\n\n    constructor(public props: AgGridReactProps) {\n        super(props);\n    }\n\n    render() {\n        return React.createElement('div', {\n            style: this.createStyleForDiv(),\n            className: this.props.className,\n            ref: (e: HTMLElement) => {\n                this.eGridDiv = e;\n            }\n        }, this.portals);\n    }\n\n    createStyleForDiv() {\n        return {\n            height: '100%',\n            ...(this.props.containerStyle || {})\n        };\n    }\n\n    componentDidMount() {\n        const modules = this.props.modules || [];\n        const gridParams = {\n            providedBeanInstances: {\n                agGridReact: this,\n                frameworkComponentWrapper: new ReactFrameworkComponentWrapper(this)\n            },\n            modules\n        };\n\n        const gridOptions = this.props.gridOptions || {};\n        const {children} = this.props;\n\n        if (AgGridColumn.hasChildColumns(children)) {\n            gridOptions.columnDefs = AgGridColumn.mapChildColumnDefs(children);\n        }\n\n        this.gridOptions = ComponentUtil.copyAttributesToGridOptions(gridOptions, this.props);\n\n        // don't need the return value\n        new Grid(this.eGridDiv, this.gridOptions, gridParams);\n\n        this.api = this.gridOptions.api!;\n        this.columnApi = this.gridOptions.columnApi!;\n\n        this.props.setGridApi!(this.api, this.columnApi);\n    }\n\n    waitForInstance(reactComponent: ReactComponent, resolve: (value: any) => void, startTime = Date.now()): void {\n        // if the grid has been destroyed in the meantime just resolve\n        if (this.destroyed) {\n            resolve(null);\n            return;\n        }\n\n        if (reactComponent.rendered()) {\n            resolve(reactComponent);\n        } else {\n            if (Date.now() - startTime >= this.props.maxComponentCreationTimeMs! && !this.hasPendingPortalUpdate) {\n                // last check - we check if this is a null value being rendered - we do this last as using SSR to check the value\n                // can mess up contexts\n                if (reactComponent.isNullValue()) {\n                    resolve(reactComponent);\n                    return;\n                }\n\n                console.error(`AG Grid: React Component '${reactComponent.getReactComponentName()}' not created within ${AgGridReactLegacy.MAX_COMPONENT_CREATION_TIME_IN_MS}ms`);\n                return;\n            }\n\n            window.setTimeout(() => {\n                this.waitForInstance(reactComponent, resolve, startTime);\n            });\n        }\n    }\n\n    /**\n     * Mounts a react portal for components registered under the componentFramework.\n     * We do this because we want all portals to be in the same tree - in order to get\n     * Context to work properly.\n     */\n    mountReactPortal(portal: ReactPortal, reactComponent: ReactComponent, resolve: (value: any) => void) {\n        this.portals = [...this.portals, portal];\n        this.waitForInstance(reactComponent, resolve);\n        this.batchUpdate();\n    }\n\n    updateReactPortal(oldPortal: ReactPortal, newPortal: ReactPortal) {\n        this.portals[this.portals.indexOf(oldPortal)] = newPortal;\n        this.batchUpdate();\n    }\n\n    batchUpdate(): void {\n        if (this.hasPendingPortalUpdate) {\n            return;\n        }\n\n        setTimeout(() => {\n            if (this.api) { // destroyed?\n                this.forceUpdate(() => {\n                    this.hasPendingPortalUpdate = false;\n                });\n            }\n        });\n\n        this.hasPendingPortalUpdate = true;\n    }\n\n\n    destroyPortal(portal: ReactPortal) {\n        this.portals = this.portals.filter(curPortal => curPortal !== portal);\n        this.batchUpdate();\n    }\n\n    private getStrategyTypeForProp(propKey: string) {\n        if (propKey === 'rowData') {\n            if (this.props.rowDataChangeDetectionStrategy) {\n                return this.props.rowDataChangeDetectionStrategy;\n            } else if (this.isImmutableDataActive()) {\n                return ChangeDetectionStrategyType.IdentityCheck;\n            }\n        }\n\n        // all other cases will default to DeepValueCheck\n        return ChangeDetectionStrategyType.DeepValueCheck;\n    }\n\n    private isImmutableDataActive() {\n        return (this.props.deltaRowDataMode || this.props.immutableData) ||\n            (this.props.gridOptions && (this.props.gridOptions.deltaRowDataMode || this.props.gridOptions.immutableData));\n    }\n\n    shouldComponentUpdate(nextProps: any) {\n        this.processPropsChanges(this.props, nextProps);\n\n        // we want full control of the dom, as AG Grid doesn't use React internally,\n        // so for performance reasons we tell React we don't need render called after\n        // property changes.\n        return false;\n    }\n\n    componentDidUpdate(prevProps: any) {\n        this.processPropsChanges(prevProps, this.props);\n    }\n\n    processPropsChanges(prevProps: any, nextProps: any) {\n        const changes = {};\n\n        this.extractGridPropertyChanges(prevProps, nextProps, changes);\n        this.extractDeclarativeColDefChanges(nextProps, changes);\n\n        this.processSynchronousChanges(changes);\n        this.processAsynchronousChanges(changes);\n    }\n\n    private extractDeclarativeColDefChanges(nextProps: any, changes: any) {\n        // if columnDefs are provided on gridOptions we use those - you can't combine both\n        // we also skip if columnDefs are provided as a prop directly on AgGridReact\n        if ((this.props.gridOptions && this.props.gridOptions.columnDefs) || this.props.columnDefs) {\n            return;\n        }\n\n        const debugLogging = !!nextProps.debug;\n        const propKey = 'columnDefs';\n        const currentColDefs = this.gridOptions.columnDefs;\n\n        if (AgGridColumn.hasChildColumns(nextProps.children)) {\n            const detectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));\n            const newColDefs = AgGridColumn.mapChildColumnDefs(nextProps.children);\n\n            if (!detectionStrategy.areEqual(currentColDefs, newColDefs)) {\n                if (debugLogging) {\n                    console.log(`agGridReact: colDefs definitions changed`);\n                }\n\n                changes[propKey] =\n                    {\n                        previousValue: currentColDefs,\n                        currentValue: newColDefs\n                    };\n            }\n        } else if (currentColDefs && currentColDefs.length > 0) {\n            changes[propKey] =\n                {\n                    previousValue: currentColDefs,\n                    currentValue: []\n                };\n        }\n    }\n\n    private extractGridPropertyChanges(prevProps: any, nextProps: any, changes: any) {\n        const debugLogging = !!nextProps.debug;\n\n        Object.keys(nextProps).forEach(propKey => {\n            if (_.includes(ComponentUtil.ALL_PROPERTIES, propKey)) {\n                const changeDetectionStrategy = this.changeDetectionService.getStrategy(this.getStrategyTypeForProp(propKey));\n\n                if (!changeDetectionStrategy.areEqual(prevProps[propKey], nextProps[propKey])) {\n                    if (debugLogging) {\n                        console.log(`agGridReact: [${propKey}] property changed`);\n                    }\n\n                    changes[propKey] = {\n                        previousValue: prevProps[propKey],\n                        currentValue: nextProps[propKey]\n                    };\n                }\n            }\n        });\n\n        ComponentUtil.getEventCallbacks().forEach(funcName => {\n            const propsAny = this.props as any;\n            if (propsAny[funcName] !== nextProps[funcName]) {\n                if (debugLogging) {\n                    console.log(`agGridReact: [${funcName}] event callback changed`);\n                }\n\n                changes[funcName] = {\n                    previousValue: prevProps[funcName],\n                    currentValue: nextProps[funcName]\n                };\n            }\n        });\n    }\n\n    componentWillUnmount() {\n        if (this.api) {\n            this.api.destroy();\n            this.api = null;\n        }\n\n        this.destroyed = true;\n    }\n\n    public isDisableStaticMarkup(): boolean {\n        return this.props.disableStaticMarkup === true;\n    }\n\n    public isLegacyComponentRendering(): boolean {\n        return this.props.legacyComponentRendering === true;\n    }\n\n    private processSynchronousChanges(changes: any): {} {\n        const asyncChanges = {...changes};\n        if (Object.keys(asyncChanges).length > 0) {\n            const synchronousChanges: { [key: string]: any } = {};\n            this.SYNCHRONOUS_CHANGE_PROPERTIES.forEach((synchronousChangeProperty: string) => {\n                if (asyncChanges[synchronousChangeProperty]) {\n                    synchronousChanges[synchronousChangeProperty] = asyncChanges[synchronousChangeProperty];\n                    delete asyncChanges[synchronousChangeProperty];\n                }\n            })\n\n            if(Object.keys(synchronousChanges).length > 0 && !!this.api) {\n                ComponentUtil.processOnChange(synchronousChanges, this.gridOptions, this.api, this.columnApi)\n            }\n        }\n        return asyncChanges;\n    }\n\n    private processAsynchronousChanges(changes: {}) {\n        if (Object.keys(changes).length > 0) {\n            window.setTimeout(() => {\n                // destroyed?\n                if (this.api) {\n                    ComponentUtil.processOnChange(changes, this.gridOptions, this.api, this.columnApi)\n                }\n            });\n        }\n    }\n}\n\nAgGridReactLegacy.propTypes = {\n    gridOptions: PropTypes.object\n};\n\naddProperties(ComponentUtil.getEventCallbacks(), PropTypes.func);\naddProperties(ComponentUtil.BOOLEAN_PROPERTIES, PropTypes.bool);\naddProperties(ComponentUtil.STRING_PROPERTIES, PropTypes.string);\naddProperties(ComponentUtil.OBJECT_PROPERTIES, PropTypes.object);\naddProperties(ComponentUtil.ARRAY_PROPERTIES, PropTypes.array);\naddProperties(ComponentUtil.NUMBER_PROPERTIES, PropTypes.number);\naddProperties(ComponentUtil.FUNCTION_PROPERTIES, PropTypes.func);\n\nfunction addProperties(listOfProps: string[], propType: any) {\n    listOfProps.forEach(propKey => {\n        (AgGridReactLegacy as any)[propKey] = propType;\n    });\n}\n\nclass ReactFrameworkComponentWrapper extends BaseComponentWrapper<WrappableInterface> implements FrameworkComponentWrapper {\n    private readonly agGridReact!: AgGridReactLegacy;\n\n    constructor(agGridReact: AgGridReactLegacy) {\n        super();\n        this.agGridReact = agGridReact;\n    }\n\n    createWrapper(UserReactComponent: { new(): any; }, componentType: ComponentType): WrappableInterface {\n        return this.agGridReact.isLegacyComponentRendering() ?\n            new LegacyReactComponent(UserReactComponent, this.agGridReact, componentType) :\n            new NewReactComponent(UserReactComponent, this.agGridReact, componentType);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}