{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, Events, PostConstruct, _ } from '@ag-grid-community/core';\nimport { NameValueComp } from \"./nameValueComp\";\n\nvar SelectedRowsComp = function (_super) {\n  __extends(SelectedRowsComp, _super);\n\n  function SelectedRowsComp() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SelectedRowsComp.prototype.postConstruct = function () {\n    if (!this.isValidRowModel()) {\n      console.warn(\"AG Grid: agSelectedRowCountComponent should only be used with the client and server side row model.\");\n      return;\n    }\n\n    this.setLabel('selectedRows', 'Selected');\n    this.addCssClass('ag-status-panel');\n    this.addCssClass('ag-status-panel-selected-row-count');\n    var selectedRowCount = this.gridApi.getSelectedRows().length;\n    this.setValue(_.formatNumberCommas(selectedRowCount));\n    this.setDisplayed(selectedRowCount > 0);\n    var eventListener = this.onRowSelectionChanged.bind(this);\n    this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, eventListener);\n    this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, eventListener);\n  };\n\n  SelectedRowsComp.prototype.isValidRowModel = function () {\n    // this component is only really useful with client or server side rowmodels\n    var rowModelType = this.gridApi.getModel().getType();\n    return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n  };\n\n  SelectedRowsComp.prototype.onRowSelectionChanged = function () {\n    var selectedRowCount = this.gridApi.getSelectedRows().length;\n    this.setValue(_.formatNumberCommas(selectedRowCount));\n    this.setDisplayed(selectedRowCount > 0);\n  };\n\n  SelectedRowsComp.prototype.init = function () {}; // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n  // so we need to override destroy() just to make the method public.\n\n\n  SelectedRowsComp.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n  };\n\n  __decorate([Autowired('gridApi')], SelectedRowsComp.prototype, \"gridApi\", void 0);\n\n  __decorate([PostConstruct], SelectedRowsComp.prototype, \"postConstruct\", null);\n\n  return SelectedRowsComp;\n}(NameValueComp);\n\nexport { SelectedRowsComp };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/status-bar/dist/es6/statusBar/providedPanels/selectedRowsComp.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Autowired","Events","PostConstruct","_","NameValueComp","SelectedRowsComp","_super","apply","postConstruct","isValidRowModel","console","warn","setLabel","addCssClass","selectedRowCount","gridApi","getSelectedRows","setValue","formatNumberCommas","setDisplayed","eventListener","onRowSelectionChanged","bind","addManagedListener","eventService","EVENT_MODEL_UPDATED","EVENT_SELECTION_CHANGED","rowModelType","getModel","getType","init","destroy","call"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Events, PostConstruct, _ } from '@ag-grid-community/core';\nimport { NameValueComp } from \"./nameValueComp\";\nvar SelectedRowsComp = /** @class */ (function (_super) {\n    __extends(SelectedRowsComp, _super);\n    function SelectedRowsComp() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    SelectedRowsComp.prototype.postConstruct = function () {\n        if (!this.isValidRowModel()) {\n            console.warn(\"AG Grid: agSelectedRowCountComponent should only be used with the client and server side row model.\");\n            return;\n        }\n        this.setLabel('selectedRows', 'Selected');\n        this.addCssClass('ag-status-panel');\n        this.addCssClass('ag-status-panel-selected-row-count');\n        var selectedRowCount = this.gridApi.getSelectedRows().length;\n        this.setValue(_.formatNumberCommas(selectedRowCount));\n        this.setDisplayed(selectedRowCount > 0);\n        var eventListener = this.onRowSelectionChanged.bind(this);\n        this.addManagedListener(this.eventService, Events.EVENT_MODEL_UPDATED, eventListener);\n        this.addManagedListener(this.eventService, Events.EVENT_SELECTION_CHANGED, eventListener);\n    };\n    SelectedRowsComp.prototype.isValidRowModel = function () {\n        // this component is only really useful with client or server side rowmodels\n        var rowModelType = this.gridApi.getModel().getType();\n        return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n    };\n    SelectedRowsComp.prototype.onRowSelectionChanged = function () {\n        var selectedRowCount = this.gridApi.getSelectedRows().length;\n        this.setValue(_.formatNumberCommas(selectedRowCount));\n        this.setDisplayed(selectedRowCount > 0);\n    };\n    SelectedRowsComp.prototype.init = function () {\n    };\n    // this is a user component, and IComponent has \"public destroy()\" as part of the interface.\n    // so we need to override destroy() just to make the method public.\n    SelectedRowsComp.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n    };\n    __decorate([\n        Autowired('gridApi')\n    ], SelectedRowsComp.prototype, \"gridApi\", void 0);\n    __decorate([\n        PostConstruct\n    ], SelectedRowsComp.prototype, \"postConstruct\", null);\n    return SelectedRowsComp;\n}(NameValueComp));\nexport { SelectedRowsComp };\n"]},"metadata":{},"sourceType":"module"}