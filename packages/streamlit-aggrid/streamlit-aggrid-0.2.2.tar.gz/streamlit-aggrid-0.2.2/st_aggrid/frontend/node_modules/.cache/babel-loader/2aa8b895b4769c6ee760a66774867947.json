{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Autowired, BeanStub, RowNode, _ } from \"@ag-grid-community/core\";\n\nvar DetailCellRendererCtrl = function (_super) {\n  __extends(DetailCellRendererCtrl, _super);\n\n  function DetailCellRendererCtrl() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.loadRowDataVersion = 0;\n    _this.needRefresh = false;\n    return _this;\n  }\n\n  DetailCellRendererCtrl.prototype.init = function (comp, params) {\n    var _this = this;\n\n    this.params = params;\n    this.comp = comp;\n    var doNothingBecauseInsidePinnedSection = params.pinned != null;\n\n    if (doNothingBecauseInsidePinnedSection) {\n      return;\n    }\n\n    this.setAutoHeightClasses();\n    this.checkForDeprecations();\n    this.ensureValidRefreshStrategy();\n    this.addThemeToDetailGrid();\n    this.createDetailGrid();\n    this.loadRowData();\n    this.addManagedListener(params.node.parent, RowNode.EVENT_DATA_CHANGED, function () {\n      _this.needRefresh = true;\n    });\n  };\n\n  DetailCellRendererCtrl.prototype.setAutoHeightClasses = function () {\n    var autoHeight = this.gridOptionsWrapper.isDetailRowAutoHeight();\n    var parentClass = autoHeight ? 'ag-details-row-auto-height' : 'ag-details-row-fixed-height';\n    var detailClass = autoHeight ? 'ag-details-grid-auto-height' : 'ag-details-grid-fixed-height';\n    this.comp.addOrRemoveCssClass(parentClass, true);\n    this.comp.addOrRemoveDetailGridCssClass(detailClass, true);\n  };\n\n  DetailCellRendererCtrl.prototype.checkForDeprecations = function () {\n    if (this.params.suppressRefresh) {\n      console.warn(\"AG Grid: as of v23.2.0, cellRendererParams.suppressRefresh for Detail Cell Renderer is no \" + \"longer used. Please set cellRendererParams.refreshStrategy = 'nothing' instead.\");\n      this.params.refreshStrategy = 'nothing';\n    }\n  };\n\n  DetailCellRendererCtrl.prototype.ensureValidRefreshStrategy = function () {\n    switch (this.params.refreshStrategy) {\n      case 'rows':\n      case 'nothing':\n      case 'everything':\n        return;\n    } // check for incorrectly supplied refresh strategy\n\n\n    if (this.params.refreshStrategy) {\n      console.warn(\"AG Grid: invalid cellRendererParams.refreshStrategy = '\" + this.params.refreshStrategy + \"' supplied, defaulting to refreshStrategy = 'rows'.\");\n    } // use default strategy\n\n\n    this.params.refreshStrategy = 'rows';\n  };\n\n  DetailCellRendererCtrl.prototype.addThemeToDetailGrid = function () {\n    // this is needed by environment service of the child grid, the class needs to be on\n    // the grid div itself - the browser's CSS on the other hand just inherits from the parent grid theme.\n    var theme = this.environment.getTheme().theme;\n\n    if (theme) {\n      this.comp.addOrRemoveDetailGridCssClass(theme, true);\n    }\n  };\n\n  DetailCellRendererCtrl.prototype.createDetailGrid = function () {\n    if (_.missing(this.params.detailGridOptions)) {\n      console.warn('AG Grid: could not find detail grid options for master detail, ' + 'please set gridOptions.detailCellRendererParams.detailGridOptions');\n      return;\n    }\n\n    var autoHeight = this.gridOptionsWrapper.isDetailRowAutoHeight(); // we clone the detail grid options, as otherwise it would be shared\n    // across many instances, and that would be a problem because we set\n    // api and columnApi into gridOptions\n\n    var gridOptions = __assign({}, this.params.detailGridOptions);\n\n    if (autoHeight) {\n      gridOptions.domLayout = 'autoHeight';\n    }\n\n    this.comp.setDetailGrid(gridOptions);\n  };\n\n  DetailCellRendererCtrl.prototype.registerDetailWithMaster = function (api, columnApi) {\n    var rowId = this.params.node.id;\n    var masterGridApi = this.params.api;\n    var gridInfo = {\n      id: rowId,\n      api: api,\n      columnApi: columnApi\n    };\n    var rowNode = this.params.node; // register with api\n\n    masterGridApi.addDetailGridInfo(rowId, gridInfo); // register with node\n\n    rowNode.detailGridInfo = gridInfo;\n    this.addDestroyFunc(function () {\n      masterGridApi.removeDetailGridInfo(rowId); // unregister from api\n\n      rowNode.detailGridInfo = null; // unregister from node\n    });\n  };\n\n  DetailCellRendererCtrl.prototype.loadRowData = function () {\n    var _this = this; // in case a refresh happens before the last refresh completes (as we depend on async\n    // application logic) we keep track on what the latest call was.\n\n\n    this.loadRowDataVersion++;\n    var versionThisCall = this.loadRowDataVersion;\n    var userFunc = this.params.getDetailRowData;\n\n    if (!userFunc) {\n      console.warn('AG Grid: could not find getDetailRowData for master / detail, ' + 'please set gridOptions.detailCellRendererParams.getDetailRowData');\n      return;\n    }\n\n    var successCallback = function (rowData) {\n      var mostRecentCall = _this.loadRowDataVersion === versionThisCall;\n\n      if (mostRecentCall) {\n        _this.comp.setRowData(rowData);\n      }\n    };\n\n    var funcParams = {\n      node: this.params.node,\n      // we take data from node, rather than params.data\n      // as the data could have been updated with new instance\n      data: this.params.node.data,\n      successCallback: successCallback,\n      context: this.gridOptionsWrapper.getContext()\n    };\n    userFunc(funcParams);\n  };\n\n  DetailCellRendererCtrl.prototype.refresh = function () {\n    var GET_GRID_TO_REFRESH = false;\n    var GET_GRID_TO_DO_NOTHING = true; // if we return true, it means we pretend to the grid\n    // that we have refreshed, so refresh will never happen.\n\n    var doNotRefresh = !this.needRefresh || this.params.refreshStrategy === 'nothing';\n\n    if (doNotRefresh) {\n      // we do nothing in this refresh method, and also tell the grid to do nothing\n      return GET_GRID_TO_DO_NOTHING;\n    } // reset flag, so don't refresh again until more data changes.\n\n\n    this.needRefresh = false;\n\n    if (this.params.refreshStrategy === 'everything') {\n      // we want full refresh, so tell the grid to destroy and recreate this cell\n      return GET_GRID_TO_REFRESH;\n    } else {\n      // do the refresh here, and tell the grid to do nothing\n      this.loadRowData();\n      return GET_GRID_TO_DO_NOTHING;\n    }\n  };\n\n  __decorate([Autowired('environment')], DetailCellRendererCtrl.prototype, \"environment\", void 0);\n\n  return DetailCellRendererCtrl;\n}(BeanStub);\n\nexport { DetailCellRendererCtrl };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/master-detail/dist/es6/masterDetail/detailCellRendererCtrl.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","Autowired","BeanStub","RowNode","_","DetailCellRendererCtrl","_super","_this","loadRowDataVersion","needRefresh","init","comp","params","doNothingBecauseInsidePinnedSection","pinned","setAutoHeightClasses","checkForDeprecations","ensureValidRefreshStrategy","addThemeToDetailGrid","createDetailGrid","loadRowData","addManagedListener","node","parent","EVENT_DATA_CHANGED","autoHeight","gridOptionsWrapper","isDetailRowAutoHeight","parentClass","detailClass","addOrRemoveCssClass","addOrRemoveDetailGridCssClass","suppressRefresh","console","warn","refreshStrategy","theme","environment","getTheme","missing","detailGridOptions","gridOptions","domLayout","setDetailGrid","registerDetailWithMaster","api","columnApi","rowId","id","masterGridApi","gridInfo","rowNode","addDetailGridInfo","detailGridInfo","addDestroyFunc","removeDetailGridInfo","versionThisCall","userFunc","getDetailRowData","successCallback","rowData","mostRecentCall","setRowData","funcParams","data","context","getContext","refresh","GET_GRID_TO_REFRESH","GET_GRID_TO_DO_NOTHING","doNotRefresh"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, BeanStub, RowNode, _ } from \"@ag-grid-community/core\";\nvar DetailCellRendererCtrl = /** @class */ (function (_super) {\n    __extends(DetailCellRendererCtrl, _super);\n    function DetailCellRendererCtrl() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.loadRowDataVersion = 0;\n        _this.needRefresh = false;\n        return _this;\n    }\n    DetailCellRendererCtrl.prototype.init = function (comp, params) {\n        var _this = this;\n        this.params = params;\n        this.comp = comp;\n        var doNothingBecauseInsidePinnedSection = params.pinned != null;\n        if (doNothingBecauseInsidePinnedSection) {\n            return;\n        }\n        this.setAutoHeightClasses();\n        this.checkForDeprecations();\n        this.ensureValidRefreshStrategy();\n        this.addThemeToDetailGrid();\n        this.createDetailGrid();\n        this.loadRowData();\n        this.addManagedListener(params.node.parent, RowNode.EVENT_DATA_CHANGED, function () {\n            _this.needRefresh = true;\n        });\n    };\n    DetailCellRendererCtrl.prototype.setAutoHeightClasses = function () {\n        var autoHeight = this.gridOptionsWrapper.isDetailRowAutoHeight();\n        var parentClass = autoHeight ? 'ag-details-row-auto-height' : 'ag-details-row-fixed-height';\n        var detailClass = autoHeight ? 'ag-details-grid-auto-height' : 'ag-details-grid-fixed-height';\n        this.comp.addOrRemoveCssClass(parentClass, true);\n        this.comp.addOrRemoveDetailGridCssClass(detailClass, true);\n    };\n    DetailCellRendererCtrl.prototype.checkForDeprecations = function () {\n        if (this.params.suppressRefresh) {\n            console.warn(\"AG Grid: as of v23.2.0, cellRendererParams.suppressRefresh for Detail Cell Renderer is no \" +\n                \"longer used. Please set cellRendererParams.refreshStrategy = 'nothing' instead.\");\n            this.params.refreshStrategy = 'nothing';\n        }\n    };\n    DetailCellRendererCtrl.prototype.ensureValidRefreshStrategy = function () {\n        switch (this.params.refreshStrategy) {\n            case 'rows':\n            case 'nothing':\n            case 'everything':\n                return;\n        }\n        // check for incorrectly supplied refresh strategy\n        if (this.params.refreshStrategy) {\n            console.warn(\"AG Grid: invalid cellRendererParams.refreshStrategy = '\" + this.params.refreshStrategy +\n                \"' supplied, defaulting to refreshStrategy = 'rows'.\");\n        }\n        // use default strategy\n        this.params.refreshStrategy = 'rows';\n    };\n    DetailCellRendererCtrl.prototype.addThemeToDetailGrid = function () {\n        // this is needed by environment service of the child grid, the class needs to be on\n        // the grid div itself - the browser's CSS on the other hand just inherits from the parent grid theme.\n        var theme = this.environment.getTheme().theme;\n        if (theme) {\n            this.comp.addOrRemoveDetailGridCssClass(theme, true);\n        }\n    };\n    DetailCellRendererCtrl.prototype.createDetailGrid = function () {\n        if (_.missing(this.params.detailGridOptions)) {\n            console.warn('AG Grid: could not find detail grid options for master detail, ' +\n                'please set gridOptions.detailCellRendererParams.detailGridOptions');\n            return;\n        }\n        var autoHeight = this.gridOptionsWrapper.isDetailRowAutoHeight();\n        // we clone the detail grid options, as otherwise it would be shared\n        // across many instances, and that would be a problem because we set\n        // api and columnApi into gridOptions\n        var gridOptions = __assign({}, this.params.detailGridOptions);\n        if (autoHeight) {\n            gridOptions.domLayout = 'autoHeight';\n        }\n        this.comp.setDetailGrid(gridOptions);\n    };\n    DetailCellRendererCtrl.prototype.registerDetailWithMaster = function (api, columnApi) {\n        var rowId = this.params.node.id;\n        var masterGridApi = this.params.api;\n        var gridInfo = {\n            id: rowId,\n            api: api,\n            columnApi: columnApi\n        };\n        var rowNode = this.params.node;\n        // register with api\n        masterGridApi.addDetailGridInfo(rowId, gridInfo);\n        // register with node\n        rowNode.detailGridInfo = gridInfo;\n        this.addDestroyFunc(function () {\n            masterGridApi.removeDetailGridInfo(rowId); // unregister from api\n            rowNode.detailGridInfo = null; // unregister from node\n        });\n    };\n    DetailCellRendererCtrl.prototype.loadRowData = function () {\n        var _this = this;\n        // in case a refresh happens before the last refresh completes (as we depend on async\n        // application logic) we keep track on what the latest call was.\n        this.loadRowDataVersion++;\n        var versionThisCall = this.loadRowDataVersion;\n        var userFunc = this.params.getDetailRowData;\n        if (!userFunc) {\n            console.warn('AG Grid: could not find getDetailRowData for master / detail, ' +\n                'please set gridOptions.detailCellRendererParams.getDetailRowData');\n            return;\n        }\n        var successCallback = function (rowData) {\n            var mostRecentCall = _this.loadRowDataVersion === versionThisCall;\n            if (mostRecentCall) {\n                _this.comp.setRowData(rowData);\n            }\n        };\n        var funcParams = {\n            node: this.params.node,\n            // we take data from node, rather than params.data\n            // as the data could have been updated with new instance\n            data: this.params.node.data,\n            successCallback: successCallback,\n            context: this.gridOptionsWrapper.getContext()\n        };\n        userFunc(funcParams);\n    };\n    DetailCellRendererCtrl.prototype.refresh = function () {\n        var GET_GRID_TO_REFRESH = false;\n        var GET_GRID_TO_DO_NOTHING = true;\n        // if we return true, it means we pretend to the grid\n        // that we have refreshed, so refresh will never happen.\n        var doNotRefresh = !this.needRefresh || this.params.refreshStrategy === 'nothing';\n        if (doNotRefresh) {\n            // we do nothing in this refresh method, and also tell the grid to do nothing\n            return GET_GRID_TO_DO_NOTHING;\n        }\n        // reset flag, so don't refresh again until more data changes.\n        this.needRefresh = false;\n        if (this.params.refreshStrategy === 'everything') {\n            // we want full refresh, so tell the grid to destroy and recreate this cell\n            return GET_GRID_TO_REFRESH;\n        }\n        else {\n            // do the refresh here, and tell the grid to do nothing\n            this.loadRowData();\n            return GET_GRID_TO_DO_NOTHING;\n        }\n    };\n    __decorate([\n        Autowired('environment')\n    ], DetailCellRendererCtrl.prototype, \"environment\", void 0);\n    return DetailCellRendererCtrl;\n}(BeanStub));\nexport { DetailCellRendererCtrl };\n"]},"metadata":{},"sourceType":"module"}