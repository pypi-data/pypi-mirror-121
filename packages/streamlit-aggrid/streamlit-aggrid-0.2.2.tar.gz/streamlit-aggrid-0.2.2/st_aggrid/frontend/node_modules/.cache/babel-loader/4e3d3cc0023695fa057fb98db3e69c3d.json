{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, Autowired, Bean, ServerSideStoreType } from \"@ag-grid-community/core\";\nimport { PartialStore } from \"./partialStore\";\nimport { FullStore } from \"./fullStore\";\n\nvar StoreFactory = function () {\n  function StoreFactory() {}\n\n  StoreFactory.prototype.createStore = function (ssrmParams, parentNode) {\n    var storeParams = this.getStoreParams(ssrmParams, parentNode);\n    var CacheClass = storeParams.storeType === ServerSideStoreType.Partial ? PartialStore : FullStore;\n    return new CacheClass(ssrmParams, storeParams, parentNode);\n  };\n\n  StoreFactory.prototype.getStoreParams = function (ssrmParams, parentNode) {\n    var userStoreParams = this.getLevelSpecificParams(parentNode); // if user provided overrideParams, we take storeType from there if it exists\n\n    var storeType = this.getStoreType(userStoreParams);\n    var cacheBlockSize = this.getBlockSize(storeType, userStoreParams);\n    var maxBlocksInCache = this.getMaxBlocksInCache(storeType, ssrmParams, userStoreParams);\n    var storeParams = {\n      storeType: storeType,\n      cacheBlockSize: cacheBlockSize,\n      maxBlocksInCache: maxBlocksInCache\n    };\n    return storeParams;\n  };\n\n  StoreFactory.prototype.getMaxBlocksInCache = function (storeType, ssrmParams, userStoreParams) {\n    if (storeType == ServerSideStoreType.Full) {\n      return undefined;\n    }\n\n    var maxBlocksInCache = userStoreParams && userStoreParams.maxBlocksInCache != null ? userStoreParams.maxBlocksInCache : this.gridOptionsWrapper.getMaxBlocksInCache();\n    var maxBlocksActive = maxBlocksInCache != null && maxBlocksInCache >= 0;\n\n    if (!maxBlocksActive) {\n      return undefined;\n    }\n\n    if (ssrmParams.dynamicRowHeight) {\n      var message_1 = 'AG Grid: Server Side Row Model does not support Dynamic Row Height and Cache Purging. ' + 'Either a) remove getRowHeight() callback or b) remove maxBlocksInCache property. Purging has been disabled.';\n\n      _.doOnce(function () {\n        return console.warn(message_1);\n      }, 'storeFactory.maxBlocksInCache.dynamicRowHeight');\n\n      return undefined;\n    }\n\n    if (this.columnModel.isAutoRowHeightActive()) {\n      var message_2 = 'AG Grid: Server Side Row Model does not support Auto Row Height and Cache Purging. ' + 'Either a) remove colDef.autoHeight or b) remove maxBlocksInCache property. Purging has been disabled.';\n\n      _.doOnce(function () {\n        return console.warn(message_2);\n      }, 'storeFactory.maxBlocksInCache.autoRowHeightActive');\n\n      return undefined;\n    }\n\n    return maxBlocksInCache;\n  };\n\n  StoreFactory.prototype.getBlockSize = function (storeType, userStoreParams) {\n    if (storeType == ServerSideStoreType.Full) {\n      return undefined;\n    }\n\n    var blockSize = userStoreParams && userStoreParams.cacheBlockSize != null ? userStoreParams.cacheBlockSize : this.gridOptionsWrapper.getCacheBlockSize();\n\n    if (blockSize != null && blockSize > 0) {\n      return blockSize;\n    } else {\n      return 100;\n    }\n  };\n\n  StoreFactory.prototype.getLevelSpecificParams = function (parentNode) {\n    var callback = this.gridOptionsWrapper.getServerSideStoreParamsFunc();\n\n    if (!callback) {\n      return undefined;\n    }\n\n    var params = {\n      level: parentNode.level + 1,\n      parentRowNode: parentNode.level >= 0 ? parentNode : undefined,\n      rowGroupColumns: this.columnModel.getRowGroupColumns(),\n      pivotColumns: this.columnModel.getPivotColumns(),\n      pivotMode: this.columnModel.isPivotMode()\n    };\n    return callback(params);\n  };\n\n  StoreFactory.prototype.getStoreType = function (storeParams) {\n    var storeType = storeParams && storeParams.storeType != null ? storeParams.storeType : this.gridOptionsWrapper.getServerSideStoreType();\n\n    switch (storeType) {\n      case ServerSideStoreType.Partial:\n      case ServerSideStoreType.Full:\n        return storeType;\n\n      case null:\n      case undefined:\n        return ServerSideStoreType.Full;\n\n      default:\n        var types = Object.keys(ServerSideStoreType).join(', ');\n        console.warn(\"AG Grid: invalid Server Side Store Type \" + storeType + \", valid types are [\" + types + \"]\");\n        return ServerSideStoreType.Partial;\n    }\n  };\n\n  __decorate([Autowired('gridOptionsWrapper')], StoreFactory.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([Autowired('columnModel')], StoreFactory.prototype, \"columnModel\", void 0);\n\n  StoreFactory = __decorate([Bean('ssrmStoreFactory')], StoreFactory);\n  return StoreFactory;\n}();\n\nexport { StoreFactory };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/server-side-row-model/dist/es6/serverSideRowModel/stores/storeFactory.js"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","_","Autowired","Bean","ServerSideStoreType","PartialStore","FullStore","StoreFactory","prototype","createStore","ssrmParams","parentNode","storeParams","getStoreParams","CacheClass","storeType","Partial","userStoreParams","getLevelSpecificParams","getStoreType","cacheBlockSize","getBlockSize","maxBlocksInCache","getMaxBlocksInCache","Full","undefined","gridOptionsWrapper","maxBlocksActive","dynamicRowHeight","message_1","doOnce","console","warn","columnModel","isAutoRowHeightActive","message_2","blockSize","getCacheBlockSize","callback","getServerSideStoreParamsFunc","params","level","parentRowNode","rowGroupColumns","getRowGroupColumns","pivotColumns","getPivotColumns","pivotMode","isPivotMode","getServerSideStoreType","types","keys","join"],"mappings":"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","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, ServerSideStoreType } from \"@ag-grid-community/core\";\nimport { PartialStore } from \"./partialStore\";\nimport { FullStore } from \"./fullStore\";\nvar StoreFactory = /** @class */ (function () {\n    function StoreFactory() {\n    }\n    StoreFactory.prototype.createStore = function (ssrmParams, parentNode) {\n        var storeParams = this.getStoreParams(ssrmParams, parentNode);\n        var CacheClass = storeParams.storeType === ServerSideStoreType.Partial ? PartialStore : FullStore;\n        return new CacheClass(ssrmParams, storeParams, parentNode);\n    };\n    StoreFactory.prototype.getStoreParams = function (ssrmParams, parentNode) {\n        var userStoreParams = this.getLevelSpecificParams(parentNode);\n        // if user provided overrideParams, we take storeType from there if it exists\n        var storeType = this.getStoreType(userStoreParams);\n        var cacheBlockSize = this.getBlockSize(storeType, userStoreParams);\n        var maxBlocksInCache = this.getMaxBlocksInCache(storeType, ssrmParams, userStoreParams);\n        var storeParams = {\n            storeType: storeType,\n            cacheBlockSize: cacheBlockSize,\n            maxBlocksInCache: maxBlocksInCache\n        };\n        return storeParams;\n    };\n    StoreFactory.prototype.getMaxBlocksInCache = function (storeType, ssrmParams, userStoreParams) {\n        if (storeType == ServerSideStoreType.Full) {\n            return undefined;\n        }\n        var maxBlocksInCache = (userStoreParams && userStoreParams.maxBlocksInCache != null)\n            ? userStoreParams.maxBlocksInCache\n            : this.gridOptionsWrapper.getMaxBlocksInCache();\n        var maxBlocksActive = maxBlocksInCache != null && maxBlocksInCache >= 0;\n        if (!maxBlocksActive) {\n            return undefined;\n        }\n        if (ssrmParams.dynamicRowHeight) {\n            var message_1 = 'AG Grid: Server Side Row Model does not support Dynamic Row Height and Cache Purging. ' +\n                'Either a) remove getRowHeight() callback or b) remove maxBlocksInCache property. Purging has been disabled.';\n            _.doOnce(function () { return console.warn(message_1); }, 'storeFactory.maxBlocksInCache.dynamicRowHeight');\n            return undefined;\n        }\n        if (this.columnModel.isAutoRowHeightActive()) {\n            var message_2 = 'AG Grid: Server Side Row Model does not support Auto Row Height and Cache Purging. ' +\n                'Either a) remove colDef.autoHeight or b) remove maxBlocksInCache property. Purging has been disabled.';\n            _.doOnce(function () { return console.warn(message_2); }, 'storeFactory.maxBlocksInCache.autoRowHeightActive');\n            return undefined;\n        }\n        return maxBlocksInCache;\n    };\n    StoreFactory.prototype.getBlockSize = function (storeType, userStoreParams) {\n        if (storeType == ServerSideStoreType.Full) {\n            return undefined;\n        }\n        var blockSize = (userStoreParams && userStoreParams.cacheBlockSize != null)\n            ? userStoreParams.cacheBlockSize\n            : this.gridOptionsWrapper.getCacheBlockSize();\n        if (blockSize != null && blockSize > 0) {\n            return blockSize;\n        }\n        else {\n            return 100;\n        }\n    };\n    StoreFactory.prototype.getLevelSpecificParams = function (parentNode) {\n        var callback = this.gridOptionsWrapper.getServerSideStoreParamsFunc();\n        if (!callback) {\n            return undefined;\n        }\n        var params = {\n            level: parentNode.level + 1,\n            parentRowNode: parentNode.level >= 0 ? parentNode : undefined,\n            rowGroupColumns: this.columnModel.getRowGroupColumns(),\n            pivotColumns: this.columnModel.getPivotColumns(),\n            pivotMode: this.columnModel.isPivotMode()\n        };\n        return callback(params);\n    };\n    StoreFactory.prototype.getStoreType = function (storeParams) {\n        var storeType = (storeParams && storeParams.storeType != null)\n            ? storeParams.storeType\n            : this.gridOptionsWrapper.getServerSideStoreType();\n        switch (storeType) {\n            case ServerSideStoreType.Partial:\n            case ServerSideStoreType.Full:\n                return storeType;\n            case null:\n            case undefined:\n                return ServerSideStoreType.Full;\n            default:\n                var types = Object.keys(ServerSideStoreType).join(', ');\n                console.warn(\"AG Grid: invalid Server Side Store Type \" + storeType + \", valid types are [\" + types + \"]\");\n                return ServerSideStoreType.Partial;\n        }\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], StoreFactory.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('columnModel')\n    ], StoreFactory.prototype, \"columnModel\", void 0);\n    StoreFactory = __decorate([\n        Bean('ssrmStoreFactory')\n    ], StoreFactory);\n    return StoreFactory;\n}());\nexport { StoreFactory };\n"]},"metadata":{},"sourceType":"module"}