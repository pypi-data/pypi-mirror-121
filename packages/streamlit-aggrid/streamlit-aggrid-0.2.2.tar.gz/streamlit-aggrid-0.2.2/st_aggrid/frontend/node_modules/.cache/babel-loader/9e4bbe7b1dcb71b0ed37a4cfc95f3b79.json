{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, Autowired, Bean, BeanStub, Constants, Events, PostConstruct, PreDestroy, RowNode } from \"@ag-grid-community/core\";\n\nvar ViewportRowModel = function (_super) {\n  __extends(ViewportRowModel, _super);\n\n  function ViewportRowModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this; // rowRenderer tells us these\n\n\n    _this.firstRow = -1;\n    _this.lastRow = -1; // datasource tells us this\n\n    _this.rowCount = -1;\n    _this.rowNodesByIndex = {};\n    return _this;\n  } // we don't implement as lazy row heights is not supported in this row model\n\n\n  ViewportRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    return false;\n  };\n\n  ViewportRowModel.prototype.init = function () {\n    this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n    this.addManagedListener(this.eventService, Events.EVENT_VIEWPORT_CHANGED, this.onViewportChanged.bind(this));\n  };\n\n  ViewportRowModel.prototype.start = function () {\n    if (this.gridOptionsWrapper.getViewportDatasource()) {\n      this.setViewportDatasource(this.gridOptionsWrapper.getViewportDatasource());\n    }\n  };\n\n  ViewportRowModel.prototype.isLastRowIndexKnown = function () {\n    return true;\n  };\n\n  ViewportRowModel.prototype.destroyDatasource = function () {\n    if (!this.viewportDatasource) {\n      return;\n    }\n\n    if (this.viewportDatasource.destroy) {\n      this.viewportDatasource.destroy();\n    }\n\n    this.rowRenderer.datasourceChanged();\n    this.firstRow = -1;\n    this.lastRow = -1;\n  };\n\n  ViewportRowModel.prototype.calculateFirstRow = function (firstRenderedRow) {\n    var bufferSize = this.gridOptionsWrapper.getViewportRowModelBufferSize();\n    var pageSize = this.gridOptionsWrapper.getViewportRowModelPageSize();\n    var afterBuffer = firstRenderedRow - bufferSize;\n\n    if (afterBuffer < 0) {\n      return 0;\n    }\n\n    return Math.floor(afterBuffer / pageSize) * pageSize;\n  };\n\n  ViewportRowModel.prototype.calculateLastRow = function (lastRenderedRow) {\n    if (lastRenderedRow === -1) {\n      return lastRenderedRow;\n    }\n\n    var bufferSize = this.gridOptionsWrapper.getViewportRowModelBufferSize();\n    var pageSize = this.gridOptionsWrapper.getViewportRowModelPageSize();\n    var afterBuffer = lastRenderedRow + bufferSize;\n    var result = Math.ceil(afterBuffer / pageSize) * pageSize;\n    var lastRowIndex = this.rowCount - 1;\n    return Math.min(result, lastRowIndex);\n  };\n\n  ViewportRowModel.prototype.onViewportChanged = function (event) {\n    var newFirst = this.calculateFirstRow(event.firstRow);\n    var newLast = this.calculateLastRow(event.lastRow);\n\n    if (this.firstRow !== newFirst || this.lastRow !== newLast) {\n      this.firstRow = newFirst;\n      this.lastRow = newLast;\n      this.purgeRowsNotInViewport();\n\n      if (this.viewportDatasource) {\n        this.viewportDatasource.setViewportRange(this.firstRow, this.lastRow);\n      }\n    }\n  };\n\n  ViewportRowModel.prototype.purgeRowsNotInViewport = function () {\n    var _this = this;\n\n    Object.keys(this.rowNodesByIndex).forEach(function (indexStr) {\n      var index = parseInt(indexStr, 10);\n\n      if (index < _this.firstRow || index > _this.lastRow) {\n        delete _this.rowNodesByIndex[index];\n      }\n    });\n  };\n\n  ViewportRowModel.prototype.setViewportDatasource = function (viewportDatasource) {\n    this.destroyDatasource();\n    this.viewportDatasource = viewportDatasource;\n    this.rowCount = 0;\n\n    if (!viewportDatasource.init) {\n      console.warn('AG Grid: viewport is missing init method.');\n    } else {\n      viewportDatasource.init({\n        setRowCount: this.setRowCount.bind(this),\n        setRowData: this.setRowData.bind(this),\n        getRow: this.getRow.bind(this)\n      });\n    }\n  };\n\n  ViewportRowModel.prototype.getType = function () {\n    return Constants.ROW_MODEL_TYPE_VIEWPORT;\n  };\n\n  ViewportRowModel.prototype.getRow = function (rowIndex) {\n    if (!this.rowNodesByIndex[rowIndex]) {\n      this.rowNodesByIndex[rowIndex] = this.createBlankRowNode(rowIndex);\n    }\n\n    return this.rowNodesByIndex[rowIndex];\n  };\n\n  ViewportRowModel.prototype.getRowNode = function (id) {\n    var result = undefined;\n    this.forEachNode(function (rowNode) {\n      if (rowNode.id === id) {\n        result = rowNode;\n      }\n    });\n    return result;\n  };\n\n  ViewportRowModel.prototype.getRowCount = function () {\n    return this.rowCount;\n  };\n\n  ViewportRowModel.prototype.getRowIndexAtPixel = function (pixel) {\n    if (this.rowHeight !== 0) {\n      // avoid divide by zero error\n      return Math.floor(pixel / this.rowHeight);\n    }\n\n    return 0;\n  };\n\n  ViewportRowModel.prototype.getRowBounds = function (index) {\n    return {\n      rowHeight: this.rowHeight,\n      rowTop: this.rowHeight * index\n    };\n  };\n\n  ViewportRowModel.prototype.getTopLevelRowCount = function () {\n    return this.getRowCount();\n  };\n\n  ViewportRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n    return topLevelIndex;\n  };\n\n  ViewportRowModel.prototype.isEmpty = function () {\n    return this.rowCount > 0;\n  };\n\n  ViewportRowModel.prototype.isRowsToRender = function () {\n    return this.rowCount > 0;\n  };\n\n  ViewportRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n    var firstIndex = _.missing(firstInRange) ? 0 : firstInRange.rowIndex;\n    var lastIndex = lastInRange.rowIndex;\n    var firstNodeOutOfRange = firstIndex < this.firstRow || firstIndex > this.lastRow;\n    var lastNodeOutOfRange = lastIndex < this.firstRow || lastIndex > this.lastRow;\n\n    if (firstNodeOutOfRange || lastNodeOutOfRange) {\n      return [];\n    }\n\n    var result = [];\n    var startIndex = firstIndex <= lastIndex ? firstIndex : lastIndex;\n    var endIndex = firstIndex <= lastIndex ? lastIndex : firstIndex;\n\n    for (var i = startIndex; i <= endIndex; i++) {\n      result.push(this.rowNodesByIndex[i]);\n    }\n\n    return result;\n  };\n\n  ViewportRowModel.prototype.forEachNode = function (callback) {\n    var _this = this;\n\n    var callbackCount = 0;\n    Object.keys(this.rowNodesByIndex).forEach(function (indexStr) {\n      var index = parseInt(indexStr, 10);\n      var rowNode = _this.rowNodesByIndex[index];\n      callback(rowNode, callbackCount);\n      callbackCount++;\n    });\n  };\n\n  ViewportRowModel.prototype.setRowData = function (rowData) {\n    var _this = this;\n\n    _.iterateObject(rowData, function (indexStr, dataItem) {\n      var index = parseInt(indexStr, 10); // we should never keep rows that we didn't specifically ask for, this\n      // guarantees the contract we have with the server.\n\n      if (index >= _this.firstRow && index <= _this.lastRow) {\n        var rowNode = _this.rowNodesByIndex[index]; // the abnormal case is we requested a row even though the grid didn't need it\n        // as a result of the paging and buffer (ie the row is off screen), in which\n        // case we need to create a new node now\n\n        if (_.missing(rowNode)) {\n          rowNode = _this.createBlankRowNode(index);\n          _this.rowNodesByIndex[index] = rowNode;\n        } // now we deffo have a row node, so set in the details\n        // if the grid already asked for this row (the normal case), then we would\n        // of put a placeholder node in place.\n\n\n        rowNode.setDataAndId(dataItem, index.toString());\n      }\n    });\n  };\n\n  ViewportRowModel.prototype.createBlankRowNode = function (rowIndex) {\n    var rowNode = new RowNode();\n    this.createBean(rowNode);\n    rowNode.setRowHeight(this.rowHeight);\n    rowNode.setRowTop(this.rowHeight * rowIndex);\n    rowNode.setRowIndex(rowIndex);\n    return rowNode;\n  };\n\n  ViewportRowModel.prototype.setRowCount = function (rowCount, keepRenderedRows) {\n    if (keepRenderedRows === void 0) {\n      keepRenderedRows = false;\n    }\n\n    if (rowCount === this.rowCount) {\n      return;\n    }\n\n    this.rowCount = rowCount;\n    var event = {\n      type: Events.EVENT_MODEL_UPDATED,\n      api: this.gridApi,\n      columnApi: this.columnApi,\n      newData: false,\n      newPage: false,\n      keepRenderedRows: keepRenderedRows,\n      animate: false\n    };\n    this.eventService.dispatchEvent(event);\n  };\n\n  ViewportRowModel.prototype.isRowPresent = function (rowNode) {\n    return false;\n  };\n\n  __decorate([Autowired('gridApi')], ViewportRowModel.prototype, \"gridApi\", void 0);\n\n  __decorate([Autowired('columnApi')], ViewportRowModel.prototype, \"columnApi\", void 0);\n\n  __decorate([Autowired('rowRenderer')], ViewportRowModel.prototype, \"rowRenderer\", void 0);\n\n  __decorate([PostConstruct], ViewportRowModel.prototype, \"init\", null);\n\n  __decorate([PreDestroy], ViewportRowModel.prototype, \"destroyDatasource\", null);\n\n  ViewportRowModel = __decorate([Bean('rowModel')], ViewportRowModel);\n  return ViewportRowModel;\n}(BeanStub);\n\nexport { ViewportRowModel };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/viewport-row-model/dist/es6/viewportRowModel/viewportRowModel.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","Autowired","Bean","BeanStub","Constants","Events","PostConstruct","PreDestroy","RowNode","ViewportRowModel","_super","_this","apply","firstRow","lastRow","rowCount","rowNodesByIndex","ensureRowHeightsValid","startPixel","endPixel","startLimitIndex","endLimitIndex","init","rowHeight","gridOptionsWrapper","getRowHeightAsNumber","addManagedListener","eventService","EVENT_VIEWPORT_CHANGED","onViewportChanged","bind","start","getViewportDatasource","setViewportDatasource","isLastRowIndexKnown","destroyDatasource","viewportDatasource","destroy","rowRenderer","datasourceChanged","calculateFirstRow","firstRenderedRow","bufferSize","getViewportRowModelBufferSize","pageSize","getViewportRowModelPageSize","afterBuffer","Math","floor","calculateLastRow","lastRenderedRow","result","ceil","lastRowIndex","min","event","newFirst","newLast","purgeRowsNotInViewport","setViewportRange","keys","forEach","indexStr","index","parseInt","console","warn","setRowCount","setRowData","getRow","getType","ROW_MODEL_TYPE_VIEWPORT","rowIndex","createBlankRowNode","getRowNode","id","undefined","forEachNode","rowNode","getRowCount","getRowIndexAtPixel","pixel","getRowBounds","rowTop","getTopLevelRowCount","getTopLevelRowDisplayedIndex","topLevelIndex","isEmpty","isRowsToRender","getNodesInRangeForSelection","firstInRange","lastInRange","firstIndex","missing","lastIndex","firstNodeOutOfRange","lastNodeOutOfRange","startIndex","endIndex","push","callback","callbackCount","rowData","iterateObject","dataItem","setDataAndId","toString","createBean","setRowHeight","setRowTop","setRowIndex","keepRenderedRows","type","EVENT_MODEL_UPDATED","api","gridApi","columnApi","newData","newPage","animate","dispatchEvent","isRowPresent"],"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA6B,YAAY;AACrD,MAAIC,aAAa,GAAG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAChCF,IAAAA,aAAa,GAAGG,MAAM,CAACC,cAAP,IACX;AAAEC,MAAAA,SAAS,EAAE;AAAb,iBAA6BC,KAA7B,IAAsC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AAAED,MAAAA,CAAC,CAACI,SAAF,GAAcH,CAAd;AAAkB,KAD/D,IAEZ,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAK,IAAIK,CAAT,IAAcL,CAAd,EAAiB,IAAIA,CAAC,CAACM,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AAAc,KAF9E;;AAGA,WAAOP,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAApB;AACH,GALD;;AAMA,SAAO,UAAUD,CAAV,EAAaC,CAAb,EAAgB;AACnBF,IAAAA,aAAa,CAACC,CAAD,EAAIC,CAAJ,CAAb;;AACA,aAASO,EAAT,GAAc;AAAE,WAAKC,WAAL,GAAmBT,CAAnB;AAAuB;;AACvCA,IAAAA,CAAC,CAACU,SAAF,GAAcT,CAAC,KAAK,IAAN,GAAaC,MAAM,CAACS,MAAP,CAAcV,CAAd,CAAb,IAAiCO,EAAE,CAACE,SAAH,GAAeT,CAAC,CAACS,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,GAJD;AAKH,CAZ2C,EAA5C;;AAaA,IAAII,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGd,MAAM,CAACmB,wBAAP,CAAgCP,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HhB,CAA3H;AACA,MAAI,OAAOsB,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EH,CAAC,GAAGE,OAAO,CAACC,QAAR,CAAiBV,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIQ,CAAC,GAAGX,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCK,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD,IAAIxB,CAAC,GAAGa,UAAU,CAACW,CAAD,CAAlB,EAAuBJ,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACoB,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQjB,CAAC,CAACc,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BpB,CAAC,CAACc,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAC7E,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAclB,MAAM,CAACuB,cAAP,CAAsBX,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,SAASM,CAAT,EAAYC,SAAZ,EAAuBC,IAAvB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,MAAlD,EAA0DC,aAA1D,EAAyEC,UAAzE,EAAqFC,OAArF,QAAoG,yBAApG;;AACA,IAAIC,gBAAgB,GAAkB,UAAUC,MAAV,EAAkB;AACpDtC,EAAAA,SAAS,CAACqC,gBAAD,EAAmBC,MAAnB,CAAT;;AACA,WAASD,gBAAT,GAA4B;AACxB,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBpB,SAAnB,CAAnB,IAAoD,IAAhE,CADwB,CAExB;;;AACAmB,IAAAA,KAAK,CAACE,QAAN,GAAiB,CAAC,CAAlB;AACAF,IAAAA,KAAK,CAACG,OAAN,GAAgB,CAAC,CAAjB,CAJwB,CAKxB;;AACAH,IAAAA,KAAK,CAACI,QAAN,GAAiB,CAAC,CAAlB;AACAJ,IAAAA,KAAK,CAACK,eAAN,GAAwB,EAAxB;AACA,WAAOL,KAAP;AACH,GAXmD,CAYpD;;;AACAF,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BiC,qBAA3B,GAAmD,UAAUC,UAAV,EAAsBC,QAAtB,EAAgCC,eAAhC,EAAiDC,aAAjD,EAAgE;AAAE,WAAO,KAAP;AAAe,GAApI;;AACAZ,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BsC,IAA3B,GAAkC,YAAY;AAC1C,SAAKC,SAAL,GAAiB,KAAKC,kBAAL,CAAwBC,oBAAxB,EAAjB;AACA,SAAKC,kBAAL,CAAwB,KAAKC,YAA7B,EAA2CtB,MAAM,CAACuB,sBAAlD,EAA0E,KAAKC,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAA1E;AACH,GAHD;;AAIArB,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2B+C,KAA3B,GAAmC,YAAY;AAC3C,QAAI,KAAKP,kBAAL,CAAwBQ,qBAAxB,EAAJ,EAAqD;AACjD,WAAKC,qBAAL,CAA2B,KAAKT,kBAAL,CAAwBQ,qBAAxB,EAA3B;AACH;AACJ,GAJD;;AAKAvB,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BkD,mBAA3B,GAAiD,YAAY;AACzD,WAAO,IAAP;AACH,GAFD;;AAGAzB,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BmD,iBAA3B,GAA+C,YAAY;AACvD,QAAI,CAAC,KAAKC,kBAAV,EAA8B;AAC1B;AACH;;AACD,QAAI,KAAKA,kBAAL,CAAwBC,OAA5B,EAAqC;AACjC,WAAKD,kBAAL,CAAwBC,OAAxB;AACH;;AACD,SAAKC,WAAL,CAAiBC,iBAAjB;AACA,SAAK1B,QAAL,GAAgB,CAAC,CAAjB;AACA,SAAKC,OAAL,GAAe,CAAC,CAAhB;AACH,GAVD;;AAWAL,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BwD,iBAA3B,GAA+C,UAAUC,gBAAV,EAA4B;AACvE,QAAIC,UAAU,GAAG,KAAKlB,kBAAL,CAAwBmB,6BAAxB,EAAjB;AACA,QAAIC,QAAQ,GAAG,KAAKpB,kBAAL,CAAwBqB,2BAAxB,EAAf;AACA,QAAIC,WAAW,GAAGL,gBAAgB,GAAGC,UAArC;;AACA,QAAII,WAAW,GAAG,CAAlB,EAAqB;AACjB,aAAO,CAAP;AACH;;AACD,WAAOC,IAAI,CAACC,KAAL,CAAWF,WAAW,GAAGF,QAAzB,IAAqCA,QAA5C;AACH,GARD;;AASAnC,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BiE,gBAA3B,GAA8C,UAAUC,eAAV,EAA2B;AACrE,QAAIA,eAAe,KAAK,CAAC,CAAzB,EAA4B;AACxB,aAAOA,eAAP;AACH;;AACD,QAAIR,UAAU,GAAG,KAAKlB,kBAAL,CAAwBmB,6BAAxB,EAAjB;AACA,QAAIC,QAAQ,GAAG,KAAKpB,kBAAL,CAAwBqB,2BAAxB,EAAf;AACA,QAAIC,WAAW,GAAGI,eAAe,GAAGR,UAApC;AACA,QAAIS,MAAM,GAAGJ,IAAI,CAACK,IAAL,CAAUN,WAAW,GAAGF,QAAxB,IAAoCA,QAAjD;AACA,QAAIS,YAAY,GAAG,KAAKtC,QAAL,GAAgB,CAAnC;AACA,WAAOgC,IAAI,CAACO,GAAL,CAASH,MAAT,EAAiBE,YAAjB,CAAP;AACH,GAVD;;AAWA5C,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2B6C,iBAA3B,GAA+C,UAAU0B,KAAV,EAAiB;AAC5D,QAAIC,QAAQ,GAAG,KAAKhB,iBAAL,CAAuBe,KAAK,CAAC1C,QAA7B,CAAf;AACA,QAAI4C,OAAO,GAAG,KAAKR,gBAAL,CAAsBM,KAAK,CAACzC,OAA5B,CAAd;;AACA,QAAI,KAAKD,QAAL,KAAkB2C,QAAlB,IAA8B,KAAK1C,OAAL,KAAiB2C,OAAnD,EAA4D;AACxD,WAAK5C,QAAL,GAAgB2C,QAAhB;AACA,WAAK1C,OAAL,GAAe2C,OAAf;AACA,WAAKC,sBAAL;;AACA,UAAI,KAAKtB,kBAAT,EAA6B;AACzB,aAAKA,kBAAL,CAAwBuB,gBAAxB,CAAyC,KAAK9C,QAA9C,EAAwD,KAAKC,OAA7D;AACH;AACJ;AACJ,GAXD;;AAYAL,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2B0E,sBAA3B,GAAoD,YAAY;AAC5D,QAAI/C,KAAK,GAAG,IAAZ;;AACAnC,IAAAA,MAAM,CAACoF,IAAP,CAAY,KAAK5C,eAAjB,EAAkC6C,OAAlC,CAA0C,UAAUC,QAAV,EAAoB;AAC1D,UAAIC,KAAK,GAAGC,QAAQ,CAACF,QAAD,EAAW,EAAX,CAApB;;AACA,UAAIC,KAAK,GAAGpD,KAAK,CAACE,QAAd,IAA0BkD,KAAK,GAAGpD,KAAK,CAACG,OAA5C,EAAqD;AACjD,eAAOH,KAAK,CAACK,eAAN,CAAsB+C,KAAtB,CAAP;AACH;AACJ,KALD;AAMH,GARD;;AASAtD,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BiD,qBAA3B,GAAmD,UAAUG,kBAAV,EAA8B;AAC7E,SAAKD,iBAAL;AACA,SAAKC,kBAAL,GAA0BA,kBAA1B;AACA,SAAKrB,QAAL,GAAgB,CAAhB;;AACA,QAAI,CAACqB,kBAAkB,CAACd,IAAxB,EAA8B;AAC1B2C,MAAAA,OAAO,CAACC,IAAR,CAAa,2CAAb;AACH,KAFD,MAGK;AACD9B,MAAAA,kBAAkB,CAACd,IAAnB,CAAwB;AACpB6C,QAAAA,WAAW,EAAE,KAAKA,WAAL,CAAiBrC,IAAjB,CAAsB,IAAtB,CADO;AAEpBsC,QAAAA,UAAU,EAAE,KAAKA,UAAL,CAAgBtC,IAAhB,CAAqB,IAArB,CAFQ;AAGpBuC,QAAAA,MAAM,EAAE,KAAKA,MAAL,CAAYvC,IAAZ,CAAiB,IAAjB;AAHY,OAAxB;AAKH;AACJ,GAdD;;AAeArB,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BsF,OAA3B,GAAqC,YAAY;AAC7C,WAAOlE,SAAS,CAACmE,uBAAjB;AACH,GAFD;;AAGA9D,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BqF,MAA3B,GAAoC,UAAUG,QAAV,EAAoB;AACpD,QAAI,CAAC,KAAKxD,eAAL,CAAqBwD,QAArB,CAAL,EAAqC;AACjC,WAAKxD,eAAL,CAAqBwD,QAArB,IAAiC,KAAKC,kBAAL,CAAwBD,QAAxB,CAAjC;AACH;;AACD,WAAO,KAAKxD,eAAL,CAAqBwD,QAArB,CAAP;AACH,GALD;;AAMA/D,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2B0F,UAA3B,GAAwC,UAAUC,EAAV,EAAc;AAClD,QAAIxB,MAAM,GAAGyB,SAAb;AACA,SAAKC,WAAL,CAAiB,UAAUC,OAAV,EAAmB;AAChC,UAAIA,OAAO,CAACH,EAAR,KAAeA,EAAnB,EAAuB;AACnBxB,QAAAA,MAAM,GAAG2B,OAAT;AACH;AACJ,KAJD;AAKA,WAAO3B,MAAP;AACH,GARD;;AASA1C,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2B+F,WAA3B,GAAyC,YAAY;AACjD,WAAO,KAAKhE,QAAZ;AACH,GAFD;;AAGAN,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BgG,kBAA3B,GAAgD,UAAUC,KAAV,EAAiB;AAC7D,QAAI,KAAK1D,SAAL,KAAmB,CAAvB,EAA0B;AAAE;AACxB,aAAOwB,IAAI,CAACC,KAAL,CAAWiC,KAAK,GAAG,KAAK1D,SAAxB,CAAP;AACH;;AACD,WAAO,CAAP;AACH,GALD;;AAMAd,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BkG,YAA3B,GAA0C,UAAUnB,KAAV,EAAiB;AACvD,WAAO;AACHxC,MAAAA,SAAS,EAAE,KAAKA,SADb;AAEH4D,MAAAA,MAAM,EAAE,KAAK5D,SAAL,GAAiBwC;AAFtB,KAAP;AAIH,GALD;;AAMAtD,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BoG,mBAA3B,GAAiD,YAAY;AACzD,WAAO,KAAKL,WAAL,EAAP;AACH,GAFD;;AAGAtE,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BqG,4BAA3B,GAA0D,UAAUC,aAAV,EAAyB;AAC/E,WAAOA,aAAP;AACH,GAFD;;AAGA7E,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BuG,OAA3B,GAAqC,YAAY;AAC7C,WAAO,KAAKxE,QAAL,GAAgB,CAAvB;AACH,GAFD;;AAGAN,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BwG,cAA3B,GAA4C,YAAY;AACpD,WAAO,KAAKzE,QAAL,GAAgB,CAAvB;AACH,GAFD;;AAGAN,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2ByG,2BAA3B,GAAyD,UAAUC,YAAV,EAAwBC,WAAxB,EAAqC;AAC1F,QAAIC,UAAU,GAAG5F,CAAC,CAAC6F,OAAF,CAAUH,YAAV,IAA0B,CAA1B,GAA8BA,YAAY,CAAClB,QAA5D;AACA,QAAIsB,SAAS,GAAGH,WAAW,CAACnB,QAA5B;AACA,QAAIuB,mBAAmB,GAAGH,UAAU,GAAG,KAAK/E,QAAlB,IAA8B+E,UAAU,GAAG,KAAK9E,OAA1E;AACA,QAAIkF,kBAAkB,GAAGF,SAAS,GAAG,KAAKjF,QAAjB,IAA6BiF,SAAS,GAAG,KAAKhF,OAAvE;;AACA,QAAIiF,mBAAmB,IAAIC,kBAA3B,EAA+C;AAC3C,aAAO,EAAP;AACH;;AACD,QAAI7C,MAAM,GAAG,EAAb;AACA,QAAI8C,UAAU,GAAGL,UAAU,IAAIE,SAAd,GAA0BF,UAA1B,GAAuCE,SAAxD;AACA,QAAII,QAAQ,GAAGN,UAAU,IAAIE,SAAd,GAA0BA,SAA1B,GAAsCF,UAArD;;AACA,SAAK,IAAI9F,CAAC,GAAGmG,UAAb,EAAyBnG,CAAC,IAAIoG,QAA9B,EAAwCpG,CAAC,EAAzC,EAA6C;AACzCqD,MAAAA,MAAM,CAACgD,IAAP,CAAY,KAAKnF,eAAL,CAAqBlB,CAArB,CAAZ;AACH;;AACD,WAAOqD,MAAP;AACH,GAfD;;AAgBA1C,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2B6F,WAA3B,GAAyC,UAAUuB,QAAV,EAAoB;AACzD,QAAIzF,KAAK,GAAG,IAAZ;;AACA,QAAI0F,aAAa,GAAG,CAApB;AACA7H,IAAAA,MAAM,CAACoF,IAAP,CAAY,KAAK5C,eAAjB,EAAkC6C,OAAlC,CAA0C,UAAUC,QAAV,EAAoB;AAC1D,UAAIC,KAAK,GAAGC,QAAQ,CAACF,QAAD,EAAW,EAAX,CAApB;AACA,UAAIgB,OAAO,GAAGnE,KAAK,CAACK,eAAN,CAAsB+C,KAAtB,CAAd;AACAqC,MAAAA,QAAQ,CAACtB,OAAD,EAAUuB,aAAV,CAAR;AACAA,MAAAA,aAAa;AAChB,KALD;AAMH,GATD;;AAUA5F,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BoF,UAA3B,GAAwC,UAAUkC,OAAV,EAAmB;AACvD,QAAI3F,KAAK,GAAG,IAAZ;;AACAX,IAAAA,CAAC,CAACuG,aAAF,CAAgBD,OAAhB,EAAyB,UAAUxC,QAAV,EAAoB0C,QAApB,EAA8B;AACnD,UAAIzC,KAAK,GAAGC,QAAQ,CAACF,QAAD,EAAW,EAAX,CAApB,CADmD,CAEnD;AACA;;AACA,UAAIC,KAAK,IAAIpD,KAAK,CAACE,QAAf,IAA2BkD,KAAK,IAAIpD,KAAK,CAACG,OAA9C,EAAuD;AACnD,YAAIgE,OAAO,GAAGnE,KAAK,CAACK,eAAN,CAAsB+C,KAAtB,CAAd,CADmD,CAEnD;AACA;AACA;;AACA,YAAI/D,CAAC,CAAC6F,OAAF,CAAUf,OAAV,CAAJ,EAAwB;AACpBA,UAAAA,OAAO,GAAGnE,KAAK,CAAC8D,kBAAN,CAAyBV,KAAzB,CAAV;AACApD,UAAAA,KAAK,CAACK,eAAN,CAAsB+C,KAAtB,IAA+Be,OAA/B;AACH,SARkD,CASnD;AACA;AACA;;;AACAA,QAAAA,OAAO,CAAC2B,YAAR,CAAqBD,QAArB,EAA+BzC,KAAK,CAAC2C,QAAN,EAA/B;AACH;AACJ,KAlBD;AAmBH,GArBD;;AAsBAjG,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2ByF,kBAA3B,GAAgD,UAAUD,QAAV,EAAoB;AAChE,QAAIM,OAAO,GAAG,IAAItE,OAAJ,EAAd;AACA,SAAKmG,UAAL,CAAgB7B,OAAhB;AACAA,IAAAA,OAAO,CAAC8B,YAAR,CAAqB,KAAKrF,SAA1B;AACAuD,IAAAA,OAAO,CAAC+B,SAAR,CAAkB,KAAKtF,SAAL,GAAiBiD,QAAnC;AACAM,IAAAA,OAAO,CAACgC,WAAR,CAAoBtC,QAApB;AACA,WAAOM,OAAP;AACH,GAPD;;AAQArE,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2BmF,WAA3B,GAAyC,UAAUpD,QAAV,EAAoBgG,gBAApB,EAAsC;AAC3E,QAAIA,gBAAgB,KAAK,KAAK,CAA9B,EAAiC;AAAEA,MAAAA,gBAAgB,GAAG,KAAnB;AAA2B;;AAC9D,QAAIhG,QAAQ,KAAK,KAAKA,QAAtB,EAAgC;AAC5B;AACH;;AACD,SAAKA,QAAL,GAAgBA,QAAhB;AACA,QAAIwC,KAAK,GAAG;AACRyD,MAAAA,IAAI,EAAE3G,MAAM,CAAC4G,mBADL;AAERC,MAAAA,GAAG,EAAE,KAAKC,OAFF;AAGRC,MAAAA,SAAS,EAAE,KAAKA,SAHR;AAIRC,MAAAA,OAAO,EAAE,KAJD;AAKRC,MAAAA,OAAO,EAAE,KALD;AAMRP,MAAAA,gBAAgB,EAAEA,gBANV;AAORQ,MAAAA,OAAO,EAAE;AAPD,KAAZ;AASA,SAAK5F,YAAL,CAAkB6F,aAAlB,CAAgCjE,KAAhC;AACH,GAhBD;;AAiBA9C,EAAAA,gBAAgB,CAACzB,SAAjB,CAA2ByI,YAA3B,GAA0C,UAAU3C,OAAV,EAAmB;AACzD,WAAO,KAAP;AACH,GAFD;;AAGA5F,EAAAA,UAAU,CAAC,CACPe,SAAS,CAAC,SAAD,CADF,CAAD,EAEPQ,gBAAgB,CAACzB,SAFV,EAEqB,SAFrB,EAEgC,KAAK,CAFrC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPe,SAAS,CAAC,WAAD,CADF,CAAD,EAEPQ,gBAAgB,CAACzB,SAFV,EAEqB,WAFrB,EAEkC,KAAK,CAFvC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPe,SAAS,CAAC,aAAD,CADF,CAAD,EAEPQ,gBAAgB,CAACzB,SAFV,EAEqB,aAFrB,EAEoC,KAAK,CAFzC,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPoB,aADO,CAAD,EAEPG,gBAAgB,CAACzB,SAFV,EAEqB,MAFrB,EAE6B,IAF7B,CAAV;;AAGAE,EAAAA,UAAU,CAAC,CACPqB,UADO,CAAD,EAEPE,gBAAgB,CAACzB,SAFV,EAEqB,mBAFrB,EAE0C,IAF1C,CAAV;;AAGAyB,EAAAA,gBAAgB,GAAGvB,UAAU,CAAC,CAC1BgB,IAAI,CAAC,UAAD,CADsB,CAAD,EAE1BO,gBAF0B,CAA7B;AAGA,SAAOA,gBAAP;AACH,CAzOqC,CAyOpCN,QAzOoC,CAAtC;;AA0OA,SAASM,gBAAT","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, Constants, Events, PostConstruct, PreDestroy, RowNode } from \"@ag-grid-community/core\";\nvar ViewportRowModel = /** @class */ (function (_super) {\n    __extends(ViewportRowModel, _super);\n    function ViewportRowModel() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        // rowRenderer tells us these\n        _this.firstRow = -1;\n        _this.lastRow = -1;\n        // datasource tells us this\n        _this.rowCount = -1;\n        _this.rowNodesByIndex = {};\n        return _this;\n    }\n    // we don't implement as lazy row heights is not supported in this row model\n    ViewportRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) { return false; };\n    ViewportRowModel.prototype.init = function () {\n        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n        this.addManagedListener(this.eventService, Events.EVENT_VIEWPORT_CHANGED, this.onViewportChanged.bind(this));\n    };\n    ViewportRowModel.prototype.start = function () {\n        if (this.gridOptionsWrapper.getViewportDatasource()) {\n            this.setViewportDatasource(this.gridOptionsWrapper.getViewportDatasource());\n        }\n    };\n    ViewportRowModel.prototype.isLastRowIndexKnown = function () {\n        return true;\n    };\n    ViewportRowModel.prototype.destroyDatasource = function () {\n        if (!this.viewportDatasource) {\n            return;\n        }\n        if (this.viewportDatasource.destroy) {\n            this.viewportDatasource.destroy();\n        }\n        this.rowRenderer.datasourceChanged();\n        this.firstRow = -1;\n        this.lastRow = -1;\n    };\n    ViewportRowModel.prototype.calculateFirstRow = function (firstRenderedRow) {\n        var bufferSize = this.gridOptionsWrapper.getViewportRowModelBufferSize();\n        var pageSize = this.gridOptionsWrapper.getViewportRowModelPageSize();\n        var afterBuffer = firstRenderedRow - bufferSize;\n        if (afterBuffer < 0) {\n            return 0;\n        }\n        return Math.floor(afterBuffer / pageSize) * pageSize;\n    };\n    ViewportRowModel.prototype.calculateLastRow = function (lastRenderedRow) {\n        if (lastRenderedRow === -1) {\n            return lastRenderedRow;\n        }\n        var bufferSize = this.gridOptionsWrapper.getViewportRowModelBufferSize();\n        var pageSize = this.gridOptionsWrapper.getViewportRowModelPageSize();\n        var afterBuffer = lastRenderedRow + bufferSize;\n        var result = Math.ceil(afterBuffer / pageSize) * pageSize;\n        var lastRowIndex = this.rowCount - 1;\n        return Math.min(result, lastRowIndex);\n    };\n    ViewportRowModel.prototype.onViewportChanged = function (event) {\n        var newFirst = this.calculateFirstRow(event.firstRow);\n        var newLast = this.calculateLastRow(event.lastRow);\n        if (this.firstRow !== newFirst || this.lastRow !== newLast) {\n            this.firstRow = newFirst;\n            this.lastRow = newLast;\n            this.purgeRowsNotInViewport();\n            if (this.viewportDatasource) {\n                this.viewportDatasource.setViewportRange(this.firstRow, this.lastRow);\n            }\n        }\n    };\n    ViewportRowModel.prototype.purgeRowsNotInViewport = function () {\n        var _this = this;\n        Object.keys(this.rowNodesByIndex).forEach(function (indexStr) {\n            var index = parseInt(indexStr, 10);\n            if (index < _this.firstRow || index > _this.lastRow) {\n                delete _this.rowNodesByIndex[index];\n            }\n        });\n    };\n    ViewportRowModel.prototype.setViewportDatasource = function (viewportDatasource) {\n        this.destroyDatasource();\n        this.viewportDatasource = viewportDatasource;\n        this.rowCount = 0;\n        if (!viewportDatasource.init) {\n            console.warn('AG Grid: viewport is missing init method.');\n        }\n        else {\n            viewportDatasource.init({\n                setRowCount: this.setRowCount.bind(this),\n                setRowData: this.setRowData.bind(this),\n                getRow: this.getRow.bind(this)\n            });\n        }\n    };\n    ViewportRowModel.prototype.getType = function () {\n        return Constants.ROW_MODEL_TYPE_VIEWPORT;\n    };\n    ViewportRowModel.prototype.getRow = function (rowIndex) {\n        if (!this.rowNodesByIndex[rowIndex]) {\n            this.rowNodesByIndex[rowIndex] = this.createBlankRowNode(rowIndex);\n        }\n        return this.rowNodesByIndex[rowIndex];\n    };\n    ViewportRowModel.prototype.getRowNode = function (id) {\n        var result = undefined;\n        this.forEachNode(function (rowNode) {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n        });\n        return result;\n    };\n    ViewportRowModel.prototype.getRowCount = function () {\n        return this.rowCount;\n    };\n    ViewportRowModel.prototype.getRowIndexAtPixel = function (pixel) {\n        if (this.rowHeight !== 0) { // avoid divide by zero error\n            return Math.floor(pixel / this.rowHeight);\n        }\n        return 0;\n    };\n    ViewportRowModel.prototype.getRowBounds = function (index) {\n        return {\n            rowHeight: this.rowHeight,\n            rowTop: this.rowHeight * index\n        };\n    };\n    ViewportRowModel.prototype.getTopLevelRowCount = function () {\n        return this.getRowCount();\n    };\n    ViewportRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n        return topLevelIndex;\n    };\n    ViewportRowModel.prototype.isEmpty = function () {\n        return this.rowCount > 0;\n    };\n    ViewportRowModel.prototype.isRowsToRender = function () {\n        return this.rowCount > 0;\n    };\n    ViewportRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n        var firstIndex = _.missing(firstInRange) ? 0 : firstInRange.rowIndex;\n        var lastIndex = lastInRange.rowIndex;\n        var firstNodeOutOfRange = firstIndex < this.firstRow || firstIndex > this.lastRow;\n        var lastNodeOutOfRange = lastIndex < this.firstRow || lastIndex > this.lastRow;\n        if (firstNodeOutOfRange || lastNodeOutOfRange) {\n            return [];\n        }\n        var result = [];\n        var startIndex = firstIndex <= lastIndex ? firstIndex : lastIndex;\n        var endIndex = firstIndex <= lastIndex ? lastIndex : firstIndex;\n        for (var i = startIndex; i <= endIndex; i++) {\n            result.push(this.rowNodesByIndex[i]);\n        }\n        return result;\n    };\n    ViewportRowModel.prototype.forEachNode = function (callback) {\n        var _this = this;\n        var callbackCount = 0;\n        Object.keys(this.rowNodesByIndex).forEach(function (indexStr) {\n            var index = parseInt(indexStr, 10);\n            var rowNode = _this.rowNodesByIndex[index];\n            callback(rowNode, callbackCount);\n            callbackCount++;\n        });\n    };\n    ViewportRowModel.prototype.setRowData = function (rowData) {\n        var _this = this;\n        _.iterateObject(rowData, function (indexStr, dataItem) {\n            var index = parseInt(indexStr, 10);\n            // we should never keep rows that we didn't specifically ask for, this\n            // guarantees the contract we have with the server.\n            if (index >= _this.firstRow && index <= _this.lastRow) {\n                var rowNode = _this.rowNodesByIndex[index];\n                // the abnormal case is we requested a row even though the grid didn't need it\n                // as a result of the paging and buffer (ie the row is off screen), in which\n                // case we need to create a new node now\n                if (_.missing(rowNode)) {\n                    rowNode = _this.createBlankRowNode(index);\n                    _this.rowNodesByIndex[index] = rowNode;\n                }\n                // now we deffo have a row node, so set in the details\n                // if the grid already asked for this row (the normal case), then we would\n                // of put a placeholder node in place.\n                rowNode.setDataAndId(dataItem, index.toString());\n            }\n        });\n    };\n    ViewportRowModel.prototype.createBlankRowNode = function (rowIndex) {\n        var rowNode = new RowNode();\n        this.createBean(rowNode);\n        rowNode.setRowHeight(this.rowHeight);\n        rowNode.setRowTop(this.rowHeight * rowIndex);\n        rowNode.setRowIndex(rowIndex);\n        return rowNode;\n    };\n    ViewportRowModel.prototype.setRowCount = function (rowCount, keepRenderedRows) {\n        if (keepRenderedRows === void 0) { keepRenderedRows = false; }\n        if (rowCount === this.rowCount) {\n            return;\n        }\n        this.rowCount = rowCount;\n        var event = {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            newData: false,\n            newPage: false,\n            keepRenderedRows: keepRenderedRows,\n            animate: false\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    ViewportRowModel.prototype.isRowPresent = function (rowNode) {\n        return false;\n    };\n    __decorate([\n        Autowired('gridApi')\n    ], ViewportRowModel.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], ViewportRowModel.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], ViewportRowModel.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        PostConstruct\n    ], ViewportRowModel.prototype, \"init\", null);\n    __decorate([\n        PreDestroy\n    ], ViewportRowModel.prototype, \"destroyDatasource\", null);\n    ViewportRowModel = __decorate([\n        Bean('rowModel')\n    ], ViewportRowModel);\n    return ViewportRowModel;\n}(BeanStub));\nexport { ViewportRowModel };\n"]},"metadata":{},"sourceType":"module"}