{"ast":null,"code":"var BatchRemover = function () {\n  function BatchRemover() {\n    this.allSets = {};\n    this.allParents = [];\n  }\n\n  BatchRemover.prototype.removeFromChildrenAfterGroup = function (parent, child) {\n    var set = this.getSet(parent);\n    set.removeFromChildrenAfterGroup[child.id] = true;\n  };\n\n  BatchRemover.prototype.removeFromAllLeafChildren = function (parent, child) {\n    var set = this.getSet(parent);\n    set.removeFromAllLeafChildren[child.id] = true;\n  };\n\n  BatchRemover.prototype.getSet = function (parent) {\n    if (!this.allSets[parent.id]) {\n      this.allSets[parent.id] = {\n        removeFromAllLeafChildren: {},\n        removeFromChildrenAfterGroup: {}\n      };\n      this.allParents.push(parent);\n    }\n\n    return this.allSets[parent.id];\n  };\n\n  BatchRemover.prototype.getAllParents = function () {\n    return this.allParents;\n  };\n\n  BatchRemover.prototype.flush = function () {\n    var _this = this;\n\n    this.allParents.forEach(function (parent) {\n      var nodeDetails = _this.allSets[parent.id];\n      parent.childrenAfterGroup = parent.childrenAfterGroup.filter(function (child) {\n        return !nodeDetails.removeFromChildrenAfterGroup[child.id];\n      });\n      parent.allLeafChildren = parent.allLeafChildren.filter(function (child) {\n        return !nodeDetails.removeFromAllLeafChildren[child.id];\n      });\n      parent.updateHasChildren();\n    });\n    this.allSets = {};\n    this.allParents.length = 0;\n  };\n\n  return BatchRemover;\n}();\n\nexport { BatchRemover };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-enterprise/row-grouping/dist/es6/rowGrouping/batchRemover.js"],"names":["BatchRemover","allSets","allParents","prototype","removeFromChildrenAfterGroup","parent","child","set","getSet","id","removeFromAllLeafChildren","push","getAllParents","flush","_this","forEach","nodeDetails","childrenAfterGroup","filter","allLeafChildren","updateHasChildren","length"],"mappings":"AAAA,IAAIA,YAAY,GAAkB,YAAY;AAC1C,WAASA,YAAT,GAAwB;AACpB,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACH;;AACDF,EAAAA,YAAY,CAACG,SAAb,CAAuBC,4BAAvB,GAAsD,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;AAC3E,QAAIC,GAAG,GAAG,KAAKC,MAAL,CAAYH,MAAZ,CAAV;AACAE,IAAAA,GAAG,CAACH,4BAAJ,CAAiCE,KAAK,CAACG,EAAvC,IAA6C,IAA7C;AACH,GAHD;;AAIAT,EAAAA,YAAY,CAACG,SAAb,CAAuBO,yBAAvB,GAAmD,UAAUL,MAAV,EAAkBC,KAAlB,EAAyB;AACxE,QAAIC,GAAG,GAAG,KAAKC,MAAL,CAAYH,MAAZ,CAAV;AACAE,IAAAA,GAAG,CAACG,yBAAJ,CAA8BJ,KAAK,CAACG,EAApC,IAA0C,IAA1C;AACH,GAHD;;AAIAT,EAAAA,YAAY,CAACG,SAAb,CAAuBK,MAAvB,GAAgC,UAAUH,MAAV,EAAkB;AAC9C,QAAI,CAAC,KAAKJ,OAAL,CAAaI,MAAM,CAACI,EAApB,CAAL,EAA8B;AAC1B,WAAKR,OAAL,CAAaI,MAAM,CAACI,EAApB,IAA0B;AACtBC,QAAAA,yBAAyB,EAAE,EADL;AAEtBN,QAAAA,4BAA4B,EAAE;AAFR,OAA1B;AAIA,WAAKF,UAAL,CAAgBS,IAAhB,CAAqBN,MAArB;AACH;;AACD,WAAO,KAAKJ,OAAL,CAAaI,MAAM,CAACI,EAApB,CAAP;AACH,GATD;;AAUAT,EAAAA,YAAY,CAACG,SAAb,CAAuBS,aAAvB,GAAuC,YAAY;AAC/C,WAAO,KAAKV,UAAZ;AACH,GAFD;;AAGAF,EAAAA,YAAY,CAACG,SAAb,CAAuBU,KAAvB,GAA+B,YAAY;AACvC,QAAIC,KAAK,GAAG,IAAZ;;AACA,SAAKZ,UAAL,CAAgBa,OAAhB,CAAwB,UAAUV,MAAV,EAAkB;AACtC,UAAIW,WAAW,GAAGF,KAAK,CAACb,OAAN,CAAcI,MAAM,CAACI,EAArB,CAAlB;AACAJ,MAAAA,MAAM,CAACY,kBAAP,GAA4BZ,MAAM,CAACY,kBAAP,CAA0BC,MAA1B,CAAiC,UAAUZ,KAAV,EAAiB;AAAE,eAAO,CAACU,WAAW,CAACZ,4BAAZ,CAAyCE,KAAK,CAACG,EAA/C,CAAR;AAA6D,OAAjH,CAA5B;AACAJ,MAAAA,MAAM,CAACc,eAAP,GAAyBd,MAAM,CAACc,eAAP,CAAuBD,MAAvB,CAA8B,UAAUZ,KAAV,EAAiB;AAAE,eAAO,CAACU,WAAW,CAACN,yBAAZ,CAAsCJ,KAAK,CAACG,EAA5C,CAAR;AAA0D,OAA3G,CAAzB;AACAJ,MAAAA,MAAM,CAACe,iBAAP;AACH,KALD;AAMA,SAAKnB,OAAL,GAAe,EAAf;AACA,SAAKC,UAAL,CAAgBmB,MAAhB,GAAyB,CAAzB;AACH,GAVD;;AAWA,SAAOrB,YAAP;AACH,CAtCiC,EAAlC;;AAuCA,SAASA,YAAT","sourcesContent":["var BatchRemover = /** @class */ (function () {\n    function BatchRemover() {\n        this.allSets = {};\n        this.allParents = [];\n    }\n    BatchRemover.prototype.removeFromChildrenAfterGroup = function (parent, child) {\n        var set = this.getSet(parent);\n        set.removeFromChildrenAfterGroup[child.id] = true;\n    };\n    BatchRemover.prototype.removeFromAllLeafChildren = function (parent, child) {\n        var set = this.getSet(parent);\n        set.removeFromAllLeafChildren[child.id] = true;\n    };\n    BatchRemover.prototype.getSet = function (parent) {\n        if (!this.allSets[parent.id]) {\n            this.allSets[parent.id] = {\n                removeFromAllLeafChildren: {},\n                removeFromChildrenAfterGroup: {}\n            };\n            this.allParents.push(parent);\n        }\n        return this.allSets[parent.id];\n    };\n    BatchRemover.prototype.getAllParents = function () {\n        return this.allParents;\n    };\n    BatchRemover.prototype.flush = function () {\n        var _this = this;\n        this.allParents.forEach(function (parent) {\n            var nodeDetails = _this.allSets[parent.id];\n            parent.childrenAfterGroup = parent.childrenAfterGroup.filter(function (child) { return !nodeDetails.removeFromChildrenAfterGroup[child.id]; });\n            parent.allLeafChildren = parent.allLeafChildren.filter(function (child) { return !nodeDetails.removeFromAllLeafChildren[child.id]; });\n            parent.updateHasChildren();\n        });\n        this.allSets = {};\n        this.allParents.length = 0;\n    };\n    return BatchRemover;\n}());\nexport { BatchRemover };\n"]},"metadata":{},"sourceType":"module"}