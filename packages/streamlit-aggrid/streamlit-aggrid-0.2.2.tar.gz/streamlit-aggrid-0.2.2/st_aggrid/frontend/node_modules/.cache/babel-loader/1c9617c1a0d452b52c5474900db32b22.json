{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, Autowired, Bean, BeanStub, ColumnGroup, Constants, GroupInstanceIdCreator } from \"@ag-grid-community/core\";\nexport var RowType;\n\n(function (RowType) {\n  RowType[RowType[\"HEADER_GROUPING\"] = 0] = \"HEADER_GROUPING\";\n  RowType[RowType[\"HEADER\"] = 1] = \"HEADER\";\n  RowType[RowType[\"BODY\"] = 2] = \"BODY\";\n})(RowType || (RowType = {}));\n\nvar GridSerializer = function (_super) {\n  __extends(GridSerializer, _super);\n\n  function GridSerializer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GridSerializer.prototype.serialize = function (gridSerializingSession, params) {\n    if (params === void 0) {\n      params = {};\n    }\n\n    var columnsToExport = this.getColumnsToExport(params.allColumns, params.columnKeys);\n\n    var serializeChain = _.compose( // first pass, put in the header names of the cols\n    this.prepareSession(columnsToExport), this.prependContent(params), this.exportColumnGroups(params, columnsToExport), this.exportHeaders(params, columnsToExport), this.processPinnedTopRows(params, columnsToExport), this.processRows(params, columnsToExport), this.processPinnedBottomRows(params, columnsToExport), this.appendContent(params));\n\n    return serializeChain(gridSerializingSession).parse();\n  };\n\n  GridSerializer.prototype.processRow = function (gridSerializingSession, params, columnsToExport, node) {\n    var rowSkipper = params.shouldRowBeSkipped || function () {\n      return false;\n    };\n\n    var gridOptionsWrapper = this.gridOptionsWrapper;\n    var context = gridOptionsWrapper.getContext();\n    var api = gridOptionsWrapper.getApi();\n    var columnApi = gridOptionsWrapper.getColumnApi();\n    var skipSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveSingleChildren();\n    var hideOpenParents = gridOptionsWrapper.isGroupHideOpenParents();\n    var skipLowestSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n    var isLeafNode = this.columnModel.isPivotMode() ? node.leafGroup : !node.group;\n    var skipRowGroups = params.skipGroups || params.skipRowGroups;\n    var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;\n    var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);\n\n    if (skipRowGroups && params.skipGroups) {\n      _.doOnce(function () {\n        return console.warn('AG Grid: Since v25.2 `skipGroups` has been renamed to `skipRowGroups`.');\n      }, 'gridSerializer-skipGroups');\n    }\n\n    if (!isLeafNode && (params.skipRowGroups || shouldSkipCurrentGroup || hideOpenParents) || params.onlySelected && !node.isSelected() || params.skipPinnedTop && node.rowPinned === 'top' || params.skipPinnedBottom && node.rowPinned === 'bottom') {\n      return;\n    } // if we are in pivotMode, then the grid will show the root node only\n    // if it's not a leaf group\n\n\n    var nodeIsRootNode = node.level === -1;\n\n    if (nodeIsRootNode && !node.leafGroup) {\n      return;\n    }\n\n    var shouldRowBeSkipped = rowSkipper({\n      node: node,\n      api: api,\n      context: context\n    });\n\n    if (shouldRowBeSkipped) {\n      return;\n    }\n\n    var rowAccumulator = gridSerializingSession.onNewBodyRow();\n    columnsToExport.forEach(function (column, index) {\n      rowAccumulator.onColumn(column, index, node);\n    });\n\n    if (params.getCustomContentBelowRow) {\n      var content = params.getCustomContentBelowRow({\n        node: node,\n        api: api,\n        columnApi: columnApi,\n        context: context\n      });\n\n      if (content) {\n        gridSerializingSession.addCustomContent(content);\n      }\n    }\n  };\n\n  GridSerializer.prototype.appendContent = function (params) {\n    return function (gridSerializingSession) {\n      var appendContent = params.customFooter || params.appendContent;\n\n      if (appendContent) {\n        if (params.customFooter) {\n          _.doOnce(function () {\n            return console.warn('AG Grid: Since version 25.2.0 the `customFooter` param has been deprecated. Use `appendContent` instead.');\n          }, 'gridSerializer-customFooter');\n        }\n\n        gridSerializingSession.addCustomContent(appendContent);\n      }\n\n      return gridSerializingSession;\n    };\n  };\n\n  GridSerializer.prototype.prependContent = function (params) {\n    return function (gridSerializingSession) {\n      var prependContent = params.customHeader || params.prependContent;\n\n      if (prependContent) {\n        if (params.customHeader) {\n          _.doOnce(function () {\n            return console.warn('AG Grid: Since version 25.2.0 the `customHeader` param has been deprecated. Use `prependContent` instead.');\n          }, 'gridSerializer-customHeader');\n        }\n\n        gridSerializingSession.addCustomContent(prependContent);\n      }\n\n      return gridSerializingSession;\n    };\n  };\n\n  GridSerializer.prototype.prepareSession = function (columnsToExport) {\n    return function (gridSerializingSession) {\n      gridSerializingSession.prepare(columnsToExport);\n      return gridSerializingSession;\n    };\n  };\n\n  GridSerializer.prototype.exportColumnGroups = function (params, columnsToExport) {\n    var _this = this;\n\n    return function (gridSerializingSession) {\n      if (!params.skipColumnGroupHeaders) {\n        var groupInstanceIdCreator = new GroupInstanceIdCreator();\n\n        var displayedGroups = _this.displayedGroupCreator.createDisplayedGroups(columnsToExport, _this.columnModel.getGridBalancedTree(), groupInstanceIdCreator, null);\n\n        _this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);\n      } else if (params.columnGroups) {\n        _.doOnce(function () {\n          return console.warn('AG Grid: Since v25.2 the `columnGroups` param has deprecated, and groups are exported by default.');\n        }, 'gridSerializer-columnGroups');\n      }\n\n      return gridSerializingSession;\n    };\n  };\n\n  GridSerializer.prototype.exportHeaders = function (params, columnsToExport) {\n    return function (gridSerializingSession) {\n      if (!params.skipHeader && !params.skipColumnHeaders) {\n        var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();\n        columnsToExport.forEach(function (column, index) {\n          gridRowIterator_1.onColumn(column, index, undefined);\n        });\n      } else if (params.skipHeader) {\n        _.doOnce(function () {\n          return console.warn('AG Grid: Since v25.2 the `skipHeader` param has been renamed to `skipColumnHeaders`.');\n        }, 'gridSerializer-skipHeader');\n      }\n\n      return gridSerializingSession;\n    };\n  };\n\n  GridSerializer.prototype.processPinnedTopRows = function (params, columnsToExport) {\n    var _this = this;\n\n    return function (gridSerializingSession) {\n      var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);\n\n      _this.pinnedRowModel.forEachPinnedTopRow(processRow);\n\n      return gridSerializingSession;\n    };\n  };\n\n  GridSerializer.prototype.processRows = function (params, columnsToExport) {\n    var _this = this;\n\n    return function (gridSerializingSession) {\n      // when in pivot mode, we always render cols on screen, never 'all columns'\n      var rowModel = _this.rowModel;\n      var rowModelType = rowModel.getType();\n      var usingCsrm = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n      var usingSsrm = rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;\n      var onlySelectedNonStandardModel = !usingCsrm && params.onlySelected;\n\n      var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);\n\n      if (_this.columnModel.isPivotMode()) {\n        if (usingCsrm) {\n          rowModel.forEachPivotNode(processRow);\n        } else {\n          // must be enterprise, so we can just loop through all the nodes\n          rowModel.forEachNode(processRow);\n        }\n      } else {\n        // onlySelectedAllPages: user doing pagination and wants selected items from\n        // other pages, so cannot use the standard row model as it won't have rows from\n        // other pages.\n        // onlySelectedNonStandardModel: if user wants selected in non standard row model\n        // (eg viewport) then again RowModel cannot be used, so need to use selected instead.\n        if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {\n          var selectedNodes = _this.selectionService.getSelectedNodes();\n\n          selectedNodes.forEach(processRow);\n        } else {\n          // here is everything else - including standard row model and selected. we don't use\n          // the selection model even when just using selected, so that the result is the order\n          // of the rows appearing on the screen.\n          if (usingCsrm) {\n            rowModel.forEachNodeAfterFilterAndSort(processRow);\n          } else if (usingSsrm) {\n            rowModel.forEachNodeAfterFilterAndSort(processRow);\n          } else {\n            rowModel.forEachNode(processRow);\n          }\n        }\n      }\n\n      return gridSerializingSession;\n    };\n  };\n\n  GridSerializer.prototype.processPinnedBottomRows = function (params, columnsToExport) {\n    var _this = this;\n\n    return function (gridSerializingSession) {\n      var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);\n\n      _this.pinnedRowModel.forEachPinnedBottomRow(processRow);\n\n      return gridSerializingSession;\n    };\n  };\n\n  GridSerializer.prototype.getColumnsToExport = function (allColumns, columnKeys) {\n    if (allColumns === void 0) {\n      allColumns = false;\n    }\n\n    var isPivotMode = this.columnModel.isPivotMode();\n\n    if (columnKeys && columnKeys.length) {\n      return this.columnModel.getGridColumns(columnKeys);\n    }\n\n    if (allColumns && !isPivotMode) {\n      // add auto group column for tree data\n      var columns = this.gridOptionsWrapper.isTreeData() ? this.columnModel.getGridColumns([Constants.GROUP_AUTO_COLUMN_ID]) : [];\n      return columns.concat(this.columnModel.getAllPrimaryColumns() || []);\n    }\n\n    return this.columnModel.getAllDisplayedColumns();\n  };\n\n  GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession, processGroupHeaderCallback) {\n    var directChildrenHeaderGroups = [];\n    displayedGroups.forEach(function (columnGroupChild) {\n      var columnGroup = columnGroupChild;\n\n      if (!columnGroup.getChildren) {\n        return;\n      }\n\n      columnGroup.getChildren().forEach(function (it) {\n        return directChildrenHeaderGroups.push(it);\n      });\n    });\n\n    if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {\n      this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);\n    }\n\n    if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {\n      this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);\n    }\n  };\n\n  GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups, processGroupHeaderCallback) {\n    var _this = this;\n\n    var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();\n    var columnIndex = 0;\n    displayedGroups.forEach(function (columnGroupChild) {\n      var columnGroup = columnGroupChild;\n      var name;\n\n      if (processGroupHeaderCallback) {\n        name = processGroupHeaderCallback({\n          columnGroup: columnGroup,\n          api: _this.gridOptionsWrapper.getApi(),\n          columnApi: _this.gridOptionsWrapper.getColumnApi(),\n          context: _this.gridOptionsWrapper.getContext()\n        });\n      } else {\n        name = _this.columnModel.getDisplayNameForColumnGroup(columnGroup, 'header');\n      }\n\n      gridRowIterator.onColumn(name || '', columnIndex++, columnGroup.getLeafColumns().length - 1);\n    });\n  };\n\n  __decorate([Autowired('displayedGroupCreator')], GridSerializer.prototype, \"displayedGroupCreator\", void 0);\n\n  __decorate([Autowired('columnModel')], GridSerializer.prototype, \"columnModel\", void 0);\n\n  __decorate([Autowired('rowModel')], GridSerializer.prototype, \"rowModel\", void 0);\n\n  __decorate([Autowired('pinnedRowModel')], GridSerializer.prototype, \"pinnedRowModel\", void 0);\n\n  __decorate([Autowired('selectionService')], GridSerializer.prototype, \"selectionService\", void 0);\n\n  GridSerializer = __decorate([Bean(\"gridSerializer\")], GridSerializer);\n  return GridSerializer;\n}(BeanStub);\n\nexport { GridSerializer };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/gridSerializer.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","Autowired","Bean","BeanStub","ColumnGroup","Constants","GroupInstanceIdCreator","RowType","GridSerializer","_super","apply","serialize","gridSerializingSession","params","columnsToExport","getColumnsToExport","allColumns","columnKeys","serializeChain","compose","prepareSession","prependContent","exportColumnGroups","exportHeaders","processPinnedTopRows","processRows","processPinnedBottomRows","appendContent","parse","processRow","node","rowSkipper","shouldRowBeSkipped","gridOptionsWrapper","context","getContext","api","getApi","columnApi","getColumnApi","skipSingleChildrenGroup","isGroupRemoveSingleChildren","hideOpenParents","isGroupHideOpenParents","skipLowestSingleChildrenGroup","isGroupRemoveLowestSingleChildren","isLeafNode","columnModel","isPivotMode","leafGroup","group","skipRowGroups","skipGroups","shouldSkipLowestGroup","shouldSkipCurrentGroup","allChildrenCount","doOnce","console","warn","onlySelected","isSelected","skipPinnedTop","rowPinned","skipPinnedBottom","nodeIsRootNode","level","rowAccumulator","onNewBodyRow","forEach","column","index","onColumn","getCustomContentBelowRow","content","addCustomContent","customFooter","customHeader","prepare","_this","skipColumnGroupHeaders","groupInstanceIdCreator","displayedGroups","displayedGroupCreator","createDisplayedGroups","getGridBalancedTree","recursivelyAddHeaderGroups","processGroupHeaderCallback","columnGroups","skipHeader","skipColumnHeaders","gridRowIterator_1","onNewHeaderRow","undefined","bind","pinnedRowModel","forEachPinnedTopRow","rowModel","rowModelType","getType","usingCsrm","ROW_MODEL_TYPE_CLIENT_SIDE","usingSsrm","ROW_MODEL_TYPE_SERVER_SIDE","onlySelectedNonStandardModel","forEachPivotNode","forEachNode","onlySelectedAllPages","selectedNodes","selectionService","getSelectedNodes","forEachNodeAfterFilterAndSort","forEachPinnedBottomRow","getGridColumns","columns","isTreeData","GROUP_AUTO_COLUMN_ID","concat","getAllPrimaryColumns","getAllDisplayedColumns","directChildrenHeaderGroups","columnGroupChild","columnGroup","getChildren","it","push","doAddHeaderHeader","gridRowIterator","onNewHeaderGroupingRow","columnIndex","name","getDisplayNameForColumnGroup","getLeafColumns"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, ColumnGroup, Constants, GroupInstanceIdCreator } from \"@ag-grid-community/core\";\nexport var RowType;\n(function (RowType) {\n    RowType[RowType[\"HEADER_GROUPING\"] = 0] = \"HEADER_GROUPING\";\n    RowType[RowType[\"HEADER\"] = 1] = \"HEADER\";\n    RowType[RowType[\"BODY\"] = 2] = \"BODY\";\n})(RowType || (RowType = {}));\nvar GridSerializer = /** @class */ (function (_super) {\n    __extends(GridSerializer, _super);\n    function GridSerializer() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    GridSerializer.prototype.serialize = function (gridSerializingSession, params) {\n        if (params === void 0) { params = {}; }\n        var columnsToExport = this.getColumnsToExport(params.allColumns, params.columnKeys);\n        var serializeChain = _.compose(\n        // first pass, put in the header names of the cols\n        this.prepareSession(columnsToExport), this.prependContent(params), this.exportColumnGroups(params, columnsToExport), this.exportHeaders(params, columnsToExport), this.processPinnedTopRows(params, columnsToExport), this.processRows(params, columnsToExport), this.processPinnedBottomRows(params, columnsToExport), this.appendContent(params));\n        return serializeChain(gridSerializingSession).parse();\n    };\n    GridSerializer.prototype.processRow = function (gridSerializingSession, params, columnsToExport, node) {\n        var rowSkipper = params.shouldRowBeSkipped || (function () { return false; });\n        var gridOptionsWrapper = this.gridOptionsWrapper;\n        var context = gridOptionsWrapper.getContext();\n        var api = gridOptionsWrapper.getApi();\n        var columnApi = gridOptionsWrapper.getColumnApi();\n        var skipSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveSingleChildren();\n        var hideOpenParents = gridOptionsWrapper.isGroupHideOpenParents();\n        var skipLowestSingleChildrenGroup = gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n        var isLeafNode = this.columnModel.isPivotMode() ? node.leafGroup : !node.group;\n        var skipRowGroups = params.skipGroups || params.skipRowGroups;\n        var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;\n        var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);\n        if (skipRowGroups && params.skipGroups) {\n            _.doOnce(function () { return console.warn('AG Grid: Since v25.2 `skipGroups` has been renamed to `skipRowGroups`.'); }, 'gridSerializer-skipGroups');\n        }\n        if ((!isLeafNode && (params.skipRowGroups || shouldSkipCurrentGroup || hideOpenParents)) ||\n            (params.onlySelected && !node.isSelected()) ||\n            (params.skipPinnedTop && node.rowPinned === 'top') ||\n            (params.skipPinnedBottom && node.rowPinned === 'bottom')) {\n            return;\n        }\n        // if we are in pivotMode, then the grid will show the root node only\n        // if it's not a leaf group\n        var nodeIsRootNode = node.level === -1;\n        if (nodeIsRootNode && !node.leafGroup) {\n            return;\n        }\n        var shouldRowBeSkipped = rowSkipper({ node: node, api: api, context: context });\n        if (shouldRowBeSkipped) {\n            return;\n        }\n        var rowAccumulator = gridSerializingSession.onNewBodyRow();\n        columnsToExport.forEach(function (column, index) {\n            rowAccumulator.onColumn(column, index, node);\n        });\n        if (params.getCustomContentBelowRow) {\n            var content = params.getCustomContentBelowRow({ node: node, api: api, columnApi: columnApi, context: context });\n            if (content) {\n                gridSerializingSession.addCustomContent(content);\n            }\n        }\n    };\n    GridSerializer.prototype.appendContent = function (params) {\n        return function (gridSerializingSession) {\n            var appendContent = params.customFooter || params.appendContent;\n            if (appendContent) {\n                if (params.customFooter) {\n                    _.doOnce(function () { return console.warn('AG Grid: Since version 25.2.0 the `customFooter` param has been deprecated. Use `appendContent` instead.'); }, 'gridSerializer-customFooter');\n                }\n                gridSerializingSession.addCustomContent(appendContent);\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.prependContent = function (params) {\n        return function (gridSerializingSession) {\n            var prependContent = params.customHeader || params.prependContent;\n            if (prependContent) {\n                if (params.customHeader) {\n                    _.doOnce(function () { return console.warn('AG Grid: Since version 25.2.0 the `customHeader` param has been deprecated. Use `prependContent` instead.'); }, 'gridSerializer-customHeader');\n                }\n                gridSerializingSession.addCustomContent(prependContent);\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.prepareSession = function (columnsToExport) {\n        return function (gridSerializingSession) {\n            gridSerializingSession.prepare(columnsToExport);\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.exportColumnGroups = function (params, columnsToExport) {\n        var _this = this;\n        return function (gridSerializingSession) {\n            if (!params.skipColumnGroupHeaders) {\n                var groupInstanceIdCreator = new GroupInstanceIdCreator();\n                var displayedGroups = _this.displayedGroupCreator.createDisplayedGroups(columnsToExport, _this.columnModel.getGridBalancedTree(), groupInstanceIdCreator, null);\n                _this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);\n            }\n            else if (params.columnGroups) {\n                _.doOnce(function () { return console.warn('AG Grid: Since v25.2 the `columnGroups` param has deprecated, and groups are exported by default.'); }, 'gridSerializer-columnGroups');\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.exportHeaders = function (params, columnsToExport) {\n        return function (gridSerializingSession) {\n            if (!params.skipHeader && !params.skipColumnHeaders) {\n                var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();\n                columnsToExport.forEach(function (column, index) {\n                    gridRowIterator_1.onColumn(column, index, undefined);\n                });\n            }\n            else if (params.skipHeader) {\n                _.doOnce(function () { return console.warn('AG Grid: Since v25.2 the `skipHeader` param has been renamed to `skipColumnHeaders`.'); }, 'gridSerializer-skipHeader');\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.processPinnedTopRows = function (params, columnsToExport) {\n        var _this = this;\n        return function (gridSerializingSession) {\n            var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);\n            _this.pinnedRowModel.forEachPinnedTopRow(processRow);\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.processRows = function (params, columnsToExport) {\n        var _this = this;\n        return function (gridSerializingSession) {\n            // when in pivot mode, we always render cols on screen, never 'all columns'\n            var rowModel = _this.rowModel;\n            var rowModelType = rowModel.getType();\n            var usingCsrm = rowModelType === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n            var usingSsrm = rowModelType === Constants.ROW_MODEL_TYPE_SERVER_SIDE;\n            var onlySelectedNonStandardModel = !usingCsrm && params.onlySelected;\n            var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);\n            if (_this.columnModel.isPivotMode()) {\n                if (usingCsrm) {\n                    rowModel.forEachPivotNode(processRow);\n                }\n                else {\n                    // must be enterprise, so we can just loop through all the nodes\n                    rowModel.forEachNode(processRow);\n                }\n            }\n            else {\n                // onlySelectedAllPages: user doing pagination and wants selected items from\n                // other pages, so cannot use the standard row model as it won't have rows from\n                // other pages.\n                // onlySelectedNonStandardModel: if user wants selected in non standard row model\n                // (eg viewport) then again RowModel cannot be used, so need to use selected instead.\n                if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {\n                    var selectedNodes = _this.selectionService.getSelectedNodes();\n                    selectedNodes.forEach(processRow);\n                }\n                else {\n                    // here is everything else - including standard row model and selected. we don't use\n                    // the selection model even when just using selected, so that the result is the order\n                    // of the rows appearing on the screen.\n                    if (usingCsrm) {\n                        rowModel.forEachNodeAfterFilterAndSort(processRow);\n                    }\n                    else if (usingSsrm) {\n                        rowModel.forEachNodeAfterFilterAndSort(processRow);\n                    }\n                    else {\n                        rowModel.forEachNode(processRow);\n                    }\n                }\n            }\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.processPinnedBottomRows = function (params, columnsToExport) {\n        var _this = this;\n        return function (gridSerializingSession) {\n            var processRow = _this.processRow.bind(_this, gridSerializingSession, params, columnsToExport);\n            _this.pinnedRowModel.forEachPinnedBottomRow(processRow);\n            return gridSerializingSession;\n        };\n    };\n    GridSerializer.prototype.getColumnsToExport = function (allColumns, columnKeys) {\n        if (allColumns === void 0) { allColumns = false; }\n        var isPivotMode = this.columnModel.isPivotMode();\n        if (columnKeys && columnKeys.length) {\n            return this.columnModel.getGridColumns(columnKeys);\n        }\n        if (allColumns && !isPivotMode) {\n            // add auto group column for tree data\n            var columns = this.gridOptionsWrapper.isTreeData()\n                ? this.columnModel.getGridColumns([Constants.GROUP_AUTO_COLUMN_ID])\n                : [];\n            return columns.concat(this.columnModel.getAllPrimaryColumns() || []);\n        }\n        return this.columnModel.getAllDisplayedColumns();\n    };\n    GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession, processGroupHeaderCallback) {\n        var directChildrenHeaderGroups = [];\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            if (!columnGroup.getChildren) {\n                return;\n            }\n            columnGroup.getChildren().forEach(function (it) { return directChildrenHeaderGroups.push(it); });\n        });\n        if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {\n            this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);\n        }\n        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {\n            this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);\n        }\n    };\n    GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups, processGroupHeaderCallback) {\n        var _this = this;\n        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();\n        var columnIndex = 0;\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            var name;\n            if (processGroupHeaderCallback) {\n                name = processGroupHeaderCallback({\n                    columnGroup: columnGroup,\n                    api: _this.gridOptionsWrapper.getApi(),\n                    columnApi: _this.gridOptionsWrapper.getColumnApi(),\n                    context: _this.gridOptionsWrapper.getContext()\n                });\n            }\n            else {\n                name = _this.columnModel.getDisplayNameForColumnGroup(columnGroup, 'header');\n            }\n            gridRowIterator.onColumn(name || '', columnIndex++, columnGroup.getLeafColumns().length - 1);\n        });\n    };\n    __decorate([\n        Autowired('displayedGroupCreator')\n    ], GridSerializer.prototype, \"displayedGroupCreator\", void 0);\n    __decorate([\n        Autowired('columnModel')\n    ], GridSerializer.prototype, \"columnModel\", void 0);\n    __decorate([\n        Autowired('rowModel')\n    ], GridSerializer.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('pinnedRowModel')\n    ], GridSerializer.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        Autowired('selectionService')\n    ], GridSerializer.prototype, \"selectionService\", void 0);\n    GridSerializer = __decorate([\n        Bean(\"gridSerializer\")\n    ], GridSerializer);\n    return GridSerializer;\n}(BeanStub));\nexport { GridSerializer };\n"]},"metadata":{},"sourceType":"module"}