{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.0.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { SimpleFilter } from \"./simpleFilter\";\n\nvar ScalarFilter = function (_super) {\n  __extends(ScalarFilter, _super);\n\n  function ScalarFilter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ScalarFilter.prototype.setParams = function (params) {\n    _super.prototype.setParams.call(this, params);\n\n    this.scalarFilterParams = params;\n    this.checkDeprecatedParams();\n  };\n\n  ScalarFilter.prototype.checkDeprecatedParams = function () {\n    if (this.scalarFilterParams.nullComparator) {\n      console.warn('AG Grid: Since v21.0, the property filterParams.nullComparator is deprecated. ' + 'Please use filterParams.includeBlanksInEquals, filterParams.includeBlanksInLessThan and ' + 'filterParams.includeBlanksInGreaterThan instead.');\n      this.scalarFilterParams.includeBlanksInEquals = this.scalarFilterParams.nullComparator.equals;\n      this.scalarFilterParams.includeBlanksInLessThan = this.scalarFilterParams.nullComparator.lessThan;\n      this.scalarFilterParams.includeBlanksInGreaterThan = this.scalarFilterParams.nullComparator.greaterThan;\n    }\n  };\n\n  ScalarFilter.prototype.individualConditionPasses = function (params, filterModel) {\n    var cellValue = this.scalarFilterParams.valueGetter(params.node);\n    var range = this.mapRangeFromModel(filterModel);\n    var filterValue = range.from;\n    var filterValueTo = range.to;\n    var filterType = filterModel.type;\n    var customFilterOption = this.optionsFactory.getCustomOption(filterType);\n\n    if (customFilterOption) {\n      // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\n      if (filterValue != null || customFilterOption.hideFilterInput) {\n        return customFilterOption.test(filterValue, cellValue);\n      }\n    }\n\n    if (cellValue == null) {\n      switch (filterType) {\n        case ScalarFilter.EQUALS:\n        case ScalarFilter.NOT_EQUAL:\n          if (this.scalarFilterParams.includeBlanksInEquals) {\n            return true;\n          }\n\n          break;\n\n        case ScalarFilter.GREATER_THAN:\n        case ScalarFilter.GREATER_THAN_OR_EQUAL:\n          if (this.scalarFilterParams.includeBlanksInGreaterThan) {\n            return true;\n          }\n\n          break;\n\n        case ScalarFilter.LESS_THAN:\n        case ScalarFilter.LESS_THAN_OR_EQUAL:\n          if (this.scalarFilterParams.includeBlanksInLessThan) {\n            return true;\n          }\n\n          break;\n\n        case ScalarFilter.IN_RANGE:\n          if (this.scalarFilterParams.includeBlanksInRange) {\n            return true;\n          }\n\n          break;\n      }\n\n      return false;\n    }\n\n    var comparator = this.comparator();\n    var compareResult = comparator(filterValue, cellValue);\n\n    switch (filterType) {\n      case ScalarFilter.EQUALS:\n        return compareResult === 0;\n\n      case ScalarFilter.NOT_EQUAL:\n        return compareResult !== 0;\n\n      case ScalarFilter.GREATER_THAN:\n        return compareResult > 0;\n\n      case ScalarFilter.GREATER_THAN_OR_EQUAL:\n        return compareResult >= 0;\n\n      case ScalarFilter.LESS_THAN:\n        return compareResult < 0;\n\n      case ScalarFilter.LESS_THAN_OR_EQUAL:\n        return compareResult <= 0;\n\n      case ScalarFilter.IN_RANGE:\n        {\n          var compareToResult = comparator(filterValueTo, cellValue);\n          return this.scalarFilterParams.inRangeInclusive ? compareResult >= 0 && compareToResult <= 0 : compareResult > 0 && compareToResult < 0;\n        }\n\n      default:\n        console.warn('AG Grid: Unexpected type of filter \"' + filterType + '\", it looks like the filter was configured with incorrect Filter Options');\n        return true;\n    }\n  };\n\n  return ScalarFilter;\n}(SimpleFilter);\n\nexport { ScalarFilter };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-community/core/dist/es6/filter/provided/scalarFilter.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","SimpleFilter","ScalarFilter","_super","apply","arguments","setParams","params","call","scalarFilterParams","checkDeprecatedParams","nullComparator","console","warn","includeBlanksInEquals","equals","includeBlanksInLessThan","lessThan","includeBlanksInGreaterThan","greaterThan","individualConditionPasses","filterModel","cellValue","valueGetter","node","range","mapRangeFromModel","filterValue","from","filterValueTo","to","filterType","type","customFilterOption","optionsFactory","getCustomOption","hideFilterInput","test","EQUALS","NOT_EQUAL","GREATER_THAN","GREATER_THAN_OR_EQUAL","LESS_THAN","LESS_THAN_OR_EQUAL","IN_RANGE","includeBlanksInRange","comparator","compareResult","compareToResult","inRangeInclusive"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.0.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { SimpleFilter } from \"./simpleFilter\";\nvar ScalarFilter = /** @class */ (function (_super) {\n    __extends(ScalarFilter, _super);\n    function ScalarFilter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ScalarFilter.prototype.setParams = function (params) {\n        _super.prototype.setParams.call(this, params);\n        this.scalarFilterParams = params;\n        this.checkDeprecatedParams();\n    };\n    ScalarFilter.prototype.checkDeprecatedParams = function () {\n        if (this.scalarFilterParams.nullComparator) {\n            console.warn('AG Grid: Since v21.0, the property filterParams.nullComparator is deprecated. ' +\n                'Please use filterParams.includeBlanksInEquals, filterParams.includeBlanksInLessThan and ' +\n                'filterParams.includeBlanksInGreaterThan instead.');\n            this.scalarFilterParams.includeBlanksInEquals = this.scalarFilterParams.nullComparator.equals;\n            this.scalarFilterParams.includeBlanksInLessThan = this.scalarFilterParams.nullComparator.lessThan;\n            this.scalarFilterParams.includeBlanksInGreaterThan = this.scalarFilterParams.nullComparator.greaterThan;\n        }\n    };\n    ScalarFilter.prototype.individualConditionPasses = function (params, filterModel) {\n        var cellValue = this.scalarFilterParams.valueGetter(params.node);\n        var range = this.mapRangeFromModel(filterModel);\n        var filterValue = range.from;\n        var filterValueTo = range.to;\n        var filterType = filterModel.type;\n        var customFilterOption = this.optionsFactory.getCustomOption(filterType);\n        if (customFilterOption) {\n            // only execute the custom filter if a value exists or a value isn't required, i.e. input is hidden\n            if (filterValue != null || customFilterOption.hideFilterInput) {\n                return customFilterOption.test(filterValue, cellValue);\n            }\n        }\n        if (cellValue == null) {\n            switch (filterType) {\n                case ScalarFilter.EQUALS:\n                case ScalarFilter.NOT_EQUAL:\n                    if (this.scalarFilterParams.includeBlanksInEquals) {\n                        return true;\n                    }\n                    break;\n                case ScalarFilter.GREATER_THAN:\n                case ScalarFilter.GREATER_THAN_OR_EQUAL:\n                    if (this.scalarFilterParams.includeBlanksInGreaterThan) {\n                        return true;\n                    }\n                    break;\n                case ScalarFilter.LESS_THAN:\n                case ScalarFilter.LESS_THAN_OR_EQUAL:\n                    if (this.scalarFilterParams.includeBlanksInLessThan) {\n                        return true;\n                    }\n                    break;\n                case ScalarFilter.IN_RANGE:\n                    if (this.scalarFilterParams.includeBlanksInRange) {\n                        return true;\n                    }\n                    break;\n            }\n            return false;\n        }\n        var comparator = this.comparator();\n        var compareResult = comparator(filterValue, cellValue);\n        switch (filterType) {\n            case ScalarFilter.EQUALS:\n                return compareResult === 0;\n            case ScalarFilter.NOT_EQUAL:\n                return compareResult !== 0;\n            case ScalarFilter.GREATER_THAN:\n                return compareResult > 0;\n            case ScalarFilter.GREATER_THAN_OR_EQUAL:\n                return compareResult >= 0;\n            case ScalarFilter.LESS_THAN:\n                return compareResult < 0;\n            case ScalarFilter.LESS_THAN_OR_EQUAL:\n                return compareResult <= 0;\n            case ScalarFilter.IN_RANGE: {\n                var compareToResult = comparator(filterValueTo, cellValue);\n                return this.scalarFilterParams.inRangeInclusive ?\n                    compareResult >= 0 && compareToResult <= 0 :\n                    compareResult > 0 && compareToResult < 0;\n            }\n            default:\n                console.warn('AG Grid: Unexpected type of filter \"' + filterType + '\", it looks like the filter was configured with incorrect Filter Options');\n                return true;\n        }\n    };\n    return ScalarFilter;\n}(SimpleFilter));\nexport { ScalarFilter };\n"]},"metadata":{},"sourceType":"module"}