{"ast":null,"code":"/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.0.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Column } from \"../../entities/column\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Constants } from \"../../constants/constants\";\nimport { PostConstruct } from \"../../context/context\";\nimport { setAriaColIndex, setAriaColSpan } from \"../../utils/aria\";\nimport { last } from \"../../utils/array\";\nimport { exists } from \"../../utils/generic\";\nimport { Events } from \"../../eventKeys\";\n\nvar SetLeftFeature = function (_super) {\n  __extends(SetLeftFeature, _super);\n\n  function SetLeftFeature(columnOrGroup, eCell, beans, colsSpanning) {\n    var _this = _super.call(this) || this;\n\n    _this.columnOrGroup = columnOrGroup;\n    _this.eCell = eCell;\n    _this.ariaEl = _this.eCell.querySelector('[role=columnheader]') || _this.eCell;\n    _this.colsSpanning = colsSpanning;\n    _this.beans = beans;\n    _this.printLayout = beans.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n    return _this;\n  }\n\n  SetLeftFeature.prototype.setColsSpanning = function (colsSpanning) {\n    this.colsSpanning = colsSpanning;\n    this.onLeftChanged();\n  };\n\n  SetLeftFeature.prototype.getColumnOrGroup = function () {\n    if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {\n      return last(this.colsSpanning);\n    }\n\n    return this.columnOrGroup;\n  };\n\n  SetLeftFeature.prototype.postConstruct = function () {\n    this.addManagedListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));\n    this.setLeftFirstTime(); // when in print layout, the left position is also dependent on the width of the pinned sections.\n    // so additionally update left if any column width changes.\n\n    if (this.printLayout) {\n      this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onLeftChanged.bind(this));\n    }\n  };\n\n  SetLeftFeature.prototype.setLeftFirstTime = function () {\n    var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();\n    var oldLeftExists = exists(this.columnOrGroup.getOldLeft());\n    var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;\n\n    if (animateColumnMove) {\n      this.animateInLeft();\n    } else {\n      this.onLeftChanged();\n    }\n  };\n\n  SetLeftFeature.prototype.animateInLeft = function () {\n    var _this = this;\n\n    var colOrGroup = this.getColumnOrGroup();\n    var left = colOrGroup.getLeft();\n    var oldLeft = colOrGroup.getOldLeft();\n    var oldActualLeft = this.modifyLeftForPrintLayout(colOrGroup, oldLeft);\n    var actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);\n    this.setLeft(oldActualLeft); // we must keep track of the left we want to set to, as this would otherwise lead to a race\n    // condition, if the user changed the left value many times in one VM turn, then we want to make\n    // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left\n    // position. eg if user changes column position twice, then setLeft() below executes twice in next\n    // VM turn, but only one (the correct one) should get applied.\n\n    this.actualLeft = actualLeft;\n    this.beans.columnAnimationService.executeNextVMTurn(function () {\n      // test this left value is the latest one to be applied, and if not, do nothing\n      if (_this.actualLeft === actualLeft) {\n        _this.setLeft(actualLeft);\n      }\n    });\n  };\n\n  SetLeftFeature.prototype.onLeftChanged = function () {\n    var colOrGroup = this.getColumnOrGroup();\n    var left = colOrGroup.getLeft();\n    this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);\n    this.setLeft(this.actualLeft);\n  };\n\n  SetLeftFeature.prototype.modifyLeftForPrintLayout = function (colOrGroup, leftPosition) {\n    if (!this.printLayout) {\n      return leftPosition;\n    }\n\n    if (colOrGroup.getPinned() === Constants.PINNED_LEFT) {\n      return leftPosition;\n    }\n\n    var leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();\n\n    if (colOrGroup.getPinned() === Constants.PINNED_RIGHT) {\n      var bodyWidth = this.beans.columnModel.getBodyContainerWidth();\n      return leftWidth + bodyWidth + leftPosition;\n    } // is in body\n\n\n    return leftWidth + leftPosition;\n  };\n\n  SetLeftFeature.prototype.setLeft = function (value) {\n    // if the value is null, then that means the column is no longer\n    // displayed. there is logic in the rendering to fade these columns\n    // out, so we don't try and change their left positions.\n    if (exists(value)) {\n      this.eCell.style.left = value + \"px\";\n    }\n\n    var indexColumn;\n\n    if (this.columnOrGroup instanceof Column) {\n      indexColumn = this.columnOrGroup;\n    } else {\n      var columnGroup = this.columnOrGroup;\n      var children = columnGroup.getLeafColumns();\n\n      if (!children.length) {\n        return;\n      }\n\n      if (children.length > 1) {\n        setAriaColSpan(this.ariaEl, children.length);\n      }\n\n      indexColumn = children[0];\n    }\n\n    var index = this.beans.columnModel.getAriaColumnIndex(indexColumn);\n    setAriaColIndex(this.ariaEl, index);\n  };\n\n  __decorate([PostConstruct], SetLeftFeature.prototype, \"postConstruct\", null);\n\n  return SetLeftFeature;\n}(BeanStub);\n\nexport { SetLeftFeature };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-community/core/dist/es6/rendering/features/setLeftFeature.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Column","BeanStub","Constants","PostConstruct","setAriaColIndex","setAriaColSpan","last","exists","Events","SetLeftFeature","_super","columnOrGroup","eCell","beans","colsSpanning","_this","call","ariaEl","querySelector","printLayout","gridOptionsWrapper","getDomLayout","DOM_LAYOUT_PRINT","setColsSpanning","onLeftChanged","getColumnOrGroup","isEnableRtl","postConstruct","addManagedListener","EVENT_LEFT_CHANGED","bind","setLeftFirstTime","eventService","EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED","suppressMoveAnimation","isSuppressColumnMoveAnimation","oldLeftExists","getOldLeft","animateColumnMove","columnAnimationService","isActive","animateInLeft","colOrGroup","left","getLeft","oldLeft","oldActualLeft","modifyLeftForPrintLayout","actualLeft","setLeft","executeNextVMTurn","leftPosition","getPinned","PINNED_LEFT","leftWidth","columnModel","getDisplayedColumnsLeftWidth","PINNED_RIGHT","bodyWidth","getBodyContainerWidth","value","style","indexColumn","columnGroup","children","getLeafColumns","index","getAriaColumnIndex"],"mappings":"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","sourcesContent":["/**\n * @ag-grid-community/core - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components\n * @version v26.0.0\n * @link http://www.ag-grid.com/\n * @license MIT\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Column } from \"../../entities/column\";\nimport { BeanStub } from \"../../context/beanStub\";\nimport { Constants } from \"../../constants/constants\";\nimport { PostConstruct } from \"../../context/context\";\nimport { setAriaColIndex, setAriaColSpan } from \"../../utils/aria\";\nimport { last } from \"../../utils/array\";\nimport { exists } from \"../../utils/generic\";\nimport { Events } from \"../../eventKeys\";\nvar SetLeftFeature = /** @class */ (function (_super) {\n    __extends(SetLeftFeature, _super);\n    function SetLeftFeature(columnOrGroup, eCell, beans, colsSpanning) {\n        var _this = _super.call(this) || this;\n        _this.columnOrGroup = columnOrGroup;\n        _this.eCell = eCell;\n        _this.ariaEl = _this.eCell.querySelector('[role=columnheader]') || _this.eCell;\n        _this.colsSpanning = colsSpanning;\n        _this.beans = beans;\n        _this.printLayout = beans.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_PRINT;\n        return _this;\n    }\n    SetLeftFeature.prototype.setColsSpanning = function (colsSpanning) {\n        this.colsSpanning = colsSpanning;\n        this.onLeftChanged();\n    };\n    SetLeftFeature.prototype.getColumnOrGroup = function () {\n        if (this.beans.gridOptionsWrapper.isEnableRtl() && this.colsSpanning) {\n            return last(this.colsSpanning);\n        }\n        return this.columnOrGroup;\n    };\n    SetLeftFeature.prototype.postConstruct = function () {\n        this.addManagedListener(this.columnOrGroup, Column.EVENT_LEFT_CHANGED, this.onLeftChanged.bind(this));\n        this.setLeftFirstTime();\n        // when in print layout, the left position is also dependent on the width of the pinned sections.\n        // so additionally update left if any column width changes.\n        if (this.printLayout) {\n            this.addManagedListener(this.eventService, Events.EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED, this.onLeftChanged.bind(this));\n        }\n    };\n    SetLeftFeature.prototype.setLeftFirstTime = function () {\n        var suppressMoveAnimation = this.beans.gridOptionsWrapper.isSuppressColumnMoveAnimation();\n        var oldLeftExists = exists(this.columnOrGroup.getOldLeft());\n        var animateColumnMove = this.beans.columnAnimationService.isActive() && oldLeftExists && !suppressMoveAnimation;\n        if (animateColumnMove) {\n            this.animateInLeft();\n        }\n        else {\n            this.onLeftChanged();\n        }\n    };\n    SetLeftFeature.prototype.animateInLeft = function () {\n        var _this = this;\n        var colOrGroup = this.getColumnOrGroup();\n        var left = colOrGroup.getLeft();\n        var oldLeft = colOrGroup.getOldLeft();\n        var oldActualLeft = this.modifyLeftForPrintLayout(colOrGroup, oldLeft);\n        var actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);\n        this.setLeft(oldActualLeft);\n        // we must keep track of the left we want to set to, as this would otherwise lead to a race\n        // condition, if the user changed the left value many times in one VM turn, then we want to make\n        // make sure the actualLeft we set in the timeout below (in the next VM turn) is the correct left\n        // position. eg if user changes column position twice, then setLeft() below executes twice in next\n        // VM turn, but only one (the correct one) should get applied.\n        this.actualLeft = actualLeft;\n        this.beans.columnAnimationService.executeNextVMTurn(function () {\n            // test this left value is the latest one to be applied, and if not, do nothing\n            if (_this.actualLeft === actualLeft) {\n                _this.setLeft(actualLeft);\n            }\n        });\n    };\n    SetLeftFeature.prototype.onLeftChanged = function () {\n        var colOrGroup = this.getColumnOrGroup();\n        var left = colOrGroup.getLeft();\n        this.actualLeft = this.modifyLeftForPrintLayout(colOrGroup, left);\n        this.setLeft(this.actualLeft);\n    };\n    SetLeftFeature.prototype.modifyLeftForPrintLayout = function (colOrGroup, leftPosition) {\n        if (!this.printLayout) {\n            return leftPosition;\n        }\n        if (colOrGroup.getPinned() === Constants.PINNED_LEFT) {\n            return leftPosition;\n        }\n        var leftWidth = this.beans.columnModel.getDisplayedColumnsLeftWidth();\n        if (colOrGroup.getPinned() === Constants.PINNED_RIGHT) {\n            var bodyWidth = this.beans.columnModel.getBodyContainerWidth();\n            return leftWidth + bodyWidth + leftPosition;\n        }\n        // is in body\n        return leftWidth + leftPosition;\n    };\n    SetLeftFeature.prototype.setLeft = function (value) {\n        // if the value is null, then that means the column is no longer\n        // displayed. there is logic in the rendering to fade these columns\n        // out, so we don't try and change their left positions.\n        if (exists(value)) {\n            this.eCell.style.left = value + \"px\";\n        }\n        var indexColumn;\n        if (this.columnOrGroup instanceof Column) {\n            indexColumn = this.columnOrGroup;\n        }\n        else {\n            var columnGroup = this.columnOrGroup;\n            var children = columnGroup.getLeafColumns();\n            if (!children.length) {\n                return;\n            }\n            if (children.length > 1) {\n                setAriaColSpan(this.ariaEl, children.length);\n            }\n            indexColumn = children[0];\n        }\n        var index = this.beans.columnModel.getAriaColumnIndex(indexColumn);\n        setAriaColIndex(this.ariaEl, index);\n    };\n    __decorate([\n        PostConstruct\n    ], SetLeftFeature.prototype, \"postConstruct\", null);\n    return SetLeftFeature;\n}(BeanStub));\nexport { SetLeftFeature };\n"]},"metadata":{},"sourceType":"module"}