{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { _, PostConstruct, PreDestroy, RowNode, RowNodeBlock } from \"@ag-grid-community/core\";\n\nvar InfiniteBlock = function (_super) {\n  __extends(InfiniteBlock, _super);\n\n  function InfiniteBlock(id, parentCache, params) {\n    var _this = _super.call(this, id) || this;\n\n    _this.parentCache = parentCache;\n    _this.params = params; // we don't need to calculate these now, as the inputs don't change,\n    // however it makes the code easier to read if we work them out up front\n\n    _this.startRow = id * params.blockSize;\n    _this.endRow = _this.startRow + params.blockSize;\n    return _this;\n  }\n\n  InfiniteBlock.prototype.postConstruct = function () {\n    this.createRowNodes();\n  };\n\n  InfiniteBlock.prototype.getBlockStateJson = function () {\n    return {\n      id: '' + this.getId(),\n      state: {\n        blockNumber: this.getId(),\n        startRow: this.getStartRow(),\n        endRow: this.getEndRow(),\n        pageStatus: this.getState()\n      }\n    };\n  };\n\n  InfiniteBlock.prototype.setDataAndId = function (rowNode, data, index) {\n    if (_.exists(data)) {\n      // this means if the user is not providing id's we just use the\n      // index for the row. this will allow selection to work (that is based\n      // on index) as long user is not inserting or deleting rows,\n      // or wanting to keep selection between server side sorting or filtering\n      rowNode.setDataAndId(data, index.toString());\n    } else {\n      rowNode.setDataAndId(undefined, undefined);\n    }\n  };\n\n  InfiniteBlock.prototype.loadFromDatasource = function () {\n    var _this = this;\n\n    var params = this.createLoadParams();\n\n    if (_.missing(this.params.datasource.getRows)) {\n      console.warn(\"AG Grid: datasource is missing getRows method\");\n      return;\n    } // put in timeout, to force result to be async\n\n\n    window.setTimeout(function () {\n      _this.params.datasource.getRows(params);\n    }, 0);\n  };\n\n  InfiniteBlock.prototype.processServerFail = function () {// todo - this method has better handling in SSRM\n  };\n\n  InfiniteBlock.prototype.createLoadParams = function () {\n    // PROBLEM . . . . when the user sets sort via colDef.sort, then this code\n    // is executing before the sort is set up, so server is not getting the sort\n    // model. need to change with regards order - so the server side request is\n    // AFTER thus it gets the right sort model.\n    var params = {\n      startRow: this.getStartRow(),\n      endRow: this.getEndRow(),\n      successCallback: this.pageLoaded.bind(this, this.getVersion()),\n      failCallback: this.pageLoadFailed.bind(this, this.getVersion()),\n      sortModel: this.params.sortModel,\n      filterModel: this.params.filterModel,\n      context: this.gridOptionsWrapper.getContext()\n    };\n    return params;\n  };\n\n  InfiniteBlock.prototype.forEachNode = function (callback, sequence, rowCount) {\n    var _this = this;\n\n    this.rowNodes.forEach(function (rowNode, index) {\n      var rowIndex = _this.startRow + index;\n\n      if (rowIndex < rowCount) {\n        callback(rowNode, sequence.next());\n      }\n    });\n  };\n\n  InfiniteBlock.prototype.getLastAccessed = function () {\n    return this.lastAccessed;\n  };\n\n  InfiniteBlock.prototype.getRow = function (rowIndex, dontTouchLastAccessed) {\n    if (dontTouchLastAccessed === void 0) {\n      dontTouchLastAccessed = false;\n    }\n\n    if (!dontTouchLastAccessed) {\n      this.lastAccessed = this.params.lastAccessedSequence.next();\n    }\n\n    var localIndex = rowIndex - this.startRow;\n    return this.rowNodes[localIndex];\n  };\n\n  InfiniteBlock.prototype.getStartRow = function () {\n    return this.startRow;\n  };\n\n  InfiniteBlock.prototype.getEndRow = function () {\n    return this.endRow;\n  }; // creates empty row nodes, data is missing as not loaded yet\n\n\n  InfiniteBlock.prototype.createRowNodes = function () {\n    this.rowNodes = [];\n\n    for (var i = 0; i < this.params.blockSize; i++) {\n      var rowIndex = this.startRow + i;\n      var rowNode = this.getContext().createBean(new RowNode());\n      rowNode.setRowHeight(this.params.rowHeight);\n      rowNode.uiLevel = 0;\n      rowNode.setRowIndex(rowIndex);\n      rowNode.setRowTop(this.params.rowHeight * rowIndex);\n      this.rowNodes.push(rowNode);\n    }\n  };\n\n  InfiniteBlock.prototype.processServerResult = function (params) {\n    var _this = this;\n\n    this.rowNodes.forEach(function (rowNode, index) {\n      var data = params.rowData ? params.rowData[index] : undefined;\n\n      _this.setDataAndId(rowNode, data, _this.startRow + index);\n    });\n    var finalRowCount = params.rowCount != null && params.rowCount >= 0 ? params.rowCount : undefined;\n    this.parentCache.pageLoaded(this, finalRowCount);\n  };\n\n  InfiniteBlock.prototype.destroyRowNodes = function () {\n    this.rowNodes.forEach(function (rowNode) {\n      // this is needed, so row render knows to fade out the row, otherwise it\n      // sees row top is present, and thinks the row should be shown.\n      rowNode.clearRowTopAndRowIndex();\n    });\n  };\n\n  __decorate([PostConstruct], InfiniteBlock.prototype, \"postConstruct\", null);\n\n  __decorate([PreDestroy], InfiniteBlock.prototype, \"destroyRowNodes\", null);\n\n  return InfiniteBlock;\n}(RowNodeBlock);\n\nexport { InfiniteBlock };","map":{"version":3,"sources":["C:/dev/streamlit-aggrid/st_aggrid/frontend/node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModel/infiniteBlock.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","_","PostConstruct","PreDestroy","RowNode","RowNodeBlock","InfiniteBlock","_super","id","parentCache","params","_this","call","startRow","blockSize","endRow","postConstruct","createRowNodes","getBlockStateJson","getId","state","blockNumber","getStartRow","getEndRow","pageStatus","getState","setDataAndId","rowNode","data","index","exists","toString","undefined","loadFromDatasource","createLoadParams","missing","datasource","getRows","console","warn","window","setTimeout","processServerFail","successCallback","pageLoaded","bind","getVersion","failCallback","pageLoadFailed","sortModel","filterModel","context","gridOptionsWrapper","getContext","forEachNode","callback","sequence","rowCount","rowNodes","forEach","rowIndex","next","getLastAccessed","lastAccessed","getRow","dontTouchLastAccessed","lastAccessedSequence","localIndex","createBean","setRowHeight","rowHeight","uiLevel","setRowIndex","setRowTop","push","processServerResult","rowData","finalRowCount","destroyRowNodes","clearRowTopAndRowIndex"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, PostConstruct, PreDestroy, RowNode, RowNodeBlock } from \"@ag-grid-community/core\";\nvar InfiniteBlock = /** @class */ (function (_super) {\n    __extends(InfiniteBlock, _super);\n    function InfiniteBlock(id, parentCache, params) {\n        var _this = _super.call(this, id) || this;\n        _this.parentCache = parentCache;\n        _this.params = params;\n        // we don't need to calculate these now, as the inputs don't change,\n        // however it makes the code easier to read if we work them out up front\n        _this.startRow = id * params.blockSize;\n        _this.endRow = _this.startRow + params.blockSize;\n        return _this;\n    }\n    InfiniteBlock.prototype.postConstruct = function () {\n        this.createRowNodes();\n    };\n    InfiniteBlock.prototype.getBlockStateJson = function () {\n        return {\n            id: '' + this.getId(),\n            state: {\n                blockNumber: this.getId(),\n                startRow: this.getStartRow(),\n                endRow: this.getEndRow(),\n                pageStatus: this.getState()\n            }\n        };\n    };\n    InfiniteBlock.prototype.setDataAndId = function (rowNode, data, index) {\n        if (_.exists(data)) {\n            // this means if the user is not providing id's we just use the\n            // index for the row. this will allow selection to work (that is based\n            // on index) as long user is not inserting or deleting rows,\n            // or wanting to keep selection between server side sorting or filtering\n            rowNode.setDataAndId(data, index.toString());\n        }\n        else {\n            rowNode.setDataAndId(undefined, undefined);\n        }\n    };\n    InfiniteBlock.prototype.loadFromDatasource = function () {\n        var _this = this;\n        var params = this.createLoadParams();\n        if (_.missing(this.params.datasource.getRows)) {\n            console.warn(\"AG Grid: datasource is missing getRows method\");\n            return;\n        }\n        // put in timeout, to force result to be async\n        window.setTimeout(function () {\n            _this.params.datasource.getRows(params);\n        }, 0);\n    };\n    InfiniteBlock.prototype.processServerFail = function () {\n        // todo - this method has better handling in SSRM\n    };\n    InfiniteBlock.prototype.createLoadParams = function () {\n        // PROBLEM . . . . when the user sets sort via colDef.sort, then this code\n        // is executing before the sort is set up, so server is not getting the sort\n        // model. need to change with regards order - so the server side request is\n        // AFTER thus it gets the right sort model.\n        var params = {\n            startRow: this.getStartRow(),\n            endRow: this.getEndRow(),\n            successCallback: this.pageLoaded.bind(this, this.getVersion()),\n            failCallback: this.pageLoadFailed.bind(this, this.getVersion()),\n            sortModel: this.params.sortModel,\n            filterModel: this.params.filterModel,\n            context: this.gridOptionsWrapper.getContext()\n        };\n        return params;\n    };\n    InfiniteBlock.prototype.forEachNode = function (callback, sequence, rowCount) {\n        var _this = this;\n        this.rowNodes.forEach(function (rowNode, index) {\n            var rowIndex = _this.startRow + index;\n            if (rowIndex < rowCount) {\n                callback(rowNode, sequence.next());\n            }\n        });\n    };\n    InfiniteBlock.prototype.getLastAccessed = function () {\n        return this.lastAccessed;\n    };\n    InfiniteBlock.prototype.getRow = function (rowIndex, dontTouchLastAccessed) {\n        if (dontTouchLastAccessed === void 0) { dontTouchLastAccessed = false; }\n        if (!dontTouchLastAccessed) {\n            this.lastAccessed = this.params.lastAccessedSequence.next();\n        }\n        var localIndex = rowIndex - this.startRow;\n        return this.rowNodes[localIndex];\n    };\n    InfiniteBlock.prototype.getStartRow = function () {\n        return this.startRow;\n    };\n    InfiniteBlock.prototype.getEndRow = function () {\n        return this.endRow;\n    };\n    // creates empty row nodes, data is missing as not loaded yet\n    InfiniteBlock.prototype.createRowNodes = function () {\n        this.rowNodes = [];\n        for (var i = 0; i < this.params.blockSize; i++) {\n            var rowIndex = this.startRow + i;\n            var rowNode = this.getContext().createBean(new RowNode());\n            rowNode.setRowHeight(this.params.rowHeight);\n            rowNode.uiLevel = 0;\n            rowNode.setRowIndex(rowIndex);\n            rowNode.setRowTop(this.params.rowHeight * rowIndex);\n            this.rowNodes.push(rowNode);\n        }\n    };\n    InfiniteBlock.prototype.processServerResult = function (params) {\n        var _this = this;\n        this.rowNodes.forEach(function (rowNode, index) {\n            var data = params.rowData ? params.rowData[index] : undefined;\n            _this.setDataAndId(rowNode, data, _this.startRow + index);\n        });\n        var finalRowCount = params.rowCount != null && params.rowCount >= 0 ? params.rowCount : undefined;\n        this.parentCache.pageLoaded(this, finalRowCount);\n    };\n    InfiniteBlock.prototype.destroyRowNodes = function () {\n        this.rowNodes.forEach(function (rowNode) {\n            // this is needed, so row render knows to fade out the row, otherwise it\n            // sees row top is present, and thinks the row should be shown.\n            rowNode.clearRowTopAndRowIndex();\n        });\n    };\n    __decorate([\n        PostConstruct\n    ], InfiniteBlock.prototype, \"postConstruct\", null);\n    __decorate([\n        PreDestroy\n    ], InfiniteBlock.prototype, \"destroyRowNodes\", null);\n    return InfiniteBlock;\n}(RowNodeBlock));\nexport { InfiniteBlock };\n"]},"metadata":{},"sourceType":"module"}