
# Explicitly load required .so's using absolute paths, so that we
# work without needing LD_LIBRARY_PATH to be defined.
#
import ctypes
import os
import importlib
for leaf in ('libmupdf.so', 'libmupdfcpp.so', '_mupdf.so'):
    path = os.path.abspath(f'{__file__}/../{leaf}')
    #print(f'path={path}')
    #print(f'exists={os.path.exists(path)}')
    ctypes.cdll.LoadLibrary( path)
    #print(f'have loaded {path}')
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_mupdf')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_mupdf')
    _mupdf = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mupdf', [dirname(__file__)])
        except ImportError:
            import _mupdf
            return _mupdf
        try:
            _mod = imp.load_module('_mupdf', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _mupdf = swig_import_helper()
    del swig_import_helper
else:
    import _mupdf
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def cdata(ptr, nelements=1):
    return _mupdf.cdata(ptr, nelements)
cdata = _mupdf.cdata

def memmove(data, indata):
    return _mupdf.memmove(data, indata)
memmove = _mupdf.memmove
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mupdf.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _mupdf.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _mupdf.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _mupdf.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _mupdf.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _mupdf.SwigPyIterator_equal(self, x)

    def copy(self):
        return _mupdf.SwigPyIterator_copy(self)

    def next(self):
        return _mupdf.SwigPyIterator_next(self)

    def __next__(self):
        return _mupdf.SwigPyIterator___next__(self)

    def previous(self):
        return _mupdf.SwigPyIterator_previous(self)

    def advance(self, n):
        return _mupdf.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _mupdf.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _mupdf.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _mupdf.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _mupdf.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _mupdf.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _mupdf.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _mupdf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mupdf.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mupdf.vectori___nonzero__(self)

    def __bool__(self):
        return _mupdf.vectori___bool__(self)

    def __len__(self):
        return _mupdf.vectori___len__(self)

    def __getslice__(self, i, j):
        return _mupdf.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mupdf.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mupdf.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mupdf.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mupdf.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mupdf.vectori___setitem__(self, *args)

    def pop(self):
        return _mupdf.vectori_pop(self)

    def append(self, x):
        return _mupdf.vectori_append(self, x)

    def empty(self):
        return _mupdf.vectori_empty(self)

    def size(self):
        return _mupdf.vectori_size(self)

    def swap(self, v):
        return _mupdf.vectori_swap(self, v)

    def begin(self):
        return _mupdf.vectori_begin(self)

    def end(self):
        return _mupdf.vectori_end(self)

    def rbegin(self):
        return _mupdf.vectori_rbegin(self)

    def rend(self):
        return _mupdf.vectori_rend(self)

    def clear(self):
        return _mupdf.vectori_clear(self)

    def get_allocator(self):
        return _mupdf.vectori_get_allocator(self)

    def pop_back(self):
        return _mupdf.vectori_pop_back(self)

    def erase(self, *args):
        return _mupdf.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _mupdf.new_vectori(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _mupdf.vectori_push_back(self, x)

    def front(self):
        return _mupdf.vectori_front(self)

    def back(self):
        return _mupdf.vectori_back(self)

    def assign(self, n, x):
        return _mupdf.vectori_assign(self, n, x)

    def resize(self, *args):
        return _mupdf.vectori_resize(self, *args)

    def insert(self, *args):
        return _mupdf.vectori_insert(self, *args)

    def reserve(self, n):
        return _mupdf.vectori_reserve(self, n)

    def capacity(self):
        return _mupdf.vectori_capacity(self)
    __swig_destroy__ = _mupdf.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _mupdf.vectori_swigregister
vectori_swigregister(vectori)

class vectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mupdf.vectors_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mupdf.vectors___nonzero__(self)

    def __bool__(self):
        return _mupdf.vectors___bool__(self)

    def __len__(self):
        return _mupdf.vectors___len__(self)

    def __getslice__(self, i, j):
        return _mupdf.vectors___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mupdf.vectors___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mupdf.vectors___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mupdf.vectors___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mupdf.vectors___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mupdf.vectors___setitem__(self, *args)

    def pop(self):
        return _mupdf.vectors_pop(self)

    def append(self, x):
        return _mupdf.vectors_append(self, x)

    def empty(self):
        return _mupdf.vectors_empty(self)

    def size(self):
        return _mupdf.vectors_size(self)

    def swap(self, v):
        return _mupdf.vectors_swap(self, v)

    def begin(self):
        return _mupdf.vectors_begin(self)

    def end(self):
        return _mupdf.vectors_end(self)

    def rbegin(self):
        return _mupdf.vectors_rbegin(self)

    def rend(self):
        return _mupdf.vectors_rend(self)

    def clear(self):
        return _mupdf.vectors_clear(self)

    def get_allocator(self):
        return _mupdf.vectors_get_allocator(self)

    def pop_back(self):
        return _mupdf.vectors_pop_back(self)

    def erase(self, *args):
        return _mupdf.vectors_erase(self, *args)

    def __init__(self, *args):
        this = _mupdf.new_vectors(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _mupdf.vectors_push_back(self, x)

    def front(self):
        return _mupdf.vectors_front(self)

    def back(self):
        return _mupdf.vectors_back(self)

    def assign(self, n, x):
        return _mupdf.vectors_assign(self, n, x)

    def resize(self, *args):
        return _mupdf.vectors_resize(self, *args)

    def insert(self, *args):
        return _mupdf.vectors_insert(self, *args)

    def reserve(self, n):
        return _mupdf.vectors_reserve(self, n)

    def capacity(self):
        return _mupdf.vectors_capacity(self)
    __swig_destroy__ = _mupdf.delete_vectors
    __del__ = lambda self: None
vectors_swigregister = _mupdf.vectors_swigregister
vectors_swigregister(vectors)

class vectorq(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorq, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorq, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _mupdf.vectorq_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _mupdf.vectorq___nonzero__(self)

    def __bool__(self):
        return _mupdf.vectorq___bool__(self)

    def __len__(self):
        return _mupdf.vectorq___len__(self)

    def __getslice__(self, i, j):
        return _mupdf.vectorq___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _mupdf.vectorq___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _mupdf.vectorq___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _mupdf.vectorq___delitem__(self, *args)

    def __getitem__(self, *args):
        return _mupdf.vectorq___getitem__(self, *args)

    def __setitem__(self, *args):
        return _mupdf.vectorq___setitem__(self, *args)

    def pop(self):
        return _mupdf.vectorq_pop(self)

    def append(self, x):
        return _mupdf.vectorq_append(self, x)

    def empty(self):
        return _mupdf.vectorq_empty(self)

    def size(self):
        return _mupdf.vectorq_size(self)

    def swap(self, v):
        return _mupdf.vectorq_swap(self, v)

    def begin(self):
        return _mupdf.vectorq_begin(self)

    def end(self):
        return _mupdf.vectorq_end(self)

    def rbegin(self):
        return _mupdf.vectorq_rbegin(self)

    def rend(self):
        return _mupdf.vectorq_rend(self)

    def clear(self):
        return _mupdf.vectorq_clear(self)

    def get_allocator(self):
        return _mupdf.vectorq_get_allocator(self)

    def pop_back(self):
        return _mupdf.vectorq_pop_back(self)

    def erase(self, *args):
        return _mupdf.vectorq_erase(self, *args)

    def __init__(self, *args):
        this = _mupdf.new_vectorq(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _mupdf.vectorq_push_back(self, x)

    def front(self):
        return _mupdf.vectorq_front(self)

    def back(self):
        return _mupdf.vectorq_back(self)

    def assign(self, n, x):
        return _mupdf.vectorq_assign(self, n, x)

    def resize(self, *args):
        return _mupdf.vectorq_resize(self, *args)

    def insert(self, *args):
        return _mupdf.vectorq_insert(self, *args)

    def reserve(self, n):
        return _mupdf.vectorq_reserve(self, n)

    def capacity(self):
        return _mupdf.vectorq_capacity(self)
    __swig_destroy__ = _mupdf.delete_vectorq
    __del__ = lambda self: None
vectorq_swigregister = _mupdf.vectorq_swigregister
vectorq_swigregister(vectorq)


def new_bytes(nelements):
    return _mupdf.new_bytes(nelements)
new_bytes = _mupdf.new_bytes

def delete_bytes(ary):
    return _mupdf.delete_bytes(ary)
delete_bytes = _mupdf.delete_bytes

def bytes_getitem(ary, index):
    return _mupdf.bytes_getitem(ary, index)
bytes_getitem = _mupdf.bytes_getitem

def bytes_setitem(ary, index, value):
    return _mupdf.bytes_setitem(ary, index, value)
bytes_setitem = _mupdf.bytes_setitem
FZ_VERSION = _mupdf.FZ_VERSION
FZ_VERSION_MAJOR = _mupdf.FZ_VERSION_MAJOR
FZ_VERSION_MINOR = _mupdf.FZ_VERSION_MINOR
FZ_VERSION_PATCH = _mupdf.FZ_VERSION_PATCH
FZ_ENABLE_SPOT_RENDERING = _mupdf.FZ_ENABLE_SPOT_RENDERING
FZ_PLOTTERS_N = _mupdf.FZ_PLOTTERS_N
FZ_PLOTTERS_G = _mupdf.FZ_PLOTTERS_G
FZ_PLOTTERS_RGB = _mupdf.FZ_PLOTTERS_RGB
FZ_PLOTTERS_CMYK = _mupdf.FZ_PLOTTERS_CMYK
FZ_ENABLE_PDF = _mupdf.FZ_ENABLE_PDF
FZ_ENABLE_XPS = _mupdf.FZ_ENABLE_XPS
FZ_ENABLE_SVG = _mupdf.FZ_ENABLE_SVG
FZ_ENABLE_CBZ = _mupdf.FZ_ENABLE_CBZ
FZ_ENABLE_IMG = _mupdf.FZ_ENABLE_IMG
FZ_ENABLE_HTML = _mupdf.FZ_ENABLE_HTML
FZ_ENABLE_EPUB = _mupdf.FZ_ENABLE_EPUB
FZ_ENABLE_OCR_OUTPUT = _mupdf.FZ_ENABLE_OCR_OUTPUT
FZ_ENABLE_ODT_OUTPUT = _mupdf.FZ_ENABLE_ODT_OUTPUT
FZ_ENABLE_DOCX_OUTPUT = _mupdf.FZ_ENABLE_DOCX_OUTPUT
FZ_ENABLE_JPX = _mupdf.FZ_ENABLE_JPX
FZ_ENABLE_JS = _mupdf.FZ_ENABLE_JS
FZ_ENABLE_ICC = _mupdf.FZ_ENABLE_ICC
MEMENTO_PREFILL = _mupdf.MEMENTO_PREFILL
MEMENTO_POSTFILL = _mupdf.MEMENTO_POSTFILL
MEMENTO_ALLOCFILL = _mupdf.MEMENTO_ALLOCFILL
MEMENTO_FREEFILL = _mupdf.MEMENTO_FREEFILL
MEMENTO_FREELIST_MAX = _mupdf.MEMENTO_FREELIST_MAX
FZ_PI = _mupdf.FZ_PI
FZ_RADIAN = _mupdf.FZ_RADIAN
FZ_DEGREE = _mupdf.FZ_DEGREE
FZ_SQRT2 = _mupdf.FZ_SQRT2
FZ_LN2 = _mupdf.FZ_LN2
HAVE_SIGSETJMP = _mupdf.HAVE_SIGSETJMP
EOF = _mupdf.EOF
SEEK_SET = _mupdf.SEEK_SET
SEEK_CUR = _mupdf.SEEK_CUR
SEEK_END = _mupdf.SEEK_END
class fz_point(_object):
    """Proxy of C++ fz_point class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mupdf.fz_point_x_set
    __swig_getmethods__["x"] = _mupdf.fz_point_x_get
    if _newclass:
        x = _swig_property(_mupdf.fz_point_x_get, _mupdf.fz_point_x_set)
    __swig_setmethods__["y"] = _mupdf.fz_point_y_set
    __swig_getmethods__["y"] = _mupdf.fz_point_y_get
    if _newclass:
        y = _swig_property(_mupdf.fz_point_y_get, _mupdf.fz_point_y_set)

    def __init__(self):
        """__init__(fz_point self) -> fz_point"""
        this = _mupdf.new_fz_point()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_point
    __del__ = lambda self: None
fz_point_swigregister = _mupdf.fz_point_swigregister
fz_point_swigregister(fz_point)

class fz_rect(_object):
    """Proxy of C++ fz_rect class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x0"] = _mupdf.fz_rect_x0_set
    __swig_getmethods__["x0"] = _mupdf.fz_rect_x0_get
    if _newclass:
        x0 = _swig_property(_mupdf.fz_rect_x0_get, _mupdf.fz_rect_x0_set)
    __swig_setmethods__["y0"] = _mupdf.fz_rect_y0_set
    __swig_getmethods__["y0"] = _mupdf.fz_rect_y0_get
    if _newclass:
        y0 = _swig_property(_mupdf.fz_rect_y0_get, _mupdf.fz_rect_y0_set)
    __swig_setmethods__["x1"] = _mupdf.fz_rect_x1_set
    __swig_getmethods__["x1"] = _mupdf.fz_rect_x1_get
    if _newclass:
        x1 = _swig_property(_mupdf.fz_rect_x1_get, _mupdf.fz_rect_x1_set)
    __swig_setmethods__["y1"] = _mupdf.fz_rect_y1_set
    __swig_getmethods__["y1"] = _mupdf.fz_rect_y1_get
    if _newclass:
        y1 = _swig_property(_mupdf.fz_rect_y1_get, _mupdf.fz_rect_y1_set)

    def __init__(self):
        """__init__(fz_rect self) -> fz_rect"""
        this = _mupdf.new_fz_rect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_rect
    __del__ = lambda self: None
fz_rect_swigregister = _mupdf.fz_rect_swigregister
fz_rect_swigregister(fz_rect)

class fz_irect(_object):
    """Proxy of C++ fz_irect class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_irect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_irect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x0"] = _mupdf.fz_irect_x0_set
    __swig_getmethods__["x0"] = _mupdf.fz_irect_x0_get
    if _newclass:
        x0 = _swig_property(_mupdf.fz_irect_x0_get, _mupdf.fz_irect_x0_set)
    __swig_setmethods__["y0"] = _mupdf.fz_irect_y0_set
    __swig_getmethods__["y0"] = _mupdf.fz_irect_y0_get
    if _newclass:
        y0 = _swig_property(_mupdf.fz_irect_y0_get, _mupdf.fz_irect_y0_set)
    __swig_setmethods__["x1"] = _mupdf.fz_irect_x1_set
    __swig_getmethods__["x1"] = _mupdf.fz_irect_x1_get
    if _newclass:
        x1 = _swig_property(_mupdf.fz_irect_x1_get, _mupdf.fz_irect_x1_set)
    __swig_setmethods__["y1"] = _mupdf.fz_irect_y1_set
    __swig_getmethods__["y1"] = _mupdf.fz_irect_y1_get
    if _newclass:
        y1 = _swig_property(_mupdf.fz_irect_y1_get, _mupdf.fz_irect_y1_set)

    def __init__(self):
        """__init__(fz_irect self) -> fz_irect"""
        this = _mupdf.new_fz_irect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_irect
    __del__ = lambda self: None
fz_irect_swigregister = _mupdf.fz_irect_swigregister
fz_irect_swigregister(fz_irect)

class fz_matrix(_object):
    """Proxy of C++ fz_matrix class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_matrix, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _mupdf.fz_matrix_a_set
    __swig_getmethods__["a"] = _mupdf.fz_matrix_a_get
    if _newclass:
        a = _swig_property(_mupdf.fz_matrix_a_get, _mupdf.fz_matrix_a_set)
    __swig_setmethods__["b"] = _mupdf.fz_matrix_b_set
    __swig_getmethods__["b"] = _mupdf.fz_matrix_b_get
    if _newclass:
        b = _swig_property(_mupdf.fz_matrix_b_get, _mupdf.fz_matrix_b_set)
    __swig_setmethods__["c"] = _mupdf.fz_matrix_c_set
    __swig_getmethods__["c"] = _mupdf.fz_matrix_c_get
    if _newclass:
        c = _swig_property(_mupdf.fz_matrix_c_get, _mupdf.fz_matrix_c_set)
    __swig_setmethods__["d"] = _mupdf.fz_matrix_d_set
    __swig_getmethods__["d"] = _mupdf.fz_matrix_d_get
    if _newclass:
        d = _swig_property(_mupdf.fz_matrix_d_get, _mupdf.fz_matrix_d_set)
    __swig_setmethods__["e"] = _mupdf.fz_matrix_e_set
    __swig_getmethods__["e"] = _mupdf.fz_matrix_e_get
    if _newclass:
        e = _swig_property(_mupdf.fz_matrix_e_get, _mupdf.fz_matrix_e_set)
    __swig_setmethods__["f"] = _mupdf.fz_matrix_f_set
    __swig_getmethods__["f"] = _mupdf.fz_matrix_f_get
    if _newclass:
        f = _swig_property(_mupdf.fz_matrix_f_get, _mupdf.fz_matrix_f_set)

    def __init__(self):
        """__init__(fz_matrix self) -> fz_matrix"""
        this = _mupdf.new_fz_matrix()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_matrix
    __del__ = lambda self: None
fz_matrix_swigregister = _mupdf.fz_matrix_swigregister
fz_matrix_swigregister(fz_matrix)
cvar = _mupdf.cvar
fz_unit_rect = cvar.fz_unit_rect
fz_empty_rect = cvar.fz_empty_rect
fz_empty_irect = cvar.fz_empty_irect
fz_infinite_rect = cvar.fz_infinite_rect
fz_infinite_irect = cvar.fz_infinite_irect

class fz_quad(_object):
    """Proxy of C++ fz_quad class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_quad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_quad, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ul"] = _mupdf.fz_quad_ul_set
    __swig_getmethods__["ul"] = _mupdf.fz_quad_ul_get
    if _newclass:
        ul = _swig_property(_mupdf.fz_quad_ul_get, _mupdf.fz_quad_ul_set)
    __swig_setmethods__["ur"] = _mupdf.fz_quad_ur_set
    __swig_getmethods__["ur"] = _mupdf.fz_quad_ur_get
    if _newclass:
        ur = _swig_property(_mupdf.fz_quad_ur_get, _mupdf.fz_quad_ur_set)
    __swig_setmethods__["ll"] = _mupdf.fz_quad_ll_set
    __swig_getmethods__["ll"] = _mupdf.fz_quad_ll_get
    if _newclass:
        ll = _swig_property(_mupdf.fz_quad_ll_get, _mupdf.fz_quad_ll_set)
    __swig_setmethods__["lr"] = _mupdf.fz_quad_lr_set
    __swig_getmethods__["lr"] = _mupdf.fz_quad_lr_get
    if _newclass:
        lr = _swig_property(_mupdf.fz_quad_lr_get, _mupdf.fz_quad_lr_set)

    def __init__(self):
        """__init__(fz_quad self) -> fz_quad"""
        this = _mupdf.new_fz_quad()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_quad
    __del__ = lambda self: None
fz_quad_swigregister = _mupdf.fz_quad_swigregister
fz_quad_swigregister(fz_quad)
fz_identity = cvar.fz_identity

class fz_alloc_context(_object):
    """Proxy of C++ fz_alloc_context class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_alloc_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_alloc_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["user"] = _mupdf.fz_alloc_context_user_set
    __swig_getmethods__["user"] = _mupdf.fz_alloc_context_user_get
    if _newclass:
        user = _swig_property(_mupdf.fz_alloc_context_user_get, _mupdf.fz_alloc_context_user_set)

    def __init__(self):
        """__init__(fz_alloc_context self) -> fz_alloc_context"""
        this = _mupdf.new_fz_alloc_context()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_alloc_context
    __del__ = lambda self: None
fz_alloc_context_swigregister = _mupdf.fz_alloc_context_swigregister
fz_alloc_context_swigregister(fz_alloc_context)

FZ_ERROR_NONE = _mupdf.FZ_ERROR_NONE
FZ_ERROR_MEMORY = _mupdf.FZ_ERROR_MEMORY
FZ_ERROR_GENERIC = _mupdf.FZ_ERROR_GENERIC
FZ_ERROR_SYNTAX = _mupdf.FZ_ERROR_SYNTAX
FZ_ERROR_MINOR = _mupdf.FZ_ERROR_MINOR
FZ_ERROR_TRYLATER = _mupdf.FZ_ERROR_TRYLATER
FZ_ERROR_ABORT = _mupdf.FZ_ERROR_ABORT
FZ_ERROR_REPAIRED = _mupdf.FZ_ERROR_REPAIRED
FZ_ERROR_COUNT = _mupdf.FZ_ERROR_COUNT
class fz_locks_context(_object):
    """Proxy of C++ fz_locks_context class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_locks_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_locks_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["user"] = _mupdf.fz_locks_context_user_set
    __swig_getmethods__["user"] = _mupdf.fz_locks_context_user_get
    if _newclass:
        user = _swig_property(_mupdf.fz_locks_context_user_get, _mupdf.fz_locks_context_user_set)
    __swig_setmethods__["lock"] = _mupdf.fz_locks_context_lock_set
    __swig_getmethods__["lock"] = _mupdf.fz_locks_context_lock_get
    if _newclass:
        lock = _swig_property(_mupdf.fz_locks_context_lock_get, _mupdf.fz_locks_context_lock_set)
    __swig_setmethods__["unlock"] = _mupdf.fz_locks_context_unlock_set
    __swig_getmethods__["unlock"] = _mupdf.fz_locks_context_unlock_get
    if _newclass:
        unlock = _swig_property(_mupdf.fz_locks_context_unlock_get, _mupdf.fz_locks_context_unlock_set)

    def __init__(self):
        """__init__(fz_locks_context self) -> fz_locks_context"""
        this = _mupdf.new_fz_locks_context()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_locks_context
    __del__ = lambda self: None
fz_locks_context_swigregister = _mupdf.fz_locks_context_swigregister
fz_locks_context_swigregister(fz_locks_context)

FZ_LOCK_ALLOC = _mupdf.FZ_LOCK_ALLOC
FZ_LOCK_FREETYPE = _mupdf.FZ_LOCK_FREETYPE
FZ_LOCK_GLYPHCACHE = _mupdf.FZ_LOCK_GLYPHCACHE
FZ_LOCK_MAX = _mupdf.FZ_LOCK_MAX
FZ_STORE_UNLIMITED = _mupdf.FZ_STORE_UNLIMITED
FZ_STORE_DEFAULT = _mupdf.FZ_STORE_DEFAULT
FZ_JMPBUF_ALIGN = _mupdf.FZ_JMPBUF_ALIGN
class fz_error_context(_object):
    """Proxy of C++ fz_error_context class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_error_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_error_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["top"] = _mupdf.fz_error_context_top_set
    __swig_getmethods__["top"] = _mupdf.fz_error_context_top_get
    if _newclass:
        top = _swig_property(_mupdf.fz_error_context_top_get, _mupdf.fz_error_context_top_set)
    __swig_setmethods__["stack"] = _mupdf.fz_error_context_stack_set
    __swig_getmethods__["stack"] = _mupdf.fz_error_context_stack_get
    if _newclass:
        stack = _swig_property(_mupdf.fz_error_context_stack_get, _mupdf.fz_error_context_stack_set)
    __swig_setmethods__["padding"] = _mupdf.fz_error_context_padding_set
    __swig_getmethods__["padding"] = _mupdf.fz_error_context_padding_get
    if _newclass:
        padding = _swig_property(_mupdf.fz_error_context_padding_get, _mupdf.fz_error_context_padding_set)
    __swig_setmethods__["stack_base"] = _mupdf.fz_error_context_stack_base_set
    __swig_getmethods__["stack_base"] = _mupdf.fz_error_context_stack_base_get
    if _newclass:
        stack_base = _swig_property(_mupdf.fz_error_context_stack_base_get, _mupdf.fz_error_context_stack_base_set)
    __swig_setmethods__["errcode"] = _mupdf.fz_error_context_errcode_set
    __swig_getmethods__["errcode"] = _mupdf.fz_error_context_errcode_get
    if _newclass:
        errcode = _swig_property(_mupdf.fz_error_context_errcode_get, _mupdf.fz_error_context_errcode_set)
    __swig_setmethods__["print_user"] = _mupdf.fz_error_context_print_user_set
    __swig_getmethods__["print_user"] = _mupdf.fz_error_context_print_user_get
    if _newclass:
        print_user = _swig_property(_mupdf.fz_error_context_print_user_get, _mupdf.fz_error_context_print_user_set)
    __swig_setmethods__["_print"] = _mupdf.fz_error_context__print_set
    __swig_getmethods__["_print"] = _mupdf.fz_error_context__print_get
    if _newclass:
        _print = _swig_property(_mupdf.fz_error_context__print_get, _mupdf.fz_error_context__print_set)
    __swig_setmethods__["message"] = _mupdf.fz_error_context_message_set
    __swig_getmethods__["message"] = _mupdf.fz_error_context_message_get
    if _newclass:
        message = _swig_property(_mupdf.fz_error_context_message_get, _mupdf.fz_error_context_message_set)

    def __init__(self):
        """__init__(fz_error_context self) -> fz_error_context"""
        this = _mupdf.new_fz_error_context()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_error_context
    __del__ = lambda self: None
fz_error_context_swigregister = _mupdf.fz_error_context_swigregister
fz_error_context_swigregister(fz_error_context)

class fz_warn_context(_object):
    """Proxy of C++ fz_warn_context class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_warn_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_warn_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["print_user"] = _mupdf.fz_warn_context_print_user_set
    __swig_getmethods__["print_user"] = _mupdf.fz_warn_context_print_user_get
    if _newclass:
        print_user = _swig_property(_mupdf.fz_warn_context_print_user_get, _mupdf.fz_warn_context_print_user_set)
    __swig_setmethods__["_print"] = _mupdf.fz_warn_context__print_set
    __swig_getmethods__["_print"] = _mupdf.fz_warn_context__print_get
    if _newclass:
        _print = _swig_property(_mupdf.fz_warn_context__print_get, _mupdf.fz_warn_context__print_set)
    __swig_setmethods__["count"] = _mupdf.fz_warn_context_count_set
    __swig_getmethods__["count"] = _mupdf.fz_warn_context_count_get
    if _newclass:
        count = _swig_property(_mupdf.fz_warn_context_count_get, _mupdf.fz_warn_context_count_set)
    __swig_setmethods__["message"] = _mupdf.fz_warn_context_message_set
    __swig_getmethods__["message"] = _mupdf.fz_warn_context_message_get
    if _newclass:
        message = _swig_property(_mupdf.fz_warn_context_message_get, _mupdf.fz_warn_context_message_set)

    def __init__(self):
        """__init__(fz_warn_context self) -> fz_warn_context"""
        this = _mupdf.new_fz_warn_context()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_warn_context
    __del__ = lambda self: None
fz_warn_context_swigregister = _mupdf.fz_warn_context_swigregister
fz_warn_context_swigregister(fz_warn_context)

class fz_aa_context(_object):
    """Proxy of C++ fz_aa_context class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_aa_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_aa_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hscale"] = _mupdf.fz_aa_context_hscale_set
    __swig_getmethods__["hscale"] = _mupdf.fz_aa_context_hscale_get
    if _newclass:
        hscale = _swig_property(_mupdf.fz_aa_context_hscale_get, _mupdf.fz_aa_context_hscale_set)
    __swig_setmethods__["vscale"] = _mupdf.fz_aa_context_vscale_set
    __swig_getmethods__["vscale"] = _mupdf.fz_aa_context_vscale_get
    if _newclass:
        vscale = _swig_property(_mupdf.fz_aa_context_vscale_get, _mupdf.fz_aa_context_vscale_set)
    __swig_setmethods__["scale"] = _mupdf.fz_aa_context_scale_set
    __swig_getmethods__["scale"] = _mupdf.fz_aa_context_scale_get
    if _newclass:
        scale = _swig_property(_mupdf.fz_aa_context_scale_get, _mupdf.fz_aa_context_scale_set)
    __swig_setmethods__["bits"] = _mupdf.fz_aa_context_bits_set
    __swig_getmethods__["bits"] = _mupdf.fz_aa_context_bits_get
    if _newclass:
        bits = _swig_property(_mupdf.fz_aa_context_bits_get, _mupdf.fz_aa_context_bits_set)
    __swig_setmethods__["text_bits"] = _mupdf.fz_aa_context_text_bits_set
    __swig_getmethods__["text_bits"] = _mupdf.fz_aa_context_text_bits_get
    if _newclass:
        text_bits = _swig_property(_mupdf.fz_aa_context_text_bits_get, _mupdf.fz_aa_context_text_bits_set)
    __swig_setmethods__["min_line_width"] = _mupdf.fz_aa_context_min_line_width_set
    __swig_getmethods__["min_line_width"] = _mupdf.fz_aa_context_min_line_width_get
    if _newclass:
        min_line_width = _swig_property(_mupdf.fz_aa_context_min_line_width_get, _mupdf.fz_aa_context_min_line_width_set)

    def __init__(self):
        """__init__(fz_aa_context self) -> fz_aa_context"""
        this = _mupdf.new_fz_aa_context()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_aa_context
    __del__ = lambda self: None
fz_aa_context_swigregister = _mupdf.fz_aa_context_swigregister
fz_aa_context_swigregister(fz_aa_context)

class fz_context(_object):
    """Proxy of C++ fz_context class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["user"] = _mupdf.fz_context_user_set
    __swig_getmethods__["user"] = _mupdf.fz_context_user_get
    if _newclass:
        user = _swig_property(_mupdf.fz_context_user_get, _mupdf.fz_context_user_set)
    __swig_setmethods__["alloc"] = _mupdf.fz_context_alloc_set
    __swig_getmethods__["alloc"] = _mupdf.fz_context_alloc_get
    if _newclass:
        alloc = _swig_property(_mupdf.fz_context_alloc_get, _mupdf.fz_context_alloc_set)
    __swig_setmethods__["locks"] = _mupdf.fz_context_locks_set
    __swig_getmethods__["locks"] = _mupdf.fz_context_locks_get
    if _newclass:
        locks = _swig_property(_mupdf.fz_context_locks_get, _mupdf.fz_context_locks_set)
    __swig_setmethods__["error"] = _mupdf.fz_context_error_set
    __swig_getmethods__["error"] = _mupdf.fz_context_error_get
    if _newclass:
        error = _swig_property(_mupdf.fz_context_error_get, _mupdf.fz_context_error_set)
    __swig_setmethods__["warn"] = _mupdf.fz_context_warn_set
    __swig_getmethods__["warn"] = _mupdf.fz_context_warn_get
    if _newclass:
        warn = _swig_property(_mupdf.fz_context_warn_get, _mupdf.fz_context_warn_set)
    __swig_setmethods__["aa"] = _mupdf.fz_context_aa_set
    __swig_getmethods__["aa"] = _mupdf.fz_context_aa_get
    if _newclass:
        aa = _swig_property(_mupdf.fz_context_aa_get, _mupdf.fz_context_aa_set)
    __swig_setmethods__["icc_enabled"] = _mupdf.fz_context_icc_enabled_set
    __swig_getmethods__["icc_enabled"] = _mupdf.fz_context_icc_enabled_get
    if _newclass:
        icc_enabled = _swig_property(_mupdf.fz_context_icc_enabled_get, _mupdf.fz_context_icc_enabled_set)
    __swig_setmethods__["throw_on_repair"] = _mupdf.fz_context_throw_on_repair_set
    __swig_getmethods__["throw_on_repair"] = _mupdf.fz_context_throw_on_repair_get
    if _newclass:
        throw_on_repair = _swig_property(_mupdf.fz_context_throw_on_repair_get, _mupdf.fz_context_throw_on_repair_set)
    __swig_setmethods__["handler"] = _mupdf.fz_context_handler_set
    __swig_getmethods__["handler"] = _mupdf.fz_context_handler_get
    if _newclass:
        handler = _swig_property(_mupdf.fz_context_handler_get, _mupdf.fz_context_handler_set)
    __swig_setmethods__["style"] = _mupdf.fz_context_style_set
    __swig_getmethods__["style"] = _mupdf.fz_context_style_get
    if _newclass:
        style = _swig_property(_mupdf.fz_context_style_get, _mupdf.fz_context_style_set)
    __swig_setmethods__["tuning"] = _mupdf.fz_context_tuning_set
    __swig_getmethods__["tuning"] = _mupdf.fz_context_tuning_get
    if _newclass:
        tuning = _swig_property(_mupdf.fz_context_tuning_get, _mupdf.fz_context_tuning_set)
    __swig_setmethods__["stddbg"] = _mupdf.fz_context_stddbg_set
    __swig_getmethods__["stddbg"] = _mupdf.fz_context_stddbg_get
    if _newclass:
        stddbg = _swig_property(_mupdf.fz_context_stddbg_get, _mupdf.fz_context_stddbg_set)
    __swig_setmethods__["font"] = _mupdf.fz_context_font_set
    __swig_getmethods__["font"] = _mupdf.fz_context_font_get
    if _newclass:
        font = _swig_property(_mupdf.fz_context_font_get, _mupdf.fz_context_font_set)
    __swig_setmethods__["colorspace"] = _mupdf.fz_context_colorspace_set
    __swig_getmethods__["colorspace"] = _mupdf.fz_context_colorspace_get
    if _newclass:
        colorspace = _swig_property(_mupdf.fz_context_colorspace_get, _mupdf.fz_context_colorspace_set)
    __swig_setmethods__["store"] = _mupdf.fz_context_store_set
    __swig_getmethods__["store"] = _mupdf.fz_context_store_get
    if _newclass:
        store = _swig_property(_mupdf.fz_context_store_get, _mupdf.fz_context_store_set)
    __swig_setmethods__["glyph_cache"] = _mupdf.fz_context_glyph_cache_set
    __swig_getmethods__["glyph_cache"] = _mupdf.fz_context_glyph_cache_get
    if _newclass:
        glyph_cache = _swig_property(_mupdf.fz_context_glyph_cache_get, _mupdf.fz_context_glyph_cache_set)

    def __init__(self):
        """__init__(fz_context self) -> fz_context"""
        this = _mupdf.new_fz_context()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_context
    __del__ = lambda self: None
fz_context_swigregister = _mupdf.fz_context_swigregister
fz_context_swigregister(fz_context)

class fz_buffer(_object):
    """Proxy of C++ fz_buffer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_buffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.fz_buffer_refs_set
    __swig_getmethods__["refs"] = _mupdf.fz_buffer_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.fz_buffer_refs_get, _mupdf.fz_buffer_refs_set)
    __swig_setmethods__["data"] = _mupdf.fz_buffer_data_set
    __swig_getmethods__["data"] = _mupdf.fz_buffer_data_get
    if _newclass:
        data = _swig_property(_mupdf.fz_buffer_data_get, _mupdf.fz_buffer_data_set)
    __swig_setmethods__["cap"] = _mupdf.fz_buffer_cap_set
    __swig_getmethods__["cap"] = _mupdf.fz_buffer_cap_get
    if _newclass:
        cap = _swig_property(_mupdf.fz_buffer_cap_get, _mupdf.fz_buffer_cap_set)
    __swig_setmethods__["len"] = _mupdf.fz_buffer_len_set
    __swig_getmethods__["len"] = _mupdf.fz_buffer_len_get
    if _newclass:
        len = _swig_property(_mupdf.fz_buffer_len_get, _mupdf.fz_buffer_len_set)
    __swig_setmethods__["unused_bits"] = _mupdf.fz_buffer_unused_bits_set
    __swig_getmethods__["unused_bits"] = _mupdf.fz_buffer_unused_bits_get
    if _newclass:
        unused_bits = _swig_property(_mupdf.fz_buffer_unused_bits_get, _mupdf.fz_buffer_unused_bits_set)
    __swig_setmethods__["shared"] = _mupdf.fz_buffer_shared_set
    __swig_getmethods__["shared"] = _mupdf.fz_buffer_shared_get
    if _newclass:
        shared = _swig_property(_mupdf.fz_buffer_shared_get, _mupdf.fz_buffer_shared_set)

    def __init__(self):
        """__init__(fz_buffer self) -> fz_buffer"""
        this = _mupdf.new_fz_buffer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_buffer
    __del__ = lambda self: None
fz_buffer_swigregister = _mupdf.fz_buffer_swigregister
fz_buffer_swigregister(fz_buffer)

FZ_REPLACEMENT_CHARACTER = _mupdf.FZ_REPLACEMENT_CHARACTER
FZ_UTFMAX = _mupdf.FZ_UTFMAX
class fz_stream(_object):
    """Proxy of C++ fz_stream class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_stream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_stream, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.fz_stream_refs_set
    __swig_getmethods__["refs"] = _mupdf.fz_stream_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.fz_stream_refs_get, _mupdf.fz_stream_refs_set)
    __swig_setmethods__["error"] = _mupdf.fz_stream_error_set
    __swig_getmethods__["error"] = _mupdf.fz_stream_error_get
    if _newclass:
        error = _swig_property(_mupdf.fz_stream_error_get, _mupdf.fz_stream_error_set)
    __swig_setmethods__["eof"] = _mupdf.fz_stream_eof_set
    __swig_getmethods__["eof"] = _mupdf.fz_stream_eof_get
    if _newclass:
        eof = _swig_property(_mupdf.fz_stream_eof_get, _mupdf.fz_stream_eof_set)
    __swig_setmethods__["progressive"] = _mupdf.fz_stream_progressive_set
    __swig_getmethods__["progressive"] = _mupdf.fz_stream_progressive_get
    if _newclass:
        progressive = _swig_property(_mupdf.fz_stream_progressive_get, _mupdf.fz_stream_progressive_set)
    __swig_setmethods__["pos"] = _mupdf.fz_stream_pos_set
    __swig_getmethods__["pos"] = _mupdf.fz_stream_pos_get
    if _newclass:
        pos = _swig_property(_mupdf.fz_stream_pos_get, _mupdf.fz_stream_pos_set)
    __swig_setmethods__["avail"] = _mupdf.fz_stream_avail_set
    __swig_getmethods__["avail"] = _mupdf.fz_stream_avail_get
    if _newclass:
        avail = _swig_property(_mupdf.fz_stream_avail_get, _mupdf.fz_stream_avail_set)
    __swig_setmethods__["bits"] = _mupdf.fz_stream_bits_set
    __swig_getmethods__["bits"] = _mupdf.fz_stream_bits_get
    if _newclass:
        bits = _swig_property(_mupdf.fz_stream_bits_get, _mupdf.fz_stream_bits_set)
    __swig_setmethods__["rp"] = _mupdf.fz_stream_rp_set
    __swig_getmethods__["rp"] = _mupdf.fz_stream_rp_get
    if _newclass:
        rp = _swig_property(_mupdf.fz_stream_rp_get, _mupdf.fz_stream_rp_set)
    __swig_setmethods__["wp"] = _mupdf.fz_stream_wp_set
    __swig_getmethods__["wp"] = _mupdf.fz_stream_wp_get
    if _newclass:
        wp = _swig_property(_mupdf.fz_stream_wp_get, _mupdf.fz_stream_wp_set)
    __swig_setmethods__["state"] = _mupdf.fz_stream_state_set
    __swig_getmethods__["state"] = _mupdf.fz_stream_state_get
    if _newclass:
        state = _swig_property(_mupdf.fz_stream_state_get, _mupdf.fz_stream_state_set)
    __swig_setmethods__["next"] = _mupdf.fz_stream_next_set
    __swig_getmethods__["next"] = _mupdf.fz_stream_next_get
    if _newclass:
        next = _swig_property(_mupdf.fz_stream_next_get, _mupdf.fz_stream_next_set)
    __swig_setmethods__["drop"] = _mupdf.fz_stream_drop_set
    __swig_getmethods__["drop"] = _mupdf.fz_stream_drop_get
    if _newclass:
        drop = _swig_property(_mupdf.fz_stream_drop_get, _mupdf.fz_stream_drop_set)
    __swig_setmethods__["seek"] = _mupdf.fz_stream_seek_set
    __swig_getmethods__["seek"] = _mupdf.fz_stream_seek_get
    if _newclass:
        seek = _swig_property(_mupdf.fz_stream_seek_get, _mupdf.fz_stream_seek_set)

    def __init__(self):
        """__init__(fz_stream self) -> fz_stream"""
        this = _mupdf.new_fz_stream()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_stream
    __del__ = lambda self: None
fz_stream_swigregister = _mupdf.fz_stream_swigregister
fz_stream_swigregister(fz_stream)

class fz_output(_object):
    """Proxy of C++ fz_output class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_output, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _mupdf.fz_output_state_set
    __swig_getmethods__["state"] = _mupdf.fz_output_state_get
    if _newclass:
        state = _swig_property(_mupdf.fz_output_state_get, _mupdf.fz_output_state_set)
    __swig_setmethods__["write"] = _mupdf.fz_output_write_set
    __swig_getmethods__["write"] = _mupdf.fz_output_write_get
    if _newclass:
        write = _swig_property(_mupdf.fz_output_write_get, _mupdf.fz_output_write_set)
    __swig_setmethods__["seek"] = _mupdf.fz_output_seek_set
    __swig_getmethods__["seek"] = _mupdf.fz_output_seek_get
    if _newclass:
        seek = _swig_property(_mupdf.fz_output_seek_get, _mupdf.fz_output_seek_set)
    __swig_setmethods__["tell"] = _mupdf.fz_output_tell_set
    __swig_getmethods__["tell"] = _mupdf.fz_output_tell_get
    if _newclass:
        tell = _swig_property(_mupdf.fz_output_tell_get, _mupdf.fz_output_tell_set)
    __swig_setmethods__["close"] = _mupdf.fz_output_close_set
    __swig_getmethods__["close"] = _mupdf.fz_output_close_get
    if _newclass:
        close = _swig_property(_mupdf.fz_output_close_get, _mupdf.fz_output_close_set)
    __swig_setmethods__["drop"] = _mupdf.fz_output_drop_set
    __swig_getmethods__["drop"] = _mupdf.fz_output_drop_get
    if _newclass:
        drop = _swig_property(_mupdf.fz_output_drop_get, _mupdf.fz_output_drop_set)
    __swig_setmethods__["as_stream"] = _mupdf.fz_output_as_stream_set
    __swig_getmethods__["as_stream"] = _mupdf.fz_output_as_stream_get
    if _newclass:
        as_stream = _swig_property(_mupdf.fz_output_as_stream_get, _mupdf.fz_output_as_stream_set)
    __swig_setmethods__["bp"] = _mupdf.fz_output_bp_set
    __swig_getmethods__["bp"] = _mupdf.fz_output_bp_get
    if _newclass:
        bp = _swig_property(_mupdf.fz_output_bp_get, _mupdf.fz_output_bp_set)
    __swig_setmethods__["wp"] = _mupdf.fz_output_wp_set
    __swig_getmethods__["wp"] = _mupdf.fz_output_wp_get
    if _newclass:
        wp = _swig_property(_mupdf.fz_output_wp_get, _mupdf.fz_output_wp_set)
    __swig_setmethods__["ep"] = _mupdf.fz_output_ep_set
    __swig_getmethods__["ep"] = _mupdf.fz_output_ep_get
    if _newclass:
        ep = _swig_property(_mupdf.fz_output_ep_get, _mupdf.fz_output_ep_set)

    def __init__(self):
        """__init__(fz_output self) -> fz_output"""
        this = _mupdf.new_fz_output()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_output
    __del__ = lambda self: None
fz_output_swigregister = _mupdf.fz_output_swigregister
fz_output_swigregister(fz_output)

class fz_md5(_object):
    """Proxy of C++ fz_md5 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_md5, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_md5, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _mupdf.fz_md5_state_set
    __swig_getmethods__["state"] = _mupdf.fz_md5_state_get
    if _newclass:
        state = _swig_property(_mupdf.fz_md5_state_get, _mupdf.fz_md5_state_set)
    __swig_setmethods__["count"] = _mupdf.fz_md5_count_set
    __swig_getmethods__["count"] = _mupdf.fz_md5_count_get
    if _newclass:
        count = _swig_property(_mupdf.fz_md5_count_get, _mupdf.fz_md5_count_set)
    __swig_setmethods__["buffer"] = _mupdf.fz_md5_buffer_set
    __swig_getmethods__["buffer"] = _mupdf.fz_md5_buffer_get
    if _newclass:
        buffer = _swig_property(_mupdf.fz_md5_buffer_get, _mupdf.fz_md5_buffer_set)

    def __init__(self):
        """__init__(fz_md5 self) -> fz_md5"""
        this = _mupdf.new_fz_md5()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_md5
    __del__ = lambda self: None
fz_md5_swigregister = _mupdf.fz_md5_swigregister
fz_md5_swigregister(fz_md5)

class fz_sha256(_object):
    """Proxy of C++ fz_sha256 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_sha256, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_sha256, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _mupdf.fz_sha256_state_set
    __swig_getmethods__["state"] = _mupdf.fz_sha256_state_get
    if _newclass:
        state = _swig_property(_mupdf.fz_sha256_state_get, _mupdf.fz_sha256_state_set)
    __swig_setmethods__["count"] = _mupdf.fz_sha256_count_set
    __swig_getmethods__["count"] = _mupdf.fz_sha256_count_get
    if _newclass:
        count = _swig_property(_mupdf.fz_sha256_count_get, _mupdf.fz_sha256_count_set)

    def __init__(self):
        """__init__(fz_sha256 self) -> fz_sha256"""
        this = _mupdf.new_fz_sha256()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_sha256
    __del__ = lambda self: None
fz_sha256_swigregister = _mupdf.fz_sha256_swigregister
fz_sha256_swigregister(fz_sha256)

class fz_sha512(_object):
    """Proxy of C++ fz_sha512 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_sha512, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_sha512, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _mupdf.fz_sha512_state_set
    __swig_getmethods__["state"] = _mupdf.fz_sha512_state_get
    if _newclass:
        state = _swig_property(_mupdf.fz_sha512_state_get, _mupdf.fz_sha512_state_set)
    __swig_setmethods__["count"] = _mupdf.fz_sha512_count_set
    __swig_getmethods__["count"] = _mupdf.fz_sha512_count_get
    if _newclass:
        count = _swig_property(_mupdf.fz_sha512_count_get, _mupdf.fz_sha512_count_set)

    def __init__(self):
        """__init__(fz_sha512 self) -> fz_sha512"""
        this = _mupdf.new_fz_sha512()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_sha512
    __del__ = lambda self: None
fz_sha512_swigregister = _mupdf.fz_sha512_swigregister
fz_sha512_swigregister(fz_sha512)

class fz_arc4(_object):
    """Proxy of C++ fz_arc4 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_arc4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_arc4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mupdf.fz_arc4_x_set
    __swig_getmethods__["x"] = _mupdf.fz_arc4_x_get
    if _newclass:
        x = _swig_property(_mupdf.fz_arc4_x_get, _mupdf.fz_arc4_x_set)
    __swig_setmethods__["y"] = _mupdf.fz_arc4_y_set
    __swig_getmethods__["y"] = _mupdf.fz_arc4_y_get
    if _newclass:
        y = _swig_property(_mupdf.fz_arc4_y_get, _mupdf.fz_arc4_y_set)
    __swig_setmethods__["state"] = _mupdf.fz_arc4_state_set
    __swig_getmethods__["state"] = _mupdf.fz_arc4_state_get
    if _newclass:
        state = _swig_property(_mupdf.fz_arc4_state_get, _mupdf.fz_arc4_state_set)

    def __init__(self):
        """__init__(fz_arc4 self) -> fz_arc4"""
        this = _mupdf.new_fz_arc4()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_arc4
    __del__ = lambda self: None
fz_arc4_swigregister = _mupdf.fz_arc4_swigregister
fz_arc4_swigregister(fz_arc4)

class fz_aes(_object):
    """Proxy of C++ fz_aes class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_aes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_aes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nr"] = _mupdf.fz_aes_nr_set
    __swig_getmethods__["nr"] = _mupdf.fz_aes_nr_get
    if _newclass:
        nr = _swig_property(_mupdf.fz_aes_nr_get, _mupdf.fz_aes_nr_set)
    __swig_setmethods__["rk"] = _mupdf.fz_aes_rk_set
    __swig_getmethods__["rk"] = _mupdf.fz_aes_rk_get
    if _newclass:
        rk = _swig_property(_mupdf.fz_aes_rk_get, _mupdf.fz_aes_rk_set)
    __swig_setmethods__["buf"] = _mupdf.fz_aes_buf_set
    __swig_getmethods__["buf"] = _mupdf.fz_aes_buf_get
    if _newclass:
        buf = _swig_property(_mupdf.fz_aes_buf_get, _mupdf.fz_aes_buf_set)

    def __init__(self):
        """__init__(fz_aes self) -> fz_aes"""
        this = _mupdf.new_fz_aes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_aes
    __del__ = lambda self: None
fz_aes_swigregister = _mupdf.fz_aes_swigregister
fz_aes_swigregister(fz_aes)

FZ_AES_DECRYPT = _mupdf.FZ_AES_DECRYPT
FZ_AES_ENCRYPT = _mupdf.FZ_AES_ENCRYPT
FZ_HASH_TABLE_KEY_LENGTH = _mupdf.FZ_HASH_TABLE_KEY_LENGTH
FZ_BIDI_LTR = _mupdf.FZ_BIDI_LTR
FZ_BIDI_RTL = _mupdf.FZ_BIDI_RTL
FZ_BIDI_NEUTRAL = _mupdf.FZ_BIDI_NEUTRAL
FZ_BIDI_CLASSIFY_WHITE_SPACE = _mupdf.FZ_BIDI_CLASSIFY_WHITE_SPACE
FZ_BIDI_REPLACE_TAB = _mupdf.FZ_BIDI_REPLACE_TAB
FZ_DEFLATE_NONE = _mupdf.FZ_DEFLATE_NONE
FZ_DEFLATE_BEST_SPEED = _mupdf.FZ_DEFLATE_BEST_SPEED
FZ_DEFLATE_BEST = _mupdf.FZ_DEFLATE_BEST
FZ_DEFLATE_DEFAULT = _mupdf.FZ_DEFLATE_DEFAULT
class fz_storable(_object):
    """Proxy of C++ fz_storable class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_storable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_storable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.fz_storable_refs_set
    __swig_getmethods__["refs"] = _mupdf.fz_storable_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.fz_storable_refs_get, _mupdf.fz_storable_refs_set)
    __swig_setmethods__["drop"] = _mupdf.fz_storable_drop_set
    __swig_getmethods__["drop"] = _mupdf.fz_storable_drop_get
    if _newclass:
        drop = _swig_property(_mupdf.fz_storable_drop_get, _mupdf.fz_storable_drop_set)

    def __init__(self):
        """__init__(fz_storable self) -> fz_storable"""
        this = _mupdf.new_fz_storable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_storable
    __del__ = lambda self: None
fz_storable_swigregister = _mupdf.fz_storable_swigregister
fz_storable_swigregister(fz_storable)

class fz_key_storable(_object):
    """Proxy of C++ fz_key_storable class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_key_storable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_key_storable, name)
    __repr__ = _swig_repr
    __swig_setmethods__["storable"] = _mupdf.fz_key_storable_storable_set
    __swig_getmethods__["storable"] = _mupdf.fz_key_storable_storable_get
    if _newclass:
        storable = _swig_property(_mupdf.fz_key_storable_storable_get, _mupdf.fz_key_storable_storable_set)
    __swig_setmethods__["store_key_refs"] = _mupdf.fz_key_storable_store_key_refs_set
    __swig_getmethods__["store_key_refs"] = _mupdf.fz_key_storable_store_key_refs_get
    if _newclass:
        store_key_refs = _swig_property(_mupdf.fz_key_storable_store_key_refs_get, _mupdf.fz_key_storable_store_key_refs_set)

    def __init__(self):
        """__init__(fz_key_storable self) -> fz_key_storable"""
        this = _mupdf.new_fz_key_storable()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_key_storable
    __del__ = lambda self: None
fz_key_storable_swigregister = _mupdf.fz_key_storable_swigregister
fz_key_storable_swigregister(fz_key_storable)

class fz_store_hash(_object):
    """Proxy of C++ fz_store_hash class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_store_hash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_store_hash, name)
    __repr__ = _swig_repr
    __swig_setmethods__["drop"] = _mupdf.fz_store_hash_drop_set
    __swig_getmethods__["drop"] = _mupdf.fz_store_hash_drop_get
    if _newclass:
        drop = _swig_property(_mupdf.fz_store_hash_drop_get, _mupdf.fz_store_hash_drop_set)

    def __init__(self):
        """__init__(fz_store_hash self) -> fz_store_hash"""
        this = _mupdf.new_fz_store_hash()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_store_hash
    __del__ = lambda self: None
fz_store_hash_swigregister = _mupdf.fz_store_hash_swigregister
fz_store_hash_swigregister(fz_store_hash)

class fz_store_type(_object):
    """Proxy of C++ fz_store_type class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_store_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_store_type, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _mupdf.fz_store_type_name_set
    __swig_getmethods__["name"] = _mupdf.fz_store_type_name_get
    if _newclass:
        name = _swig_property(_mupdf.fz_store_type_name_get, _mupdf.fz_store_type_name_set)
    __swig_setmethods__["make_hash_key"] = _mupdf.fz_store_type_make_hash_key_set
    __swig_getmethods__["make_hash_key"] = _mupdf.fz_store_type_make_hash_key_get
    if _newclass:
        make_hash_key = _swig_property(_mupdf.fz_store_type_make_hash_key_get, _mupdf.fz_store_type_make_hash_key_set)
    __swig_setmethods__["keep_key"] = _mupdf.fz_store_type_keep_key_set
    __swig_getmethods__["keep_key"] = _mupdf.fz_store_type_keep_key_get
    if _newclass:
        keep_key = _swig_property(_mupdf.fz_store_type_keep_key_get, _mupdf.fz_store_type_keep_key_set)
    __swig_setmethods__["drop_key"] = _mupdf.fz_store_type_drop_key_set
    __swig_getmethods__["drop_key"] = _mupdf.fz_store_type_drop_key_get
    if _newclass:
        drop_key = _swig_property(_mupdf.fz_store_type_drop_key_get, _mupdf.fz_store_type_drop_key_set)
    __swig_setmethods__["cmp_key"] = _mupdf.fz_store_type_cmp_key_set
    __swig_getmethods__["cmp_key"] = _mupdf.fz_store_type_cmp_key_get
    if _newclass:
        cmp_key = _swig_property(_mupdf.fz_store_type_cmp_key_get, _mupdf.fz_store_type_cmp_key_set)
    __swig_setmethods__["format_key"] = _mupdf.fz_store_type_format_key_set
    __swig_getmethods__["format_key"] = _mupdf.fz_store_type_format_key_get
    if _newclass:
        format_key = _swig_property(_mupdf.fz_store_type_format_key_get, _mupdf.fz_store_type_format_key_set)
    __swig_setmethods__["needs_reap"] = _mupdf.fz_store_type_needs_reap_set
    __swig_getmethods__["needs_reap"] = _mupdf.fz_store_type_needs_reap_get
    if _newclass:
        needs_reap = _swig_property(_mupdf.fz_store_type_needs_reap_get, _mupdf.fz_store_type_needs_reap_set)

    def __init__(self):
        """__init__(fz_store_type self) -> fz_store_type"""
        this = _mupdf.new_fz_store_type()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_store_type
    __del__ = lambda self: None
fz_store_type_swigregister = _mupdf.fz_store_type_swigregister
fz_store_type_swigregister(fz_store_type)

class fz_range(_object):
    """Proxy of C++ fz_range class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_range, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_range, name)
    __repr__ = _swig_repr
    __swig_setmethods__["offset"] = _mupdf.fz_range_offset_set
    __swig_getmethods__["offset"] = _mupdf.fz_range_offset_get
    if _newclass:
        offset = _swig_property(_mupdf.fz_range_offset_get, _mupdf.fz_range_offset_set)
    __swig_setmethods__["length"] = _mupdf.fz_range_length_set
    __swig_getmethods__["length"] = _mupdf.fz_range_length_get
    if _newclass:
        length = _swig_property(_mupdf.fz_range_length_get, _mupdf.fz_range_length_set)

    def __init__(self):
        """__init__(fz_range self) -> fz_range"""
        this = _mupdf.new_fz_range()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_range
    __del__ = lambda self: None
fz_range_swigregister = _mupdf.fz_range_swigregister
fz_range_swigregister(fz_range)

class fz_compression_params(_object):
    """Proxy of C++ fz_compression_params class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_compression_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_compression_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mupdf.fz_compression_params_type_set
    __swig_getmethods__["type"] = _mupdf.fz_compression_params_type_get
    if _newclass:
        type = _swig_property(_mupdf.fz_compression_params_type_get, _mupdf.fz_compression_params_type_set)

    def __init__(self):
        """__init__(fz_compression_params self) -> fz_compression_params"""
        this = _mupdf.new_fz_compression_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_compression_params
    __del__ = lambda self: None
fz_compression_params_swigregister = _mupdf.fz_compression_params_swigregister
fz_compression_params_swigregister(fz_compression_params)

class fz_compressed_buffer(_object):
    """Proxy of C++ fz_compressed_buffer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_compressed_buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_compressed_buffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["params"] = _mupdf.fz_compressed_buffer_params_set
    __swig_getmethods__["params"] = _mupdf.fz_compressed_buffer_params_get
    if _newclass:
        params = _swig_property(_mupdf.fz_compressed_buffer_params_get, _mupdf.fz_compressed_buffer_params_set)
    __swig_setmethods__["buffer"] = _mupdf.fz_compressed_buffer_buffer_set
    __swig_getmethods__["buffer"] = _mupdf.fz_compressed_buffer_buffer_get
    if _newclass:
        buffer = _swig_property(_mupdf.fz_compressed_buffer_buffer_get, _mupdf.fz_compressed_buffer_buffer_set)

    def __init__(self):
        """__init__(fz_compressed_buffer self) -> fz_compressed_buffer"""
        this = _mupdf.new_fz_compressed_buffer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_compressed_buffer
    __del__ = lambda self: None
fz_compressed_buffer_swigregister = _mupdf.fz_compressed_buffer_swigregister
fz_compressed_buffer_swigregister(fz_compressed_buffer)

FZ_IMAGE_UNKNOWN = _mupdf.FZ_IMAGE_UNKNOWN
FZ_IMAGE_RAW = _mupdf.FZ_IMAGE_RAW
FZ_IMAGE_FAX = _mupdf.FZ_IMAGE_FAX
FZ_IMAGE_FLATE = _mupdf.FZ_IMAGE_FLATE
FZ_IMAGE_LZW = _mupdf.FZ_IMAGE_LZW
FZ_IMAGE_RLD = _mupdf.FZ_IMAGE_RLD
FZ_IMAGE_BMP = _mupdf.FZ_IMAGE_BMP
FZ_IMAGE_GIF = _mupdf.FZ_IMAGE_GIF
FZ_IMAGE_JBIG2 = _mupdf.FZ_IMAGE_JBIG2
FZ_IMAGE_JPEG = _mupdf.FZ_IMAGE_JPEG
FZ_IMAGE_JPX = _mupdf.FZ_IMAGE_JPX
FZ_IMAGE_JXR = _mupdf.FZ_IMAGE_JXR
FZ_IMAGE_PNG = _mupdf.FZ_IMAGE_PNG
FZ_IMAGE_PNM = _mupdf.FZ_IMAGE_PNM
FZ_IMAGE_TIFF = _mupdf.FZ_IMAGE_TIFF
class fz_archive(_object):
    """Proxy of C++ fz_archive class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_archive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_archive, name)
    __repr__ = _swig_repr
    __swig_setmethods__["file"] = _mupdf.fz_archive_file_set
    __swig_getmethods__["file"] = _mupdf.fz_archive_file_get
    if _newclass:
        file = _swig_property(_mupdf.fz_archive_file_get, _mupdf.fz_archive_file_set)
    __swig_setmethods__["format"] = _mupdf.fz_archive_format_set
    __swig_getmethods__["format"] = _mupdf.fz_archive_format_get
    if _newclass:
        format = _swig_property(_mupdf.fz_archive_format_get, _mupdf.fz_archive_format_set)
    __swig_setmethods__["drop_archive"] = _mupdf.fz_archive_drop_archive_set
    __swig_getmethods__["drop_archive"] = _mupdf.fz_archive_drop_archive_get
    if _newclass:
        drop_archive = _swig_property(_mupdf.fz_archive_drop_archive_get, _mupdf.fz_archive_drop_archive_set)
    __swig_setmethods__["count_entries"] = _mupdf.fz_archive_count_entries_set
    __swig_getmethods__["count_entries"] = _mupdf.fz_archive_count_entries_get
    if _newclass:
        count_entries = _swig_property(_mupdf.fz_archive_count_entries_get, _mupdf.fz_archive_count_entries_set)
    __swig_setmethods__["list_entry"] = _mupdf.fz_archive_list_entry_set
    __swig_getmethods__["list_entry"] = _mupdf.fz_archive_list_entry_get
    if _newclass:
        list_entry = _swig_property(_mupdf.fz_archive_list_entry_get, _mupdf.fz_archive_list_entry_set)
    __swig_setmethods__["has_entry"] = _mupdf.fz_archive_has_entry_set
    __swig_getmethods__["has_entry"] = _mupdf.fz_archive_has_entry_get
    if _newclass:
        has_entry = _swig_property(_mupdf.fz_archive_has_entry_get, _mupdf.fz_archive_has_entry_set)
    __swig_setmethods__["read_entry"] = _mupdf.fz_archive_read_entry_set
    __swig_getmethods__["read_entry"] = _mupdf.fz_archive_read_entry_get
    if _newclass:
        read_entry = _swig_property(_mupdf.fz_archive_read_entry_get, _mupdf.fz_archive_read_entry_set)
    __swig_setmethods__["open_entry"] = _mupdf.fz_archive_open_entry_set
    __swig_getmethods__["open_entry"] = _mupdf.fz_archive_open_entry_get
    if _newclass:
        open_entry = _swig_property(_mupdf.fz_archive_open_entry_get, _mupdf.fz_archive_open_entry_set)

    def __init__(self):
        """__init__(fz_archive self) -> fz_archive"""
        this = _mupdf.new_fz_archive()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_archive
    __del__ = lambda self: None
fz_archive_swigregister = _mupdf.fz_archive_swigregister
fz_archive_swigregister(fz_archive)

FZ_RI_PERCEPTUAL = _mupdf.FZ_RI_PERCEPTUAL
FZ_RI_RELATIVE_COLORIMETRIC = _mupdf.FZ_RI_RELATIVE_COLORIMETRIC
FZ_RI_SATURATION = _mupdf.FZ_RI_SATURATION
FZ_RI_ABSOLUTE_COLORIMETRIC = _mupdf.FZ_RI_ABSOLUTE_COLORIMETRIC
class fz_color_params(_object):
    """Proxy of C++ fz_color_params class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_color_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_color_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ri"] = _mupdf.fz_color_params_ri_set
    __swig_getmethods__["ri"] = _mupdf.fz_color_params_ri_get
    if _newclass:
        ri = _swig_property(_mupdf.fz_color_params_ri_get, _mupdf.fz_color_params_ri_set)
    __swig_setmethods__["bp"] = _mupdf.fz_color_params_bp_set
    __swig_getmethods__["bp"] = _mupdf.fz_color_params_bp_get
    if _newclass:
        bp = _swig_property(_mupdf.fz_color_params_bp_get, _mupdf.fz_color_params_bp_set)
    __swig_setmethods__["op"] = _mupdf.fz_color_params_op_set
    __swig_getmethods__["op"] = _mupdf.fz_color_params_op_get
    if _newclass:
        op = _swig_property(_mupdf.fz_color_params_op_get, _mupdf.fz_color_params_op_set)
    __swig_setmethods__["opm"] = _mupdf.fz_color_params_opm_set
    __swig_getmethods__["opm"] = _mupdf.fz_color_params_opm_get
    if _newclass:
        opm = _swig_property(_mupdf.fz_color_params_opm_get, _mupdf.fz_color_params_opm_set)

    def __init__(self):
        """__init__(fz_color_params self) -> fz_color_params"""
        this = _mupdf.new_fz_color_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_color_params
    __del__ = lambda self: None
fz_color_params_swigregister = _mupdf.fz_color_params_swigregister
fz_color_params_swigregister(fz_color_params)

FZ_MAX_COLORS = _mupdf.FZ_MAX_COLORS
FZ_COLORSPACE_IS_DEVICE = _mupdf.FZ_COLORSPACE_IS_DEVICE
FZ_COLORSPACE_IS_ICC = _mupdf.FZ_COLORSPACE_IS_ICC
FZ_COLORSPACE_HAS_CMYK = _mupdf.FZ_COLORSPACE_HAS_CMYK
FZ_COLORSPACE_HAS_SPOTS = _mupdf.FZ_COLORSPACE_HAS_SPOTS
FZ_COLORSPACE_HAS_CMYK_AND_SPOTS = _mupdf.FZ_COLORSPACE_HAS_CMYK_AND_SPOTS
class fz_default_colorspaces(_object):
    """Proxy of C++ fz_default_colorspaces class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_default_colorspaces, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_default_colorspaces, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.fz_default_colorspaces_refs_set
    __swig_getmethods__["refs"] = _mupdf.fz_default_colorspaces_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.fz_default_colorspaces_refs_get, _mupdf.fz_default_colorspaces_refs_set)
    __swig_setmethods__["gray"] = _mupdf.fz_default_colorspaces_gray_set
    __swig_getmethods__["gray"] = _mupdf.fz_default_colorspaces_gray_get
    if _newclass:
        gray = _swig_property(_mupdf.fz_default_colorspaces_gray_get, _mupdf.fz_default_colorspaces_gray_set)
    __swig_setmethods__["rgb"] = _mupdf.fz_default_colorspaces_rgb_set
    __swig_getmethods__["rgb"] = _mupdf.fz_default_colorspaces_rgb_get
    if _newclass:
        rgb = _swig_property(_mupdf.fz_default_colorspaces_rgb_get, _mupdf.fz_default_colorspaces_rgb_set)
    __swig_setmethods__["cmyk"] = _mupdf.fz_default_colorspaces_cmyk_set
    __swig_getmethods__["cmyk"] = _mupdf.fz_default_colorspaces_cmyk_get
    if _newclass:
        cmyk = _swig_property(_mupdf.fz_default_colorspaces_cmyk_get, _mupdf.fz_default_colorspaces_cmyk_set)
    __swig_setmethods__["oi"] = _mupdf.fz_default_colorspaces_oi_set
    __swig_getmethods__["oi"] = _mupdf.fz_default_colorspaces_oi_get
    if _newclass:
        oi = _swig_property(_mupdf.fz_default_colorspaces_oi_get, _mupdf.fz_default_colorspaces_oi_set)

    def __init__(self):
        """__init__(fz_default_colorspaces self) -> fz_default_colorspaces"""
        this = _mupdf.new_fz_default_colorspaces()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_default_colorspaces
    __del__ = lambda self: None
fz_default_colorspaces_swigregister = _mupdf.fz_default_colorspaces_swigregister
fz_default_colorspaces_swigregister(fz_default_colorspaces)
fz_default_color_params = cvar.fz_default_color_params

class fz_colorspace(_object):
    """Proxy of C++ fz_colorspace class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_colorspace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_colorspace, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key_storable"] = _mupdf.fz_colorspace_key_storable_set
    __swig_getmethods__["key_storable"] = _mupdf.fz_colorspace_key_storable_get
    if _newclass:
        key_storable = _swig_property(_mupdf.fz_colorspace_key_storable_get, _mupdf.fz_colorspace_key_storable_set)
    __swig_setmethods__["type"] = _mupdf.fz_colorspace_type_set
    __swig_getmethods__["type"] = _mupdf.fz_colorspace_type_get
    if _newclass:
        type = _swig_property(_mupdf.fz_colorspace_type_get, _mupdf.fz_colorspace_type_set)
    __swig_setmethods__["flags"] = _mupdf.fz_colorspace_flags_set
    __swig_getmethods__["flags"] = _mupdf.fz_colorspace_flags_get
    if _newclass:
        flags = _swig_property(_mupdf.fz_colorspace_flags_get, _mupdf.fz_colorspace_flags_set)
    __swig_setmethods__["n"] = _mupdf.fz_colorspace_n_set
    __swig_getmethods__["n"] = _mupdf.fz_colorspace_n_get
    if _newclass:
        n = _swig_property(_mupdf.fz_colorspace_n_get, _mupdf.fz_colorspace_n_set)
    __swig_setmethods__["name"] = _mupdf.fz_colorspace_name_set
    __swig_getmethods__["name"] = _mupdf.fz_colorspace_name_get
    if _newclass:
        name = _swig_property(_mupdf.fz_colorspace_name_get, _mupdf.fz_colorspace_name_set)

    def __init__(self):
        """__init__(fz_colorspace self) -> fz_colorspace"""
        this = _mupdf.new_fz_colorspace()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_colorspace
    __del__ = lambda self: None
fz_colorspace_swigregister = _mupdf.fz_colorspace_swigregister
fz_colorspace_swigregister(fz_colorspace)

FZ_MAX_SEPARATIONS = _mupdf.FZ_MAX_SEPARATIONS
FZ_SEPARATION_COMPOSITE = _mupdf.FZ_SEPARATION_COMPOSITE
FZ_SEPARATION_SPOT = _mupdf.FZ_SEPARATION_SPOT
FZ_SEPARATION_DISABLED = _mupdf.FZ_SEPARATION_DISABLED
class fz_pixmap(_object):
    """Proxy of C++ fz_pixmap class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_pixmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_pixmap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["storable"] = _mupdf.fz_pixmap_storable_set
    __swig_getmethods__["storable"] = _mupdf.fz_pixmap_storable_get
    if _newclass:
        storable = _swig_property(_mupdf.fz_pixmap_storable_get, _mupdf.fz_pixmap_storable_set)
    __swig_setmethods__["x"] = _mupdf.fz_pixmap_x_set
    __swig_getmethods__["x"] = _mupdf.fz_pixmap_x_get
    if _newclass:
        x = _swig_property(_mupdf.fz_pixmap_x_get, _mupdf.fz_pixmap_x_set)
    __swig_setmethods__["y"] = _mupdf.fz_pixmap_y_set
    __swig_getmethods__["y"] = _mupdf.fz_pixmap_y_get
    if _newclass:
        y = _swig_property(_mupdf.fz_pixmap_y_get, _mupdf.fz_pixmap_y_set)
    __swig_setmethods__["w"] = _mupdf.fz_pixmap_w_set
    __swig_getmethods__["w"] = _mupdf.fz_pixmap_w_get
    if _newclass:
        w = _swig_property(_mupdf.fz_pixmap_w_get, _mupdf.fz_pixmap_w_set)
    __swig_setmethods__["h"] = _mupdf.fz_pixmap_h_set
    __swig_getmethods__["h"] = _mupdf.fz_pixmap_h_get
    if _newclass:
        h = _swig_property(_mupdf.fz_pixmap_h_get, _mupdf.fz_pixmap_h_set)
    __swig_setmethods__["n"] = _mupdf.fz_pixmap_n_set
    __swig_getmethods__["n"] = _mupdf.fz_pixmap_n_get
    if _newclass:
        n = _swig_property(_mupdf.fz_pixmap_n_get, _mupdf.fz_pixmap_n_set)
    __swig_setmethods__["s"] = _mupdf.fz_pixmap_s_set
    __swig_getmethods__["s"] = _mupdf.fz_pixmap_s_get
    if _newclass:
        s = _swig_property(_mupdf.fz_pixmap_s_get, _mupdf.fz_pixmap_s_set)
    __swig_setmethods__["alpha"] = _mupdf.fz_pixmap_alpha_set
    __swig_getmethods__["alpha"] = _mupdf.fz_pixmap_alpha_get
    if _newclass:
        alpha = _swig_property(_mupdf.fz_pixmap_alpha_get, _mupdf.fz_pixmap_alpha_set)
    __swig_setmethods__["flags"] = _mupdf.fz_pixmap_flags_set
    __swig_getmethods__["flags"] = _mupdf.fz_pixmap_flags_get
    if _newclass:
        flags = _swig_property(_mupdf.fz_pixmap_flags_get, _mupdf.fz_pixmap_flags_set)
    __swig_setmethods__["stride"] = _mupdf.fz_pixmap_stride_set
    __swig_getmethods__["stride"] = _mupdf.fz_pixmap_stride_get
    if _newclass:
        stride = _swig_property(_mupdf.fz_pixmap_stride_get, _mupdf.fz_pixmap_stride_set)
    __swig_setmethods__["seps"] = _mupdf.fz_pixmap_seps_set
    __swig_getmethods__["seps"] = _mupdf.fz_pixmap_seps_get
    if _newclass:
        seps = _swig_property(_mupdf.fz_pixmap_seps_get, _mupdf.fz_pixmap_seps_set)
    __swig_setmethods__["xres"] = _mupdf.fz_pixmap_xres_set
    __swig_getmethods__["xres"] = _mupdf.fz_pixmap_xres_get
    if _newclass:
        xres = _swig_property(_mupdf.fz_pixmap_xres_get, _mupdf.fz_pixmap_xres_set)
    __swig_setmethods__["yres"] = _mupdf.fz_pixmap_yres_set
    __swig_getmethods__["yres"] = _mupdf.fz_pixmap_yres_get
    if _newclass:
        yres = _swig_property(_mupdf.fz_pixmap_yres_get, _mupdf.fz_pixmap_yres_set)
    __swig_setmethods__["colorspace"] = _mupdf.fz_pixmap_colorspace_set
    __swig_getmethods__["colorspace"] = _mupdf.fz_pixmap_colorspace_get
    if _newclass:
        colorspace = _swig_property(_mupdf.fz_pixmap_colorspace_get, _mupdf.fz_pixmap_colorspace_set)
    __swig_setmethods__["samples"] = _mupdf.fz_pixmap_samples_set
    __swig_getmethods__["samples"] = _mupdf.fz_pixmap_samples_get
    if _newclass:
        samples = _swig_property(_mupdf.fz_pixmap_samples_get, _mupdf.fz_pixmap_samples_set)
    __swig_setmethods__["underlying"] = _mupdf.fz_pixmap_underlying_set
    __swig_getmethods__["underlying"] = _mupdf.fz_pixmap_underlying_get
    if _newclass:
        underlying = _swig_property(_mupdf.fz_pixmap_underlying_get, _mupdf.fz_pixmap_underlying_set)

    def __init__(self):
        """__init__(fz_pixmap self) -> fz_pixmap"""
        this = _mupdf.new_fz_pixmap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_pixmap
    __del__ = lambda self: None
fz_pixmap_swigregister = _mupdf.fz_pixmap_swigregister
fz_pixmap_swigregister(fz_pixmap)

FZ_PIXMAP_FLAG_INTERPOLATE = _mupdf.FZ_PIXMAP_FLAG_INTERPOLATE
FZ_PIXMAP_FLAG_FREE_SAMPLES = _mupdf.FZ_PIXMAP_FLAG_FREE_SAMPLES
class fz_bitmap(_object):
    """Proxy of C++ fz_bitmap class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_bitmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_bitmap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.fz_bitmap_refs_set
    __swig_getmethods__["refs"] = _mupdf.fz_bitmap_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.fz_bitmap_refs_get, _mupdf.fz_bitmap_refs_set)
    __swig_setmethods__["w"] = _mupdf.fz_bitmap_w_set
    __swig_getmethods__["w"] = _mupdf.fz_bitmap_w_get
    if _newclass:
        w = _swig_property(_mupdf.fz_bitmap_w_get, _mupdf.fz_bitmap_w_set)
    __swig_setmethods__["h"] = _mupdf.fz_bitmap_h_set
    __swig_getmethods__["h"] = _mupdf.fz_bitmap_h_get
    if _newclass:
        h = _swig_property(_mupdf.fz_bitmap_h_get, _mupdf.fz_bitmap_h_set)
    __swig_setmethods__["stride"] = _mupdf.fz_bitmap_stride_set
    __swig_getmethods__["stride"] = _mupdf.fz_bitmap_stride_get
    if _newclass:
        stride = _swig_property(_mupdf.fz_bitmap_stride_get, _mupdf.fz_bitmap_stride_set)
    __swig_setmethods__["n"] = _mupdf.fz_bitmap_n_set
    __swig_getmethods__["n"] = _mupdf.fz_bitmap_n_get
    if _newclass:
        n = _swig_property(_mupdf.fz_bitmap_n_get, _mupdf.fz_bitmap_n_set)
    __swig_setmethods__["xres"] = _mupdf.fz_bitmap_xres_set
    __swig_getmethods__["xres"] = _mupdf.fz_bitmap_xres_get
    if _newclass:
        xres = _swig_property(_mupdf.fz_bitmap_xres_get, _mupdf.fz_bitmap_xres_set)
    __swig_setmethods__["yres"] = _mupdf.fz_bitmap_yres_set
    __swig_getmethods__["yres"] = _mupdf.fz_bitmap_yres_get
    if _newclass:
        yres = _swig_property(_mupdf.fz_bitmap_yres_get, _mupdf.fz_bitmap_yres_set)
    __swig_setmethods__["samples"] = _mupdf.fz_bitmap_samples_set
    __swig_getmethods__["samples"] = _mupdf.fz_bitmap_samples_get
    if _newclass:
        samples = _swig_property(_mupdf.fz_bitmap_samples_get, _mupdf.fz_bitmap_samples_set)

    def __init__(self):
        """__init__(fz_bitmap self) -> fz_bitmap"""
        this = _mupdf.new_fz_bitmap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_bitmap
    __del__ = lambda self: None
fz_bitmap_swigregister = _mupdf.fz_bitmap_swigregister
fz_bitmap_swigregister(fz_bitmap)

class fz_image(_object):
    """Proxy of C++ fz_image class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_image, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key_storable"] = _mupdf.fz_image_key_storable_set
    __swig_getmethods__["key_storable"] = _mupdf.fz_image_key_storable_get
    if _newclass:
        key_storable = _swig_property(_mupdf.fz_image_key_storable_get, _mupdf.fz_image_key_storable_set)
    __swig_setmethods__["w"] = _mupdf.fz_image_w_set
    __swig_getmethods__["w"] = _mupdf.fz_image_w_get
    if _newclass:
        w = _swig_property(_mupdf.fz_image_w_get, _mupdf.fz_image_w_set)
    __swig_setmethods__["h"] = _mupdf.fz_image_h_set
    __swig_getmethods__["h"] = _mupdf.fz_image_h_get
    if _newclass:
        h = _swig_property(_mupdf.fz_image_h_get, _mupdf.fz_image_h_set)
    __swig_setmethods__["n"] = _mupdf.fz_image_n_set
    __swig_getmethods__["n"] = _mupdf.fz_image_n_get
    if _newclass:
        n = _swig_property(_mupdf.fz_image_n_get, _mupdf.fz_image_n_set)
    __swig_setmethods__["bpc"] = _mupdf.fz_image_bpc_set
    __swig_getmethods__["bpc"] = _mupdf.fz_image_bpc_get
    if _newclass:
        bpc = _swig_property(_mupdf.fz_image_bpc_get, _mupdf.fz_image_bpc_set)
    __swig_setmethods__["imagemask"] = _mupdf.fz_image_imagemask_set
    __swig_getmethods__["imagemask"] = _mupdf.fz_image_imagemask_get
    if _newclass:
        imagemask = _swig_property(_mupdf.fz_image_imagemask_get, _mupdf.fz_image_imagemask_set)
    __swig_setmethods__["interpolate"] = _mupdf.fz_image_interpolate_set
    __swig_getmethods__["interpolate"] = _mupdf.fz_image_interpolate_get
    if _newclass:
        interpolate = _swig_property(_mupdf.fz_image_interpolate_get, _mupdf.fz_image_interpolate_set)
    __swig_setmethods__["use_colorkey"] = _mupdf.fz_image_use_colorkey_set
    __swig_getmethods__["use_colorkey"] = _mupdf.fz_image_use_colorkey_get
    if _newclass:
        use_colorkey = _swig_property(_mupdf.fz_image_use_colorkey_get, _mupdf.fz_image_use_colorkey_set)
    __swig_setmethods__["use_decode"] = _mupdf.fz_image_use_decode_set
    __swig_getmethods__["use_decode"] = _mupdf.fz_image_use_decode_get
    if _newclass:
        use_decode = _swig_property(_mupdf.fz_image_use_decode_get, _mupdf.fz_image_use_decode_set)
    __swig_setmethods__["invert_cmyk_jpeg"] = _mupdf.fz_image_invert_cmyk_jpeg_set
    __swig_getmethods__["invert_cmyk_jpeg"] = _mupdf.fz_image_invert_cmyk_jpeg_get
    if _newclass:
        invert_cmyk_jpeg = _swig_property(_mupdf.fz_image_invert_cmyk_jpeg_get, _mupdf.fz_image_invert_cmyk_jpeg_set)
    __swig_setmethods__["decoded"] = _mupdf.fz_image_decoded_set
    __swig_getmethods__["decoded"] = _mupdf.fz_image_decoded_get
    if _newclass:
        decoded = _swig_property(_mupdf.fz_image_decoded_get, _mupdf.fz_image_decoded_set)
    __swig_setmethods__["scalable"] = _mupdf.fz_image_scalable_set
    __swig_getmethods__["scalable"] = _mupdf.fz_image_scalable_get
    if _newclass:
        scalable = _swig_property(_mupdf.fz_image_scalable_get, _mupdf.fz_image_scalable_set)
    __swig_setmethods__["orientation"] = _mupdf.fz_image_orientation_set
    __swig_getmethods__["orientation"] = _mupdf.fz_image_orientation_get
    if _newclass:
        orientation = _swig_property(_mupdf.fz_image_orientation_get, _mupdf.fz_image_orientation_set)
    __swig_setmethods__["mask"] = _mupdf.fz_image_mask_set
    __swig_getmethods__["mask"] = _mupdf.fz_image_mask_get
    if _newclass:
        mask = _swig_property(_mupdf.fz_image_mask_get, _mupdf.fz_image_mask_set)
    __swig_setmethods__["xres"] = _mupdf.fz_image_xres_set
    __swig_getmethods__["xres"] = _mupdf.fz_image_xres_get
    if _newclass:
        xres = _swig_property(_mupdf.fz_image_xres_get, _mupdf.fz_image_xres_set)
    __swig_setmethods__["yres"] = _mupdf.fz_image_yres_set
    __swig_getmethods__["yres"] = _mupdf.fz_image_yres_get
    if _newclass:
        yres = _swig_property(_mupdf.fz_image_yres_get, _mupdf.fz_image_yres_set)
    __swig_setmethods__["colorspace"] = _mupdf.fz_image_colorspace_set
    __swig_getmethods__["colorspace"] = _mupdf.fz_image_colorspace_get
    if _newclass:
        colorspace = _swig_property(_mupdf.fz_image_colorspace_get, _mupdf.fz_image_colorspace_set)
    __swig_setmethods__["drop_image"] = _mupdf.fz_image_drop_image_set
    __swig_getmethods__["drop_image"] = _mupdf.fz_image_drop_image_get
    if _newclass:
        drop_image = _swig_property(_mupdf.fz_image_drop_image_get, _mupdf.fz_image_drop_image_set)
    __swig_setmethods__["get_pixmap"] = _mupdf.fz_image_get_pixmap_set
    __swig_getmethods__["get_pixmap"] = _mupdf.fz_image_get_pixmap_get
    if _newclass:
        get_pixmap = _swig_property(_mupdf.fz_image_get_pixmap_get, _mupdf.fz_image_get_pixmap_set)
    __swig_setmethods__["get_size"] = _mupdf.fz_image_get_size_set
    __swig_getmethods__["get_size"] = _mupdf.fz_image_get_size_get
    if _newclass:
        get_size = _swig_property(_mupdf.fz_image_get_size_get, _mupdf.fz_image_get_size_set)
    __swig_setmethods__["colorkey"] = _mupdf.fz_image_colorkey_set
    __swig_getmethods__["colorkey"] = _mupdf.fz_image_colorkey_get
    if _newclass:
        colorkey = _swig_property(_mupdf.fz_image_colorkey_get, _mupdf.fz_image_colorkey_set)
    __swig_setmethods__["decode"] = _mupdf.fz_image_decode_set
    __swig_getmethods__["decode"] = _mupdf.fz_image_decode_get
    if _newclass:
        decode = _swig_property(_mupdf.fz_image_decode_get, _mupdf.fz_image_decode_set)

    def __init__(self):
        """__init__(fz_image self) -> fz_image"""
        this = _mupdf.new_fz_image()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_image
    __del__ = lambda self: None
fz_image_swigregister = _mupdf.fz_image_swigregister
fz_image_swigregister(fz_image)

FZ_FUNCTION_BASED = _mupdf.FZ_FUNCTION_BASED
FZ_LINEAR = _mupdf.FZ_LINEAR
FZ_RADIAL = _mupdf.FZ_RADIAL
FZ_MESH_TYPE4 = _mupdf.FZ_MESH_TYPE4
FZ_MESH_TYPE5 = _mupdf.FZ_MESH_TYPE5
FZ_MESH_TYPE6 = _mupdf.FZ_MESH_TYPE6
FZ_MESH_TYPE7 = _mupdf.FZ_MESH_TYPE7
class fz_shade(_object):
    """Proxy of C++ fz_shade class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_shade, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_shade, name)
    __repr__ = _swig_repr
    __swig_setmethods__["storable"] = _mupdf.fz_shade_storable_set
    __swig_getmethods__["storable"] = _mupdf.fz_shade_storable_get
    if _newclass:
        storable = _swig_property(_mupdf.fz_shade_storable_get, _mupdf.fz_shade_storable_set)
    __swig_setmethods__["bbox"] = _mupdf.fz_shade_bbox_set
    __swig_getmethods__["bbox"] = _mupdf.fz_shade_bbox_get
    if _newclass:
        bbox = _swig_property(_mupdf.fz_shade_bbox_get, _mupdf.fz_shade_bbox_set)
    __swig_setmethods__["colorspace"] = _mupdf.fz_shade_colorspace_set
    __swig_getmethods__["colorspace"] = _mupdf.fz_shade_colorspace_get
    if _newclass:
        colorspace = _swig_property(_mupdf.fz_shade_colorspace_get, _mupdf.fz_shade_colorspace_set)
    __swig_setmethods__["matrix"] = _mupdf.fz_shade_matrix_set
    __swig_getmethods__["matrix"] = _mupdf.fz_shade_matrix_get
    if _newclass:
        matrix = _swig_property(_mupdf.fz_shade_matrix_get, _mupdf.fz_shade_matrix_set)
    __swig_setmethods__["use_background"] = _mupdf.fz_shade_use_background_set
    __swig_getmethods__["use_background"] = _mupdf.fz_shade_use_background_get
    if _newclass:
        use_background = _swig_property(_mupdf.fz_shade_use_background_get, _mupdf.fz_shade_use_background_set)
    __swig_setmethods__["background"] = _mupdf.fz_shade_background_set
    __swig_getmethods__["background"] = _mupdf.fz_shade_background_get
    if _newclass:
        background = _swig_property(_mupdf.fz_shade_background_get, _mupdf.fz_shade_background_set)
    __swig_setmethods__["use_function"] = _mupdf.fz_shade_use_function_set
    __swig_getmethods__["use_function"] = _mupdf.fz_shade_use_function_get
    if _newclass:
        use_function = _swig_property(_mupdf.fz_shade_use_function_get, _mupdf.fz_shade_use_function_set)
    __swig_setmethods__["function"] = _mupdf.fz_shade_function_set
    __swig_getmethods__["function"] = _mupdf.fz_shade_function_get
    if _newclass:
        function = _swig_property(_mupdf.fz_shade_function_get, _mupdf.fz_shade_function_set)
    __swig_setmethods__["type"] = _mupdf.fz_shade_type_set
    __swig_getmethods__["type"] = _mupdf.fz_shade_type_get
    if _newclass:
        type = _swig_property(_mupdf.fz_shade_type_get, _mupdf.fz_shade_type_set)
    __swig_setmethods__["buffer"] = _mupdf.fz_shade_buffer_set
    __swig_getmethods__["buffer"] = _mupdf.fz_shade_buffer_get
    if _newclass:
        buffer = _swig_property(_mupdf.fz_shade_buffer_get, _mupdf.fz_shade_buffer_set)

    def __init__(self):
        """__init__(fz_shade self) -> fz_shade"""
        this = _mupdf.new_fz_shade()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_shade
    __del__ = lambda self: None
fz_shade_swigregister = _mupdf.fz_shade_swigregister
fz_shade_swigregister(fz_shade)

class fz_vertex(_object):
    """Proxy of C++ fz_vertex class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_vertex, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _mupdf.fz_vertex_p_set
    __swig_getmethods__["p"] = _mupdf.fz_vertex_p_get
    if _newclass:
        p = _swig_property(_mupdf.fz_vertex_p_get, _mupdf.fz_vertex_p_set)
    __swig_setmethods__["c"] = _mupdf.fz_vertex_c_set
    __swig_getmethods__["c"] = _mupdf.fz_vertex_c_get
    if _newclass:
        c = _swig_property(_mupdf.fz_vertex_c_get, _mupdf.fz_vertex_c_set)

    def __init__(self):
        """__init__(fz_vertex self) -> fz_vertex"""
        this = _mupdf.new_fz_vertex()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_vertex
    __del__ = lambda self: None
fz_vertex_swigregister = _mupdf.fz_vertex_swigregister
fz_vertex_swigregister(fz_vertex)

FZ_ADOBE_CNS = _mupdf.FZ_ADOBE_CNS
FZ_ADOBE_GB = _mupdf.FZ_ADOBE_GB
FZ_ADOBE_JAPAN = _mupdf.FZ_ADOBE_JAPAN
FZ_ADOBE_KOREA = _mupdf.FZ_ADOBE_KOREA
class fz_font_flags_t(_object):
    """Proxy of C++ fz_font_flags_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_font_flags_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_font_flags_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["is_mono"] = _mupdf.fz_font_flags_t_is_mono_set
    __swig_getmethods__["is_mono"] = _mupdf.fz_font_flags_t_is_mono_get
    if _newclass:
        is_mono = _swig_property(_mupdf.fz_font_flags_t_is_mono_get, _mupdf.fz_font_flags_t_is_mono_set)
    __swig_setmethods__["is_serif"] = _mupdf.fz_font_flags_t_is_serif_set
    __swig_getmethods__["is_serif"] = _mupdf.fz_font_flags_t_is_serif_get
    if _newclass:
        is_serif = _swig_property(_mupdf.fz_font_flags_t_is_serif_get, _mupdf.fz_font_flags_t_is_serif_set)
    __swig_setmethods__["is_bold"] = _mupdf.fz_font_flags_t_is_bold_set
    __swig_getmethods__["is_bold"] = _mupdf.fz_font_flags_t_is_bold_get
    if _newclass:
        is_bold = _swig_property(_mupdf.fz_font_flags_t_is_bold_get, _mupdf.fz_font_flags_t_is_bold_set)
    __swig_setmethods__["is_italic"] = _mupdf.fz_font_flags_t_is_italic_set
    __swig_getmethods__["is_italic"] = _mupdf.fz_font_flags_t_is_italic_get
    if _newclass:
        is_italic = _swig_property(_mupdf.fz_font_flags_t_is_italic_get, _mupdf.fz_font_flags_t_is_italic_set)
    __swig_setmethods__["ft_substitute"] = _mupdf.fz_font_flags_t_ft_substitute_set
    __swig_getmethods__["ft_substitute"] = _mupdf.fz_font_flags_t_ft_substitute_get
    if _newclass:
        ft_substitute = _swig_property(_mupdf.fz_font_flags_t_ft_substitute_get, _mupdf.fz_font_flags_t_ft_substitute_set)
    __swig_setmethods__["ft_stretch"] = _mupdf.fz_font_flags_t_ft_stretch_set
    __swig_getmethods__["ft_stretch"] = _mupdf.fz_font_flags_t_ft_stretch_get
    if _newclass:
        ft_stretch = _swig_property(_mupdf.fz_font_flags_t_ft_stretch_get, _mupdf.fz_font_flags_t_ft_stretch_set)
    __swig_setmethods__["fake_bold"] = _mupdf.fz_font_flags_t_fake_bold_set
    __swig_getmethods__["fake_bold"] = _mupdf.fz_font_flags_t_fake_bold_get
    if _newclass:
        fake_bold = _swig_property(_mupdf.fz_font_flags_t_fake_bold_get, _mupdf.fz_font_flags_t_fake_bold_set)
    __swig_setmethods__["fake_italic"] = _mupdf.fz_font_flags_t_fake_italic_set
    __swig_getmethods__["fake_italic"] = _mupdf.fz_font_flags_t_fake_italic_get
    if _newclass:
        fake_italic = _swig_property(_mupdf.fz_font_flags_t_fake_italic_get, _mupdf.fz_font_flags_t_fake_italic_set)
    __swig_setmethods__["has_opentype"] = _mupdf.fz_font_flags_t_has_opentype_set
    __swig_getmethods__["has_opentype"] = _mupdf.fz_font_flags_t_has_opentype_get
    if _newclass:
        has_opentype = _swig_property(_mupdf.fz_font_flags_t_has_opentype_get, _mupdf.fz_font_flags_t_has_opentype_set)
    __swig_setmethods__["invalid_bbox"] = _mupdf.fz_font_flags_t_invalid_bbox_set
    __swig_getmethods__["invalid_bbox"] = _mupdf.fz_font_flags_t_invalid_bbox_get
    if _newclass:
        invalid_bbox = _swig_property(_mupdf.fz_font_flags_t_invalid_bbox_get, _mupdf.fz_font_flags_t_invalid_bbox_set)
    __swig_setmethods__["cjk"] = _mupdf.fz_font_flags_t_cjk_set
    __swig_getmethods__["cjk"] = _mupdf.fz_font_flags_t_cjk_get
    if _newclass:
        cjk = _swig_property(_mupdf.fz_font_flags_t_cjk_get, _mupdf.fz_font_flags_t_cjk_set)
    __swig_setmethods__["cjk_lang"] = _mupdf.fz_font_flags_t_cjk_lang_set
    __swig_getmethods__["cjk_lang"] = _mupdf.fz_font_flags_t_cjk_lang_get
    if _newclass:
        cjk_lang = _swig_property(_mupdf.fz_font_flags_t_cjk_lang_get, _mupdf.fz_font_flags_t_cjk_lang_set)

    def __init__(self):
        """__init__(fz_font_flags_t self) -> fz_font_flags_t"""
        this = _mupdf.new_fz_font_flags_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_font_flags_t
    __del__ = lambda self: None
fz_font_flags_t_swigregister = _mupdf.fz_font_flags_t_swigregister
fz_font_flags_t_swigregister(fz_font_flags_t)
fz_unicode_from_iso8859_1 = cvar.fz_unicode_from_iso8859_1
fz_unicode_from_iso8859_7 = cvar.fz_unicode_from_iso8859_7
fz_unicode_from_koi8u = cvar.fz_unicode_from_koi8u
fz_unicode_from_pdf_doc_encoding = cvar.fz_unicode_from_pdf_doc_encoding
fz_unicode_from_windows_1250 = cvar.fz_unicode_from_windows_1250
fz_unicode_from_windows_1251 = cvar.fz_unicode_from_windows_1251
fz_unicode_from_windows_1252 = cvar.fz_unicode_from_windows_1252

class fz_shaper_data_t(_object):
    """Proxy of C++ fz_shaper_data_t class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_shaper_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_shaper_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shaper_handle"] = _mupdf.fz_shaper_data_t_shaper_handle_set
    __swig_getmethods__["shaper_handle"] = _mupdf.fz_shaper_data_t_shaper_handle_get
    if _newclass:
        shaper_handle = _swig_property(_mupdf.fz_shaper_data_t_shaper_handle_get, _mupdf.fz_shaper_data_t_shaper_handle_set)
    __swig_setmethods__["destroy"] = _mupdf.fz_shaper_data_t_destroy_set
    __swig_getmethods__["destroy"] = _mupdf.fz_shaper_data_t_destroy_get
    if _newclass:
        destroy = _swig_property(_mupdf.fz_shaper_data_t_destroy_get, _mupdf.fz_shaper_data_t_destroy_set)

    def __init__(self):
        """__init__(fz_shaper_data_t self) -> fz_shaper_data_t"""
        this = _mupdf.new_fz_shaper_data_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_shaper_data_t
    __del__ = lambda self: None
fz_shaper_data_t_swigregister = _mupdf.fz_shaper_data_t_swigregister
fz_shaper_data_t_swigregister(fz_shaper_data_t)

class fz_font(_object):
    """Proxy of C++ fz_font class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_font, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_font, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.fz_font_refs_set
    __swig_getmethods__["refs"] = _mupdf.fz_font_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.fz_font_refs_get, _mupdf.fz_font_refs_set)
    __swig_setmethods__["name"] = _mupdf.fz_font_name_set
    __swig_getmethods__["name"] = _mupdf.fz_font_name_get
    if _newclass:
        name = _swig_property(_mupdf.fz_font_name_get, _mupdf.fz_font_name_set)
    __swig_setmethods__["buffer"] = _mupdf.fz_font_buffer_set
    __swig_getmethods__["buffer"] = _mupdf.fz_font_buffer_get
    if _newclass:
        buffer = _swig_property(_mupdf.fz_font_buffer_get, _mupdf.fz_font_buffer_set)
    __swig_setmethods__["flags"] = _mupdf.fz_font_flags_set
    __swig_getmethods__["flags"] = _mupdf.fz_font_flags_get
    if _newclass:
        flags = _swig_property(_mupdf.fz_font_flags_get, _mupdf.fz_font_flags_set)
    __swig_setmethods__["ft_face"] = _mupdf.fz_font_ft_face_set
    __swig_getmethods__["ft_face"] = _mupdf.fz_font_ft_face_get
    if _newclass:
        ft_face = _swig_property(_mupdf.fz_font_ft_face_get, _mupdf.fz_font_ft_face_set)
    __swig_setmethods__["shaper_data"] = _mupdf.fz_font_shaper_data_set
    __swig_getmethods__["shaper_data"] = _mupdf.fz_font_shaper_data_get
    if _newclass:
        shaper_data = _swig_property(_mupdf.fz_font_shaper_data_get, _mupdf.fz_font_shaper_data_set)
    __swig_setmethods__["t3matrix"] = _mupdf.fz_font_t3matrix_set
    __swig_getmethods__["t3matrix"] = _mupdf.fz_font_t3matrix_get
    if _newclass:
        t3matrix = _swig_property(_mupdf.fz_font_t3matrix_get, _mupdf.fz_font_t3matrix_set)
    __swig_setmethods__["t3resources"] = _mupdf.fz_font_t3resources_set
    __swig_getmethods__["t3resources"] = _mupdf.fz_font_t3resources_get
    if _newclass:
        t3resources = _swig_property(_mupdf.fz_font_t3resources_get, _mupdf.fz_font_t3resources_set)
    __swig_setmethods__["t3procs"] = _mupdf.fz_font_t3procs_set
    __swig_getmethods__["t3procs"] = _mupdf.fz_font_t3procs_get
    if _newclass:
        t3procs = _swig_property(_mupdf.fz_font_t3procs_get, _mupdf.fz_font_t3procs_set)
    __swig_setmethods__["t3lists"] = _mupdf.fz_font_t3lists_set
    __swig_getmethods__["t3lists"] = _mupdf.fz_font_t3lists_get
    if _newclass:
        t3lists = _swig_property(_mupdf.fz_font_t3lists_get, _mupdf.fz_font_t3lists_set)
    __swig_setmethods__["t3widths"] = _mupdf.fz_font_t3widths_set
    __swig_getmethods__["t3widths"] = _mupdf.fz_font_t3widths_get
    if _newclass:
        t3widths = _swig_property(_mupdf.fz_font_t3widths_get, _mupdf.fz_font_t3widths_set)
    __swig_setmethods__["t3flags"] = _mupdf.fz_font_t3flags_set
    __swig_getmethods__["t3flags"] = _mupdf.fz_font_t3flags_get
    if _newclass:
        t3flags = _swig_property(_mupdf.fz_font_t3flags_get, _mupdf.fz_font_t3flags_set)
    __swig_setmethods__["t3doc"] = _mupdf.fz_font_t3doc_set
    __swig_getmethods__["t3doc"] = _mupdf.fz_font_t3doc_get
    if _newclass:
        t3doc = _swig_property(_mupdf.fz_font_t3doc_get, _mupdf.fz_font_t3doc_set)
    __swig_setmethods__["t3run"] = _mupdf.fz_font_t3run_set
    __swig_getmethods__["t3run"] = _mupdf.fz_font_t3run_get
    if _newclass:
        t3run = _swig_property(_mupdf.fz_font_t3run_get, _mupdf.fz_font_t3run_set)
    __swig_setmethods__["t3freeres"] = _mupdf.fz_font_t3freeres_set
    __swig_getmethods__["t3freeres"] = _mupdf.fz_font_t3freeres_get
    if _newclass:
        t3freeres = _swig_property(_mupdf.fz_font_t3freeres_get, _mupdf.fz_font_t3freeres_set)
    __swig_setmethods__["bbox"] = _mupdf.fz_font_bbox_set
    __swig_getmethods__["bbox"] = _mupdf.fz_font_bbox_get
    if _newclass:
        bbox = _swig_property(_mupdf.fz_font_bbox_get, _mupdf.fz_font_bbox_set)
    __swig_setmethods__["glyph_count"] = _mupdf.fz_font_glyph_count_set
    __swig_getmethods__["glyph_count"] = _mupdf.fz_font_glyph_count_get
    if _newclass:
        glyph_count = _swig_property(_mupdf.fz_font_glyph_count_get, _mupdf.fz_font_glyph_count_set)
    __swig_setmethods__["bbox_table"] = _mupdf.fz_font_bbox_table_set
    __swig_getmethods__["bbox_table"] = _mupdf.fz_font_bbox_table_get
    if _newclass:
        bbox_table = _swig_property(_mupdf.fz_font_bbox_table_get, _mupdf.fz_font_bbox_table_set)
    __swig_setmethods__["width_count"] = _mupdf.fz_font_width_count_set
    __swig_getmethods__["width_count"] = _mupdf.fz_font_width_count_get
    if _newclass:
        width_count = _swig_property(_mupdf.fz_font_width_count_get, _mupdf.fz_font_width_count_set)
    __swig_setmethods__["width_default"] = _mupdf.fz_font_width_default_set
    __swig_getmethods__["width_default"] = _mupdf.fz_font_width_default_get
    if _newclass:
        width_default = _swig_property(_mupdf.fz_font_width_default_get, _mupdf.fz_font_width_default_set)
    __swig_setmethods__["width_table"] = _mupdf.fz_font_width_table_set
    __swig_getmethods__["width_table"] = _mupdf.fz_font_width_table_get
    if _newclass:
        width_table = _swig_property(_mupdf.fz_font_width_table_get, _mupdf.fz_font_width_table_set)
    __swig_setmethods__["advance_cache"] = _mupdf.fz_font_advance_cache_set
    __swig_getmethods__["advance_cache"] = _mupdf.fz_font_advance_cache_get
    if _newclass:
        advance_cache = _swig_property(_mupdf.fz_font_advance_cache_get, _mupdf.fz_font_advance_cache_set)
    __swig_setmethods__["encoding_cache"] = _mupdf.fz_font_encoding_cache_set
    __swig_getmethods__["encoding_cache"] = _mupdf.fz_font_encoding_cache_get
    if _newclass:
        encoding_cache = _swig_property(_mupdf.fz_font_encoding_cache_get, _mupdf.fz_font_encoding_cache_set)
    __swig_setmethods__["has_digest"] = _mupdf.fz_font_has_digest_set
    __swig_getmethods__["has_digest"] = _mupdf.fz_font_has_digest_get
    if _newclass:
        has_digest = _swig_property(_mupdf.fz_font_has_digest_get, _mupdf.fz_font_has_digest_set)
    __swig_setmethods__["digest"] = _mupdf.fz_font_digest_set
    __swig_getmethods__["digest"] = _mupdf.fz_font_digest_get
    if _newclass:
        digest = _swig_property(_mupdf.fz_font_digest_get, _mupdf.fz_font_digest_set)

    def __init__(self):
        """__init__(fz_font self) -> fz_font"""
        this = _mupdf.new_fz_font()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_font
    __del__ = lambda self: None
fz_font_swigregister = _mupdf.fz_font_swigregister
fz_font_swigregister(fz_font)

FZ_LINECAP_BUTT = _mupdf.FZ_LINECAP_BUTT
FZ_LINECAP_ROUND = _mupdf.FZ_LINECAP_ROUND
FZ_LINECAP_SQUARE = _mupdf.FZ_LINECAP_SQUARE
FZ_LINECAP_TRIANGLE = _mupdf.FZ_LINECAP_TRIANGLE
FZ_LINEJOIN_MITER = _mupdf.FZ_LINEJOIN_MITER
FZ_LINEJOIN_ROUND = _mupdf.FZ_LINEJOIN_ROUND
FZ_LINEJOIN_BEVEL = _mupdf.FZ_LINEJOIN_BEVEL
FZ_LINEJOIN_MITER_XPS = _mupdf.FZ_LINEJOIN_MITER_XPS
class fz_stroke_state(_object):
    """Proxy of C++ fz_stroke_state class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_stroke_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_stroke_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.fz_stroke_state_refs_set
    __swig_getmethods__["refs"] = _mupdf.fz_stroke_state_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.fz_stroke_state_refs_get, _mupdf.fz_stroke_state_refs_set)
    __swig_setmethods__["start_cap"] = _mupdf.fz_stroke_state_start_cap_set
    __swig_getmethods__["start_cap"] = _mupdf.fz_stroke_state_start_cap_get
    if _newclass:
        start_cap = _swig_property(_mupdf.fz_stroke_state_start_cap_get, _mupdf.fz_stroke_state_start_cap_set)
    __swig_setmethods__["dash_cap"] = _mupdf.fz_stroke_state_dash_cap_set
    __swig_getmethods__["dash_cap"] = _mupdf.fz_stroke_state_dash_cap_get
    if _newclass:
        dash_cap = _swig_property(_mupdf.fz_stroke_state_dash_cap_get, _mupdf.fz_stroke_state_dash_cap_set)
    __swig_setmethods__["end_cap"] = _mupdf.fz_stroke_state_end_cap_set
    __swig_getmethods__["end_cap"] = _mupdf.fz_stroke_state_end_cap_get
    if _newclass:
        end_cap = _swig_property(_mupdf.fz_stroke_state_end_cap_get, _mupdf.fz_stroke_state_end_cap_set)
    __swig_setmethods__["linejoin"] = _mupdf.fz_stroke_state_linejoin_set
    __swig_getmethods__["linejoin"] = _mupdf.fz_stroke_state_linejoin_get
    if _newclass:
        linejoin = _swig_property(_mupdf.fz_stroke_state_linejoin_get, _mupdf.fz_stroke_state_linejoin_set)
    __swig_setmethods__["linewidth"] = _mupdf.fz_stroke_state_linewidth_set
    __swig_getmethods__["linewidth"] = _mupdf.fz_stroke_state_linewidth_get
    if _newclass:
        linewidth = _swig_property(_mupdf.fz_stroke_state_linewidth_get, _mupdf.fz_stroke_state_linewidth_set)
    __swig_setmethods__["miterlimit"] = _mupdf.fz_stroke_state_miterlimit_set
    __swig_getmethods__["miterlimit"] = _mupdf.fz_stroke_state_miterlimit_get
    if _newclass:
        miterlimit = _swig_property(_mupdf.fz_stroke_state_miterlimit_get, _mupdf.fz_stroke_state_miterlimit_set)
    __swig_setmethods__["dash_phase"] = _mupdf.fz_stroke_state_dash_phase_set
    __swig_getmethods__["dash_phase"] = _mupdf.fz_stroke_state_dash_phase_get
    if _newclass:
        dash_phase = _swig_property(_mupdf.fz_stroke_state_dash_phase_get, _mupdf.fz_stroke_state_dash_phase_set)
    __swig_setmethods__["dash_len"] = _mupdf.fz_stroke_state_dash_len_set
    __swig_getmethods__["dash_len"] = _mupdf.fz_stroke_state_dash_len_get
    if _newclass:
        dash_len = _swig_property(_mupdf.fz_stroke_state_dash_len_get, _mupdf.fz_stroke_state_dash_len_set)
    __swig_setmethods__["dash_list"] = _mupdf.fz_stroke_state_dash_list_set
    __swig_getmethods__["dash_list"] = _mupdf.fz_stroke_state_dash_list_get
    if _newclass:
        dash_list = _swig_property(_mupdf.fz_stroke_state_dash_list_get, _mupdf.fz_stroke_state_dash_list_set)

    def __init__(self):
        """__init__(fz_stroke_state self) -> fz_stroke_state"""
        this = _mupdf.new_fz_stroke_state()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_stroke_state
    __del__ = lambda self: None
fz_stroke_state_swigregister = _mupdf.fz_stroke_state_swigregister
fz_stroke_state_swigregister(fz_stroke_state)

class fz_path_walker(_object):
    """Proxy of C++ fz_path_walker class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_path_walker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_path_walker, name)
    __repr__ = _swig_repr
    __swig_setmethods__["moveto"] = _mupdf.fz_path_walker_moveto_set
    __swig_getmethods__["moveto"] = _mupdf.fz_path_walker_moveto_get
    if _newclass:
        moveto = _swig_property(_mupdf.fz_path_walker_moveto_get, _mupdf.fz_path_walker_moveto_set)
    __swig_setmethods__["lineto"] = _mupdf.fz_path_walker_lineto_set
    __swig_getmethods__["lineto"] = _mupdf.fz_path_walker_lineto_get
    if _newclass:
        lineto = _swig_property(_mupdf.fz_path_walker_lineto_get, _mupdf.fz_path_walker_lineto_set)
    __swig_setmethods__["curveto"] = _mupdf.fz_path_walker_curveto_set
    __swig_getmethods__["curveto"] = _mupdf.fz_path_walker_curveto_get
    if _newclass:
        curveto = _swig_property(_mupdf.fz_path_walker_curveto_get, _mupdf.fz_path_walker_curveto_set)
    __swig_setmethods__["closepath"] = _mupdf.fz_path_walker_closepath_set
    __swig_getmethods__["closepath"] = _mupdf.fz_path_walker_closepath_get
    if _newclass:
        closepath = _swig_property(_mupdf.fz_path_walker_closepath_get, _mupdf.fz_path_walker_closepath_set)
    __swig_setmethods__["quadto"] = _mupdf.fz_path_walker_quadto_set
    __swig_getmethods__["quadto"] = _mupdf.fz_path_walker_quadto_get
    if _newclass:
        quadto = _swig_property(_mupdf.fz_path_walker_quadto_get, _mupdf.fz_path_walker_quadto_set)
    __swig_setmethods__["curvetov"] = _mupdf.fz_path_walker_curvetov_set
    __swig_getmethods__["curvetov"] = _mupdf.fz_path_walker_curvetov_get
    if _newclass:
        curvetov = _swig_property(_mupdf.fz_path_walker_curvetov_get, _mupdf.fz_path_walker_curvetov_set)
    __swig_setmethods__["curvetoy"] = _mupdf.fz_path_walker_curvetoy_set
    __swig_getmethods__["curvetoy"] = _mupdf.fz_path_walker_curvetoy_get
    if _newclass:
        curvetoy = _swig_property(_mupdf.fz_path_walker_curvetoy_get, _mupdf.fz_path_walker_curvetoy_set)
    __swig_setmethods__["rectto"] = _mupdf.fz_path_walker_rectto_set
    __swig_getmethods__["rectto"] = _mupdf.fz_path_walker_rectto_get
    if _newclass:
        rectto = _swig_property(_mupdf.fz_path_walker_rectto_get, _mupdf.fz_path_walker_rectto_set)

    def __init__(self):
        """__init__(fz_path_walker self) -> fz_path_walker"""
        this = _mupdf.new_fz_path_walker()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_path_walker
    __del__ = lambda self: None
fz_path_walker_swigregister = _mupdf.fz_path_walker_swigregister
fz_path_walker_swigregister(fz_path_walker)

class fz_text_item(_object):
    """Proxy of C++ fz_text_item class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_text_item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_text_item, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mupdf.fz_text_item_x_set
    __swig_getmethods__["x"] = _mupdf.fz_text_item_x_get
    if _newclass:
        x = _swig_property(_mupdf.fz_text_item_x_get, _mupdf.fz_text_item_x_set)
    __swig_setmethods__["y"] = _mupdf.fz_text_item_y_set
    __swig_getmethods__["y"] = _mupdf.fz_text_item_y_get
    if _newclass:
        y = _swig_property(_mupdf.fz_text_item_y_get, _mupdf.fz_text_item_y_set)
    __swig_setmethods__["gid"] = _mupdf.fz_text_item_gid_set
    __swig_getmethods__["gid"] = _mupdf.fz_text_item_gid_get
    if _newclass:
        gid = _swig_property(_mupdf.fz_text_item_gid_get, _mupdf.fz_text_item_gid_set)
    __swig_setmethods__["ucs"] = _mupdf.fz_text_item_ucs_set
    __swig_getmethods__["ucs"] = _mupdf.fz_text_item_ucs_get
    if _newclass:
        ucs = _swig_property(_mupdf.fz_text_item_ucs_get, _mupdf.fz_text_item_ucs_set)

    def __init__(self):
        """__init__(fz_text_item self) -> fz_text_item"""
        this = _mupdf.new_fz_text_item()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_text_item
    __del__ = lambda self: None
fz_text_item_swigregister = _mupdf.fz_text_item_swigregister
fz_text_item_swigregister(fz_text_item)
fz_default_stroke_state = cvar.fz_default_stroke_state

FZ_LANG_UNSET = _mupdf.FZ_LANG_UNSET
FZ_LANG_ur = _mupdf.FZ_LANG_ur
FZ_LANG_urd = _mupdf.FZ_LANG_urd
FZ_LANG_ko = _mupdf.FZ_LANG_ko
FZ_LANG_ja = _mupdf.FZ_LANG_ja
FZ_LANG_zh = _mupdf.FZ_LANG_zh
FZ_LANG_zh_Hans = _mupdf.FZ_LANG_zh_Hans
FZ_LANG_zh_Hant = _mupdf.FZ_LANG_zh_Hant
class fz_text_span(_object):
    """Proxy of C++ fz_text_span class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_text_span, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_text_span, name)
    __repr__ = _swig_repr
    __swig_setmethods__["font"] = _mupdf.fz_text_span_font_set
    __swig_getmethods__["font"] = _mupdf.fz_text_span_font_get
    if _newclass:
        font = _swig_property(_mupdf.fz_text_span_font_get, _mupdf.fz_text_span_font_set)
    __swig_setmethods__["trm"] = _mupdf.fz_text_span_trm_set
    __swig_getmethods__["trm"] = _mupdf.fz_text_span_trm_get
    if _newclass:
        trm = _swig_property(_mupdf.fz_text_span_trm_get, _mupdf.fz_text_span_trm_set)
    __swig_setmethods__["wmode"] = _mupdf.fz_text_span_wmode_set
    __swig_getmethods__["wmode"] = _mupdf.fz_text_span_wmode_get
    if _newclass:
        wmode = _swig_property(_mupdf.fz_text_span_wmode_get, _mupdf.fz_text_span_wmode_set)
    __swig_setmethods__["bidi_level"] = _mupdf.fz_text_span_bidi_level_set
    __swig_getmethods__["bidi_level"] = _mupdf.fz_text_span_bidi_level_get
    if _newclass:
        bidi_level = _swig_property(_mupdf.fz_text_span_bidi_level_get, _mupdf.fz_text_span_bidi_level_set)
    __swig_setmethods__["markup_dir"] = _mupdf.fz_text_span_markup_dir_set
    __swig_getmethods__["markup_dir"] = _mupdf.fz_text_span_markup_dir_get
    if _newclass:
        markup_dir = _swig_property(_mupdf.fz_text_span_markup_dir_get, _mupdf.fz_text_span_markup_dir_set)
    __swig_setmethods__["language"] = _mupdf.fz_text_span_language_set
    __swig_getmethods__["language"] = _mupdf.fz_text_span_language_get
    if _newclass:
        language = _swig_property(_mupdf.fz_text_span_language_get, _mupdf.fz_text_span_language_set)
    __swig_setmethods__["len"] = _mupdf.fz_text_span_len_set
    __swig_getmethods__["len"] = _mupdf.fz_text_span_len_get
    if _newclass:
        len = _swig_property(_mupdf.fz_text_span_len_get, _mupdf.fz_text_span_len_set)
    __swig_setmethods__["cap"] = _mupdf.fz_text_span_cap_set
    __swig_getmethods__["cap"] = _mupdf.fz_text_span_cap_get
    if _newclass:
        cap = _swig_property(_mupdf.fz_text_span_cap_get, _mupdf.fz_text_span_cap_set)
    __swig_setmethods__["items"] = _mupdf.fz_text_span_items_set
    __swig_getmethods__["items"] = _mupdf.fz_text_span_items_get
    if _newclass:
        items = _swig_property(_mupdf.fz_text_span_items_get, _mupdf.fz_text_span_items_set)
    __swig_setmethods__["next"] = _mupdf.fz_text_span_next_set
    __swig_getmethods__["next"] = _mupdf.fz_text_span_next_get
    if _newclass:
        next = _swig_property(_mupdf.fz_text_span_next_get, _mupdf.fz_text_span_next_set)

    def __init__(self):
        """__init__(fz_text_span self) -> fz_text_span"""
        this = _mupdf.new_fz_text_span()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_text_span
    __del__ = lambda self: None
fz_text_span_swigregister = _mupdf.fz_text_span_swigregister
fz_text_span_swigregister(fz_text_span)

class fz_text(_object):
    """Proxy of C++ fz_text class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_text, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_text, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.fz_text_refs_set
    __swig_getmethods__["refs"] = _mupdf.fz_text_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.fz_text_refs_get, _mupdf.fz_text_refs_set)
    __swig_setmethods__["head"] = _mupdf.fz_text_head_set
    __swig_getmethods__["head"] = _mupdf.fz_text_head_get
    if _newclass:
        head = _swig_property(_mupdf.fz_text_head_get, _mupdf.fz_text_head_set)
    __swig_setmethods__["tail"] = _mupdf.fz_text_tail_set
    __swig_getmethods__["tail"] = _mupdf.fz_text_tail_get
    if _newclass:
        tail = _swig_property(_mupdf.fz_text_tail_get, _mupdf.fz_text_tail_set)

    def __init__(self):
        """__init__(fz_text self) -> fz_text"""
        this = _mupdf.new_fz_text()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_text
    __del__ = lambda self: None
fz_text_swigregister = _mupdf.fz_text_swigregister
fz_text_swigregister(fz_text)

FZ_DEVFLAG_MASK = _mupdf.FZ_DEVFLAG_MASK
FZ_DEVFLAG_COLOR = _mupdf.FZ_DEVFLAG_COLOR
FZ_DEVFLAG_UNCACHEABLE = _mupdf.FZ_DEVFLAG_UNCACHEABLE
FZ_DEVFLAG_FILLCOLOR_UNDEFINED = _mupdf.FZ_DEVFLAG_FILLCOLOR_UNDEFINED
FZ_DEVFLAG_STROKECOLOR_UNDEFINED = _mupdf.FZ_DEVFLAG_STROKECOLOR_UNDEFINED
FZ_DEVFLAG_STARTCAP_UNDEFINED = _mupdf.FZ_DEVFLAG_STARTCAP_UNDEFINED
FZ_DEVFLAG_DASHCAP_UNDEFINED = _mupdf.FZ_DEVFLAG_DASHCAP_UNDEFINED
FZ_DEVFLAG_ENDCAP_UNDEFINED = _mupdf.FZ_DEVFLAG_ENDCAP_UNDEFINED
FZ_DEVFLAG_LINEJOIN_UNDEFINED = _mupdf.FZ_DEVFLAG_LINEJOIN_UNDEFINED
FZ_DEVFLAG_MITERLIMIT_UNDEFINED = _mupdf.FZ_DEVFLAG_MITERLIMIT_UNDEFINED
FZ_DEVFLAG_LINEWIDTH_UNDEFINED = _mupdf.FZ_DEVFLAG_LINEWIDTH_UNDEFINED
FZ_DEVFLAG_BBOX_DEFINED = _mupdf.FZ_DEVFLAG_BBOX_DEFINED
FZ_DEVFLAG_GRIDFIT_AS_TILED = _mupdf.FZ_DEVFLAG_GRIDFIT_AS_TILED
FZ_BLEND_NORMAL = _mupdf.FZ_BLEND_NORMAL
FZ_BLEND_MULTIPLY = _mupdf.FZ_BLEND_MULTIPLY
FZ_BLEND_SCREEN = _mupdf.FZ_BLEND_SCREEN
FZ_BLEND_OVERLAY = _mupdf.FZ_BLEND_OVERLAY
FZ_BLEND_DARKEN = _mupdf.FZ_BLEND_DARKEN
FZ_BLEND_LIGHTEN = _mupdf.FZ_BLEND_LIGHTEN
FZ_BLEND_COLOR_DODGE = _mupdf.FZ_BLEND_COLOR_DODGE
FZ_BLEND_COLOR_BURN = _mupdf.FZ_BLEND_COLOR_BURN
FZ_BLEND_HARD_LIGHT = _mupdf.FZ_BLEND_HARD_LIGHT
FZ_BLEND_SOFT_LIGHT = _mupdf.FZ_BLEND_SOFT_LIGHT
FZ_BLEND_DIFFERENCE = _mupdf.FZ_BLEND_DIFFERENCE
FZ_BLEND_EXCLUSION = _mupdf.FZ_BLEND_EXCLUSION
FZ_BLEND_HUE = _mupdf.FZ_BLEND_HUE
FZ_BLEND_SATURATION = _mupdf.FZ_BLEND_SATURATION
FZ_BLEND_COLOR = _mupdf.FZ_BLEND_COLOR
FZ_BLEND_LUMINOSITY = _mupdf.FZ_BLEND_LUMINOSITY
FZ_BLEND_MODEMASK = _mupdf.FZ_BLEND_MODEMASK
FZ_BLEND_ISOLATED = _mupdf.FZ_BLEND_ISOLATED
FZ_BLEND_KNOCKOUT = _mupdf.FZ_BLEND_KNOCKOUT
class fz_device_container_stack(_object):
    """Proxy of C++ fz_device_container_stack class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_device_container_stack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_device_container_stack, name)
    __repr__ = _swig_repr
    __swig_setmethods__["scissor"] = _mupdf.fz_device_container_stack_scissor_set
    __swig_getmethods__["scissor"] = _mupdf.fz_device_container_stack_scissor_get
    if _newclass:
        scissor = _swig_property(_mupdf.fz_device_container_stack_scissor_get, _mupdf.fz_device_container_stack_scissor_set)
    __swig_setmethods__["type"] = _mupdf.fz_device_container_stack_type_set
    __swig_getmethods__["type"] = _mupdf.fz_device_container_stack_type_get
    if _newclass:
        type = _swig_property(_mupdf.fz_device_container_stack_type_get, _mupdf.fz_device_container_stack_type_set)
    __swig_setmethods__["user"] = _mupdf.fz_device_container_stack_user_set
    __swig_getmethods__["user"] = _mupdf.fz_device_container_stack_user_get
    if _newclass:
        user = _swig_property(_mupdf.fz_device_container_stack_user_get, _mupdf.fz_device_container_stack_user_set)

    def __init__(self):
        """__init__(fz_device_container_stack self) -> fz_device_container_stack"""
        this = _mupdf.new_fz_device_container_stack()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_device_container_stack
    __del__ = lambda self: None
fz_device_container_stack_swigregister = _mupdf.fz_device_container_stack_swigregister
fz_device_container_stack_swigregister(fz_device_container_stack)

fz_device_container_stack_is_clip = _mupdf.fz_device_container_stack_is_clip
fz_device_container_stack_is_mask = _mupdf.fz_device_container_stack_is_mask
fz_device_container_stack_is_group = _mupdf.fz_device_container_stack_is_group
fz_device_container_stack_is_tile = _mupdf.fz_device_container_stack_is_tile
class fz_device(_object):
    """Proxy of C++ fz_device class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_device, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.fz_device_refs_set
    __swig_getmethods__["refs"] = _mupdf.fz_device_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.fz_device_refs_get, _mupdf.fz_device_refs_set)
    __swig_setmethods__["hints"] = _mupdf.fz_device_hints_set
    __swig_getmethods__["hints"] = _mupdf.fz_device_hints_get
    if _newclass:
        hints = _swig_property(_mupdf.fz_device_hints_get, _mupdf.fz_device_hints_set)
    __swig_setmethods__["flags"] = _mupdf.fz_device_flags_set
    __swig_getmethods__["flags"] = _mupdf.fz_device_flags_get
    if _newclass:
        flags = _swig_property(_mupdf.fz_device_flags_get, _mupdf.fz_device_flags_set)
    __swig_setmethods__["close_device"] = _mupdf.fz_device_close_device_set
    __swig_getmethods__["close_device"] = _mupdf.fz_device_close_device_get
    if _newclass:
        close_device = _swig_property(_mupdf.fz_device_close_device_get, _mupdf.fz_device_close_device_set)
    __swig_setmethods__["drop_device"] = _mupdf.fz_device_drop_device_set
    __swig_getmethods__["drop_device"] = _mupdf.fz_device_drop_device_get
    if _newclass:
        drop_device = _swig_property(_mupdf.fz_device_drop_device_get, _mupdf.fz_device_drop_device_set)
    __swig_setmethods__["fill_path"] = _mupdf.fz_device_fill_path_set
    __swig_getmethods__["fill_path"] = _mupdf.fz_device_fill_path_get
    if _newclass:
        fill_path = _swig_property(_mupdf.fz_device_fill_path_get, _mupdf.fz_device_fill_path_set)
    __swig_setmethods__["stroke_path"] = _mupdf.fz_device_stroke_path_set
    __swig_getmethods__["stroke_path"] = _mupdf.fz_device_stroke_path_get
    if _newclass:
        stroke_path = _swig_property(_mupdf.fz_device_stroke_path_get, _mupdf.fz_device_stroke_path_set)
    __swig_setmethods__["clip_path"] = _mupdf.fz_device_clip_path_set
    __swig_getmethods__["clip_path"] = _mupdf.fz_device_clip_path_get
    if _newclass:
        clip_path = _swig_property(_mupdf.fz_device_clip_path_get, _mupdf.fz_device_clip_path_set)
    __swig_setmethods__["clip_stroke_path"] = _mupdf.fz_device_clip_stroke_path_set
    __swig_getmethods__["clip_stroke_path"] = _mupdf.fz_device_clip_stroke_path_get
    if _newclass:
        clip_stroke_path = _swig_property(_mupdf.fz_device_clip_stroke_path_get, _mupdf.fz_device_clip_stroke_path_set)
    __swig_setmethods__["fill_text"] = _mupdf.fz_device_fill_text_set
    __swig_getmethods__["fill_text"] = _mupdf.fz_device_fill_text_get
    if _newclass:
        fill_text = _swig_property(_mupdf.fz_device_fill_text_get, _mupdf.fz_device_fill_text_set)
    __swig_setmethods__["stroke_text"] = _mupdf.fz_device_stroke_text_set
    __swig_getmethods__["stroke_text"] = _mupdf.fz_device_stroke_text_get
    if _newclass:
        stroke_text = _swig_property(_mupdf.fz_device_stroke_text_get, _mupdf.fz_device_stroke_text_set)
    __swig_setmethods__["clip_text"] = _mupdf.fz_device_clip_text_set
    __swig_getmethods__["clip_text"] = _mupdf.fz_device_clip_text_get
    if _newclass:
        clip_text = _swig_property(_mupdf.fz_device_clip_text_get, _mupdf.fz_device_clip_text_set)
    __swig_setmethods__["clip_stroke_text"] = _mupdf.fz_device_clip_stroke_text_set
    __swig_getmethods__["clip_stroke_text"] = _mupdf.fz_device_clip_stroke_text_get
    if _newclass:
        clip_stroke_text = _swig_property(_mupdf.fz_device_clip_stroke_text_get, _mupdf.fz_device_clip_stroke_text_set)
    __swig_setmethods__["ignore_text"] = _mupdf.fz_device_ignore_text_set
    __swig_getmethods__["ignore_text"] = _mupdf.fz_device_ignore_text_get
    if _newclass:
        ignore_text = _swig_property(_mupdf.fz_device_ignore_text_get, _mupdf.fz_device_ignore_text_set)
    __swig_setmethods__["fill_shade"] = _mupdf.fz_device_fill_shade_set
    __swig_getmethods__["fill_shade"] = _mupdf.fz_device_fill_shade_get
    if _newclass:
        fill_shade = _swig_property(_mupdf.fz_device_fill_shade_get, _mupdf.fz_device_fill_shade_set)
    __swig_setmethods__["fill_image"] = _mupdf.fz_device_fill_image_set
    __swig_getmethods__["fill_image"] = _mupdf.fz_device_fill_image_get
    if _newclass:
        fill_image = _swig_property(_mupdf.fz_device_fill_image_get, _mupdf.fz_device_fill_image_set)
    __swig_setmethods__["fill_image_mask"] = _mupdf.fz_device_fill_image_mask_set
    __swig_getmethods__["fill_image_mask"] = _mupdf.fz_device_fill_image_mask_get
    if _newclass:
        fill_image_mask = _swig_property(_mupdf.fz_device_fill_image_mask_get, _mupdf.fz_device_fill_image_mask_set)
    __swig_setmethods__["clip_image_mask"] = _mupdf.fz_device_clip_image_mask_set
    __swig_getmethods__["clip_image_mask"] = _mupdf.fz_device_clip_image_mask_get
    if _newclass:
        clip_image_mask = _swig_property(_mupdf.fz_device_clip_image_mask_get, _mupdf.fz_device_clip_image_mask_set)
    __swig_setmethods__["pop_clip"] = _mupdf.fz_device_pop_clip_set
    __swig_getmethods__["pop_clip"] = _mupdf.fz_device_pop_clip_get
    if _newclass:
        pop_clip = _swig_property(_mupdf.fz_device_pop_clip_get, _mupdf.fz_device_pop_clip_set)
    __swig_setmethods__["begin_mask"] = _mupdf.fz_device_begin_mask_set
    __swig_getmethods__["begin_mask"] = _mupdf.fz_device_begin_mask_get
    if _newclass:
        begin_mask = _swig_property(_mupdf.fz_device_begin_mask_get, _mupdf.fz_device_begin_mask_set)
    __swig_setmethods__["end_mask"] = _mupdf.fz_device_end_mask_set
    __swig_getmethods__["end_mask"] = _mupdf.fz_device_end_mask_get
    if _newclass:
        end_mask = _swig_property(_mupdf.fz_device_end_mask_get, _mupdf.fz_device_end_mask_set)
    __swig_setmethods__["begin_group"] = _mupdf.fz_device_begin_group_set
    __swig_getmethods__["begin_group"] = _mupdf.fz_device_begin_group_get
    if _newclass:
        begin_group = _swig_property(_mupdf.fz_device_begin_group_get, _mupdf.fz_device_begin_group_set)
    __swig_setmethods__["end_group"] = _mupdf.fz_device_end_group_set
    __swig_getmethods__["end_group"] = _mupdf.fz_device_end_group_get
    if _newclass:
        end_group = _swig_property(_mupdf.fz_device_end_group_get, _mupdf.fz_device_end_group_set)
    __swig_setmethods__["begin_tile"] = _mupdf.fz_device_begin_tile_set
    __swig_getmethods__["begin_tile"] = _mupdf.fz_device_begin_tile_get
    if _newclass:
        begin_tile = _swig_property(_mupdf.fz_device_begin_tile_get, _mupdf.fz_device_begin_tile_set)
    __swig_setmethods__["end_tile"] = _mupdf.fz_device_end_tile_set
    __swig_getmethods__["end_tile"] = _mupdf.fz_device_end_tile_get
    if _newclass:
        end_tile = _swig_property(_mupdf.fz_device_end_tile_get, _mupdf.fz_device_end_tile_set)
    __swig_setmethods__["render_flags"] = _mupdf.fz_device_render_flags_set
    __swig_getmethods__["render_flags"] = _mupdf.fz_device_render_flags_get
    if _newclass:
        render_flags = _swig_property(_mupdf.fz_device_render_flags_get, _mupdf.fz_device_render_flags_set)
    __swig_setmethods__["set_default_colorspaces"] = _mupdf.fz_device_set_default_colorspaces_set
    __swig_getmethods__["set_default_colorspaces"] = _mupdf.fz_device_set_default_colorspaces_get
    if _newclass:
        set_default_colorspaces = _swig_property(_mupdf.fz_device_set_default_colorspaces_get, _mupdf.fz_device_set_default_colorspaces_set)
    __swig_setmethods__["begin_layer"] = _mupdf.fz_device_begin_layer_set
    __swig_getmethods__["begin_layer"] = _mupdf.fz_device_begin_layer_get
    if _newclass:
        begin_layer = _swig_property(_mupdf.fz_device_begin_layer_get, _mupdf.fz_device_begin_layer_set)
    __swig_setmethods__["end_layer"] = _mupdf.fz_device_end_layer_set
    __swig_getmethods__["end_layer"] = _mupdf.fz_device_end_layer_get
    if _newclass:
        end_layer = _swig_property(_mupdf.fz_device_end_layer_get, _mupdf.fz_device_end_layer_set)
    __swig_setmethods__["d1_rect"] = _mupdf.fz_device_d1_rect_set
    __swig_getmethods__["d1_rect"] = _mupdf.fz_device_d1_rect_get
    if _newclass:
        d1_rect = _swig_property(_mupdf.fz_device_d1_rect_get, _mupdf.fz_device_d1_rect_set)
    __swig_setmethods__["container_len"] = _mupdf.fz_device_container_len_set
    __swig_getmethods__["container_len"] = _mupdf.fz_device_container_len_get
    if _newclass:
        container_len = _swig_property(_mupdf.fz_device_container_len_get, _mupdf.fz_device_container_len_set)
    __swig_setmethods__["container_cap"] = _mupdf.fz_device_container_cap_set
    __swig_getmethods__["container_cap"] = _mupdf.fz_device_container_cap_get
    if _newclass:
        container_cap = _swig_property(_mupdf.fz_device_container_cap_get, _mupdf.fz_device_container_cap_set)
    __swig_setmethods__["container"] = _mupdf.fz_device_container_set
    __swig_getmethods__["container"] = _mupdf.fz_device_container_get
    if _newclass:
        container = _swig_property(_mupdf.fz_device_container_get, _mupdf.fz_device_container_set)

    def __init__(self):
        """__init__(fz_device self) -> fz_device"""
        this = _mupdf.new_fz_device()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_device
    __del__ = lambda self: None
fz_device_swigregister = _mupdf.fz_device_swigregister
fz_device_swigregister(fz_device)

FZ_DONT_INTERPOLATE_IMAGES = _mupdf.FZ_DONT_INTERPOLATE_IMAGES
FZ_NO_CACHE = _mupdf.FZ_NO_CACHE
class fz_cookie(_object):
    """Proxy of C++ fz_cookie class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_cookie, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_cookie, name)
    __repr__ = _swig_repr
    __swig_setmethods__["progress"] = _mupdf.fz_cookie_progress_set
    __swig_getmethods__["progress"] = _mupdf.fz_cookie_progress_get
    if _newclass:
        progress = _swig_property(_mupdf.fz_cookie_progress_get, _mupdf.fz_cookie_progress_set)
    __swig_setmethods__["progress_max"] = _mupdf.fz_cookie_progress_max_set
    __swig_getmethods__["progress_max"] = _mupdf.fz_cookie_progress_max_get
    if _newclass:
        progress_max = _swig_property(_mupdf.fz_cookie_progress_max_get, _mupdf.fz_cookie_progress_max_set)
    __swig_setmethods__["errors"] = _mupdf.fz_cookie_errors_set
    __swig_getmethods__["errors"] = _mupdf.fz_cookie_errors_get
    if _newclass:
        errors = _swig_property(_mupdf.fz_cookie_errors_get, _mupdf.fz_cookie_errors_set)
    __swig_setmethods__["incomplete"] = _mupdf.fz_cookie_incomplete_set
    __swig_getmethods__["incomplete"] = _mupdf.fz_cookie_incomplete_get
    if _newclass:
        incomplete = _swig_property(_mupdf.fz_cookie_incomplete_get, _mupdf.fz_cookie_incomplete_set)

    def __init__(self):
        """__init__(fz_cookie self) -> fz_cookie"""
        this = _mupdf.new_fz_cookie()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_cookie
    __del__ = lambda self: None
fz_cookie_swigregister = _mupdf.fz_cookie_swigregister
fz_cookie_swigregister(fz_cookie)

FZ_TEST_OPT_IMAGES = _mupdf.FZ_TEST_OPT_IMAGES
FZ_TEST_OPT_SHADINGS = _mupdf.FZ_TEST_OPT_SHADINGS
class fz_draw_options(_object):
    """Proxy of C++ fz_draw_options class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_draw_options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_draw_options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rotate"] = _mupdf.fz_draw_options_rotate_set
    __swig_getmethods__["rotate"] = _mupdf.fz_draw_options_rotate_get
    if _newclass:
        rotate = _swig_property(_mupdf.fz_draw_options_rotate_get, _mupdf.fz_draw_options_rotate_set)
    __swig_setmethods__["x_resolution"] = _mupdf.fz_draw_options_x_resolution_set
    __swig_getmethods__["x_resolution"] = _mupdf.fz_draw_options_x_resolution_get
    if _newclass:
        x_resolution = _swig_property(_mupdf.fz_draw_options_x_resolution_get, _mupdf.fz_draw_options_x_resolution_set)
    __swig_setmethods__["y_resolution"] = _mupdf.fz_draw_options_y_resolution_set
    __swig_getmethods__["y_resolution"] = _mupdf.fz_draw_options_y_resolution_get
    if _newclass:
        y_resolution = _swig_property(_mupdf.fz_draw_options_y_resolution_get, _mupdf.fz_draw_options_y_resolution_set)
    __swig_setmethods__["width"] = _mupdf.fz_draw_options_width_set
    __swig_getmethods__["width"] = _mupdf.fz_draw_options_width_get
    if _newclass:
        width = _swig_property(_mupdf.fz_draw_options_width_get, _mupdf.fz_draw_options_width_set)
    __swig_setmethods__["height"] = _mupdf.fz_draw_options_height_set
    __swig_getmethods__["height"] = _mupdf.fz_draw_options_height_get
    if _newclass:
        height = _swig_property(_mupdf.fz_draw_options_height_get, _mupdf.fz_draw_options_height_set)
    __swig_setmethods__["colorspace"] = _mupdf.fz_draw_options_colorspace_set
    __swig_getmethods__["colorspace"] = _mupdf.fz_draw_options_colorspace_get
    if _newclass:
        colorspace = _swig_property(_mupdf.fz_draw_options_colorspace_get, _mupdf.fz_draw_options_colorspace_set)
    __swig_setmethods__["alpha"] = _mupdf.fz_draw_options_alpha_set
    __swig_getmethods__["alpha"] = _mupdf.fz_draw_options_alpha_get
    if _newclass:
        alpha = _swig_property(_mupdf.fz_draw_options_alpha_get, _mupdf.fz_draw_options_alpha_set)
    __swig_setmethods__["graphics"] = _mupdf.fz_draw_options_graphics_set
    __swig_getmethods__["graphics"] = _mupdf.fz_draw_options_graphics_get
    if _newclass:
        graphics = _swig_property(_mupdf.fz_draw_options_graphics_get, _mupdf.fz_draw_options_graphics_set)
    __swig_setmethods__["text"] = _mupdf.fz_draw_options_text_set
    __swig_getmethods__["text"] = _mupdf.fz_draw_options_text_get
    if _newclass:
        text = _swig_property(_mupdf.fz_draw_options_text_get, _mupdf.fz_draw_options_text_set)

    def __init__(self):
        """__init__(fz_draw_options self) -> fz_draw_options"""
        this = _mupdf.new_fz_draw_options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_draw_options
    __del__ = lambda self: None
fz_draw_options_swigregister = _mupdf.fz_draw_options_swigregister
fz_draw_options_swigregister(fz_draw_options)

FZ_TRANSITION_NONE = _mupdf.FZ_TRANSITION_NONE
FZ_TRANSITION_SPLIT = _mupdf.FZ_TRANSITION_SPLIT
FZ_TRANSITION_BLINDS = _mupdf.FZ_TRANSITION_BLINDS
FZ_TRANSITION_BOX = _mupdf.FZ_TRANSITION_BOX
FZ_TRANSITION_WIPE = _mupdf.FZ_TRANSITION_WIPE
FZ_TRANSITION_DISSOLVE = _mupdf.FZ_TRANSITION_DISSOLVE
FZ_TRANSITION_GLITTER = _mupdf.FZ_TRANSITION_GLITTER
FZ_TRANSITION_FLY = _mupdf.FZ_TRANSITION_FLY
FZ_TRANSITION_PUSH = _mupdf.FZ_TRANSITION_PUSH
FZ_TRANSITION_COVER = _mupdf.FZ_TRANSITION_COVER
FZ_TRANSITION_UNCOVER = _mupdf.FZ_TRANSITION_UNCOVER
FZ_TRANSITION_FADE = _mupdf.FZ_TRANSITION_FADE
class fz_transition(_object):
    """Proxy of C++ fz_transition class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_transition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_transition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mupdf.fz_transition_type_set
    __swig_getmethods__["type"] = _mupdf.fz_transition_type_get
    if _newclass:
        type = _swig_property(_mupdf.fz_transition_type_get, _mupdf.fz_transition_type_set)
    __swig_setmethods__["duration"] = _mupdf.fz_transition_duration_set
    __swig_getmethods__["duration"] = _mupdf.fz_transition_duration_get
    if _newclass:
        duration = _swig_property(_mupdf.fz_transition_duration_get, _mupdf.fz_transition_duration_set)
    __swig_setmethods__["vertical"] = _mupdf.fz_transition_vertical_set
    __swig_getmethods__["vertical"] = _mupdf.fz_transition_vertical_get
    if _newclass:
        vertical = _swig_property(_mupdf.fz_transition_vertical_get, _mupdf.fz_transition_vertical_set)
    __swig_setmethods__["outwards"] = _mupdf.fz_transition_outwards_set
    __swig_getmethods__["outwards"] = _mupdf.fz_transition_outwards_get
    if _newclass:
        outwards = _swig_property(_mupdf.fz_transition_outwards_get, _mupdf.fz_transition_outwards_set)
    __swig_setmethods__["direction"] = _mupdf.fz_transition_direction_set
    __swig_getmethods__["direction"] = _mupdf.fz_transition_direction_get
    if _newclass:
        direction = _swig_property(_mupdf.fz_transition_direction_get, _mupdf.fz_transition_direction_set)
    __swig_setmethods__["state0"] = _mupdf.fz_transition_state0_set
    __swig_getmethods__["state0"] = _mupdf.fz_transition_state0_get
    if _newclass:
        state0 = _swig_property(_mupdf.fz_transition_state0_get, _mupdf.fz_transition_state0_set)
    __swig_setmethods__["state1"] = _mupdf.fz_transition_state1_set
    __swig_getmethods__["state1"] = _mupdf.fz_transition_state1_get
    if _newclass:
        state1 = _swig_property(_mupdf.fz_transition_state1_get, _mupdf.fz_transition_state1_set)

    def __init__(self):
        """__init__(fz_transition self) -> fz_transition"""
        this = _mupdf.new_fz_transition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_transition
    __del__ = lambda self: None
fz_transition_swigregister = _mupdf.fz_transition_swigregister
fz_transition_swigregister(fz_transition)

class fz_link(_object):
    """Proxy of C++ fz_link class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_link, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_link, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.fz_link_refs_set
    __swig_getmethods__["refs"] = _mupdf.fz_link_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.fz_link_refs_get, _mupdf.fz_link_refs_set)
    __swig_setmethods__["next"] = _mupdf.fz_link_next_set
    __swig_getmethods__["next"] = _mupdf.fz_link_next_get
    if _newclass:
        next = _swig_property(_mupdf.fz_link_next_get, _mupdf.fz_link_next_set)
    __swig_setmethods__["rect"] = _mupdf.fz_link_rect_set
    __swig_getmethods__["rect"] = _mupdf.fz_link_rect_get
    if _newclass:
        rect = _swig_property(_mupdf.fz_link_rect_get, _mupdf.fz_link_rect_set)
    __swig_setmethods__["uri"] = _mupdf.fz_link_uri_set
    __swig_getmethods__["uri"] = _mupdf.fz_link_uri_get
    if _newclass:
        uri = _swig_property(_mupdf.fz_link_uri_get, _mupdf.fz_link_uri_set)

    def __init__(self):
        """__init__(fz_link self) -> fz_link"""
        this = _mupdf.new_fz_link()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_link
    __del__ = lambda self: None
fz_link_swigregister = _mupdf.fz_link_swigregister
fz_link_swigregister(fz_link)

class fz_outline(_object):
    """Proxy of C++ fz_outline class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_outline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_outline, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.fz_outline_refs_set
    __swig_getmethods__["refs"] = _mupdf.fz_outline_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.fz_outline_refs_get, _mupdf.fz_outline_refs_set)
    __swig_setmethods__["title"] = _mupdf.fz_outline_title_set
    __swig_getmethods__["title"] = _mupdf.fz_outline_title_get
    if _newclass:
        title = _swig_property(_mupdf.fz_outline_title_get, _mupdf.fz_outline_title_set)
    __swig_setmethods__["uri"] = _mupdf.fz_outline_uri_set
    __swig_getmethods__["uri"] = _mupdf.fz_outline_uri_get
    if _newclass:
        uri = _swig_property(_mupdf.fz_outline_uri_get, _mupdf.fz_outline_uri_set)
    __swig_setmethods__["page"] = _mupdf.fz_outline_page_set
    __swig_getmethods__["page"] = _mupdf.fz_outline_page_get
    if _newclass:
        page = _swig_property(_mupdf.fz_outline_page_get, _mupdf.fz_outline_page_set)
    __swig_setmethods__["x"] = _mupdf.fz_outline_x_set
    __swig_getmethods__["x"] = _mupdf.fz_outline_x_get
    if _newclass:
        x = _swig_property(_mupdf.fz_outline_x_get, _mupdf.fz_outline_x_set)
    __swig_setmethods__["y"] = _mupdf.fz_outline_y_set
    __swig_getmethods__["y"] = _mupdf.fz_outline_y_get
    if _newclass:
        y = _swig_property(_mupdf.fz_outline_y_get, _mupdf.fz_outline_y_set)
    __swig_setmethods__["next"] = _mupdf.fz_outline_next_set
    __swig_getmethods__["next"] = _mupdf.fz_outline_next_get
    if _newclass:
        next = _swig_property(_mupdf.fz_outline_next_get, _mupdf.fz_outline_next_set)
    __swig_setmethods__["down"] = _mupdf.fz_outline_down_set
    __swig_getmethods__["down"] = _mupdf.fz_outline_down_get
    if _newclass:
        down = _swig_property(_mupdf.fz_outline_down_get, _mupdf.fz_outline_down_set)
    __swig_setmethods__["is_open"] = _mupdf.fz_outline_is_open_set
    __swig_getmethods__["is_open"] = _mupdf.fz_outline_is_open_get
    if _newclass:
        is_open = _swig_property(_mupdf.fz_outline_is_open_get, _mupdf.fz_outline_is_open_set)

    def __init__(self):
        """__init__(fz_outline self) -> fz_outline"""
        this = _mupdf.new_fz_outline()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_outline
    __del__ = lambda self: None
fz_outline_swigregister = _mupdf.fz_outline_swigregister
fz_outline_swigregister(fz_outline)

class fz_location(_object):
    """Proxy of C++ fz_location class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_location, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_location, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chapter"] = _mupdf.fz_location_chapter_set
    __swig_getmethods__["chapter"] = _mupdf.fz_location_chapter_get
    if _newclass:
        chapter = _swig_property(_mupdf.fz_location_chapter_get, _mupdf.fz_location_chapter_set)
    __swig_setmethods__["page"] = _mupdf.fz_location_page_set
    __swig_getmethods__["page"] = _mupdf.fz_location_page_get
    if _newclass:
        page = _swig_property(_mupdf.fz_location_page_get, _mupdf.fz_location_page_set)

    def __init__(self):
        """__init__(fz_location self) -> fz_location"""
        this = _mupdf.new_fz_location()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_location
    __del__ = lambda self: None
fz_location_swigregister = _mupdf.fz_location_swigregister
fz_location_swigregister(fz_location)

FZ_LAYOUT_KINDLE_W = _mupdf.FZ_LAYOUT_KINDLE_W
FZ_LAYOUT_KINDLE_H = _mupdf.FZ_LAYOUT_KINDLE_H
FZ_LAYOUT_KINDLE_EM = _mupdf.FZ_LAYOUT_KINDLE_EM
FZ_LAYOUT_US_POCKET_W = _mupdf.FZ_LAYOUT_US_POCKET_W
FZ_LAYOUT_US_POCKET_H = _mupdf.FZ_LAYOUT_US_POCKET_H
FZ_LAYOUT_US_POCKET_EM = _mupdf.FZ_LAYOUT_US_POCKET_EM
FZ_LAYOUT_US_TRADE_W = _mupdf.FZ_LAYOUT_US_TRADE_W
FZ_LAYOUT_US_TRADE_H = _mupdf.FZ_LAYOUT_US_TRADE_H
FZ_LAYOUT_US_TRADE_EM = _mupdf.FZ_LAYOUT_US_TRADE_EM
FZ_LAYOUT_UK_A_FORMAT_W = _mupdf.FZ_LAYOUT_UK_A_FORMAT_W
FZ_LAYOUT_UK_A_FORMAT_H = _mupdf.FZ_LAYOUT_UK_A_FORMAT_H
FZ_LAYOUT_UK_A_FORMAT_EM = _mupdf.FZ_LAYOUT_UK_A_FORMAT_EM
FZ_LAYOUT_UK_B_FORMAT_W = _mupdf.FZ_LAYOUT_UK_B_FORMAT_W
FZ_LAYOUT_UK_B_FORMAT_H = _mupdf.FZ_LAYOUT_UK_B_FORMAT_H
FZ_LAYOUT_UK_B_FORMAT_EM = _mupdf.FZ_LAYOUT_UK_B_FORMAT_EM
FZ_LAYOUT_UK_C_FORMAT_W = _mupdf.FZ_LAYOUT_UK_C_FORMAT_W
FZ_LAYOUT_UK_C_FORMAT_H = _mupdf.FZ_LAYOUT_UK_C_FORMAT_H
FZ_LAYOUT_UK_C_FORMAT_EM = _mupdf.FZ_LAYOUT_UK_C_FORMAT_EM
FZ_LAYOUT_A5_W = _mupdf.FZ_LAYOUT_A5_W
FZ_LAYOUT_A5_H = _mupdf.FZ_LAYOUT_A5_H
FZ_LAYOUT_A5_EM = _mupdf.FZ_LAYOUT_A5_EM
FZ_DEFAULT_LAYOUT_W = _mupdf.FZ_DEFAULT_LAYOUT_W
FZ_DEFAULT_LAYOUT_H = _mupdf.FZ_DEFAULT_LAYOUT_H
FZ_DEFAULT_LAYOUT_EM = _mupdf.FZ_DEFAULT_LAYOUT_EM
FZ_PERMISSION_PRINT = _mupdf.FZ_PERMISSION_PRINT
FZ_PERMISSION_COPY = _mupdf.FZ_PERMISSION_COPY
FZ_PERMISSION_EDIT = _mupdf.FZ_PERMISSION_EDIT
FZ_PERMISSION_ANNOTATE = _mupdf.FZ_PERMISSION_ANNOTATE
FZ_META_FORMAT = _mupdf.FZ_META_FORMAT
FZ_META_ENCRYPTION = _mupdf.FZ_META_ENCRYPTION
FZ_META_INFO_TITLE = _mupdf.FZ_META_INFO_TITLE
FZ_META_INFO_AUTHOR = _mupdf.FZ_META_INFO_AUTHOR
FZ_META_INFO_SUBJECT = _mupdf.FZ_META_INFO_SUBJECT
FZ_META_INFO_KEYWORDS = _mupdf.FZ_META_INFO_KEYWORDS
FZ_META_INFO_CREATOR = _mupdf.FZ_META_INFO_CREATOR
FZ_META_INFO_PRODUCER = _mupdf.FZ_META_INFO_PRODUCER
FZ_META_INFO_CREATIONDATE = _mupdf.FZ_META_INFO_CREATIONDATE
FZ_META_INFO_MODIFICATIONDATE = _mupdf.FZ_META_INFO_MODIFICATIONDATE
class fz_page(_object):
    """Proxy of C++ fz_page class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_page, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_page, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.fz_page_refs_set
    __swig_getmethods__["refs"] = _mupdf.fz_page_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.fz_page_refs_get, _mupdf.fz_page_refs_set)
    __swig_setmethods__["doc"] = _mupdf.fz_page_doc_set
    __swig_getmethods__["doc"] = _mupdf.fz_page_doc_get
    if _newclass:
        doc = _swig_property(_mupdf.fz_page_doc_get, _mupdf.fz_page_doc_set)
    __swig_setmethods__["chapter"] = _mupdf.fz_page_chapter_set
    __swig_getmethods__["chapter"] = _mupdf.fz_page_chapter_get
    if _newclass:
        chapter = _swig_property(_mupdf.fz_page_chapter_get, _mupdf.fz_page_chapter_set)
    __swig_setmethods__["number"] = _mupdf.fz_page_number_set
    __swig_getmethods__["number"] = _mupdf.fz_page_number_get
    if _newclass:
        number = _swig_property(_mupdf.fz_page_number_get, _mupdf.fz_page_number_set)
    __swig_setmethods__["incomplete"] = _mupdf.fz_page_incomplete_set
    __swig_getmethods__["incomplete"] = _mupdf.fz_page_incomplete_get
    if _newclass:
        incomplete = _swig_property(_mupdf.fz_page_incomplete_get, _mupdf.fz_page_incomplete_set)
    __swig_setmethods__["drop_page"] = _mupdf.fz_page_drop_page_set
    __swig_getmethods__["drop_page"] = _mupdf.fz_page_drop_page_get
    if _newclass:
        drop_page = _swig_property(_mupdf.fz_page_drop_page_get, _mupdf.fz_page_drop_page_set)
    __swig_setmethods__["bound_page"] = _mupdf.fz_page_bound_page_set
    __swig_getmethods__["bound_page"] = _mupdf.fz_page_bound_page_get
    if _newclass:
        bound_page = _swig_property(_mupdf.fz_page_bound_page_get, _mupdf.fz_page_bound_page_set)
    __swig_setmethods__["run_page_contents"] = _mupdf.fz_page_run_page_contents_set
    __swig_getmethods__["run_page_contents"] = _mupdf.fz_page_run_page_contents_get
    if _newclass:
        run_page_contents = _swig_property(_mupdf.fz_page_run_page_contents_get, _mupdf.fz_page_run_page_contents_set)
    __swig_setmethods__["run_page_annots"] = _mupdf.fz_page_run_page_annots_set
    __swig_getmethods__["run_page_annots"] = _mupdf.fz_page_run_page_annots_get
    if _newclass:
        run_page_annots = _swig_property(_mupdf.fz_page_run_page_annots_get, _mupdf.fz_page_run_page_annots_set)
    __swig_setmethods__["run_page_widgets"] = _mupdf.fz_page_run_page_widgets_set
    __swig_getmethods__["run_page_widgets"] = _mupdf.fz_page_run_page_widgets_get
    if _newclass:
        run_page_widgets = _swig_property(_mupdf.fz_page_run_page_widgets_get, _mupdf.fz_page_run_page_widgets_set)
    __swig_setmethods__["load_links"] = _mupdf.fz_page_load_links_set
    __swig_getmethods__["load_links"] = _mupdf.fz_page_load_links_get
    if _newclass:
        load_links = _swig_property(_mupdf.fz_page_load_links_get, _mupdf.fz_page_load_links_set)
    __swig_setmethods__["page_presentation"] = _mupdf.fz_page_page_presentation_set
    __swig_getmethods__["page_presentation"] = _mupdf.fz_page_page_presentation_get
    if _newclass:
        page_presentation = _swig_property(_mupdf.fz_page_page_presentation_get, _mupdf.fz_page_page_presentation_set)
    __swig_setmethods__["control_separation"] = _mupdf.fz_page_control_separation_set
    __swig_getmethods__["control_separation"] = _mupdf.fz_page_control_separation_get
    if _newclass:
        control_separation = _swig_property(_mupdf.fz_page_control_separation_get, _mupdf.fz_page_control_separation_set)
    __swig_setmethods__["separation_disabled"] = _mupdf.fz_page_separation_disabled_set
    __swig_getmethods__["separation_disabled"] = _mupdf.fz_page_separation_disabled_get
    if _newclass:
        separation_disabled = _swig_property(_mupdf.fz_page_separation_disabled_get, _mupdf.fz_page_separation_disabled_set)
    __swig_setmethods__["separations"] = _mupdf.fz_page_separations_set
    __swig_getmethods__["separations"] = _mupdf.fz_page_separations_get
    if _newclass:
        separations = _swig_property(_mupdf.fz_page_separations_get, _mupdf.fz_page_separations_set)
    __swig_setmethods__["overprint"] = _mupdf.fz_page_overprint_set
    __swig_getmethods__["overprint"] = _mupdf.fz_page_overprint_get
    if _newclass:
        overprint = _swig_property(_mupdf.fz_page_overprint_get, _mupdf.fz_page_overprint_set)
    __swig_setmethods__["create_link"] = _mupdf.fz_page_create_link_set
    __swig_getmethods__["create_link"] = _mupdf.fz_page_create_link_get
    if _newclass:
        create_link = _swig_property(_mupdf.fz_page_create_link_get, _mupdf.fz_page_create_link_set)
    __swig_setmethods__["prev"] = _mupdf.fz_page_prev_set
    __swig_getmethods__["prev"] = _mupdf.fz_page_prev_get
    if _newclass:
        prev = _swig_property(_mupdf.fz_page_prev_get, _mupdf.fz_page_prev_set)
    __swig_setmethods__["next"] = _mupdf.fz_page_next_set
    __swig_getmethods__["next"] = _mupdf.fz_page_next_get
    if _newclass:
        next = _swig_property(_mupdf.fz_page_next_get, _mupdf.fz_page_next_set)

    def __init__(self):
        """__init__(fz_page self) -> fz_page"""
        this = _mupdf.new_fz_page()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_page
    __del__ = lambda self: None
fz_page_swigregister = _mupdf.fz_page_swigregister
fz_page_swigregister(fz_page)

class fz_document(_object):
    """Proxy of C++ fz_document class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_document, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_document, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.fz_document_refs_set
    __swig_getmethods__["refs"] = _mupdf.fz_document_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.fz_document_refs_get, _mupdf.fz_document_refs_set)
    __swig_setmethods__["drop_document"] = _mupdf.fz_document_drop_document_set
    __swig_getmethods__["drop_document"] = _mupdf.fz_document_drop_document_get
    if _newclass:
        drop_document = _swig_property(_mupdf.fz_document_drop_document_get, _mupdf.fz_document_drop_document_set)
    __swig_setmethods__["needs_password"] = _mupdf.fz_document_needs_password_set
    __swig_getmethods__["needs_password"] = _mupdf.fz_document_needs_password_get
    if _newclass:
        needs_password = _swig_property(_mupdf.fz_document_needs_password_get, _mupdf.fz_document_needs_password_set)
    __swig_setmethods__["authenticate_password"] = _mupdf.fz_document_authenticate_password_set
    __swig_getmethods__["authenticate_password"] = _mupdf.fz_document_authenticate_password_get
    if _newclass:
        authenticate_password = _swig_property(_mupdf.fz_document_authenticate_password_get, _mupdf.fz_document_authenticate_password_set)
    __swig_setmethods__["has_permission"] = _mupdf.fz_document_has_permission_set
    __swig_getmethods__["has_permission"] = _mupdf.fz_document_has_permission_get
    if _newclass:
        has_permission = _swig_property(_mupdf.fz_document_has_permission_get, _mupdf.fz_document_has_permission_set)
    __swig_setmethods__["load_outline"] = _mupdf.fz_document_load_outline_set
    __swig_getmethods__["load_outline"] = _mupdf.fz_document_load_outline_get
    if _newclass:
        load_outline = _swig_property(_mupdf.fz_document_load_outline_get, _mupdf.fz_document_load_outline_set)
    __swig_setmethods__["layout"] = _mupdf.fz_document_layout_set
    __swig_getmethods__["layout"] = _mupdf.fz_document_layout_get
    if _newclass:
        layout = _swig_property(_mupdf.fz_document_layout_get, _mupdf.fz_document_layout_set)
    __swig_setmethods__["make_bookmark"] = _mupdf.fz_document_make_bookmark_set
    __swig_getmethods__["make_bookmark"] = _mupdf.fz_document_make_bookmark_get
    if _newclass:
        make_bookmark = _swig_property(_mupdf.fz_document_make_bookmark_get, _mupdf.fz_document_make_bookmark_set)
    __swig_setmethods__["lookup_bookmark"] = _mupdf.fz_document_lookup_bookmark_set
    __swig_getmethods__["lookup_bookmark"] = _mupdf.fz_document_lookup_bookmark_get
    if _newclass:
        lookup_bookmark = _swig_property(_mupdf.fz_document_lookup_bookmark_get, _mupdf.fz_document_lookup_bookmark_set)
    __swig_setmethods__["resolve_link"] = _mupdf.fz_document_resolve_link_set
    __swig_getmethods__["resolve_link"] = _mupdf.fz_document_resolve_link_get
    if _newclass:
        resolve_link = _swig_property(_mupdf.fz_document_resolve_link_get, _mupdf.fz_document_resolve_link_set)
    __swig_setmethods__["count_chapters"] = _mupdf.fz_document_count_chapters_set
    __swig_getmethods__["count_chapters"] = _mupdf.fz_document_count_chapters_get
    if _newclass:
        count_chapters = _swig_property(_mupdf.fz_document_count_chapters_get, _mupdf.fz_document_count_chapters_set)
    __swig_setmethods__["count_pages"] = _mupdf.fz_document_count_pages_set
    __swig_getmethods__["count_pages"] = _mupdf.fz_document_count_pages_get
    if _newclass:
        count_pages = _swig_property(_mupdf.fz_document_count_pages_get, _mupdf.fz_document_count_pages_set)
    __swig_setmethods__["load_page"] = _mupdf.fz_document_load_page_set
    __swig_getmethods__["load_page"] = _mupdf.fz_document_load_page_get
    if _newclass:
        load_page = _swig_property(_mupdf.fz_document_load_page_get, _mupdf.fz_document_load_page_set)
    __swig_setmethods__["lookup_metadata"] = _mupdf.fz_document_lookup_metadata_set
    __swig_getmethods__["lookup_metadata"] = _mupdf.fz_document_lookup_metadata_get
    if _newclass:
        lookup_metadata = _swig_property(_mupdf.fz_document_lookup_metadata_get, _mupdf.fz_document_lookup_metadata_set)
    __swig_setmethods__["set_metadata"] = _mupdf.fz_document_set_metadata_set
    __swig_getmethods__["set_metadata"] = _mupdf.fz_document_set_metadata_get
    if _newclass:
        set_metadata = _swig_property(_mupdf.fz_document_set_metadata_get, _mupdf.fz_document_set_metadata_set)
    __swig_setmethods__["get_output_intent"] = _mupdf.fz_document_get_output_intent_set
    __swig_getmethods__["get_output_intent"] = _mupdf.fz_document_get_output_intent_get
    if _newclass:
        get_output_intent = _swig_property(_mupdf.fz_document_get_output_intent_get, _mupdf.fz_document_get_output_intent_set)
    __swig_setmethods__["output_accelerator"] = _mupdf.fz_document_output_accelerator_set
    __swig_getmethods__["output_accelerator"] = _mupdf.fz_document_output_accelerator_get
    if _newclass:
        output_accelerator = _swig_property(_mupdf.fz_document_output_accelerator_get, _mupdf.fz_document_output_accelerator_set)
    __swig_setmethods__["did_layout"] = _mupdf.fz_document_did_layout_set
    __swig_getmethods__["did_layout"] = _mupdf.fz_document_did_layout_get
    if _newclass:
        did_layout = _swig_property(_mupdf.fz_document_did_layout_get, _mupdf.fz_document_did_layout_set)
    __swig_setmethods__["is_reflowable"] = _mupdf.fz_document_is_reflowable_set
    __swig_getmethods__["is_reflowable"] = _mupdf.fz_document_is_reflowable_get
    if _newclass:
        is_reflowable = _swig_property(_mupdf.fz_document_is_reflowable_get, _mupdf.fz_document_is_reflowable_set)
    __swig_setmethods__["open"] = _mupdf.fz_document_open_set
    __swig_getmethods__["open"] = _mupdf.fz_document_open_get
    if _newclass:
        open = _swig_property(_mupdf.fz_document_open_get, _mupdf.fz_document_open_set)

    def __init__(self):
        """__init__(fz_document self) -> fz_document"""
        this = _mupdf.new_fz_document()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_document
    __del__ = lambda self: None
fz_document_swigregister = _mupdf.fz_document_swigregister
fz_document_swigregister(fz_document)

class fz_document_handler(_object):
    """Proxy of C++ fz_document_handler class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_document_handler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_document_handler, name)
    __repr__ = _swig_repr
    __swig_setmethods__["recognize"] = _mupdf.fz_document_handler_recognize_set
    __swig_getmethods__["recognize"] = _mupdf.fz_document_handler_recognize_get
    if _newclass:
        recognize = _swig_property(_mupdf.fz_document_handler_recognize_get, _mupdf.fz_document_handler_recognize_set)
    __swig_setmethods__["open"] = _mupdf.fz_document_handler_open_set
    __swig_getmethods__["open"] = _mupdf.fz_document_handler_open_get
    if _newclass:
        open = _swig_property(_mupdf.fz_document_handler_open_get, _mupdf.fz_document_handler_open_set)
    __swig_setmethods__["open_with_stream"] = _mupdf.fz_document_handler_open_with_stream_set
    __swig_getmethods__["open_with_stream"] = _mupdf.fz_document_handler_open_with_stream_get
    if _newclass:
        open_with_stream = _swig_property(_mupdf.fz_document_handler_open_with_stream_get, _mupdf.fz_document_handler_open_with_stream_set)
    __swig_setmethods__["extensions"] = _mupdf.fz_document_handler_extensions_set
    __swig_getmethods__["extensions"] = _mupdf.fz_document_handler_extensions_get
    if _newclass:
        extensions = _swig_property(_mupdf.fz_document_handler_extensions_get, _mupdf.fz_document_handler_extensions_set)
    __swig_setmethods__["mimetypes"] = _mupdf.fz_document_handler_mimetypes_set
    __swig_getmethods__["mimetypes"] = _mupdf.fz_document_handler_mimetypes_get
    if _newclass:
        mimetypes = _swig_property(_mupdf.fz_document_handler_mimetypes_get, _mupdf.fz_document_handler_mimetypes_set)
    __swig_setmethods__["open_accel"] = _mupdf.fz_document_handler_open_accel_set
    __swig_getmethods__["open_accel"] = _mupdf.fz_document_handler_open_accel_get
    if _newclass:
        open_accel = _swig_property(_mupdf.fz_document_handler_open_accel_get, _mupdf.fz_document_handler_open_accel_set)
    __swig_setmethods__["open_accel_with_stream"] = _mupdf.fz_document_handler_open_accel_with_stream_set
    __swig_getmethods__["open_accel_with_stream"] = _mupdf.fz_document_handler_open_accel_with_stream_get
    if _newclass:
        open_accel_with_stream = _swig_property(_mupdf.fz_document_handler_open_accel_with_stream_get, _mupdf.fz_document_handler_open_accel_with_stream_set)

    def __init__(self):
        """__init__(fz_document_handler self) -> fz_document_handler"""
        this = _mupdf.new_fz_document_handler()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_document_handler
    __del__ = lambda self: None
fz_document_handler_swigregister = _mupdf.fz_document_handler_swigregister
fz_document_handler_swigregister(fz_document_handler)

class fz_layout_char(_object):
    """Proxy of C++ fz_layout_char class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_layout_char, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_layout_char, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mupdf.fz_layout_char_x_set
    __swig_getmethods__["x"] = _mupdf.fz_layout_char_x_get
    if _newclass:
        x = _swig_property(_mupdf.fz_layout_char_x_get, _mupdf.fz_layout_char_x_set)
    __swig_setmethods__["advance"] = _mupdf.fz_layout_char_advance_set
    __swig_getmethods__["advance"] = _mupdf.fz_layout_char_advance_get
    if _newclass:
        advance = _swig_property(_mupdf.fz_layout_char_advance_get, _mupdf.fz_layout_char_advance_set)
    __swig_setmethods__["p"] = _mupdf.fz_layout_char_p_set
    __swig_getmethods__["p"] = _mupdf.fz_layout_char_p_get
    if _newclass:
        p = _swig_property(_mupdf.fz_layout_char_p_get, _mupdf.fz_layout_char_p_set)
    __swig_setmethods__["next"] = _mupdf.fz_layout_char_next_set
    __swig_getmethods__["next"] = _mupdf.fz_layout_char_next_get
    if _newclass:
        next = _swig_property(_mupdf.fz_layout_char_next_get, _mupdf.fz_layout_char_next_set)

    def __init__(self):
        """__init__(fz_layout_char self) -> fz_layout_char"""
        this = _mupdf.new_fz_layout_char()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_layout_char
    __del__ = lambda self: None
fz_layout_char_swigregister = _mupdf.fz_layout_char_swigregister
fz_layout_char_swigregister(fz_layout_char)

class fz_layout_line(_object):
    """Proxy of C++ fz_layout_line class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_layout_line, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_layout_line, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mupdf.fz_layout_line_x_set
    __swig_getmethods__["x"] = _mupdf.fz_layout_line_x_get
    if _newclass:
        x = _swig_property(_mupdf.fz_layout_line_x_get, _mupdf.fz_layout_line_x_set)
    __swig_setmethods__["y"] = _mupdf.fz_layout_line_y_set
    __swig_getmethods__["y"] = _mupdf.fz_layout_line_y_get
    if _newclass:
        y = _swig_property(_mupdf.fz_layout_line_y_get, _mupdf.fz_layout_line_y_set)
    __swig_setmethods__["font_size"] = _mupdf.fz_layout_line_font_size_set
    __swig_getmethods__["font_size"] = _mupdf.fz_layout_line_font_size_get
    if _newclass:
        font_size = _swig_property(_mupdf.fz_layout_line_font_size_get, _mupdf.fz_layout_line_font_size_set)
    __swig_setmethods__["p"] = _mupdf.fz_layout_line_p_set
    __swig_getmethods__["p"] = _mupdf.fz_layout_line_p_get
    if _newclass:
        p = _swig_property(_mupdf.fz_layout_line_p_get, _mupdf.fz_layout_line_p_set)
    __swig_setmethods__["text"] = _mupdf.fz_layout_line_text_set
    __swig_getmethods__["text"] = _mupdf.fz_layout_line_text_get
    if _newclass:
        text = _swig_property(_mupdf.fz_layout_line_text_get, _mupdf.fz_layout_line_text_set)
    __swig_setmethods__["next"] = _mupdf.fz_layout_line_next_set
    __swig_getmethods__["next"] = _mupdf.fz_layout_line_next_get
    if _newclass:
        next = _swig_property(_mupdf.fz_layout_line_next_get, _mupdf.fz_layout_line_next_set)

    def __init__(self):
        """__init__(fz_layout_line self) -> fz_layout_line"""
        this = _mupdf.new_fz_layout_line()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_layout_line
    __del__ = lambda self: None
fz_layout_line_swigregister = _mupdf.fz_layout_line_swigregister
fz_layout_line_swigregister(fz_layout_line)

class fz_layout_block(_object):
    """Proxy of C++ fz_layout_block class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_layout_block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_layout_block, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pool"] = _mupdf.fz_layout_block_pool_set
    __swig_getmethods__["pool"] = _mupdf.fz_layout_block_pool_get
    if _newclass:
        pool = _swig_property(_mupdf.fz_layout_block_pool_get, _mupdf.fz_layout_block_pool_set)
    __swig_setmethods__["matrix"] = _mupdf.fz_layout_block_matrix_set
    __swig_getmethods__["matrix"] = _mupdf.fz_layout_block_matrix_get
    if _newclass:
        matrix = _swig_property(_mupdf.fz_layout_block_matrix_get, _mupdf.fz_layout_block_matrix_set)
    __swig_setmethods__["inv_matrix"] = _mupdf.fz_layout_block_inv_matrix_set
    __swig_getmethods__["inv_matrix"] = _mupdf.fz_layout_block_inv_matrix_get
    if _newclass:
        inv_matrix = _swig_property(_mupdf.fz_layout_block_inv_matrix_get, _mupdf.fz_layout_block_inv_matrix_set)
    __swig_setmethods__["head"] = _mupdf.fz_layout_block_head_set
    __swig_getmethods__["head"] = _mupdf.fz_layout_block_head_get
    if _newclass:
        head = _swig_property(_mupdf.fz_layout_block_head_get, _mupdf.fz_layout_block_head_set)
    __swig_setmethods__["tailp"] = _mupdf.fz_layout_block_tailp_set
    __swig_getmethods__["tailp"] = _mupdf.fz_layout_block_tailp_get
    if _newclass:
        tailp = _swig_property(_mupdf.fz_layout_block_tailp_get, _mupdf.fz_layout_block_tailp_set)
    __swig_setmethods__["text_tailp"] = _mupdf.fz_layout_block_text_tailp_set
    __swig_getmethods__["text_tailp"] = _mupdf.fz_layout_block_text_tailp_get
    if _newclass:
        text_tailp = _swig_property(_mupdf.fz_layout_block_text_tailp_get, _mupdf.fz_layout_block_text_tailp_set)

    def __init__(self):
        """__init__(fz_layout_block self) -> fz_layout_block"""
        this = _mupdf.new_fz_layout_block()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_layout_block
    __del__ = lambda self: None
fz_layout_block_swigregister = _mupdf.fz_layout_block_swigregister
fz_layout_block_swigregister(fz_layout_block)

FZ_STEXT_PRESERVE_LIGATURES = _mupdf.FZ_STEXT_PRESERVE_LIGATURES
FZ_STEXT_PRESERVE_WHITESPACE = _mupdf.FZ_STEXT_PRESERVE_WHITESPACE
FZ_STEXT_PRESERVE_IMAGES = _mupdf.FZ_STEXT_PRESERVE_IMAGES
FZ_STEXT_INHIBIT_SPACES = _mupdf.FZ_STEXT_INHIBIT_SPACES
FZ_STEXT_DEHYPHENATE = _mupdf.FZ_STEXT_DEHYPHENATE
FZ_STEXT_PRESERVE_SPANS = _mupdf.FZ_STEXT_PRESERVE_SPANS
FZ_STEXT_MEDIABOX_CLIP = _mupdf.FZ_STEXT_MEDIABOX_CLIP
class fz_stext_page(_object):
    """Proxy of C++ fz_stext_page class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_stext_page, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_stext_page, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pool"] = _mupdf.fz_stext_page_pool_set
    __swig_getmethods__["pool"] = _mupdf.fz_stext_page_pool_get
    if _newclass:
        pool = _swig_property(_mupdf.fz_stext_page_pool_get, _mupdf.fz_stext_page_pool_set)
    __swig_setmethods__["mediabox"] = _mupdf.fz_stext_page_mediabox_set
    __swig_getmethods__["mediabox"] = _mupdf.fz_stext_page_mediabox_get
    if _newclass:
        mediabox = _swig_property(_mupdf.fz_stext_page_mediabox_get, _mupdf.fz_stext_page_mediabox_set)
    __swig_setmethods__["first_block"] = _mupdf.fz_stext_page_first_block_set
    __swig_getmethods__["first_block"] = _mupdf.fz_stext_page_first_block_get
    if _newclass:
        first_block = _swig_property(_mupdf.fz_stext_page_first_block_get, _mupdf.fz_stext_page_first_block_set)
    __swig_setmethods__["last_block"] = _mupdf.fz_stext_page_last_block_set
    __swig_getmethods__["last_block"] = _mupdf.fz_stext_page_last_block_get
    if _newclass:
        last_block = _swig_property(_mupdf.fz_stext_page_last_block_get, _mupdf.fz_stext_page_last_block_set)

    def __init__(self):
        """__init__(fz_stext_page self) -> fz_stext_page"""
        this = _mupdf.new_fz_stext_page()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_stext_page
    __del__ = lambda self: None
fz_stext_page_swigregister = _mupdf.fz_stext_page_swigregister
fz_stext_page_swigregister(fz_stext_page)

FZ_STEXT_BLOCK_TEXT = _mupdf.FZ_STEXT_BLOCK_TEXT
FZ_STEXT_BLOCK_IMAGE = _mupdf.FZ_STEXT_BLOCK_IMAGE
class fz_stext_block(_object):
    """Proxy of C++ fz_stext_block class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_stext_block, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_stext_block, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mupdf.fz_stext_block_type_set
    __swig_getmethods__["type"] = _mupdf.fz_stext_block_type_get
    if _newclass:
        type = _swig_property(_mupdf.fz_stext_block_type_get, _mupdf.fz_stext_block_type_set)
    __swig_setmethods__["bbox"] = _mupdf.fz_stext_block_bbox_set
    __swig_getmethods__["bbox"] = _mupdf.fz_stext_block_bbox_get
    if _newclass:
        bbox = _swig_property(_mupdf.fz_stext_block_bbox_get, _mupdf.fz_stext_block_bbox_set)
    __swig_setmethods__["prev"] = _mupdf.fz_stext_block_prev_set
    __swig_getmethods__["prev"] = _mupdf.fz_stext_block_prev_get
    if _newclass:
        prev = _swig_property(_mupdf.fz_stext_block_prev_get, _mupdf.fz_stext_block_prev_set)
    __swig_setmethods__["next"] = _mupdf.fz_stext_block_next_set
    __swig_getmethods__["next"] = _mupdf.fz_stext_block_next_get
    if _newclass:
        next = _swig_property(_mupdf.fz_stext_block_next_get, _mupdf.fz_stext_block_next_set)

    def __init__(self):
        """__init__(fz_stext_block self) -> fz_stext_block"""
        this = _mupdf.new_fz_stext_block()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_stext_block
    __del__ = lambda self: None
fz_stext_block_swigregister = _mupdf.fz_stext_block_swigregister
fz_stext_block_swigregister(fz_stext_block)

class fz_stext_line(_object):
    """Proxy of C++ fz_stext_line class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_stext_line, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_stext_line, name)
    __repr__ = _swig_repr
    __swig_setmethods__["wmode"] = _mupdf.fz_stext_line_wmode_set
    __swig_getmethods__["wmode"] = _mupdf.fz_stext_line_wmode_get
    if _newclass:
        wmode = _swig_property(_mupdf.fz_stext_line_wmode_get, _mupdf.fz_stext_line_wmode_set)
    __swig_setmethods__["dir"] = _mupdf.fz_stext_line_dir_set
    __swig_getmethods__["dir"] = _mupdf.fz_stext_line_dir_get
    if _newclass:
        dir = _swig_property(_mupdf.fz_stext_line_dir_get, _mupdf.fz_stext_line_dir_set)
    __swig_setmethods__["bbox"] = _mupdf.fz_stext_line_bbox_set
    __swig_getmethods__["bbox"] = _mupdf.fz_stext_line_bbox_get
    if _newclass:
        bbox = _swig_property(_mupdf.fz_stext_line_bbox_get, _mupdf.fz_stext_line_bbox_set)
    __swig_setmethods__["first_char"] = _mupdf.fz_stext_line_first_char_set
    __swig_getmethods__["first_char"] = _mupdf.fz_stext_line_first_char_get
    if _newclass:
        first_char = _swig_property(_mupdf.fz_stext_line_first_char_get, _mupdf.fz_stext_line_first_char_set)
    __swig_setmethods__["last_char"] = _mupdf.fz_stext_line_last_char_set
    __swig_getmethods__["last_char"] = _mupdf.fz_stext_line_last_char_get
    if _newclass:
        last_char = _swig_property(_mupdf.fz_stext_line_last_char_get, _mupdf.fz_stext_line_last_char_set)
    __swig_setmethods__["prev"] = _mupdf.fz_stext_line_prev_set
    __swig_getmethods__["prev"] = _mupdf.fz_stext_line_prev_get
    if _newclass:
        prev = _swig_property(_mupdf.fz_stext_line_prev_get, _mupdf.fz_stext_line_prev_set)
    __swig_setmethods__["next"] = _mupdf.fz_stext_line_next_set
    __swig_getmethods__["next"] = _mupdf.fz_stext_line_next_get
    if _newclass:
        next = _swig_property(_mupdf.fz_stext_line_next_get, _mupdf.fz_stext_line_next_set)

    def __init__(self):
        """__init__(fz_stext_line self) -> fz_stext_line"""
        this = _mupdf.new_fz_stext_line()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_stext_line
    __del__ = lambda self: None
fz_stext_line_swigregister = _mupdf.fz_stext_line_swigregister
fz_stext_line_swigregister(fz_stext_line)

class fz_stext_char(_object):
    """Proxy of C++ fz_stext_char class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_stext_char, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_stext_char, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _mupdf.fz_stext_char_c_set
    __swig_getmethods__["c"] = _mupdf.fz_stext_char_c_get
    if _newclass:
        c = _swig_property(_mupdf.fz_stext_char_c_get, _mupdf.fz_stext_char_c_set)
    __swig_setmethods__["color"] = _mupdf.fz_stext_char_color_set
    __swig_getmethods__["color"] = _mupdf.fz_stext_char_color_get
    if _newclass:
        color = _swig_property(_mupdf.fz_stext_char_color_get, _mupdf.fz_stext_char_color_set)
    __swig_setmethods__["origin"] = _mupdf.fz_stext_char_origin_set
    __swig_getmethods__["origin"] = _mupdf.fz_stext_char_origin_get
    if _newclass:
        origin = _swig_property(_mupdf.fz_stext_char_origin_get, _mupdf.fz_stext_char_origin_set)
    __swig_setmethods__["quad"] = _mupdf.fz_stext_char_quad_set
    __swig_getmethods__["quad"] = _mupdf.fz_stext_char_quad_get
    if _newclass:
        quad = _swig_property(_mupdf.fz_stext_char_quad_get, _mupdf.fz_stext_char_quad_set)
    __swig_setmethods__["size"] = _mupdf.fz_stext_char_size_set
    __swig_getmethods__["size"] = _mupdf.fz_stext_char_size_get
    if _newclass:
        size = _swig_property(_mupdf.fz_stext_char_size_get, _mupdf.fz_stext_char_size_set)
    __swig_setmethods__["font"] = _mupdf.fz_stext_char_font_set
    __swig_getmethods__["font"] = _mupdf.fz_stext_char_font_get
    if _newclass:
        font = _swig_property(_mupdf.fz_stext_char_font_get, _mupdf.fz_stext_char_font_set)
    __swig_setmethods__["next"] = _mupdf.fz_stext_char_next_set
    __swig_getmethods__["next"] = _mupdf.fz_stext_char_next_get
    if _newclass:
        next = _swig_property(_mupdf.fz_stext_char_next_get, _mupdf.fz_stext_char_next_set)

    def __init__(self):
        """__init__(fz_stext_char self) -> fz_stext_char"""
        this = _mupdf.new_fz_stext_char()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_stext_char
    __del__ = lambda self: None
fz_stext_char_swigregister = _mupdf.fz_stext_char_swigregister
fz_stext_char_swigregister(fz_stext_char)

FZ_SELECT_CHARS = _mupdf.FZ_SELECT_CHARS
FZ_SELECT_WORDS = _mupdf.FZ_SELECT_WORDS
FZ_SELECT_LINES = _mupdf.FZ_SELECT_LINES
class fz_stext_options(_object):
    """Proxy of C++ fz_stext_options class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_stext_options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_stext_options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["flags"] = _mupdf.fz_stext_options_flags_set
    __swig_getmethods__["flags"] = _mupdf.fz_stext_options_flags_get
    if _newclass:
        flags = _swig_property(_mupdf.fz_stext_options_flags_get, _mupdf.fz_stext_options_flags_set)

    def __init__(self):
        """__init__(fz_stext_options self) -> fz_stext_options"""
        this = _mupdf.new_fz_stext_options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_stext_options
    __del__ = lambda self: None
fz_stext_options_swigregister = _mupdf.fz_stext_options_swigregister
fz_stext_options_swigregister(fz_stext_options)

class fz_document_writer(_object):
    """Proxy of C++ fz_document_writer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_document_writer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_document_writer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["begin_page"] = _mupdf.fz_document_writer_begin_page_set
    __swig_getmethods__["begin_page"] = _mupdf.fz_document_writer_begin_page_get
    if _newclass:
        begin_page = _swig_property(_mupdf.fz_document_writer_begin_page_get, _mupdf.fz_document_writer_begin_page_set)
    __swig_setmethods__["end_page"] = _mupdf.fz_document_writer_end_page_set
    __swig_getmethods__["end_page"] = _mupdf.fz_document_writer_end_page_get
    if _newclass:
        end_page = _swig_property(_mupdf.fz_document_writer_end_page_get, _mupdf.fz_document_writer_end_page_set)
    __swig_setmethods__["close_writer"] = _mupdf.fz_document_writer_close_writer_set
    __swig_getmethods__["close_writer"] = _mupdf.fz_document_writer_close_writer_get
    if _newclass:
        close_writer = _swig_property(_mupdf.fz_document_writer_close_writer_get, _mupdf.fz_document_writer_close_writer_set)
    __swig_setmethods__["drop_writer"] = _mupdf.fz_document_writer_drop_writer_set
    __swig_getmethods__["drop_writer"] = _mupdf.fz_document_writer_drop_writer_get
    if _newclass:
        drop_writer = _swig_property(_mupdf.fz_document_writer_drop_writer_get, _mupdf.fz_document_writer_drop_writer_set)
    __swig_setmethods__["dev"] = _mupdf.fz_document_writer_dev_set
    __swig_getmethods__["dev"] = _mupdf.fz_document_writer_dev_get
    if _newclass:
        dev = _swig_property(_mupdf.fz_document_writer_dev_get, _mupdf.fz_document_writer_dev_set)

    def __init__(self):
        """__init__(fz_document_writer self) -> fz_document_writer"""
        this = _mupdf.new_fz_document_writer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_document_writer
    __del__ = lambda self: None
fz_document_writer_swigregister = _mupdf.fz_document_writer_swigregister
fz_document_writer_swigregister(fz_document_writer)

class fz_band_writer(_object):
    """Proxy of C++ fz_band_writer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_band_writer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_band_writer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["drop"] = _mupdf.fz_band_writer_drop_set
    __swig_getmethods__["drop"] = _mupdf.fz_band_writer_drop_get
    if _newclass:
        drop = _swig_property(_mupdf.fz_band_writer_drop_get, _mupdf.fz_band_writer_drop_set)
    __swig_setmethods__["close"] = _mupdf.fz_band_writer_close_set
    __swig_getmethods__["close"] = _mupdf.fz_band_writer_close_get
    if _newclass:
        close = _swig_property(_mupdf.fz_band_writer_close_get, _mupdf.fz_band_writer_close_set)
    __swig_setmethods__["header"] = _mupdf.fz_band_writer_header_set
    __swig_getmethods__["header"] = _mupdf.fz_band_writer_header_get
    if _newclass:
        header = _swig_property(_mupdf.fz_band_writer_header_get, _mupdf.fz_band_writer_header_set)
    __swig_setmethods__["band"] = _mupdf.fz_band_writer_band_set
    __swig_getmethods__["band"] = _mupdf.fz_band_writer_band_get
    if _newclass:
        band = _swig_property(_mupdf.fz_band_writer_band_get, _mupdf.fz_band_writer_band_set)
    __swig_setmethods__["trailer"] = _mupdf.fz_band_writer_trailer_set
    __swig_getmethods__["trailer"] = _mupdf.fz_band_writer_trailer_get
    if _newclass:
        trailer = _swig_property(_mupdf.fz_band_writer_trailer_get, _mupdf.fz_band_writer_trailer_set)
    __swig_setmethods__["out"] = _mupdf.fz_band_writer_out_set
    __swig_getmethods__["out"] = _mupdf.fz_band_writer_out_get
    if _newclass:
        out = _swig_property(_mupdf.fz_band_writer_out_get, _mupdf.fz_band_writer_out_set)
    __swig_setmethods__["w"] = _mupdf.fz_band_writer_w_set
    __swig_getmethods__["w"] = _mupdf.fz_band_writer_w_get
    if _newclass:
        w = _swig_property(_mupdf.fz_band_writer_w_get, _mupdf.fz_band_writer_w_set)
    __swig_setmethods__["h"] = _mupdf.fz_band_writer_h_set
    __swig_getmethods__["h"] = _mupdf.fz_band_writer_h_get
    if _newclass:
        h = _swig_property(_mupdf.fz_band_writer_h_get, _mupdf.fz_band_writer_h_set)
    __swig_setmethods__["n"] = _mupdf.fz_band_writer_n_set
    __swig_getmethods__["n"] = _mupdf.fz_band_writer_n_get
    if _newclass:
        n = _swig_property(_mupdf.fz_band_writer_n_get, _mupdf.fz_band_writer_n_set)
    __swig_setmethods__["s"] = _mupdf.fz_band_writer_s_set
    __swig_getmethods__["s"] = _mupdf.fz_band_writer_s_get
    if _newclass:
        s = _swig_property(_mupdf.fz_band_writer_s_get, _mupdf.fz_band_writer_s_set)
    __swig_setmethods__["alpha"] = _mupdf.fz_band_writer_alpha_set
    __swig_getmethods__["alpha"] = _mupdf.fz_band_writer_alpha_get
    if _newclass:
        alpha = _swig_property(_mupdf.fz_band_writer_alpha_get, _mupdf.fz_band_writer_alpha_set)
    __swig_setmethods__["xres"] = _mupdf.fz_band_writer_xres_set
    __swig_getmethods__["xres"] = _mupdf.fz_band_writer_xres_get
    if _newclass:
        xres = _swig_property(_mupdf.fz_band_writer_xres_get, _mupdf.fz_band_writer_xres_set)
    __swig_setmethods__["yres"] = _mupdf.fz_band_writer_yres_set
    __swig_getmethods__["yres"] = _mupdf.fz_band_writer_yres_get
    if _newclass:
        yres = _swig_property(_mupdf.fz_band_writer_yres_get, _mupdf.fz_band_writer_yres_set)
    __swig_setmethods__["pagenum"] = _mupdf.fz_band_writer_pagenum_set
    __swig_getmethods__["pagenum"] = _mupdf.fz_band_writer_pagenum_get
    if _newclass:
        pagenum = _swig_property(_mupdf.fz_band_writer_pagenum_get, _mupdf.fz_band_writer_pagenum_set)
    __swig_setmethods__["line"] = _mupdf.fz_band_writer_line_set
    __swig_getmethods__["line"] = _mupdf.fz_band_writer_line_get
    if _newclass:
        line = _swig_property(_mupdf.fz_band_writer_line_get, _mupdf.fz_band_writer_line_set)
    __swig_setmethods__["seps"] = _mupdf.fz_band_writer_seps_set
    __swig_getmethods__["seps"] = _mupdf.fz_band_writer_seps_get
    if _newclass:
        seps = _swig_property(_mupdf.fz_band_writer_seps_get, _mupdf.fz_band_writer_seps_set)

    def __init__(self):
        """__init__(fz_band_writer self) -> fz_band_writer"""
        this = _mupdf.new_fz_band_writer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_band_writer
    __del__ = lambda self: None
fz_band_writer_swigregister = _mupdf.fz_band_writer_swigregister
fz_band_writer_swigregister(fz_band_writer)

class fz_pcl_options(_object):
    """Proxy of C++ fz_pcl_options class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_pcl_options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_pcl_options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["features"] = _mupdf.fz_pcl_options_features_set
    __swig_getmethods__["features"] = _mupdf.fz_pcl_options_features_get
    if _newclass:
        features = _swig_property(_mupdf.fz_pcl_options_features_get, _mupdf.fz_pcl_options_features_set)
    __swig_setmethods__["odd_page_init"] = _mupdf.fz_pcl_options_odd_page_init_set
    __swig_getmethods__["odd_page_init"] = _mupdf.fz_pcl_options_odd_page_init_get
    if _newclass:
        odd_page_init = _swig_property(_mupdf.fz_pcl_options_odd_page_init_get, _mupdf.fz_pcl_options_odd_page_init_set)
    __swig_setmethods__["even_page_init"] = _mupdf.fz_pcl_options_even_page_init_set
    __swig_getmethods__["even_page_init"] = _mupdf.fz_pcl_options_even_page_init_get
    if _newclass:
        even_page_init = _swig_property(_mupdf.fz_pcl_options_even_page_init_get, _mupdf.fz_pcl_options_even_page_init_set)
    __swig_setmethods__["tumble"] = _mupdf.fz_pcl_options_tumble_set
    __swig_getmethods__["tumble"] = _mupdf.fz_pcl_options_tumble_get
    if _newclass:
        tumble = _swig_property(_mupdf.fz_pcl_options_tumble_get, _mupdf.fz_pcl_options_tumble_set)
    __swig_setmethods__["duplex_set"] = _mupdf.fz_pcl_options_duplex_set_set
    __swig_getmethods__["duplex_set"] = _mupdf.fz_pcl_options_duplex_set_get
    if _newclass:
        duplex_set = _swig_property(_mupdf.fz_pcl_options_duplex_set_get, _mupdf.fz_pcl_options_duplex_set_set)
    __swig_setmethods__["duplex"] = _mupdf.fz_pcl_options_duplex_set
    __swig_getmethods__["duplex"] = _mupdf.fz_pcl_options_duplex_get
    if _newclass:
        duplex = _swig_property(_mupdf.fz_pcl_options_duplex_get, _mupdf.fz_pcl_options_duplex_set)
    __swig_setmethods__["paper_size"] = _mupdf.fz_pcl_options_paper_size_set
    __swig_getmethods__["paper_size"] = _mupdf.fz_pcl_options_paper_size_get
    if _newclass:
        paper_size = _swig_property(_mupdf.fz_pcl_options_paper_size_get, _mupdf.fz_pcl_options_paper_size_set)
    __swig_setmethods__["manual_feed_set"] = _mupdf.fz_pcl_options_manual_feed_set_set
    __swig_getmethods__["manual_feed_set"] = _mupdf.fz_pcl_options_manual_feed_set_get
    if _newclass:
        manual_feed_set = _swig_property(_mupdf.fz_pcl_options_manual_feed_set_get, _mupdf.fz_pcl_options_manual_feed_set_set)
    __swig_setmethods__["manual_feed"] = _mupdf.fz_pcl_options_manual_feed_set
    __swig_getmethods__["manual_feed"] = _mupdf.fz_pcl_options_manual_feed_get
    if _newclass:
        manual_feed = _swig_property(_mupdf.fz_pcl_options_manual_feed_get, _mupdf.fz_pcl_options_manual_feed_set)
    __swig_setmethods__["media_position_set"] = _mupdf.fz_pcl_options_media_position_set_set
    __swig_getmethods__["media_position_set"] = _mupdf.fz_pcl_options_media_position_set_get
    if _newclass:
        media_position_set = _swig_property(_mupdf.fz_pcl_options_media_position_set_get, _mupdf.fz_pcl_options_media_position_set_set)
    __swig_setmethods__["media_position"] = _mupdf.fz_pcl_options_media_position_set
    __swig_getmethods__["media_position"] = _mupdf.fz_pcl_options_media_position_get
    if _newclass:
        media_position = _swig_property(_mupdf.fz_pcl_options_media_position_get, _mupdf.fz_pcl_options_media_position_set)
    __swig_setmethods__["orientation"] = _mupdf.fz_pcl_options_orientation_set
    __swig_getmethods__["orientation"] = _mupdf.fz_pcl_options_orientation_get
    if _newclass:
        orientation = _swig_property(_mupdf.fz_pcl_options_orientation_get, _mupdf.fz_pcl_options_orientation_set)
    __swig_setmethods__["page_count"] = _mupdf.fz_pcl_options_page_count_set
    __swig_getmethods__["page_count"] = _mupdf.fz_pcl_options_page_count_get
    if _newclass:
        page_count = _swig_property(_mupdf.fz_pcl_options_page_count_get, _mupdf.fz_pcl_options_page_count_set)

    def __init__(self):
        """__init__(fz_pcl_options self) -> fz_pcl_options"""
        this = _mupdf.new_fz_pcl_options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_pcl_options
    __del__ = lambda self: None
fz_pcl_options_swigregister = _mupdf.fz_pcl_options_swigregister
fz_pcl_options_swigregister(fz_pcl_options)

class fz_pclm_options(_object):
    """Proxy of C++ fz_pclm_options class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_pclm_options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_pclm_options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["compress"] = _mupdf.fz_pclm_options_compress_set
    __swig_getmethods__["compress"] = _mupdf.fz_pclm_options_compress_get
    if _newclass:
        compress = _swig_property(_mupdf.fz_pclm_options_compress_get, _mupdf.fz_pclm_options_compress_set)
    __swig_setmethods__["strip_height"] = _mupdf.fz_pclm_options_strip_height_set
    __swig_getmethods__["strip_height"] = _mupdf.fz_pclm_options_strip_height_get
    if _newclass:
        strip_height = _swig_property(_mupdf.fz_pclm_options_strip_height_get, _mupdf.fz_pclm_options_strip_height_set)
    __swig_setmethods__["page_count"] = _mupdf.fz_pclm_options_page_count_set
    __swig_getmethods__["page_count"] = _mupdf.fz_pclm_options_page_count_get
    if _newclass:
        page_count = _swig_property(_mupdf.fz_pclm_options_page_count_get, _mupdf.fz_pclm_options_page_count_set)

    def __init__(self):
        """__init__(fz_pclm_options self) -> fz_pclm_options"""
        this = _mupdf.new_fz_pclm_options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_pclm_options
    __del__ = lambda self: None
fz_pclm_options_swigregister = _mupdf.fz_pclm_options_swigregister
fz_pclm_options_swigregister(fz_pclm_options)

class fz_pdfocr_options(_object):
    """Proxy of C++ fz_pdfocr_options class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_pdfocr_options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_pdfocr_options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["compress"] = _mupdf.fz_pdfocr_options_compress_set
    __swig_getmethods__["compress"] = _mupdf.fz_pdfocr_options_compress_get
    if _newclass:
        compress = _swig_property(_mupdf.fz_pdfocr_options_compress_get, _mupdf.fz_pdfocr_options_compress_set)
    __swig_setmethods__["strip_height"] = _mupdf.fz_pdfocr_options_strip_height_set
    __swig_getmethods__["strip_height"] = _mupdf.fz_pdfocr_options_strip_height_get
    if _newclass:
        strip_height = _swig_property(_mupdf.fz_pdfocr_options_strip_height_get, _mupdf.fz_pdfocr_options_strip_height_set)
    __swig_setmethods__["language"] = _mupdf.fz_pdfocr_options_language_set
    __swig_getmethods__["language"] = _mupdf.fz_pdfocr_options_language_get
    if _newclass:
        language = _swig_property(_mupdf.fz_pdfocr_options_language_get, _mupdf.fz_pdfocr_options_language_set)
    __swig_setmethods__["datadir"] = _mupdf.fz_pdfocr_options_datadir_set
    __swig_getmethods__["datadir"] = _mupdf.fz_pdfocr_options_datadir_get
    if _newclass:
        datadir = _swig_property(_mupdf.fz_pdfocr_options_datadir_get, _mupdf.fz_pdfocr_options_datadir_set)
    __swig_setmethods__["page_count"] = _mupdf.fz_pdfocr_options_page_count_set
    __swig_getmethods__["page_count"] = _mupdf.fz_pdfocr_options_page_count_get
    if _newclass:
        page_count = _swig_property(_mupdf.fz_pdfocr_options_page_count_get, _mupdf.fz_pdfocr_options_page_count_set)

    def __init__(self):
        """__init__(fz_pdfocr_options self) -> fz_pdfocr_options"""
        this = _mupdf.new_fz_pdfocr_options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_pdfocr_options
    __del__ = lambda self: None
fz_pdfocr_options_swigregister = _mupdf.fz_pdfocr_options_swigregister
fz_pdfocr_options_swigregister(fz_pdfocr_options)

class fz_pwg_options(_object):
    """Proxy of C++ fz_pwg_options class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fz_pwg_options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fz_pwg_options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["media_class"] = _mupdf.fz_pwg_options_media_class_set
    __swig_getmethods__["media_class"] = _mupdf.fz_pwg_options_media_class_get
    if _newclass:
        media_class = _swig_property(_mupdf.fz_pwg_options_media_class_get, _mupdf.fz_pwg_options_media_class_set)
    __swig_setmethods__["media_color"] = _mupdf.fz_pwg_options_media_color_set
    __swig_getmethods__["media_color"] = _mupdf.fz_pwg_options_media_color_get
    if _newclass:
        media_color = _swig_property(_mupdf.fz_pwg_options_media_color_get, _mupdf.fz_pwg_options_media_color_set)
    __swig_setmethods__["media_type"] = _mupdf.fz_pwg_options_media_type_set
    __swig_getmethods__["media_type"] = _mupdf.fz_pwg_options_media_type_get
    if _newclass:
        media_type = _swig_property(_mupdf.fz_pwg_options_media_type_get, _mupdf.fz_pwg_options_media_type_set)
    __swig_setmethods__["output_type"] = _mupdf.fz_pwg_options_output_type_set
    __swig_getmethods__["output_type"] = _mupdf.fz_pwg_options_output_type_get
    if _newclass:
        output_type = _swig_property(_mupdf.fz_pwg_options_output_type_get, _mupdf.fz_pwg_options_output_type_set)
    __swig_setmethods__["advance_distance"] = _mupdf.fz_pwg_options_advance_distance_set
    __swig_getmethods__["advance_distance"] = _mupdf.fz_pwg_options_advance_distance_get
    if _newclass:
        advance_distance = _swig_property(_mupdf.fz_pwg_options_advance_distance_get, _mupdf.fz_pwg_options_advance_distance_set)
    __swig_setmethods__["advance_media"] = _mupdf.fz_pwg_options_advance_media_set
    __swig_getmethods__["advance_media"] = _mupdf.fz_pwg_options_advance_media_get
    if _newclass:
        advance_media = _swig_property(_mupdf.fz_pwg_options_advance_media_get, _mupdf.fz_pwg_options_advance_media_set)
    __swig_setmethods__["collate"] = _mupdf.fz_pwg_options_collate_set
    __swig_getmethods__["collate"] = _mupdf.fz_pwg_options_collate_get
    if _newclass:
        collate = _swig_property(_mupdf.fz_pwg_options_collate_get, _mupdf.fz_pwg_options_collate_set)
    __swig_setmethods__["cut_media"] = _mupdf.fz_pwg_options_cut_media_set
    __swig_getmethods__["cut_media"] = _mupdf.fz_pwg_options_cut_media_get
    if _newclass:
        cut_media = _swig_property(_mupdf.fz_pwg_options_cut_media_get, _mupdf.fz_pwg_options_cut_media_set)
    __swig_setmethods__["duplex"] = _mupdf.fz_pwg_options_duplex_set
    __swig_getmethods__["duplex"] = _mupdf.fz_pwg_options_duplex_get
    if _newclass:
        duplex = _swig_property(_mupdf.fz_pwg_options_duplex_get, _mupdf.fz_pwg_options_duplex_set)
    __swig_setmethods__["insert_sheet"] = _mupdf.fz_pwg_options_insert_sheet_set
    __swig_getmethods__["insert_sheet"] = _mupdf.fz_pwg_options_insert_sheet_get
    if _newclass:
        insert_sheet = _swig_property(_mupdf.fz_pwg_options_insert_sheet_get, _mupdf.fz_pwg_options_insert_sheet_set)
    __swig_setmethods__["jog"] = _mupdf.fz_pwg_options_jog_set
    __swig_getmethods__["jog"] = _mupdf.fz_pwg_options_jog_get
    if _newclass:
        jog = _swig_property(_mupdf.fz_pwg_options_jog_get, _mupdf.fz_pwg_options_jog_set)
    __swig_setmethods__["leading_edge"] = _mupdf.fz_pwg_options_leading_edge_set
    __swig_getmethods__["leading_edge"] = _mupdf.fz_pwg_options_leading_edge_get
    if _newclass:
        leading_edge = _swig_property(_mupdf.fz_pwg_options_leading_edge_get, _mupdf.fz_pwg_options_leading_edge_set)
    __swig_setmethods__["manual_feed"] = _mupdf.fz_pwg_options_manual_feed_set
    __swig_getmethods__["manual_feed"] = _mupdf.fz_pwg_options_manual_feed_get
    if _newclass:
        manual_feed = _swig_property(_mupdf.fz_pwg_options_manual_feed_get, _mupdf.fz_pwg_options_manual_feed_set)
    __swig_setmethods__["media_position"] = _mupdf.fz_pwg_options_media_position_set
    __swig_getmethods__["media_position"] = _mupdf.fz_pwg_options_media_position_get
    if _newclass:
        media_position = _swig_property(_mupdf.fz_pwg_options_media_position_get, _mupdf.fz_pwg_options_media_position_set)
    __swig_setmethods__["media_weight"] = _mupdf.fz_pwg_options_media_weight_set
    __swig_getmethods__["media_weight"] = _mupdf.fz_pwg_options_media_weight_get
    if _newclass:
        media_weight = _swig_property(_mupdf.fz_pwg_options_media_weight_get, _mupdf.fz_pwg_options_media_weight_set)
    __swig_setmethods__["mirror_print"] = _mupdf.fz_pwg_options_mirror_print_set
    __swig_getmethods__["mirror_print"] = _mupdf.fz_pwg_options_mirror_print_get
    if _newclass:
        mirror_print = _swig_property(_mupdf.fz_pwg_options_mirror_print_get, _mupdf.fz_pwg_options_mirror_print_set)
    __swig_setmethods__["negative_print"] = _mupdf.fz_pwg_options_negative_print_set
    __swig_getmethods__["negative_print"] = _mupdf.fz_pwg_options_negative_print_get
    if _newclass:
        negative_print = _swig_property(_mupdf.fz_pwg_options_negative_print_get, _mupdf.fz_pwg_options_negative_print_set)
    __swig_setmethods__["num_copies"] = _mupdf.fz_pwg_options_num_copies_set
    __swig_getmethods__["num_copies"] = _mupdf.fz_pwg_options_num_copies_get
    if _newclass:
        num_copies = _swig_property(_mupdf.fz_pwg_options_num_copies_get, _mupdf.fz_pwg_options_num_copies_set)
    __swig_setmethods__["orientation"] = _mupdf.fz_pwg_options_orientation_set
    __swig_getmethods__["orientation"] = _mupdf.fz_pwg_options_orientation_get
    if _newclass:
        orientation = _swig_property(_mupdf.fz_pwg_options_orientation_get, _mupdf.fz_pwg_options_orientation_set)
    __swig_setmethods__["output_face_up"] = _mupdf.fz_pwg_options_output_face_up_set
    __swig_getmethods__["output_face_up"] = _mupdf.fz_pwg_options_output_face_up_get
    if _newclass:
        output_face_up = _swig_property(_mupdf.fz_pwg_options_output_face_up_get, _mupdf.fz_pwg_options_output_face_up_set)
    __swig_setmethods__["PageSize"] = _mupdf.fz_pwg_options_PageSize_set
    __swig_getmethods__["PageSize"] = _mupdf.fz_pwg_options_PageSize_get
    if _newclass:
        PageSize = _swig_property(_mupdf.fz_pwg_options_PageSize_get, _mupdf.fz_pwg_options_PageSize_set)
    __swig_setmethods__["separations"] = _mupdf.fz_pwg_options_separations_set
    __swig_getmethods__["separations"] = _mupdf.fz_pwg_options_separations_get
    if _newclass:
        separations = _swig_property(_mupdf.fz_pwg_options_separations_get, _mupdf.fz_pwg_options_separations_set)
    __swig_setmethods__["tray_switch"] = _mupdf.fz_pwg_options_tray_switch_set
    __swig_getmethods__["tray_switch"] = _mupdf.fz_pwg_options_tray_switch_get
    if _newclass:
        tray_switch = _swig_property(_mupdf.fz_pwg_options_tray_switch_get, _mupdf.fz_pwg_options_tray_switch_set)
    __swig_setmethods__["tumble"] = _mupdf.fz_pwg_options_tumble_set
    __swig_getmethods__["tumble"] = _mupdf.fz_pwg_options_tumble_get
    if _newclass:
        tumble = _swig_property(_mupdf.fz_pwg_options_tumble_get, _mupdf.fz_pwg_options_tumble_set)
    __swig_setmethods__["media_type_num"] = _mupdf.fz_pwg_options_media_type_num_set
    __swig_getmethods__["media_type_num"] = _mupdf.fz_pwg_options_media_type_num_get
    if _newclass:
        media_type_num = _swig_property(_mupdf.fz_pwg_options_media_type_num_get, _mupdf.fz_pwg_options_media_type_num_set)
    __swig_setmethods__["compression"] = _mupdf.fz_pwg_options_compression_set
    __swig_getmethods__["compression"] = _mupdf.fz_pwg_options_compression_get
    if _newclass:
        compression = _swig_property(_mupdf.fz_pwg_options_compression_get, _mupdf.fz_pwg_options_compression_set)
    __swig_setmethods__["row_count"] = _mupdf.fz_pwg_options_row_count_set
    __swig_getmethods__["row_count"] = _mupdf.fz_pwg_options_row_count_get
    if _newclass:
        row_count = _swig_property(_mupdf.fz_pwg_options_row_count_get, _mupdf.fz_pwg_options_row_count_set)
    __swig_setmethods__["row_feed"] = _mupdf.fz_pwg_options_row_feed_set
    __swig_getmethods__["row_feed"] = _mupdf.fz_pwg_options_row_feed_get
    if _newclass:
        row_feed = _swig_property(_mupdf.fz_pwg_options_row_feed_get, _mupdf.fz_pwg_options_row_feed_set)
    __swig_setmethods__["row_step"] = _mupdf.fz_pwg_options_row_step_set
    __swig_getmethods__["row_step"] = _mupdf.fz_pwg_options_row_step_get
    if _newclass:
        row_step = _swig_property(_mupdf.fz_pwg_options_row_step_get, _mupdf.fz_pwg_options_row_step_set)
    __swig_setmethods__["rendering_intent"] = _mupdf.fz_pwg_options_rendering_intent_set
    __swig_getmethods__["rendering_intent"] = _mupdf.fz_pwg_options_rendering_intent_get
    if _newclass:
        rendering_intent = _swig_property(_mupdf.fz_pwg_options_rendering_intent_get, _mupdf.fz_pwg_options_rendering_intent_set)
    __swig_setmethods__["page_size_name"] = _mupdf.fz_pwg_options_page_size_name_set
    __swig_getmethods__["page_size_name"] = _mupdf.fz_pwg_options_page_size_name_get
    if _newclass:
        page_size_name = _swig_property(_mupdf.fz_pwg_options_page_size_name_get, _mupdf.fz_pwg_options_page_size_name_set)

    def __init__(self):
        """__init__(fz_pwg_options self) -> fz_pwg_options"""
        this = _mupdf.new_fz_pwg_options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fz_pwg_options
    __del__ = lambda self: None
fz_pwg_options_swigregister = _mupdf.fz_pwg_options_swigregister
fz_pwg_options_swigregister(fz_pwg_options)

FZ_SVG_TEXT_AS_PATH = _mupdf.FZ_SVG_TEXT_AS_PATH
FZ_SVG_TEXT_AS_TEXT = _mupdf.FZ_SVG_TEXT_AS_TEXT
PDF_MAX_OBJECT_NUMBER = _mupdf.PDF_MAX_OBJECT_NUMBER
PDF_MAX_GEN_NUMBER = _mupdf.PDF_MAX_GEN_NUMBER
PDF_ENUM_NULL = _mupdf.PDF_ENUM_NULL
PDF_ENUM_TRUE = _mupdf.PDF_ENUM_TRUE
PDF_ENUM_FALSE = _mupdf.PDF_ENUM_FALSE
PDF_ENUM_NAME_1_2 = _mupdf.PDF_ENUM_NAME_1_2
PDF_ENUM_NAME_3D = _mupdf.PDF_ENUM_NAME_3D
PDF_ENUM_NAME_A = _mupdf.PDF_ENUM_NAME_A
PDF_ENUM_NAME_A85 = _mupdf.PDF_ENUM_NAME_A85
PDF_ENUM_NAME_AA = _mupdf.PDF_ENUM_NAME_AA
PDF_ENUM_NAME_AC = _mupdf.PDF_ENUM_NAME_AC
PDF_ENUM_NAME_AESV2 = _mupdf.PDF_ENUM_NAME_AESV2
PDF_ENUM_NAME_AESV3 = _mupdf.PDF_ENUM_NAME_AESV3
PDF_ENUM_NAME_AHx = _mupdf.PDF_ENUM_NAME_AHx
PDF_ENUM_NAME_AP = _mupdf.PDF_ENUM_NAME_AP
PDF_ENUM_NAME_AS = _mupdf.PDF_ENUM_NAME_AS
PDF_ENUM_NAME_ASCII85Decode = _mupdf.PDF_ENUM_NAME_ASCII85Decode
PDF_ENUM_NAME_ASCIIHexDecode = _mupdf.PDF_ENUM_NAME_ASCIIHexDecode
PDF_ENUM_NAME_AcroForm = _mupdf.PDF_ENUM_NAME_AcroForm
PDF_ENUM_NAME_Action = _mupdf.PDF_ENUM_NAME_Action
PDF_ENUM_NAME_ActualText = _mupdf.PDF_ENUM_NAME_ActualText
PDF_ENUM_NAME_Adobe_PPKLite = _mupdf.PDF_ENUM_NAME_Adobe_PPKLite
PDF_ENUM_NAME_All = _mupdf.PDF_ENUM_NAME_All
PDF_ENUM_NAME_AllOff = _mupdf.PDF_ENUM_NAME_AllOff
PDF_ENUM_NAME_AllOn = _mupdf.PDF_ENUM_NAME_AllOn
PDF_ENUM_NAME_Alpha = _mupdf.PDF_ENUM_NAME_Alpha
PDF_ENUM_NAME_Alt = _mupdf.PDF_ENUM_NAME_Alt
PDF_ENUM_NAME_Alternate = _mupdf.PDF_ENUM_NAME_Alternate
PDF_ENUM_NAME_Annot = _mupdf.PDF_ENUM_NAME_Annot
PDF_ENUM_NAME_Annots = _mupdf.PDF_ENUM_NAME_Annots
PDF_ENUM_NAME_AnyOff = _mupdf.PDF_ENUM_NAME_AnyOff
PDF_ENUM_NAME_App = _mupdf.PDF_ENUM_NAME_App
PDF_ENUM_NAME_Approved = _mupdf.PDF_ENUM_NAME_Approved
PDF_ENUM_NAME_ArtBox = _mupdf.PDF_ENUM_NAME_ArtBox
PDF_ENUM_NAME_AsIs = _mupdf.PDF_ENUM_NAME_AsIs
PDF_ENUM_NAME_Ascent = _mupdf.PDF_ENUM_NAME_Ascent
PDF_ENUM_NAME_AuthEvent = _mupdf.PDF_ENUM_NAME_AuthEvent
PDF_ENUM_NAME_Author = _mupdf.PDF_ENUM_NAME_Author
PDF_ENUM_NAME_B = _mupdf.PDF_ENUM_NAME_B
PDF_ENUM_NAME_BBox = _mupdf.PDF_ENUM_NAME_BBox
PDF_ENUM_NAME_BC = _mupdf.PDF_ENUM_NAME_BC
PDF_ENUM_NAME_BE = _mupdf.PDF_ENUM_NAME_BE
PDF_ENUM_NAME_BG = _mupdf.PDF_ENUM_NAME_BG
PDF_ENUM_NAME_BM = _mupdf.PDF_ENUM_NAME_BM
PDF_ENUM_NAME_BPC = _mupdf.PDF_ENUM_NAME_BPC
PDF_ENUM_NAME_BS = _mupdf.PDF_ENUM_NAME_BS
PDF_ENUM_NAME_Background = _mupdf.PDF_ENUM_NAME_Background
PDF_ENUM_NAME_BaseEncoding = _mupdf.PDF_ENUM_NAME_BaseEncoding
PDF_ENUM_NAME_BaseFont = _mupdf.PDF_ENUM_NAME_BaseFont
PDF_ENUM_NAME_BaseState = _mupdf.PDF_ENUM_NAME_BaseState
PDF_ENUM_NAME_BitsPerComponent = _mupdf.PDF_ENUM_NAME_BitsPerComponent
PDF_ENUM_NAME_BitsPerCoordinate = _mupdf.PDF_ENUM_NAME_BitsPerCoordinate
PDF_ENUM_NAME_BitsPerFlag = _mupdf.PDF_ENUM_NAME_BitsPerFlag
PDF_ENUM_NAME_BitsPerSample = _mupdf.PDF_ENUM_NAME_BitsPerSample
PDF_ENUM_NAME_BlackIs1 = _mupdf.PDF_ENUM_NAME_BlackIs1
PDF_ENUM_NAME_BlackPoint = _mupdf.PDF_ENUM_NAME_BlackPoint
PDF_ENUM_NAME_BleedBox = _mupdf.PDF_ENUM_NAME_BleedBox
PDF_ENUM_NAME_Blinds = _mupdf.PDF_ENUM_NAME_Blinds
PDF_ENUM_NAME_Border = _mupdf.PDF_ENUM_NAME_Border
PDF_ENUM_NAME_Bounds = _mupdf.PDF_ENUM_NAME_Bounds
PDF_ENUM_NAME_Box = _mupdf.PDF_ENUM_NAME_Box
PDF_ENUM_NAME_Bt = _mupdf.PDF_ENUM_NAME_Bt
PDF_ENUM_NAME_Btn = _mupdf.PDF_ENUM_NAME_Btn
PDF_ENUM_NAME_Butt = _mupdf.PDF_ENUM_NAME_Butt
PDF_ENUM_NAME_ByteRange = _mupdf.PDF_ENUM_NAME_ByteRange
PDF_ENUM_NAME_C = _mupdf.PDF_ENUM_NAME_C
PDF_ENUM_NAME_C0 = _mupdf.PDF_ENUM_NAME_C0
PDF_ENUM_NAME_C1 = _mupdf.PDF_ENUM_NAME_C1
PDF_ENUM_NAME_CA = _mupdf.PDF_ENUM_NAME_CA
PDF_ENUM_NAME_CCF = _mupdf.PDF_ENUM_NAME_CCF
PDF_ENUM_NAME_CCITTFaxDecode = _mupdf.PDF_ENUM_NAME_CCITTFaxDecode
PDF_ENUM_NAME_CF = _mupdf.PDF_ENUM_NAME_CF
PDF_ENUM_NAME_CFM = _mupdf.PDF_ENUM_NAME_CFM
PDF_ENUM_NAME_CI = _mupdf.PDF_ENUM_NAME_CI
PDF_ENUM_NAME_CIDFontType0 = _mupdf.PDF_ENUM_NAME_CIDFontType0
PDF_ENUM_NAME_CIDFontType0C = _mupdf.PDF_ENUM_NAME_CIDFontType0C
PDF_ENUM_NAME_CIDFontType2 = _mupdf.PDF_ENUM_NAME_CIDFontType2
PDF_ENUM_NAME_CIDSystemInfo = _mupdf.PDF_ENUM_NAME_CIDSystemInfo
PDF_ENUM_NAME_CIDToGIDMap = _mupdf.PDF_ENUM_NAME_CIDToGIDMap
PDF_ENUM_NAME_CMYK = _mupdf.PDF_ENUM_NAME_CMYK
PDF_ENUM_NAME_CS = _mupdf.PDF_ENUM_NAME_CS
PDF_ENUM_NAME_CalCMYK = _mupdf.PDF_ENUM_NAME_CalCMYK
PDF_ENUM_NAME_CalGray = _mupdf.PDF_ENUM_NAME_CalGray
PDF_ENUM_NAME_CalRGB = _mupdf.PDF_ENUM_NAME_CalRGB
PDF_ENUM_NAME_CapHeight = _mupdf.PDF_ENUM_NAME_CapHeight
PDF_ENUM_NAME_Caret = _mupdf.PDF_ENUM_NAME_Caret
PDF_ENUM_NAME_Catalog = _mupdf.PDF_ENUM_NAME_Catalog
PDF_ENUM_NAME_Cert = _mupdf.PDF_ENUM_NAME_Cert
PDF_ENUM_NAME_Ch = _mupdf.PDF_ENUM_NAME_Ch
PDF_ENUM_NAME_Changes = _mupdf.PDF_ENUM_NAME_Changes
PDF_ENUM_NAME_CharProcs = _mupdf.PDF_ENUM_NAME_CharProcs
PDF_ENUM_NAME_Circle = _mupdf.PDF_ENUM_NAME_Circle
PDF_ENUM_NAME_ClosedArrow = _mupdf.PDF_ENUM_NAME_ClosedArrow
PDF_ENUM_NAME_Collection = _mupdf.PDF_ENUM_NAME_Collection
PDF_ENUM_NAME_ColorSpace = _mupdf.PDF_ENUM_NAME_ColorSpace
PDF_ENUM_NAME_ColorTransform = _mupdf.PDF_ENUM_NAME_ColorTransform
PDF_ENUM_NAME_Colorants = _mupdf.PDF_ENUM_NAME_Colorants
PDF_ENUM_NAME_Colors = _mupdf.PDF_ENUM_NAME_Colors
PDF_ENUM_NAME_Columns = _mupdf.PDF_ENUM_NAME_Columns
PDF_ENUM_NAME_Confidential = _mupdf.PDF_ENUM_NAME_Confidential
PDF_ENUM_NAME_Configs = _mupdf.PDF_ENUM_NAME_Configs
PDF_ENUM_NAME_ContactInfo = _mupdf.PDF_ENUM_NAME_ContactInfo
PDF_ENUM_NAME_Contents = _mupdf.PDF_ENUM_NAME_Contents
PDF_ENUM_NAME_Coords = _mupdf.PDF_ENUM_NAME_Coords
PDF_ENUM_NAME_Count = _mupdf.PDF_ENUM_NAME_Count
PDF_ENUM_NAME_Cover = _mupdf.PDF_ENUM_NAME_Cover
PDF_ENUM_NAME_CreationDate = _mupdf.PDF_ENUM_NAME_CreationDate
PDF_ENUM_NAME_Creator = _mupdf.PDF_ENUM_NAME_Creator
PDF_ENUM_NAME_CropBox = _mupdf.PDF_ENUM_NAME_CropBox
PDF_ENUM_NAME_Crypt = _mupdf.PDF_ENUM_NAME_Crypt
PDF_ENUM_NAME_D = _mupdf.PDF_ENUM_NAME_D
PDF_ENUM_NAME_DA = _mupdf.PDF_ENUM_NAME_DA
PDF_ENUM_NAME_DC = _mupdf.PDF_ENUM_NAME_DC
PDF_ENUM_NAME_DCT = _mupdf.PDF_ENUM_NAME_DCT
PDF_ENUM_NAME_DCTDecode = _mupdf.PDF_ENUM_NAME_DCTDecode
PDF_ENUM_NAME_DL = _mupdf.PDF_ENUM_NAME_DL
PDF_ENUM_NAME_DOS = _mupdf.PDF_ENUM_NAME_DOS
PDF_ENUM_NAME_DP = _mupdf.PDF_ENUM_NAME_DP
PDF_ENUM_NAME_DR = _mupdf.PDF_ENUM_NAME_DR
PDF_ENUM_NAME_DS = _mupdf.PDF_ENUM_NAME_DS
PDF_ENUM_NAME_DV = _mupdf.PDF_ENUM_NAME_DV
PDF_ENUM_NAME_DW = _mupdf.PDF_ENUM_NAME_DW
PDF_ENUM_NAME_DW2 = _mupdf.PDF_ENUM_NAME_DW2
PDF_ENUM_NAME_DamagedRowsBeforeError = _mupdf.PDF_ENUM_NAME_DamagedRowsBeforeError
PDF_ENUM_NAME_Data = _mupdf.PDF_ENUM_NAME_Data
PDF_ENUM_NAME_Date = _mupdf.PDF_ENUM_NAME_Date
PDF_ENUM_NAME_Decode = _mupdf.PDF_ENUM_NAME_Decode
PDF_ENUM_NAME_DecodeParms = _mupdf.PDF_ENUM_NAME_DecodeParms
PDF_ENUM_NAME_Default = _mupdf.PDF_ENUM_NAME_Default
PDF_ENUM_NAME_DefaultCMYK = _mupdf.PDF_ENUM_NAME_DefaultCMYK
PDF_ENUM_NAME_DefaultGray = _mupdf.PDF_ENUM_NAME_DefaultGray
PDF_ENUM_NAME_DefaultRGB = _mupdf.PDF_ENUM_NAME_DefaultRGB
PDF_ENUM_NAME_Departmental = _mupdf.PDF_ENUM_NAME_Departmental
PDF_ENUM_NAME_Desc = _mupdf.PDF_ENUM_NAME_Desc
PDF_ENUM_NAME_DescendantFonts = _mupdf.PDF_ENUM_NAME_DescendantFonts
PDF_ENUM_NAME_Descent = _mupdf.PDF_ENUM_NAME_Descent
PDF_ENUM_NAME_Design = _mupdf.PDF_ENUM_NAME_Design
PDF_ENUM_NAME_Dest = _mupdf.PDF_ENUM_NAME_Dest
PDF_ENUM_NAME_DestOutputProfile = _mupdf.PDF_ENUM_NAME_DestOutputProfile
PDF_ENUM_NAME_Dests = _mupdf.PDF_ENUM_NAME_Dests
PDF_ENUM_NAME_DeviceCMYK = _mupdf.PDF_ENUM_NAME_DeviceCMYK
PDF_ENUM_NAME_DeviceGray = _mupdf.PDF_ENUM_NAME_DeviceGray
PDF_ENUM_NAME_DeviceN = _mupdf.PDF_ENUM_NAME_DeviceN
PDF_ENUM_NAME_DeviceRGB = _mupdf.PDF_ENUM_NAME_DeviceRGB
PDF_ENUM_NAME_Di = _mupdf.PDF_ENUM_NAME_Di
PDF_ENUM_NAME_Diamond = _mupdf.PDF_ENUM_NAME_Diamond
PDF_ENUM_NAME_Differences = _mupdf.PDF_ENUM_NAME_Differences
PDF_ENUM_NAME_DigestLocation = _mupdf.PDF_ENUM_NAME_DigestLocation
PDF_ENUM_NAME_DigestMethod = _mupdf.PDF_ENUM_NAME_DigestMethod
PDF_ENUM_NAME_DigestValue = _mupdf.PDF_ENUM_NAME_DigestValue
PDF_ENUM_NAME_Dissolve = _mupdf.PDF_ENUM_NAME_Dissolve
PDF_ENUM_NAME_Dm = _mupdf.PDF_ENUM_NAME_Dm
PDF_ENUM_NAME_DocMDP = _mupdf.PDF_ENUM_NAME_DocMDP
PDF_ENUM_NAME_Document = _mupdf.PDF_ENUM_NAME_Document
PDF_ENUM_NAME_Domain = _mupdf.PDF_ENUM_NAME_Domain
PDF_ENUM_NAME_Draft = _mupdf.PDF_ENUM_NAME_Draft
PDF_ENUM_NAME_Dur = _mupdf.PDF_ENUM_NAME_Dur
PDF_ENUM_NAME_E = _mupdf.PDF_ENUM_NAME_E
PDF_ENUM_NAME_EF = _mupdf.PDF_ENUM_NAME_EF
PDF_ENUM_NAME_EarlyChange = _mupdf.PDF_ENUM_NAME_EarlyChange
PDF_ENUM_NAME_EmbeddedFile = _mupdf.PDF_ENUM_NAME_EmbeddedFile
PDF_ENUM_NAME_EmbeddedFiles = _mupdf.PDF_ENUM_NAME_EmbeddedFiles
PDF_ENUM_NAME_Encode = _mupdf.PDF_ENUM_NAME_Encode
PDF_ENUM_NAME_EncodedByteAlign = _mupdf.PDF_ENUM_NAME_EncodedByteAlign
PDF_ENUM_NAME_Encoding = _mupdf.PDF_ENUM_NAME_Encoding
PDF_ENUM_NAME_Encrypt = _mupdf.PDF_ENUM_NAME_Encrypt
PDF_ENUM_NAME_EncryptMetadata = _mupdf.PDF_ENUM_NAME_EncryptMetadata
PDF_ENUM_NAME_EndOfBlock = _mupdf.PDF_ENUM_NAME_EndOfBlock
PDF_ENUM_NAME_EndOfLine = _mupdf.PDF_ENUM_NAME_EndOfLine
PDF_ENUM_NAME_Exclude = _mupdf.PDF_ENUM_NAME_Exclude
PDF_ENUM_NAME_Experimental = _mupdf.PDF_ENUM_NAME_Experimental
PDF_ENUM_NAME_Expired = _mupdf.PDF_ENUM_NAME_Expired
PDF_ENUM_NAME_ExtGState = _mupdf.PDF_ENUM_NAME_ExtGState
PDF_ENUM_NAME_Extend = _mupdf.PDF_ENUM_NAME_Extend
PDF_ENUM_NAME_F = _mupdf.PDF_ENUM_NAME_F
PDF_ENUM_NAME_FL = _mupdf.PDF_ENUM_NAME_FL
PDF_ENUM_NAME_FRM = _mupdf.PDF_ENUM_NAME_FRM
PDF_ENUM_NAME_FS = _mupdf.PDF_ENUM_NAME_FS
PDF_ENUM_NAME_FT = _mupdf.PDF_ENUM_NAME_FT
PDF_ENUM_NAME_Fade = _mupdf.PDF_ENUM_NAME_Fade
PDF_ENUM_NAME_Ff = _mupdf.PDF_ENUM_NAME_Ff
PDF_ENUM_NAME_FieldMDP = _mupdf.PDF_ENUM_NAME_FieldMDP
PDF_ENUM_NAME_Fields = _mupdf.PDF_ENUM_NAME_Fields
PDF_ENUM_NAME_FileAttachment = _mupdf.PDF_ENUM_NAME_FileAttachment
PDF_ENUM_NAME_FileSize = _mupdf.PDF_ENUM_NAME_FileSize
PDF_ENUM_NAME_Filespec = _mupdf.PDF_ENUM_NAME_Filespec
PDF_ENUM_NAME_Filter = _mupdf.PDF_ENUM_NAME_Filter
PDF_ENUM_NAME_Final = _mupdf.PDF_ENUM_NAME_Final
PDF_ENUM_NAME_Fingerprint = _mupdf.PDF_ENUM_NAME_Fingerprint
PDF_ENUM_NAME_First = _mupdf.PDF_ENUM_NAME_First
PDF_ENUM_NAME_FirstChar = _mupdf.PDF_ENUM_NAME_FirstChar
PDF_ENUM_NAME_FirstPage = _mupdf.PDF_ENUM_NAME_FirstPage
PDF_ENUM_NAME_Fit = _mupdf.PDF_ENUM_NAME_Fit
PDF_ENUM_NAME_FitB = _mupdf.PDF_ENUM_NAME_FitB
PDF_ENUM_NAME_FitBH = _mupdf.PDF_ENUM_NAME_FitBH
PDF_ENUM_NAME_FitBV = _mupdf.PDF_ENUM_NAME_FitBV
PDF_ENUM_NAME_FitH = _mupdf.PDF_ENUM_NAME_FitH
PDF_ENUM_NAME_FitR = _mupdf.PDF_ENUM_NAME_FitR
PDF_ENUM_NAME_FitV = _mupdf.PDF_ENUM_NAME_FitV
PDF_ENUM_NAME_Fl = _mupdf.PDF_ENUM_NAME_Fl
PDF_ENUM_NAME_Flags = _mupdf.PDF_ENUM_NAME_Flags
PDF_ENUM_NAME_FlateDecode = _mupdf.PDF_ENUM_NAME_FlateDecode
PDF_ENUM_NAME_Fly = _mupdf.PDF_ENUM_NAME_Fly
PDF_ENUM_NAME_Font = _mupdf.PDF_ENUM_NAME_Font
PDF_ENUM_NAME_FontBBox = _mupdf.PDF_ENUM_NAME_FontBBox
PDF_ENUM_NAME_FontDescriptor = _mupdf.PDF_ENUM_NAME_FontDescriptor
PDF_ENUM_NAME_FontFile = _mupdf.PDF_ENUM_NAME_FontFile
PDF_ENUM_NAME_FontFile2 = _mupdf.PDF_ENUM_NAME_FontFile2
PDF_ENUM_NAME_FontFile3 = _mupdf.PDF_ENUM_NAME_FontFile3
PDF_ENUM_NAME_FontMatrix = _mupdf.PDF_ENUM_NAME_FontMatrix
PDF_ENUM_NAME_FontName = _mupdf.PDF_ENUM_NAME_FontName
PDF_ENUM_NAME_ForComment = _mupdf.PDF_ENUM_NAME_ForComment
PDF_ENUM_NAME_ForPublicRelease = _mupdf.PDF_ENUM_NAME_ForPublicRelease
PDF_ENUM_NAME_Form = _mupdf.PDF_ENUM_NAME_Form
PDF_ENUM_NAME_FormEx = _mupdf.PDF_ENUM_NAME_FormEx
PDF_ENUM_NAME_FormType = _mupdf.PDF_ENUM_NAME_FormType
PDF_ENUM_NAME_FreeText = _mupdf.PDF_ENUM_NAME_FreeText
PDF_ENUM_NAME_Function = _mupdf.PDF_ENUM_NAME_Function
PDF_ENUM_NAME_FunctionType = _mupdf.PDF_ENUM_NAME_FunctionType
PDF_ENUM_NAME_Functions = _mupdf.PDF_ENUM_NAME_Functions
PDF_ENUM_NAME_G = _mupdf.PDF_ENUM_NAME_G
PDF_ENUM_NAME_Gamma = _mupdf.PDF_ENUM_NAME_Gamma
PDF_ENUM_NAME_Glitter = _mupdf.PDF_ENUM_NAME_Glitter
PDF_ENUM_NAME_GoTo = _mupdf.PDF_ENUM_NAME_GoTo
PDF_ENUM_NAME_GoToR = _mupdf.PDF_ENUM_NAME_GoToR
PDF_ENUM_NAME_Group = _mupdf.PDF_ENUM_NAME_Group
PDF_ENUM_NAME_H = _mupdf.PDF_ENUM_NAME_H
PDF_ENUM_NAME_Height = _mupdf.PDF_ENUM_NAME_Height
PDF_ENUM_NAME_Helv = _mupdf.PDF_ENUM_NAME_Helv
PDF_ENUM_NAME_Highlight = _mupdf.PDF_ENUM_NAME_Highlight
PDF_ENUM_NAME_HistoryPos = _mupdf.PDF_ENUM_NAME_HistoryPos
PDF_ENUM_NAME_I = _mupdf.PDF_ENUM_NAME_I
PDF_ENUM_NAME_IC = _mupdf.PDF_ENUM_NAME_IC
PDF_ENUM_NAME_ICCBased = _mupdf.PDF_ENUM_NAME_ICCBased
PDF_ENUM_NAME_ID = _mupdf.PDF_ENUM_NAME_ID
PDF_ENUM_NAME_IM = _mupdf.PDF_ENUM_NAME_IM
PDF_ENUM_NAME_IRT = _mupdf.PDF_ENUM_NAME_IRT
PDF_ENUM_NAME_Identity = _mupdf.PDF_ENUM_NAME_Identity
PDF_ENUM_NAME_Identity_H = _mupdf.PDF_ENUM_NAME_Identity_H
PDF_ENUM_NAME_Identity_V = _mupdf.PDF_ENUM_NAME_Identity_V
PDF_ENUM_NAME_Image = _mupdf.PDF_ENUM_NAME_Image
PDF_ENUM_NAME_ImageMask = _mupdf.PDF_ENUM_NAME_ImageMask
PDF_ENUM_NAME_Include = _mupdf.PDF_ENUM_NAME_Include
PDF_ENUM_NAME_Index = _mupdf.PDF_ENUM_NAME_Index
PDF_ENUM_NAME_Indexed = _mupdf.PDF_ENUM_NAME_Indexed
PDF_ENUM_NAME_Info = _mupdf.PDF_ENUM_NAME_Info
PDF_ENUM_NAME_Ink = _mupdf.PDF_ENUM_NAME_Ink
PDF_ENUM_NAME_InkList = _mupdf.PDF_ENUM_NAME_InkList
PDF_ENUM_NAME_Intent = _mupdf.PDF_ENUM_NAME_Intent
PDF_ENUM_NAME_Interpolate = _mupdf.PDF_ENUM_NAME_Interpolate
PDF_ENUM_NAME_IsMap = _mupdf.PDF_ENUM_NAME_IsMap
PDF_ENUM_NAME_ItalicAngle = _mupdf.PDF_ENUM_NAME_ItalicAngle
PDF_ENUM_NAME_JBIG2Decode = _mupdf.PDF_ENUM_NAME_JBIG2Decode
PDF_ENUM_NAME_JBIG2Globals = _mupdf.PDF_ENUM_NAME_JBIG2Globals
PDF_ENUM_NAME_JPXDecode = _mupdf.PDF_ENUM_NAME_JPXDecode
PDF_ENUM_NAME_JS = _mupdf.PDF_ENUM_NAME_JS
PDF_ENUM_NAME_JavaScript = _mupdf.PDF_ENUM_NAME_JavaScript
PDF_ENUM_NAME_K = _mupdf.PDF_ENUM_NAME_K
PDF_ENUM_NAME_Keywords = _mupdf.PDF_ENUM_NAME_Keywords
PDF_ENUM_NAME_Kids = _mupdf.PDF_ENUM_NAME_Kids
PDF_ENUM_NAME_L = _mupdf.PDF_ENUM_NAME_L
PDF_ENUM_NAME_LC = _mupdf.PDF_ENUM_NAME_LC
PDF_ENUM_NAME_LE = _mupdf.PDF_ENUM_NAME_LE
PDF_ENUM_NAME_LJ = _mupdf.PDF_ENUM_NAME_LJ
PDF_ENUM_NAME_LW = _mupdf.PDF_ENUM_NAME_LW
PDF_ENUM_NAME_LZ = _mupdf.PDF_ENUM_NAME_LZ
PDF_ENUM_NAME_LZW = _mupdf.PDF_ENUM_NAME_LZW
PDF_ENUM_NAME_LZWDecode = _mupdf.PDF_ENUM_NAME_LZWDecode
PDF_ENUM_NAME_Lab = _mupdf.PDF_ENUM_NAME_Lab
PDF_ENUM_NAME_Lang = _mupdf.PDF_ENUM_NAME_Lang
PDF_ENUM_NAME_Last = _mupdf.PDF_ENUM_NAME_Last
PDF_ENUM_NAME_LastChar = _mupdf.PDF_ENUM_NAME_LastChar
PDF_ENUM_NAME_LastPage = _mupdf.PDF_ENUM_NAME_LastPage
PDF_ENUM_NAME_Launch = _mupdf.PDF_ENUM_NAME_Launch
PDF_ENUM_NAME_Length = _mupdf.PDF_ENUM_NAME_Length
PDF_ENUM_NAME_Length1 = _mupdf.PDF_ENUM_NAME_Length1
PDF_ENUM_NAME_Length2 = _mupdf.PDF_ENUM_NAME_Length2
PDF_ENUM_NAME_Length3 = _mupdf.PDF_ENUM_NAME_Length3
PDF_ENUM_NAME_Limits = _mupdf.PDF_ENUM_NAME_Limits
PDF_ENUM_NAME_Line = _mupdf.PDF_ENUM_NAME_Line
PDF_ENUM_NAME_Linearized = _mupdf.PDF_ENUM_NAME_Linearized
PDF_ENUM_NAME_Link = _mupdf.PDF_ENUM_NAME_Link
PDF_ENUM_NAME_Location = _mupdf.PDF_ENUM_NAME_Location
PDF_ENUM_NAME_Lock = _mupdf.PDF_ENUM_NAME_Lock
PDF_ENUM_NAME_Locked = _mupdf.PDF_ENUM_NAME_Locked
PDF_ENUM_NAME_Luminosity = _mupdf.PDF_ENUM_NAME_Luminosity
PDF_ENUM_NAME_M = _mupdf.PDF_ENUM_NAME_M
PDF_ENUM_NAME_MCID = _mupdf.PDF_ENUM_NAME_MCID
PDF_ENUM_NAME_MK = _mupdf.PDF_ENUM_NAME_MK
PDF_ENUM_NAME_ML = _mupdf.PDF_ENUM_NAME_ML
PDF_ENUM_NAME_MMType1 = _mupdf.PDF_ENUM_NAME_MMType1
PDF_ENUM_NAME_Mac = _mupdf.PDF_ENUM_NAME_Mac
PDF_ENUM_NAME_Mask = _mupdf.PDF_ENUM_NAME_Mask
PDF_ENUM_NAME_Matrix = _mupdf.PDF_ENUM_NAME_Matrix
PDF_ENUM_NAME_Matte = _mupdf.PDF_ENUM_NAME_Matte
PDF_ENUM_NAME_MaxLen = _mupdf.PDF_ENUM_NAME_MaxLen
PDF_ENUM_NAME_MediaBox = _mupdf.PDF_ENUM_NAME_MediaBox
PDF_ENUM_NAME_Metadata = _mupdf.PDF_ENUM_NAME_Metadata
PDF_ENUM_NAME_MissingWidth = _mupdf.PDF_ENUM_NAME_MissingWidth
PDF_ENUM_NAME_ModDate = _mupdf.PDF_ENUM_NAME_ModDate
PDF_ENUM_NAME_Movie = _mupdf.PDF_ENUM_NAME_Movie
PDF_ENUM_NAME_Msg = _mupdf.PDF_ENUM_NAME_Msg
PDF_ENUM_NAME_Multiply = _mupdf.PDF_ENUM_NAME_Multiply
PDF_ENUM_NAME_N = _mupdf.PDF_ENUM_NAME_N
PDF_ENUM_NAME_Name = _mupdf.PDF_ENUM_NAME_Name
PDF_ENUM_NAME_Named = _mupdf.PDF_ENUM_NAME_Named
PDF_ENUM_NAME_Names = _mupdf.PDF_ENUM_NAME_Names
PDF_ENUM_NAME_NewWindow = _mupdf.PDF_ENUM_NAME_NewWindow
PDF_ENUM_NAME_Next = _mupdf.PDF_ENUM_NAME_Next
PDF_ENUM_NAME_NextPage = _mupdf.PDF_ENUM_NAME_NextPage
PDF_ENUM_NAME_NonEFontNoWarn = _mupdf.PDF_ENUM_NAME_NonEFontNoWarn
PDF_ENUM_NAME_None = _mupdf.PDF_ENUM_NAME_None
PDF_ENUM_NAME_Normal = _mupdf.PDF_ENUM_NAME_Normal
PDF_ENUM_NAME_NotApproved = _mupdf.PDF_ENUM_NAME_NotApproved
PDF_ENUM_NAME_NotForPublicRelease = _mupdf.PDF_ENUM_NAME_NotForPublicRelease
PDF_ENUM_NAME_NumSections = _mupdf.PDF_ENUM_NAME_NumSections
PDF_ENUM_NAME_Nums = _mupdf.PDF_ENUM_NAME_Nums
PDF_ENUM_NAME_O = _mupdf.PDF_ENUM_NAME_O
PDF_ENUM_NAME_OC = _mupdf.PDF_ENUM_NAME_OC
PDF_ENUM_NAME_OCG = _mupdf.PDF_ENUM_NAME_OCG
PDF_ENUM_NAME_OCGs = _mupdf.PDF_ENUM_NAME_OCGs
PDF_ENUM_NAME_OCMD = _mupdf.PDF_ENUM_NAME_OCMD
PDF_ENUM_NAME_OCProperties = _mupdf.PDF_ENUM_NAME_OCProperties
PDF_ENUM_NAME_OE = _mupdf.PDF_ENUM_NAME_OE
PDF_ENUM_NAME_OFF = _mupdf.PDF_ENUM_NAME_OFF
PDF_ENUM_NAME_ON = _mupdf.PDF_ENUM_NAME_ON
PDF_ENUM_NAME_OP = _mupdf.PDF_ENUM_NAME_OP
PDF_ENUM_NAME_OPM = _mupdf.PDF_ENUM_NAME_OPM
PDF_ENUM_NAME_OS = _mupdf.PDF_ENUM_NAME_OS
PDF_ENUM_NAME_ObjStm = _mupdf.PDF_ENUM_NAME_ObjStm
PDF_ENUM_NAME_Of = _mupdf.PDF_ENUM_NAME_Of
PDF_ENUM_NAME_Off = _mupdf.PDF_ENUM_NAME_Off
PDF_ENUM_NAME_Open = _mupdf.PDF_ENUM_NAME_Open
PDF_ENUM_NAME_OpenArrow = _mupdf.PDF_ENUM_NAME_OpenArrow
PDF_ENUM_NAME_OpenType = _mupdf.PDF_ENUM_NAME_OpenType
PDF_ENUM_NAME_Opt = _mupdf.PDF_ENUM_NAME_Opt
PDF_ENUM_NAME_Order = _mupdf.PDF_ENUM_NAME_Order
PDF_ENUM_NAME_Ordering = _mupdf.PDF_ENUM_NAME_Ordering
PDF_ENUM_NAME_Outlines = _mupdf.PDF_ENUM_NAME_Outlines
PDF_ENUM_NAME_OutputIntents = _mupdf.PDF_ENUM_NAME_OutputIntents
PDF_ENUM_NAME_P = _mupdf.PDF_ENUM_NAME_P
PDF_ENUM_NAME_PDF = _mupdf.PDF_ENUM_NAME_PDF
PDF_ENUM_NAME_PS = _mupdf.PDF_ENUM_NAME_PS
PDF_ENUM_NAME_Page = _mupdf.PDF_ENUM_NAME_Page
PDF_ENUM_NAME_PageMode = _mupdf.PDF_ENUM_NAME_PageMode
PDF_ENUM_NAME_Pages = _mupdf.PDF_ENUM_NAME_Pages
PDF_ENUM_NAME_PaintType = _mupdf.PDF_ENUM_NAME_PaintType
PDF_ENUM_NAME_Params = _mupdf.PDF_ENUM_NAME_Params
PDF_ENUM_NAME_Parent = _mupdf.PDF_ENUM_NAME_Parent
PDF_ENUM_NAME_Pattern = _mupdf.PDF_ENUM_NAME_Pattern
PDF_ENUM_NAME_PatternType = _mupdf.PDF_ENUM_NAME_PatternType
PDF_ENUM_NAME_Perms = _mupdf.PDF_ENUM_NAME_Perms
PDF_ENUM_NAME_PolyLine = _mupdf.PDF_ENUM_NAME_PolyLine
PDF_ENUM_NAME_Polygon = _mupdf.PDF_ENUM_NAME_Polygon
PDF_ENUM_NAME_Popup = _mupdf.PDF_ENUM_NAME_Popup
PDF_ENUM_NAME_PreRelease = _mupdf.PDF_ENUM_NAME_PreRelease
PDF_ENUM_NAME_Predictor = _mupdf.PDF_ENUM_NAME_Predictor
PDF_ENUM_NAME_Prev = _mupdf.PDF_ENUM_NAME_Prev
PDF_ENUM_NAME_PrevPage = _mupdf.PDF_ENUM_NAME_PrevPage
PDF_ENUM_NAME_Preview = _mupdf.PDF_ENUM_NAME_Preview
PDF_ENUM_NAME_Print = _mupdf.PDF_ENUM_NAME_Print
PDF_ENUM_NAME_PrinterMark = _mupdf.PDF_ENUM_NAME_PrinterMark
PDF_ENUM_NAME_ProcSet = _mupdf.PDF_ENUM_NAME_ProcSet
PDF_ENUM_NAME_Producer = _mupdf.PDF_ENUM_NAME_Producer
PDF_ENUM_NAME_Properties = _mupdf.PDF_ENUM_NAME_Properties
PDF_ENUM_NAME_Prop_AuthTime = _mupdf.PDF_ENUM_NAME_Prop_AuthTime
PDF_ENUM_NAME_Prop_AuthType = _mupdf.PDF_ENUM_NAME_Prop_AuthType
PDF_ENUM_NAME_Prop_Build = _mupdf.PDF_ENUM_NAME_Prop_Build
PDF_ENUM_NAME_PubSec = _mupdf.PDF_ENUM_NAME_PubSec
PDF_ENUM_NAME_Push = _mupdf.PDF_ENUM_NAME_Push
PDF_ENUM_NAME_Q = _mupdf.PDF_ENUM_NAME_Q
PDF_ENUM_NAME_QuadPoints = _mupdf.PDF_ENUM_NAME_QuadPoints
PDF_ENUM_NAME_R = _mupdf.PDF_ENUM_NAME_R
PDF_ENUM_NAME_RBGroups = _mupdf.PDF_ENUM_NAME_RBGroups
PDF_ENUM_NAME_RC = _mupdf.PDF_ENUM_NAME_RC
PDF_ENUM_NAME_RClosedArrow = _mupdf.PDF_ENUM_NAME_RClosedArrow
PDF_ENUM_NAME_REx = _mupdf.PDF_ENUM_NAME_REx
PDF_ENUM_NAME_RGB = _mupdf.PDF_ENUM_NAME_RGB
PDF_ENUM_NAME_RI = _mupdf.PDF_ENUM_NAME_RI
PDF_ENUM_NAME_RL = _mupdf.PDF_ENUM_NAME_RL
PDF_ENUM_NAME_ROpenArrow = _mupdf.PDF_ENUM_NAME_ROpenArrow
PDF_ENUM_NAME_Range = _mupdf.PDF_ENUM_NAME_Range
PDF_ENUM_NAME_Reason = _mupdf.PDF_ENUM_NAME_Reason
PDF_ENUM_NAME_Rect = _mupdf.PDF_ENUM_NAME_Rect
PDF_ENUM_NAME_Redact = _mupdf.PDF_ENUM_NAME_Redact
PDF_ENUM_NAME_Ref = _mupdf.PDF_ENUM_NAME_Ref
PDF_ENUM_NAME_Reference = _mupdf.PDF_ENUM_NAME_Reference
PDF_ENUM_NAME_Registry = _mupdf.PDF_ENUM_NAME_Registry
PDF_ENUM_NAME_ResetForm = _mupdf.PDF_ENUM_NAME_ResetForm
PDF_ENUM_NAME_Resources = _mupdf.PDF_ENUM_NAME_Resources
PDF_ENUM_NAME_Root = _mupdf.PDF_ENUM_NAME_Root
PDF_ENUM_NAME_Rotate = _mupdf.PDF_ENUM_NAME_Rotate
PDF_ENUM_NAME_Rows = _mupdf.PDF_ENUM_NAME_Rows
PDF_ENUM_NAME_RunLengthDecode = _mupdf.PDF_ENUM_NAME_RunLengthDecode
PDF_ENUM_NAME_S = _mupdf.PDF_ENUM_NAME_S
PDF_ENUM_NAME_SMask = _mupdf.PDF_ENUM_NAME_SMask
PDF_ENUM_NAME_SMaskInData = _mupdf.PDF_ENUM_NAME_SMaskInData
PDF_ENUM_NAME_Schema = _mupdf.PDF_ENUM_NAME_Schema
PDF_ENUM_NAME_Screen = _mupdf.PDF_ENUM_NAME_Screen
PDF_ENUM_NAME_Separation = _mupdf.PDF_ENUM_NAME_Separation
PDF_ENUM_NAME_Shading = _mupdf.PDF_ENUM_NAME_Shading
PDF_ENUM_NAME_ShadingType = _mupdf.PDF_ENUM_NAME_ShadingType
PDF_ENUM_NAME_Si = _mupdf.PDF_ENUM_NAME_Si
PDF_ENUM_NAME_Sig = _mupdf.PDF_ENUM_NAME_Sig
PDF_ENUM_NAME_SigFlags = _mupdf.PDF_ENUM_NAME_SigFlags
PDF_ENUM_NAME_SigQ = _mupdf.PDF_ENUM_NAME_SigQ
PDF_ENUM_NAME_SigRef = _mupdf.PDF_ENUM_NAME_SigRef
PDF_ENUM_NAME_Size = _mupdf.PDF_ENUM_NAME_Size
PDF_ENUM_NAME_Slash = _mupdf.PDF_ENUM_NAME_Slash
PDF_ENUM_NAME_Sold = _mupdf.PDF_ENUM_NAME_Sold
PDF_ENUM_NAME_Sound = _mupdf.PDF_ENUM_NAME_Sound
PDF_ENUM_NAME_Split = _mupdf.PDF_ENUM_NAME_Split
PDF_ENUM_NAME_Square = _mupdf.PDF_ENUM_NAME_Square
PDF_ENUM_NAME_Squiggly = _mupdf.PDF_ENUM_NAME_Squiggly
PDF_ENUM_NAME_Stamp = _mupdf.PDF_ENUM_NAME_Stamp
PDF_ENUM_NAME_Standard = _mupdf.PDF_ENUM_NAME_Standard
PDF_ENUM_NAME_StdCF = _mupdf.PDF_ENUM_NAME_StdCF
PDF_ENUM_NAME_StemV = _mupdf.PDF_ENUM_NAME_StemV
PDF_ENUM_NAME_StmF = _mupdf.PDF_ENUM_NAME_StmF
PDF_ENUM_NAME_StrF = _mupdf.PDF_ENUM_NAME_StrF
PDF_ENUM_NAME_StrikeOut = _mupdf.PDF_ENUM_NAME_StrikeOut
PDF_ENUM_NAME_StructParent = _mupdf.PDF_ENUM_NAME_StructParent
PDF_ENUM_NAME_StructParents = _mupdf.PDF_ENUM_NAME_StructParents
PDF_ENUM_NAME_SubFilter = _mupdf.PDF_ENUM_NAME_SubFilter
PDF_ENUM_NAME_Subject = _mupdf.PDF_ENUM_NAME_Subject
PDF_ENUM_NAME_Subtype = _mupdf.PDF_ENUM_NAME_Subtype
PDF_ENUM_NAME_Subtype2 = _mupdf.PDF_ENUM_NAME_Subtype2
PDF_ENUM_NAME_Supplement = _mupdf.PDF_ENUM_NAME_Supplement
PDF_ENUM_NAME_Symb = _mupdf.PDF_ENUM_NAME_Symb
PDF_ENUM_NAME_T = _mupdf.PDF_ENUM_NAME_T
PDF_ENUM_NAME_TI = _mupdf.PDF_ENUM_NAME_TI
PDF_ENUM_NAME_TR = _mupdf.PDF_ENUM_NAME_TR
PDF_ENUM_NAME_TR2 = _mupdf.PDF_ENUM_NAME_TR2
PDF_ENUM_NAME_TU = _mupdf.PDF_ENUM_NAME_TU
PDF_ENUM_NAME_Text = _mupdf.PDF_ENUM_NAME_Text
PDF_ENUM_NAME_TilingType = _mupdf.PDF_ENUM_NAME_TilingType
PDF_ENUM_NAME_Times = _mupdf.PDF_ENUM_NAME_Times
PDF_ENUM_NAME_Title = _mupdf.PDF_ENUM_NAME_Title
PDF_ENUM_NAME_ToUnicode = _mupdf.PDF_ENUM_NAME_ToUnicode
PDF_ENUM_NAME_TopSecret = _mupdf.PDF_ENUM_NAME_TopSecret
PDF_ENUM_NAME_Trans = _mupdf.PDF_ENUM_NAME_Trans
PDF_ENUM_NAME_TransformMethod = _mupdf.PDF_ENUM_NAME_TransformMethod
PDF_ENUM_NAME_TransformParams = _mupdf.PDF_ENUM_NAME_TransformParams
PDF_ENUM_NAME_Transparency = _mupdf.PDF_ENUM_NAME_Transparency
PDF_ENUM_NAME_TrapNet = _mupdf.PDF_ENUM_NAME_TrapNet
PDF_ENUM_NAME_TrimBox = _mupdf.PDF_ENUM_NAME_TrimBox
PDF_ENUM_NAME_TrueType = _mupdf.PDF_ENUM_NAME_TrueType
PDF_ENUM_NAME_TrustedMode = _mupdf.PDF_ENUM_NAME_TrustedMode
PDF_ENUM_NAME_Tx = _mupdf.PDF_ENUM_NAME_Tx
PDF_ENUM_NAME_Type = _mupdf.PDF_ENUM_NAME_Type
PDF_ENUM_NAME_Type0 = _mupdf.PDF_ENUM_NAME_Type0
PDF_ENUM_NAME_Type1 = _mupdf.PDF_ENUM_NAME_Type1
PDF_ENUM_NAME_Type1C = _mupdf.PDF_ENUM_NAME_Type1C
PDF_ENUM_NAME_Type3 = _mupdf.PDF_ENUM_NAME_Type3
PDF_ENUM_NAME_U = _mupdf.PDF_ENUM_NAME_U
PDF_ENUM_NAME_UE = _mupdf.PDF_ENUM_NAME_UE
PDF_ENUM_NAME_UF = _mupdf.PDF_ENUM_NAME_UF
PDF_ENUM_NAME_URI = _mupdf.PDF_ENUM_NAME_URI
PDF_ENUM_NAME_URL = _mupdf.PDF_ENUM_NAME_URL
PDF_ENUM_NAME_Unchanged = _mupdf.PDF_ENUM_NAME_Unchanged
PDF_ENUM_NAME_Uncover = _mupdf.PDF_ENUM_NAME_Uncover
PDF_ENUM_NAME_Underline = _mupdf.PDF_ENUM_NAME_Underline
PDF_ENUM_NAME_Unix = _mupdf.PDF_ENUM_NAME_Unix
PDF_ENUM_NAME_Usage = _mupdf.PDF_ENUM_NAME_Usage
PDF_ENUM_NAME_UseBlackPtComp = _mupdf.PDF_ENUM_NAME_UseBlackPtComp
PDF_ENUM_NAME_UseCMap = _mupdf.PDF_ENUM_NAME_UseCMap
PDF_ENUM_NAME_UseOutlines = _mupdf.PDF_ENUM_NAME_UseOutlines
PDF_ENUM_NAME_UserUnit = _mupdf.PDF_ENUM_NAME_UserUnit
PDF_ENUM_NAME_V = _mupdf.PDF_ENUM_NAME_V
PDF_ENUM_NAME_V2 = _mupdf.PDF_ENUM_NAME_V2
PDF_ENUM_NAME_VE = _mupdf.PDF_ENUM_NAME_VE
PDF_ENUM_NAME_Version = _mupdf.PDF_ENUM_NAME_Version
PDF_ENUM_NAME_Vertices = _mupdf.PDF_ENUM_NAME_Vertices
PDF_ENUM_NAME_VerticesPerRow = _mupdf.PDF_ENUM_NAME_VerticesPerRow
PDF_ENUM_NAME_View = _mupdf.PDF_ENUM_NAME_View
PDF_ENUM_NAME_W = _mupdf.PDF_ENUM_NAME_W
PDF_ENUM_NAME_W2 = _mupdf.PDF_ENUM_NAME_W2
PDF_ENUM_NAME_WMode = _mupdf.PDF_ENUM_NAME_WMode
PDF_ENUM_NAME_Watermark = _mupdf.PDF_ENUM_NAME_Watermark
PDF_ENUM_NAME_WhitePoint = _mupdf.PDF_ENUM_NAME_WhitePoint
PDF_ENUM_NAME_Widget = _mupdf.PDF_ENUM_NAME_Widget
PDF_ENUM_NAME_Width = _mupdf.PDF_ENUM_NAME_Width
PDF_ENUM_NAME_Widths = _mupdf.PDF_ENUM_NAME_Widths
PDF_ENUM_NAME_WinAnsiEncoding = _mupdf.PDF_ENUM_NAME_WinAnsiEncoding
PDF_ENUM_NAME_Wipe = _mupdf.PDF_ENUM_NAME_Wipe
PDF_ENUM_NAME_XFA = _mupdf.PDF_ENUM_NAME_XFA
PDF_ENUM_NAME_XHeight = _mupdf.PDF_ENUM_NAME_XHeight
PDF_ENUM_NAME_XML = _mupdf.PDF_ENUM_NAME_XML
PDF_ENUM_NAME_XObject = _mupdf.PDF_ENUM_NAME_XObject
PDF_ENUM_NAME_XRef = _mupdf.PDF_ENUM_NAME_XRef
PDF_ENUM_NAME_XRefStm = _mupdf.PDF_ENUM_NAME_XRefStm
PDF_ENUM_NAME_XStep = _mupdf.PDF_ENUM_NAME_XStep
PDF_ENUM_NAME_XYZ = _mupdf.PDF_ENUM_NAME_XYZ
PDF_ENUM_NAME_YStep = _mupdf.PDF_ENUM_NAME_YStep
PDF_ENUM_NAME_Yes = _mupdf.PDF_ENUM_NAME_Yes
PDF_ENUM_NAME_ZaDb = _mupdf.PDF_ENUM_NAME_ZaDb
PDF_ENUM_NAME_adbe_pkcs7_detached = _mupdf.PDF_ENUM_NAME_adbe_pkcs7_detached
PDF_ENUM_NAME_ca = _mupdf.PDF_ENUM_NAME_ca
PDF_ENUM_NAME_n0 = _mupdf.PDF_ENUM_NAME_n0
PDF_ENUM_NAME_n1 = _mupdf.PDF_ENUM_NAME_n1
PDF_ENUM_NAME_n2 = _mupdf.PDF_ENUM_NAME_n2
PDF_ENUM_NAME_op = _mupdf.PDF_ENUM_NAME_op
PDF_ENUM_LIMIT = _mupdf.PDF_ENUM_LIMIT
PDF_LEXBUF_SMALL = _mupdf.PDF_LEXBUF_SMALL
PDF_LEXBUF_LARGE = _mupdf.PDF_LEXBUF_LARGE
class pdf_lexbuf(_object):
    """Proxy of C++ pdf_lexbuf class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_lexbuf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_lexbuf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _mupdf.pdf_lexbuf_size_set
    __swig_getmethods__["size"] = _mupdf.pdf_lexbuf_size_get
    if _newclass:
        size = _swig_property(_mupdf.pdf_lexbuf_size_get, _mupdf.pdf_lexbuf_size_set)
    __swig_setmethods__["base_size"] = _mupdf.pdf_lexbuf_base_size_set
    __swig_getmethods__["base_size"] = _mupdf.pdf_lexbuf_base_size_get
    if _newclass:
        base_size = _swig_property(_mupdf.pdf_lexbuf_base_size_get, _mupdf.pdf_lexbuf_base_size_set)
    __swig_setmethods__["len"] = _mupdf.pdf_lexbuf_len_set
    __swig_getmethods__["len"] = _mupdf.pdf_lexbuf_len_get
    if _newclass:
        len = _swig_property(_mupdf.pdf_lexbuf_len_get, _mupdf.pdf_lexbuf_len_set)
    __swig_setmethods__["i"] = _mupdf.pdf_lexbuf_i_set
    __swig_getmethods__["i"] = _mupdf.pdf_lexbuf_i_get
    if _newclass:
        i = _swig_property(_mupdf.pdf_lexbuf_i_get, _mupdf.pdf_lexbuf_i_set)
    __swig_setmethods__["f"] = _mupdf.pdf_lexbuf_f_set
    __swig_getmethods__["f"] = _mupdf.pdf_lexbuf_f_get
    if _newclass:
        f = _swig_property(_mupdf.pdf_lexbuf_f_get, _mupdf.pdf_lexbuf_f_set)
    __swig_setmethods__["scratch"] = _mupdf.pdf_lexbuf_scratch_set
    __swig_getmethods__["scratch"] = _mupdf.pdf_lexbuf_scratch_get
    if _newclass:
        scratch = _swig_property(_mupdf.pdf_lexbuf_scratch_get, _mupdf.pdf_lexbuf_scratch_set)
    __swig_setmethods__["buffer"] = _mupdf.pdf_lexbuf_buffer_set
    __swig_getmethods__["buffer"] = _mupdf.pdf_lexbuf_buffer_get
    if _newclass:
        buffer = _swig_property(_mupdf.pdf_lexbuf_buffer_get, _mupdf.pdf_lexbuf_buffer_set)

    def __init__(self):
        """__init__(pdf_lexbuf self) -> pdf_lexbuf"""
        this = _mupdf.new_pdf_lexbuf()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_lexbuf
    __del__ = lambda self: None
pdf_lexbuf_swigregister = _mupdf.pdf_lexbuf_swigregister
pdf_lexbuf_swigregister(pdf_lexbuf)

class pdf_lexbuf_large(_object):
    """Proxy of C++ pdf_lexbuf_large class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_lexbuf_large, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_lexbuf_large, name)
    __repr__ = _swig_repr
    __swig_setmethods__["base"] = _mupdf.pdf_lexbuf_large_base_set
    __swig_getmethods__["base"] = _mupdf.pdf_lexbuf_large_base_get
    if _newclass:
        base = _swig_property(_mupdf.pdf_lexbuf_large_base_get, _mupdf.pdf_lexbuf_large_base_set)
    __swig_setmethods__["buffer"] = _mupdf.pdf_lexbuf_large_buffer_set
    __swig_getmethods__["buffer"] = _mupdf.pdf_lexbuf_large_buffer_get
    if _newclass:
        buffer = _swig_property(_mupdf.pdf_lexbuf_large_buffer_get, _mupdf.pdf_lexbuf_large_buffer_set)

    def __init__(self):
        """__init__(pdf_lexbuf_large self) -> pdf_lexbuf_large"""
        this = _mupdf.new_pdf_lexbuf_large()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_lexbuf_large
    __del__ = lambda self: None
pdf_lexbuf_large_swigregister = _mupdf.pdf_lexbuf_large_swigregister
pdf_lexbuf_large_swigregister(pdf_lexbuf_large)

class pdf_layer_config(_object):
    """Proxy of C++ pdf_layer_config class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_layer_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_layer_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _mupdf.pdf_layer_config_name_set
    __swig_getmethods__["name"] = _mupdf.pdf_layer_config_name_get
    if _newclass:
        name = _swig_property(_mupdf.pdf_layer_config_name_get, _mupdf.pdf_layer_config_name_set)
    __swig_setmethods__["creator"] = _mupdf.pdf_layer_config_creator_set
    __swig_getmethods__["creator"] = _mupdf.pdf_layer_config_creator_get
    if _newclass:
        creator = _swig_property(_mupdf.pdf_layer_config_creator_get, _mupdf.pdf_layer_config_creator_set)

    def __init__(self):
        """__init__(pdf_layer_config self) -> pdf_layer_config"""
        this = _mupdf.new_pdf_layer_config()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_layer_config
    __del__ = lambda self: None
pdf_layer_config_swigregister = _mupdf.pdf_layer_config_swigregister
pdf_layer_config_swigregister(pdf_layer_config)

PDF_LAYER_UI_LABEL = _mupdf.PDF_LAYER_UI_LABEL
PDF_LAYER_UI_CHECKBOX = _mupdf.PDF_LAYER_UI_CHECKBOX
PDF_LAYER_UI_RADIOBOX = _mupdf.PDF_LAYER_UI_RADIOBOX
class pdf_layer_config_ui(_object):
    """Proxy of C++ pdf_layer_config_ui class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_layer_config_ui, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_layer_config_ui, name)
    __repr__ = _swig_repr
    __swig_setmethods__["text"] = _mupdf.pdf_layer_config_ui_text_set
    __swig_getmethods__["text"] = _mupdf.pdf_layer_config_ui_text_get
    if _newclass:
        text = _swig_property(_mupdf.pdf_layer_config_ui_text_get, _mupdf.pdf_layer_config_ui_text_set)
    __swig_setmethods__["depth"] = _mupdf.pdf_layer_config_ui_depth_set
    __swig_getmethods__["depth"] = _mupdf.pdf_layer_config_ui_depth_get
    if _newclass:
        depth = _swig_property(_mupdf.pdf_layer_config_ui_depth_get, _mupdf.pdf_layer_config_ui_depth_set)
    __swig_setmethods__["type"] = _mupdf.pdf_layer_config_ui_type_set
    __swig_getmethods__["type"] = _mupdf.pdf_layer_config_ui_type_get
    if _newclass:
        type = _swig_property(_mupdf.pdf_layer_config_ui_type_get, _mupdf.pdf_layer_config_ui_type_set)
    __swig_setmethods__["selected"] = _mupdf.pdf_layer_config_ui_selected_set
    __swig_getmethods__["selected"] = _mupdf.pdf_layer_config_ui_selected_get
    if _newclass:
        selected = _swig_property(_mupdf.pdf_layer_config_ui_selected_get, _mupdf.pdf_layer_config_ui_selected_set)
    __swig_setmethods__["locked"] = _mupdf.pdf_layer_config_ui_locked_set
    __swig_getmethods__["locked"] = _mupdf.pdf_layer_config_ui_locked_get
    if _newclass:
        locked = _swig_property(_mupdf.pdf_layer_config_ui_locked_get, _mupdf.pdf_layer_config_ui_locked_set)

    def __init__(self):
        """__init__(pdf_layer_config_ui self) -> pdf_layer_config_ui"""
        this = _mupdf.new_pdf_layer_config_ui()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_layer_config_ui
    __del__ = lambda self: None
pdf_layer_config_ui_swigregister = _mupdf.pdf_layer_config_ui_swigregister
pdf_layer_config_ui_swigregister(pdf_layer_config_ui)

class pdf_unsaved_sig(_object):
    """Proxy of C++ pdf_unsaved_sig class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_unsaved_sig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_unsaved_sig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["field"] = _mupdf.pdf_unsaved_sig_field_set
    __swig_getmethods__["field"] = _mupdf.pdf_unsaved_sig_field_get
    if _newclass:
        field = _swig_property(_mupdf.pdf_unsaved_sig_field_get, _mupdf.pdf_unsaved_sig_field_set)
    __swig_setmethods__["byte_range_start"] = _mupdf.pdf_unsaved_sig_byte_range_start_set
    __swig_getmethods__["byte_range_start"] = _mupdf.pdf_unsaved_sig_byte_range_start_get
    if _newclass:
        byte_range_start = _swig_property(_mupdf.pdf_unsaved_sig_byte_range_start_get, _mupdf.pdf_unsaved_sig_byte_range_start_set)
    __swig_setmethods__["byte_range_end"] = _mupdf.pdf_unsaved_sig_byte_range_end_set
    __swig_getmethods__["byte_range_end"] = _mupdf.pdf_unsaved_sig_byte_range_end_get
    if _newclass:
        byte_range_end = _swig_property(_mupdf.pdf_unsaved_sig_byte_range_end_get, _mupdf.pdf_unsaved_sig_byte_range_end_set)
    __swig_setmethods__["contents_start"] = _mupdf.pdf_unsaved_sig_contents_start_set
    __swig_getmethods__["contents_start"] = _mupdf.pdf_unsaved_sig_contents_start_get
    if _newclass:
        contents_start = _swig_property(_mupdf.pdf_unsaved_sig_contents_start_get, _mupdf.pdf_unsaved_sig_contents_start_set)
    __swig_setmethods__["contents_end"] = _mupdf.pdf_unsaved_sig_contents_end_set
    __swig_getmethods__["contents_end"] = _mupdf.pdf_unsaved_sig_contents_end_get
    if _newclass:
        contents_end = _swig_property(_mupdf.pdf_unsaved_sig_contents_end_get, _mupdf.pdf_unsaved_sig_contents_end_set)
    __swig_setmethods__["signer"] = _mupdf.pdf_unsaved_sig_signer_set
    __swig_getmethods__["signer"] = _mupdf.pdf_unsaved_sig_signer_get
    if _newclass:
        signer = _swig_property(_mupdf.pdf_unsaved_sig_signer_get, _mupdf.pdf_unsaved_sig_signer_set)
    __swig_setmethods__["next"] = _mupdf.pdf_unsaved_sig_next_set
    __swig_getmethods__["next"] = _mupdf.pdf_unsaved_sig_next_get
    if _newclass:
        next = _swig_property(_mupdf.pdf_unsaved_sig_next_get, _mupdf.pdf_unsaved_sig_next_set)

    def __init__(self):
        """__init__(pdf_unsaved_sig self) -> pdf_unsaved_sig"""
        this = _mupdf.new_pdf_unsaved_sig()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_unsaved_sig
    __del__ = lambda self: None
pdf_unsaved_sig_swigregister = _mupdf.pdf_unsaved_sig_swigregister
pdf_unsaved_sig_swigregister(pdf_unsaved_sig)

class pdf_rev_page_map(_object):
    """Proxy of C++ pdf_rev_page_map class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_rev_page_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_rev_page_map, name)
    __repr__ = _swig_repr
    __swig_setmethods__["page"] = _mupdf.pdf_rev_page_map_page_set
    __swig_getmethods__["page"] = _mupdf.pdf_rev_page_map_page_get
    if _newclass:
        page = _swig_property(_mupdf.pdf_rev_page_map_page_get, _mupdf.pdf_rev_page_map_page_set)
    __swig_setmethods__["object"] = _mupdf.pdf_rev_page_map_object_set
    __swig_getmethods__["object"] = _mupdf.pdf_rev_page_map_object_get
    if _newclass:
        object = _swig_property(_mupdf.pdf_rev_page_map_object_get, _mupdf.pdf_rev_page_map_object_set)

    def __init__(self):
        """__init__(pdf_rev_page_map self) -> pdf_rev_page_map"""
        this = _mupdf.new_pdf_rev_page_map()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_rev_page_map
    __del__ = lambda self: None
pdf_rev_page_map_swigregister = _mupdf.pdf_rev_page_map_swigregister
pdf_rev_page_map_swigregister(pdf_rev_page_map)

class pdf_hint_page(_object):
    """Proxy of C++ pdf_hint_page class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_hint_page, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_hint_page, name)
    __repr__ = _swig_repr
    __swig_setmethods__["number"] = _mupdf.pdf_hint_page_number_set
    __swig_getmethods__["number"] = _mupdf.pdf_hint_page_number_get
    if _newclass:
        number = _swig_property(_mupdf.pdf_hint_page_number_get, _mupdf.pdf_hint_page_number_set)
    __swig_setmethods__["offset"] = _mupdf.pdf_hint_page_offset_set
    __swig_getmethods__["offset"] = _mupdf.pdf_hint_page_offset_get
    if _newclass:
        offset = _swig_property(_mupdf.pdf_hint_page_offset_get, _mupdf.pdf_hint_page_offset_set)
    __swig_setmethods__["index"] = _mupdf.pdf_hint_page_index_set
    __swig_getmethods__["index"] = _mupdf.pdf_hint_page_index_get
    if _newclass:
        index = _swig_property(_mupdf.pdf_hint_page_index_get, _mupdf.pdf_hint_page_index_set)

    def __init__(self):
        """__init__(pdf_hint_page self) -> pdf_hint_page"""
        this = _mupdf.new_pdf_hint_page()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_hint_page
    __del__ = lambda self: None
pdf_hint_page_swigregister = _mupdf.pdf_hint_page_swigregister
pdf_hint_page_swigregister(pdf_hint_page)

class pdf_hint_shared(_object):
    """Proxy of C++ pdf_hint_shared class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_hint_shared, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_hint_shared, name)
    __repr__ = _swig_repr
    __swig_setmethods__["number"] = _mupdf.pdf_hint_shared_number_set
    __swig_getmethods__["number"] = _mupdf.pdf_hint_shared_number_get
    if _newclass:
        number = _swig_property(_mupdf.pdf_hint_shared_number_get, _mupdf.pdf_hint_shared_number_set)
    __swig_setmethods__["offset"] = _mupdf.pdf_hint_shared_offset_set
    __swig_getmethods__["offset"] = _mupdf.pdf_hint_shared_offset_get
    if _newclass:
        offset = _swig_property(_mupdf.pdf_hint_shared_offset_get, _mupdf.pdf_hint_shared_offset_set)

    def __init__(self):
        """__init__(pdf_hint_shared self) -> pdf_hint_shared"""
        this = _mupdf.new_pdf_hint_shared()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_hint_shared
    __del__ = lambda self: None
pdf_hint_shared_swigregister = _mupdf.pdf_hint_shared_swigregister
pdf_hint_shared_swigregister(pdf_hint_shared)

class pdf_document(_object):
    """Proxy of C++ pdf_document class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_document, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_document, name)
    __repr__ = _swig_repr
    __swig_setmethods__["super"] = _mupdf.pdf_document_super_set
    __swig_getmethods__["super"] = _mupdf.pdf_document_super_get
    if _newclass:
        super = _swig_property(_mupdf.pdf_document_super_get, _mupdf.pdf_document_super_set)
    __swig_setmethods__["file"] = _mupdf.pdf_document_file_set
    __swig_getmethods__["file"] = _mupdf.pdf_document_file_get
    if _newclass:
        file = _swig_property(_mupdf.pdf_document_file_get, _mupdf.pdf_document_file_set)
    __swig_setmethods__["version"] = _mupdf.pdf_document_version_set
    __swig_getmethods__["version"] = _mupdf.pdf_document_version_get
    if _newclass:
        version = _swig_property(_mupdf.pdf_document_version_get, _mupdf.pdf_document_version_set)
    __swig_setmethods__["startxref"] = _mupdf.pdf_document_startxref_set
    __swig_getmethods__["startxref"] = _mupdf.pdf_document_startxref_get
    if _newclass:
        startxref = _swig_property(_mupdf.pdf_document_startxref_get, _mupdf.pdf_document_startxref_set)
    __swig_setmethods__["file_size"] = _mupdf.pdf_document_file_size_set
    __swig_getmethods__["file_size"] = _mupdf.pdf_document_file_size_get
    if _newclass:
        file_size = _swig_property(_mupdf.pdf_document_file_size_get, _mupdf.pdf_document_file_size_set)
    __swig_setmethods__["crypt"] = _mupdf.pdf_document_crypt_set
    __swig_getmethods__["crypt"] = _mupdf.pdf_document_crypt_get
    if _newclass:
        crypt = _swig_property(_mupdf.pdf_document_crypt_get, _mupdf.pdf_document_crypt_set)
    __swig_setmethods__["ocg"] = _mupdf.pdf_document_ocg_set
    __swig_getmethods__["ocg"] = _mupdf.pdf_document_ocg_get
    if _newclass:
        ocg = _swig_property(_mupdf.pdf_document_ocg_get, _mupdf.pdf_document_ocg_set)
    __swig_setmethods__["oi"] = _mupdf.pdf_document_oi_set
    __swig_getmethods__["oi"] = _mupdf.pdf_document_oi_get
    if _newclass:
        oi = _swig_property(_mupdf.pdf_document_oi_get, _mupdf.pdf_document_oi_set)
    __swig_setmethods__["max_xref_len"] = _mupdf.pdf_document_max_xref_len_set
    __swig_getmethods__["max_xref_len"] = _mupdf.pdf_document_max_xref_len_get
    if _newclass:
        max_xref_len = _swig_property(_mupdf.pdf_document_max_xref_len_get, _mupdf.pdf_document_max_xref_len_set)
    __swig_setmethods__["num_xref_sections"] = _mupdf.pdf_document_num_xref_sections_set
    __swig_getmethods__["num_xref_sections"] = _mupdf.pdf_document_num_xref_sections_get
    if _newclass:
        num_xref_sections = _swig_property(_mupdf.pdf_document_num_xref_sections_get, _mupdf.pdf_document_num_xref_sections_set)
    __swig_setmethods__["saved_num_xref_sections"] = _mupdf.pdf_document_saved_num_xref_sections_set
    __swig_getmethods__["saved_num_xref_sections"] = _mupdf.pdf_document_saved_num_xref_sections_get
    if _newclass:
        saved_num_xref_sections = _swig_property(_mupdf.pdf_document_saved_num_xref_sections_get, _mupdf.pdf_document_saved_num_xref_sections_set)
    __swig_setmethods__["num_incremental_sections"] = _mupdf.pdf_document_num_incremental_sections_set
    __swig_getmethods__["num_incremental_sections"] = _mupdf.pdf_document_num_incremental_sections_get
    if _newclass:
        num_incremental_sections = _swig_property(_mupdf.pdf_document_num_incremental_sections_get, _mupdf.pdf_document_num_incremental_sections_set)
    __swig_setmethods__["xref_base"] = _mupdf.pdf_document_xref_base_set
    __swig_getmethods__["xref_base"] = _mupdf.pdf_document_xref_base_get
    if _newclass:
        xref_base = _swig_property(_mupdf.pdf_document_xref_base_get, _mupdf.pdf_document_xref_base_set)
    __swig_setmethods__["disallow_new_increments"] = _mupdf.pdf_document_disallow_new_increments_set
    __swig_getmethods__["disallow_new_increments"] = _mupdf.pdf_document_disallow_new_increments_get
    if _newclass:
        disallow_new_increments = _swig_property(_mupdf.pdf_document_disallow_new_increments_get, _mupdf.pdf_document_disallow_new_increments_set)
    __swig_setmethods__["local_xref"] = _mupdf.pdf_document_local_xref_set
    __swig_getmethods__["local_xref"] = _mupdf.pdf_document_local_xref_get
    if _newclass:
        local_xref = _swig_property(_mupdf.pdf_document_local_xref_get, _mupdf.pdf_document_local_xref_set)
    __swig_setmethods__["local_xref_nesting"] = _mupdf.pdf_document_local_xref_nesting_set
    __swig_getmethods__["local_xref_nesting"] = _mupdf.pdf_document_local_xref_nesting_get
    if _newclass:
        local_xref_nesting = _swig_property(_mupdf.pdf_document_local_xref_nesting_get, _mupdf.pdf_document_local_xref_nesting_set)
    __swig_setmethods__["xref_sections"] = _mupdf.pdf_document_xref_sections_set
    __swig_getmethods__["xref_sections"] = _mupdf.pdf_document_xref_sections_get
    if _newclass:
        xref_sections = _swig_property(_mupdf.pdf_document_xref_sections_get, _mupdf.pdf_document_xref_sections_set)
    __swig_setmethods__["saved_xref_sections"] = _mupdf.pdf_document_saved_xref_sections_set
    __swig_getmethods__["saved_xref_sections"] = _mupdf.pdf_document_saved_xref_sections_get
    if _newclass:
        saved_xref_sections = _swig_property(_mupdf.pdf_document_saved_xref_sections_get, _mupdf.pdf_document_saved_xref_sections_set)
    __swig_setmethods__["xref_index"] = _mupdf.pdf_document_xref_index_set
    __swig_getmethods__["xref_index"] = _mupdf.pdf_document_xref_index_get
    if _newclass:
        xref_index = _swig_property(_mupdf.pdf_document_xref_index_get, _mupdf.pdf_document_xref_index_set)
    __swig_setmethods__["save_in_progress"] = _mupdf.pdf_document_save_in_progress_set
    __swig_getmethods__["save_in_progress"] = _mupdf.pdf_document_save_in_progress_get
    if _newclass:
        save_in_progress = _swig_property(_mupdf.pdf_document_save_in_progress_get, _mupdf.pdf_document_save_in_progress_set)
    __swig_setmethods__["has_xref_streams"] = _mupdf.pdf_document_has_xref_streams_set
    __swig_getmethods__["has_xref_streams"] = _mupdf.pdf_document_has_xref_streams_get
    if _newclass:
        has_xref_streams = _swig_property(_mupdf.pdf_document_has_xref_streams_get, _mupdf.pdf_document_has_xref_streams_set)
    __swig_setmethods__["has_old_style_xrefs"] = _mupdf.pdf_document_has_old_style_xrefs_set
    __swig_getmethods__["has_old_style_xrefs"] = _mupdf.pdf_document_has_old_style_xrefs_get
    if _newclass:
        has_old_style_xrefs = _swig_property(_mupdf.pdf_document_has_old_style_xrefs_get, _mupdf.pdf_document_has_old_style_xrefs_set)
    __swig_setmethods__["has_linearization_object"] = _mupdf.pdf_document_has_linearization_object_set
    __swig_getmethods__["has_linearization_object"] = _mupdf.pdf_document_has_linearization_object_get
    if _newclass:
        has_linearization_object = _swig_property(_mupdf.pdf_document_has_linearization_object_get, _mupdf.pdf_document_has_linearization_object_set)
    __swig_setmethods__["rev_page_count"] = _mupdf.pdf_document_rev_page_count_set
    __swig_getmethods__["rev_page_count"] = _mupdf.pdf_document_rev_page_count_get
    if _newclass:
        rev_page_count = _swig_property(_mupdf.pdf_document_rev_page_count_get, _mupdf.pdf_document_rev_page_count_set)
    __swig_setmethods__["rev_page_map"] = _mupdf.pdf_document_rev_page_map_set
    __swig_getmethods__["rev_page_map"] = _mupdf.pdf_document_rev_page_map_get
    if _newclass:
        rev_page_map = _swig_property(_mupdf.pdf_document_rev_page_map_get, _mupdf.pdf_document_rev_page_map_set)
    __swig_setmethods__["repair_attempted"] = _mupdf.pdf_document_repair_attempted_set
    __swig_getmethods__["repair_attempted"] = _mupdf.pdf_document_repair_attempted_get
    if _newclass:
        repair_attempted = _swig_property(_mupdf.pdf_document_repair_attempted_get, _mupdf.pdf_document_repair_attempted_set)
    __swig_setmethods__["file_reading_linearly"] = _mupdf.pdf_document_file_reading_linearly_set
    __swig_getmethods__["file_reading_linearly"] = _mupdf.pdf_document_file_reading_linearly_get
    if _newclass:
        file_reading_linearly = _swig_property(_mupdf.pdf_document_file_reading_linearly_get, _mupdf.pdf_document_file_reading_linearly_set)
    __swig_setmethods__["file_length"] = _mupdf.pdf_document_file_length_set
    __swig_getmethods__["file_length"] = _mupdf.pdf_document_file_length_get
    if _newclass:
        file_length = _swig_property(_mupdf.pdf_document_file_length_get, _mupdf.pdf_document_file_length_set)
    __swig_setmethods__["linear_page_count"] = _mupdf.pdf_document_linear_page_count_set
    __swig_getmethods__["linear_page_count"] = _mupdf.pdf_document_linear_page_count_get
    if _newclass:
        linear_page_count = _swig_property(_mupdf.pdf_document_linear_page_count_get, _mupdf.pdf_document_linear_page_count_set)
    __swig_setmethods__["linear_obj"] = _mupdf.pdf_document_linear_obj_set
    __swig_getmethods__["linear_obj"] = _mupdf.pdf_document_linear_obj_get
    if _newclass:
        linear_obj = _swig_property(_mupdf.pdf_document_linear_obj_get, _mupdf.pdf_document_linear_obj_set)
    __swig_setmethods__["linear_page_refs"] = _mupdf.pdf_document_linear_page_refs_set
    __swig_getmethods__["linear_page_refs"] = _mupdf.pdf_document_linear_page_refs_get
    if _newclass:
        linear_page_refs = _swig_property(_mupdf.pdf_document_linear_page_refs_get, _mupdf.pdf_document_linear_page_refs_set)
    __swig_setmethods__["linear_page1_obj_num"] = _mupdf.pdf_document_linear_page1_obj_num_set
    __swig_getmethods__["linear_page1_obj_num"] = _mupdf.pdf_document_linear_page1_obj_num_get
    if _newclass:
        linear_page1_obj_num = _swig_property(_mupdf.pdf_document_linear_page1_obj_num_get, _mupdf.pdf_document_linear_page1_obj_num_set)
    __swig_setmethods__["linear_pos"] = _mupdf.pdf_document_linear_pos_set
    __swig_getmethods__["linear_pos"] = _mupdf.pdf_document_linear_pos_get
    if _newclass:
        linear_pos = _swig_property(_mupdf.pdf_document_linear_pos_get, _mupdf.pdf_document_linear_pos_set)
    __swig_setmethods__["linear_page_num"] = _mupdf.pdf_document_linear_page_num_set
    __swig_getmethods__["linear_page_num"] = _mupdf.pdf_document_linear_page_num_get
    if _newclass:
        linear_page_num = _swig_property(_mupdf.pdf_document_linear_page_num_get, _mupdf.pdf_document_linear_page_num_set)
    __swig_setmethods__["hint_object_offset"] = _mupdf.pdf_document_hint_object_offset_set
    __swig_getmethods__["hint_object_offset"] = _mupdf.pdf_document_hint_object_offset_get
    if _newclass:
        hint_object_offset = _swig_property(_mupdf.pdf_document_hint_object_offset_get, _mupdf.pdf_document_hint_object_offset_set)
    __swig_setmethods__["hint_object_length"] = _mupdf.pdf_document_hint_object_length_set
    __swig_getmethods__["hint_object_length"] = _mupdf.pdf_document_hint_object_length_get
    if _newclass:
        hint_object_length = _swig_property(_mupdf.pdf_document_hint_object_length_get, _mupdf.pdf_document_hint_object_length_set)
    __swig_setmethods__["hints_loaded"] = _mupdf.pdf_document_hints_loaded_set
    __swig_getmethods__["hints_loaded"] = _mupdf.pdf_document_hints_loaded_get
    if _newclass:
        hints_loaded = _swig_property(_mupdf.pdf_document_hints_loaded_get, _mupdf.pdf_document_hints_loaded_set)
    __swig_setmethods__["hint_page"] = _mupdf.pdf_document_hint_page_set
    __swig_getmethods__["hint_page"] = _mupdf.pdf_document_hint_page_get
    if _newclass:
        hint_page = _swig_property(_mupdf.pdf_document_hint_page_get, _mupdf.pdf_document_hint_page_set)
    __swig_setmethods__["hint_shared_ref"] = _mupdf.pdf_document_hint_shared_ref_set
    __swig_getmethods__["hint_shared_ref"] = _mupdf.pdf_document_hint_shared_ref_get
    if _newclass:
        hint_shared_ref = _swig_property(_mupdf.pdf_document_hint_shared_ref_get, _mupdf.pdf_document_hint_shared_ref_set)
    __swig_setmethods__["hint_shared"] = _mupdf.pdf_document_hint_shared_set
    __swig_getmethods__["hint_shared"] = _mupdf.pdf_document_hint_shared_get
    if _newclass:
        hint_shared = _swig_property(_mupdf.pdf_document_hint_shared_get, _mupdf.pdf_document_hint_shared_set)
    __swig_setmethods__["hint_obj_offsets_max"] = _mupdf.pdf_document_hint_obj_offsets_max_set
    __swig_getmethods__["hint_obj_offsets_max"] = _mupdf.pdf_document_hint_obj_offsets_max_get
    if _newclass:
        hint_obj_offsets_max = _swig_property(_mupdf.pdf_document_hint_obj_offsets_max_get, _mupdf.pdf_document_hint_obj_offsets_max_set)
    __swig_setmethods__["hint_obj_offsets"] = _mupdf.pdf_document_hint_obj_offsets_set
    __swig_getmethods__["hint_obj_offsets"] = _mupdf.pdf_document_hint_obj_offsets_get
    if _newclass:
        hint_obj_offsets = _swig_property(_mupdf.pdf_document_hint_obj_offsets_get, _mupdf.pdf_document_hint_obj_offsets_set)
    __swig_setmethods__["resources_localised"] = _mupdf.pdf_document_resources_localised_set
    __swig_getmethods__["resources_localised"] = _mupdf.pdf_document_resources_localised_get
    if _newclass:
        resources_localised = _swig_property(_mupdf.pdf_document_resources_localised_get, _mupdf.pdf_document_resources_localised_set)
    __swig_setmethods__["lexbuf"] = _mupdf.pdf_document_lexbuf_set
    __swig_getmethods__["lexbuf"] = _mupdf.pdf_document_lexbuf_get
    if _newclass:
        lexbuf = _swig_property(_mupdf.pdf_document_lexbuf_get, _mupdf.pdf_document_lexbuf_set)
    __swig_setmethods__["js"] = _mupdf.pdf_document_js_set
    __swig_getmethods__["js"] = _mupdf.pdf_document_js_get
    if _newclass:
        js = _swig_property(_mupdf.pdf_document_js_get, _mupdf.pdf_document_js_set)
    __swig_setmethods__["recalculate"] = _mupdf.pdf_document_recalculate_set
    __swig_getmethods__["recalculate"] = _mupdf.pdf_document_recalculate_get
    if _newclass:
        recalculate = _swig_property(_mupdf.pdf_document_recalculate_get, _mupdf.pdf_document_recalculate_set)
    __swig_setmethods__["redacted"] = _mupdf.pdf_document_redacted_set
    __swig_getmethods__["redacted"] = _mupdf.pdf_document_redacted_get
    if _newclass:
        redacted = _swig_property(_mupdf.pdf_document_redacted_get, _mupdf.pdf_document_redacted_set)
    __swig_setmethods__["resynth_required"] = _mupdf.pdf_document_resynth_required_set
    __swig_getmethods__["resynth_required"] = _mupdf.pdf_document_resynth_required_get
    if _newclass:
        resynth_required = _swig_property(_mupdf.pdf_document_resynth_required_get, _mupdf.pdf_document_resynth_required_set)
    __swig_setmethods__["event_cb"] = _mupdf.pdf_document_event_cb_set
    __swig_getmethods__["event_cb"] = _mupdf.pdf_document_event_cb_get
    if _newclass:
        event_cb = _swig_property(_mupdf.pdf_document_event_cb_get, _mupdf.pdf_document_event_cb_set)
    __swig_setmethods__["free_event_data_cb"] = _mupdf.pdf_document_free_event_data_cb_set
    __swig_getmethods__["free_event_data_cb"] = _mupdf.pdf_document_free_event_data_cb_get
    if _newclass:
        free_event_data_cb = _swig_property(_mupdf.pdf_document_free_event_data_cb_get, _mupdf.pdf_document_free_event_data_cb_set)
    __swig_setmethods__["event_cb_data"] = _mupdf.pdf_document_event_cb_data_set
    __swig_getmethods__["event_cb_data"] = _mupdf.pdf_document_event_cb_data_get
    if _newclass:
        event_cb_data = _swig_property(_mupdf.pdf_document_event_cb_data_get, _mupdf.pdf_document_event_cb_data_set)
    __swig_setmethods__["num_type3_fonts"] = _mupdf.pdf_document_num_type3_fonts_set
    __swig_getmethods__["num_type3_fonts"] = _mupdf.pdf_document_num_type3_fonts_get
    if _newclass:
        num_type3_fonts = _swig_property(_mupdf.pdf_document_num_type3_fonts_get, _mupdf.pdf_document_num_type3_fonts_set)
    __swig_setmethods__["max_type3_fonts"] = _mupdf.pdf_document_max_type3_fonts_set
    __swig_getmethods__["max_type3_fonts"] = _mupdf.pdf_document_max_type3_fonts_get
    if _newclass:
        max_type3_fonts = _swig_property(_mupdf.pdf_document_max_type3_fonts_get, _mupdf.pdf_document_max_type3_fonts_set)
    __swig_setmethods__["type3_fonts"] = _mupdf.pdf_document_type3_fonts_set
    __swig_getmethods__["type3_fonts"] = _mupdf.pdf_document_type3_fonts_get
    if _newclass:
        type3_fonts = _swig_property(_mupdf.pdf_document_type3_fonts_get, _mupdf.pdf_document_type3_fonts_set)
    __swig_setmethods__["orphans_max"] = _mupdf.pdf_document_orphans_max_set
    __swig_getmethods__["orphans_max"] = _mupdf.pdf_document_orphans_max_get
    if _newclass:
        orphans_max = _swig_property(_mupdf.pdf_document_orphans_max_get, _mupdf.pdf_document_orphans_max_set)
    __swig_setmethods__["orphans_count"] = _mupdf.pdf_document_orphans_count_set
    __swig_getmethods__["orphans_count"] = _mupdf.pdf_document_orphans_count_get
    if _newclass:
        orphans_count = _swig_property(_mupdf.pdf_document_orphans_count_get, _mupdf.pdf_document_orphans_count_set)
    __swig_setmethods__["orphans"] = _mupdf.pdf_document_orphans_set
    __swig_getmethods__["orphans"] = _mupdf.pdf_document_orphans_get
    if _newclass:
        orphans = _swig_property(_mupdf.pdf_document_orphans_get, _mupdf.pdf_document_orphans_set)
    __swig_setmethods__["xfa"] = _mupdf.pdf_document_xfa_set
    __swig_getmethods__["xfa"] = _mupdf.pdf_document_xfa_get
    if _newclass:
        xfa = _swig_property(_mupdf.pdf_document_xfa_get, _mupdf.pdf_document_xfa_set)
    __swig_setmethods__["journal"] = _mupdf.pdf_document_journal_set
    __swig_getmethods__["journal"] = _mupdf.pdf_document_journal_get
    if _newclass:
        journal = _swig_property(_mupdf.pdf_document_journal_get, _mupdf.pdf_document_journal_set)

    def __init__(self):
        """__init__(pdf_document self) -> pdf_document"""
        this = _mupdf.new_pdf_document()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_document
    __del__ = lambda self: None
pdf_document_swigregister = _mupdf.pdf_document_swigregister
pdf_document_swigregister(pdf_document)

class pdf_write_options(_object):
    """Proxy of C++ pdf_write_options class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_write_options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_write_options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["do_incremental"] = _mupdf.pdf_write_options_do_incremental_set
    __swig_getmethods__["do_incremental"] = _mupdf.pdf_write_options_do_incremental_get
    if _newclass:
        do_incremental = _swig_property(_mupdf.pdf_write_options_do_incremental_get, _mupdf.pdf_write_options_do_incremental_set)
    __swig_setmethods__["do_pretty"] = _mupdf.pdf_write_options_do_pretty_set
    __swig_getmethods__["do_pretty"] = _mupdf.pdf_write_options_do_pretty_get
    if _newclass:
        do_pretty = _swig_property(_mupdf.pdf_write_options_do_pretty_get, _mupdf.pdf_write_options_do_pretty_set)
    __swig_setmethods__["do_ascii"] = _mupdf.pdf_write_options_do_ascii_set
    __swig_getmethods__["do_ascii"] = _mupdf.pdf_write_options_do_ascii_get
    if _newclass:
        do_ascii = _swig_property(_mupdf.pdf_write_options_do_ascii_get, _mupdf.pdf_write_options_do_ascii_set)
    __swig_setmethods__["do_compress"] = _mupdf.pdf_write_options_do_compress_set
    __swig_getmethods__["do_compress"] = _mupdf.pdf_write_options_do_compress_get
    if _newclass:
        do_compress = _swig_property(_mupdf.pdf_write_options_do_compress_get, _mupdf.pdf_write_options_do_compress_set)
    __swig_setmethods__["do_compress_images"] = _mupdf.pdf_write_options_do_compress_images_set
    __swig_getmethods__["do_compress_images"] = _mupdf.pdf_write_options_do_compress_images_get
    if _newclass:
        do_compress_images = _swig_property(_mupdf.pdf_write_options_do_compress_images_get, _mupdf.pdf_write_options_do_compress_images_set)
    __swig_setmethods__["do_compress_fonts"] = _mupdf.pdf_write_options_do_compress_fonts_set
    __swig_getmethods__["do_compress_fonts"] = _mupdf.pdf_write_options_do_compress_fonts_get
    if _newclass:
        do_compress_fonts = _swig_property(_mupdf.pdf_write_options_do_compress_fonts_get, _mupdf.pdf_write_options_do_compress_fonts_set)
    __swig_setmethods__["do_decompress"] = _mupdf.pdf_write_options_do_decompress_set
    __swig_getmethods__["do_decompress"] = _mupdf.pdf_write_options_do_decompress_get
    if _newclass:
        do_decompress = _swig_property(_mupdf.pdf_write_options_do_decompress_get, _mupdf.pdf_write_options_do_decompress_set)
    __swig_setmethods__["do_garbage"] = _mupdf.pdf_write_options_do_garbage_set
    __swig_getmethods__["do_garbage"] = _mupdf.pdf_write_options_do_garbage_get
    if _newclass:
        do_garbage = _swig_property(_mupdf.pdf_write_options_do_garbage_get, _mupdf.pdf_write_options_do_garbage_set)
    __swig_setmethods__["do_linear"] = _mupdf.pdf_write_options_do_linear_set
    __swig_getmethods__["do_linear"] = _mupdf.pdf_write_options_do_linear_get
    if _newclass:
        do_linear = _swig_property(_mupdf.pdf_write_options_do_linear_get, _mupdf.pdf_write_options_do_linear_set)
    __swig_setmethods__["do_clean"] = _mupdf.pdf_write_options_do_clean_set
    __swig_getmethods__["do_clean"] = _mupdf.pdf_write_options_do_clean_get
    if _newclass:
        do_clean = _swig_property(_mupdf.pdf_write_options_do_clean_get, _mupdf.pdf_write_options_do_clean_set)
    __swig_setmethods__["do_sanitize"] = _mupdf.pdf_write_options_do_sanitize_set
    __swig_getmethods__["do_sanitize"] = _mupdf.pdf_write_options_do_sanitize_get
    if _newclass:
        do_sanitize = _swig_property(_mupdf.pdf_write_options_do_sanitize_get, _mupdf.pdf_write_options_do_sanitize_set)
    __swig_setmethods__["do_appearance"] = _mupdf.pdf_write_options_do_appearance_set
    __swig_getmethods__["do_appearance"] = _mupdf.pdf_write_options_do_appearance_get
    if _newclass:
        do_appearance = _swig_property(_mupdf.pdf_write_options_do_appearance_get, _mupdf.pdf_write_options_do_appearance_set)
    __swig_setmethods__["do_encrypt"] = _mupdf.pdf_write_options_do_encrypt_set
    __swig_getmethods__["do_encrypt"] = _mupdf.pdf_write_options_do_encrypt_get
    if _newclass:
        do_encrypt = _swig_property(_mupdf.pdf_write_options_do_encrypt_get, _mupdf.pdf_write_options_do_encrypt_set)
    __swig_setmethods__["dont_regenerate_id"] = _mupdf.pdf_write_options_dont_regenerate_id_set
    __swig_getmethods__["dont_regenerate_id"] = _mupdf.pdf_write_options_dont_regenerate_id_get
    if _newclass:
        dont_regenerate_id = _swig_property(_mupdf.pdf_write_options_dont_regenerate_id_get, _mupdf.pdf_write_options_dont_regenerate_id_set)
    __swig_setmethods__["permissions"] = _mupdf.pdf_write_options_permissions_set
    __swig_getmethods__["permissions"] = _mupdf.pdf_write_options_permissions_get
    if _newclass:
        permissions = _swig_property(_mupdf.pdf_write_options_permissions_get, _mupdf.pdf_write_options_permissions_set)
    __swig_setmethods__["opwd_utf8"] = _mupdf.pdf_write_options_opwd_utf8_set
    __swig_getmethods__["opwd_utf8"] = _mupdf.pdf_write_options_opwd_utf8_get
    if _newclass:
        opwd_utf8 = _swig_property(_mupdf.pdf_write_options_opwd_utf8_get, _mupdf.pdf_write_options_opwd_utf8_set)
    __swig_setmethods__["upwd_utf8"] = _mupdf.pdf_write_options_upwd_utf8_set
    __swig_getmethods__["upwd_utf8"] = _mupdf.pdf_write_options_upwd_utf8_get
    if _newclass:
        upwd_utf8 = _swig_property(_mupdf.pdf_write_options_upwd_utf8_get, _mupdf.pdf_write_options_upwd_utf8_set)
    __swig_setmethods__["do_snapshot"] = _mupdf.pdf_write_options_do_snapshot_set
    __swig_getmethods__["do_snapshot"] = _mupdf.pdf_write_options_do_snapshot_get
    if _newclass:
        do_snapshot = _swig_property(_mupdf.pdf_write_options_do_snapshot_get, _mupdf.pdf_write_options_do_snapshot_set)

    def __init__(self):
        """__init__(pdf_write_options self) -> pdf_write_options"""
        this = _mupdf.new_pdf_write_options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_write_options
    __del__ = lambda self: None
pdf_write_options_swigregister = _mupdf.pdf_write_options_swigregister
pdf_write_options_swigregister(pdf_write_options)

PDF_TOK_ERROR = _mupdf.PDF_TOK_ERROR
PDF_TOK_EOF = _mupdf.PDF_TOK_EOF
PDF_TOK_OPEN_ARRAY = _mupdf.PDF_TOK_OPEN_ARRAY
PDF_TOK_CLOSE_ARRAY = _mupdf.PDF_TOK_CLOSE_ARRAY
PDF_TOK_OPEN_DICT = _mupdf.PDF_TOK_OPEN_DICT
PDF_TOK_CLOSE_DICT = _mupdf.PDF_TOK_CLOSE_DICT
PDF_TOK_OPEN_BRACE = _mupdf.PDF_TOK_OPEN_BRACE
PDF_TOK_CLOSE_BRACE = _mupdf.PDF_TOK_CLOSE_BRACE
PDF_TOK_NAME = _mupdf.PDF_TOK_NAME
PDF_TOK_INT = _mupdf.PDF_TOK_INT
PDF_TOK_REAL = _mupdf.PDF_TOK_REAL
PDF_TOK_STRING = _mupdf.PDF_TOK_STRING
PDF_TOK_KEYWORD = _mupdf.PDF_TOK_KEYWORD
PDF_TOK_R = _mupdf.PDF_TOK_R
PDF_TOK_TRUE = _mupdf.PDF_TOK_TRUE
PDF_TOK_FALSE = _mupdf.PDF_TOK_FALSE
PDF_TOK_NULL = _mupdf.PDF_TOK_NULL
PDF_TOK_OBJ = _mupdf.PDF_TOK_OBJ
PDF_TOK_ENDOBJ = _mupdf.PDF_TOK_ENDOBJ
PDF_TOK_STREAM = _mupdf.PDF_TOK_STREAM
PDF_TOK_ENDSTREAM = _mupdf.PDF_TOK_ENDSTREAM
PDF_TOK_XREF = _mupdf.PDF_TOK_XREF
PDF_TOK_TRAILER = _mupdf.PDF_TOK_TRAILER
PDF_TOK_STARTXREF = _mupdf.PDF_TOK_STARTXREF
PDF_TOK_NEWOBJ = _mupdf.PDF_TOK_NEWOBJ
PDF_NUM_TOKENS = _mupdf.PDF_NUM_TOKENS
class pdf_xref_entry(_object):
    """Proxy of C++ pdf_xref_entry class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_xref_entry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_xref_entry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mupdf.pdf_xref_entry_type_set
    __swig_getmethods__["type"] = _mupdf.pdf_xref_entry_type_get
    if _newclass:
        type = _swig_property(_mupdf.pdf_xref_entry_type_get, _mupdf.pdf_xref_entry_type_set)
    __swig_setmethods__["marked"] = _mupdf.pdf_xref_entry_marked_set
    __swig_getmethods__["marked"] = _mupdf.pdf_xref_entry_marked_get
    if _newclass:
        marked = _swig_property(_mupdf.pdf_xref_entry_marked_get, _mupdf.pdf_xref_entry_marked_set)
    __swig_setmethods__["gen"] = _mupdf.pdf_xref_entry_gen_set
    __swig_getmethods__["gen"] = _mupdf.pdf_xref_entry_gen_get
    if _newclass:
        gen = _swig_property(_mupdf.pdf_xref_entry_gen_get, _mupdf.pdf_xref_entry_gen_set)
    __swig_setmethods__["num"] = _mupdf.pdf_xref_entry_num_set
    __swig_getmethods__["num"] = _mupdf.pdf_xref_entry_num_get
    if _newclass:
        num = _swig_property(_mupdf.pdf_xref_entry_num_get, _mupdf.pdf_xref_entry_num_set)
    __swig_setmethods__["ofs"] = _mupdf.pdf_xref_entry_ofs_set
    __swig_getmethods__["ofs"] = _mupdf.pdf_xref_entry_ofs_get
    if _newclass:
        ofs = _swig_property(_mupdf.pdf_xref_entry_ofs_get, _mupdf.pdf_xref_entry_ofs_set)
    __swig_setmethods__["stm_ofs"] = _mupdf.pdf_xref_entry_stm_ofs_set
    __swig_getmethods__["stm_ofs"] = _mupdf.pdf_xref_entry_stm_ofs_get
    if _newclass:
        stm_ofs = _swig_property(_mupdf.pdf_xref_entry_stm_ofs_get, _mupdf.pdf_xref_entry_stm_ofs_set)
    __swig_setmethods__["stm_buf"] = _mupdf.pdf_xref_entry_stm_buf_set
    __swig_getmethods__["stm_buf"] = _mupdf.pdf_xref_entry_stm_buf_get
    if _newclass:
        stm_buf = _swig_property(_mupdf.pdf_xref_entry_stm_buf_get, _mupdf.pdf_xref_entry_stm_buf_set)
    __swig_setmethods__["obj"] = _mupdf.pdf_xref_entry_obj_set
    __swig_getmethods__["obj"] = _mupdf.pdf_xref_entry_obj_get
    if _newclass:
        obj = _swig_property(_mupdf.pdf_xref_entry_obj_get, _mupdf.pdf_xref_entry_obj_set)

    def __init__(self):
        """__init__(pdf_xref_entry self) -> pdf_xref_entry"""
        this = _mupdf.new_pdf_xref_entry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_xref_entry
    __del__ = lambda self: None
pdf_xref_entry_swigregister = _mupdf.pdf_xref_entry_swigregister
pdf_xref_entry_swigregister(pdf_xref_entry)
pdf_default_write_options = cvar.pdf_default_write_options

class pdf_xref_subsec(_object):
    """Proxy of C++ pdf_xref_subsec class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_xref_subsec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_xref_subsec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _mupdf.pdf_xref_subsec_next_set
    __swig_getmethods__["next"] = _mupdf.pdf_xref_subsec_next_get
    if _newclass:
        next = _swig_property(_mupdf.pdf_xref_subsec_next_get, _mupdf.pdf_xref_subsec_next_set)
    __swig_setmethods__["len"] = _mupdf.pdf_xref_subsec_len_set
    __swig_getmethods__["len"] = _mupdf.pdf_xref_subsec_len_get
    if _newclass:
        len = _swig_property(_mupdf.pdf_xref_subsec_len_get, _mupdf.pdf_xref_subsec_len_set)
    __swig_setmethods__["start"] = _mupdf.pdf_xref_subsec_start_set
    __swig_getmethods__["start"] = _mupdf.pdf_xref_subsec_start_get
    if _newclass:
        start = _swig_property(_mupdf.pdf_xref_subsec_start_get, _mupdf.pdf_xref_subsec_start_set)
    __swig_setmethods__["table"] = _mupdf.pdf_xref_subsec_table_set
    __swig_getmethods__["table"] = _mupdf.pdf_xref_subsec_table_get
    if _newclass:
        table = _swig_property(_mupdf.pdf_xref_subsec_table_get, _mupdf.pdf_xref_subsec_table_set)

    def __init__(self):
        """__init__(pdf_xref_subsec self) -> pdf_xref_subsec"""
        this = _mupdf.new_pdf_xref_subsec()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_xref_subsec
    __del__ = lambda self: None
pdf_xref_subsec_swigregister = _mupdf.pdf_xref_subsec_swigregister
pdf_xref_subsec_swigregister(pdf_xref_subsec)

class pdf_xref(_object):
    """Proxy of C++ pdf_xref class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_xref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_xref, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_objects"] = _mupdf.pdf_xref_num_objects_set
    __swig_getmethods__["num_objects"] = _mupdf.pdf_xref_num_objects_get
    if _newclass:
        num_objects = _swig_property(_mupdf.pdf_xref_num_objects_get, _mupdf.pdf_xref_num_objects_set)
    __swig_setmethods__["subsec"] = _mupdf.pdf_xref_subsec_set
    __swig_getmethods__["subsec"] = _mupdf.pdf_xref_subsec_get
    if _newclass:
        subsec = _swig_property(_mupdf.pdf_xref_subsec_get, _mupdf.pdf_xref_subsec_set)
    __swig_setmethods__["trailer"] = _mupdf.pdf_xref_trailer_set
    __swig_getmethods__["trailer"] = _mupdf.pdf_xref_trailer_get
    if _newclass:
        trailer = _swig_property(_mupdf.pdf_xref_trailer_get, _mupdf.pdf_xref_trailer_set)
    __swig_setmethods__["pre_repair_trailer"] = _mupdf.pdf_xref_pre_repair_trailer_set
    __swig_getmethods__["pre_repair_trailer"] = _mupdf.pdf_xref_pre_repair_trailer_get
    if _newclass:
        pre_repair_trailer = _swig_property(_mupdf.pdf_xref_pre_repair_trailer_get, _mupdf.pdf_xref_pre_repair_trailer_set)
    __swig_setmethods__["unsaved_sigs"] = _mupdf.pdf_xref_unsaved_sigs_set
    __swig_getmethods__["unsaved_sigs"] = _mupdf.pdf_xref_unsaved_sigs_get
    if _newclass:
        unsaved_sigs = _swig_property(_mupdf.pdf_xref_unsaved_sigs_get, _mupdf.pdf_xref_unsaved_sigs_set)
    __swig_setmethods__["unsaved_sigs_end"] = _mupdf.pdf_xref_unsaved_sigs_end_set
    __swig_getmethods__["unsaved_sigs_end"] = _mupdf.pdf_xref_unsaved_sigs_end_get
    if _newclass:
        unsaved_sigs_end = _swig_property(_mupdf.pdf_xref_unsaved_sigs_end_get, _mupdf.pdf_xref_unsaved_sigs_end_set)
    __swig_setmethods__["end_ofs"] = _mupdf.pdf_xref_end_ofs_set
    __swig_getmethods__["end_ofs"] = _mupdf.pdf_xref_end_ofs_get
    if _newclass:
        end_ofs = _swig_property(_mupdf.pdf_xref_end_ofs_get, _mupdf.pdf_xref_end_ofs_set)

    def __init__(self):
        """__init__(pdf_xref self) -> pdf_xref"""
        this = _mupdf.new_pdf_xref()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_xref
    __del__ = lambda self: None
pdf_xref_swigregister = _mupdf.pdf_xref_swigregister
pdf_xref_swigregister(pdf_xref)

PDF_ENCRYPT_KEEP = _mupdf.PDF_ENCRYPT_KEEP
PDF_ENCRYPT_NONE = _mupdf.PDF_ENCRYPT_NONE
PDF_ENCRYPT_RC4_40 = _mupdf.PDF_ENCRYPT_RC4_40
PDF_ENCRYPT_RC4_128 = _mupdf.PDF_ENCRYPT_RC4_128
PDF_ENCRYPT_AES_128 = _mupdf.PDF_ENCRYPT_AES_128
PDF_ENCRYPT_AES_256 = _mupdf.PDF_ENCRYPT_AES_256
PDF_ENCRYPT_UNKNOWN = _mupdf.PDF_ENCRYPT_UNKNOWN
PDF_PERM_PRINT = _mupdf.PDF_PERM_PRINT
PDF_PERM_MODIFY = _mupdf.PDF_PERM_MODIFY
PDF_PERM_COPY = _mupdf.PDF_PERM_COPY
PDF_PERM_ANNOTATE = _mupdf.PDF_PERM_ANNOTATE
PDF_PERM_FORM = _mupdf.PDF_PERM_FORM
PDF_PERM_ACCESSIBILITY = _mupdf.PDF_PERM_ACCESSIBILITY
PDF_PERM_ASSEMBLE = _mupdf.PDF_PERM_ASSEMBLE
PDF_PERM_PRINT_HQ = _mupdf.PDF_PERM_PRINT_HQ
PDF_MRANGE_CAP = _mupdf.PDF_MRANGE_CAP
class pdf_range(_object):
    """Proxy of C++ pdf_range class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_range, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_range, name)
    __repr__ = _swig_repr
    __swig_setmethods__["low"] = _mupdf.pdf_range_low_set
    __swig_getmethods__["low"] = _mupdf.pdf_range_low_get
    if _newclass:
        low = _swig_property(_mupdf.pdf_range_low_get, _mupdf.pdf_range_low_set)
    __swig_setmethods__["high"] = _mupdf.pdf_range_high_set
    __swig_getmethods__["high"] = _mupdf.pdf_range_high_get
    if _newclass:
        high = _swig_property(_mupdf.pdf_range_high_get, _mupdf.pdf_range_high_set)
    __swig_setmethods__["out"] = _mupdf.pdf_range_out_set
    __swig_getmethods__["out"] = _mupdf.pdf_range_out_get
    if _newclass:
        out = _swig_property(_mupdf.pdf_range_out_get, _mupdf.pdf_range_out_set)

    def __init__(self):
        """__init__(pdf_range self) -> pdf_range"""
        this = _mupdf.new_pdf_range()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_range
    __del__ = lambda self: None
pdf_range_swigregister = _mupdf.pdf_range_swigregister
pdf_range_swigregister(pdf_range)

class pdf_xrange(_object):
    """Proxy of C++ pdf_xrange class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_xrange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_xrange, name)
    __repr__ = _swig_repr
    __swig_setmethods__["low"] = _mupdf.pdf_xrange_low_set
    __swig_getmethods__["low"] = _mupdf.pdf_xrange_low_get
    if _newclass:
        low = _swig_property(_mupdf.pdf_xrange_low_get, _mupdf.pdf_xrange_low_set)
    __swig_setmethods__["high"] = _mupdf.pdf_xrange_high_set
    __swig_getmethods__["high"] = _mupdf.pdf_xrange_high_get
    if _newclass:
        high = _swig_property(_mupdf.pdf_xrange_high_get, _mupdf.pdf_xrange_high_set)
    __swig_setmethods__["out"] = _mupdf.pdf_xrange_out_set
    __swig_getmethods__["out"] = _mupdf.pdf_xrange_out_get
    if _newclass:
        out = _swig_property(_mupdf.pdf_xrange_out_get, _mupdf.pdf_xrange_out_set)

    def __init__(self):
        """__init__(pdf_xrange self) -> pdf_xrange"""
        this = _mupdf.new_pdf_xrange()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_xrange
    __del__ = lambda self: None
pdf_xrange_swigregister = _mupdf.pdf_xrange_swigregister
pdf_xrange_swigregister(pdf_xrange)

class pdf_mrange(_object):
    """Proxy of C++ pdf_mrange class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_mrange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_mrange, name)
    __repr__ = _swig_repr
    __swig_setmethods__["low"] = _mupdf.pdf_mrange_low_set
    __swig_getmethods__["low"] = _mupdf.pdf_mrange_low_get
    if _newclass:
        low = _swig_property(_mupdf.pdf_mrange_low_get, _mupdf.pdf_mrange_low_set)
    __swig_setmethods__["out"] = _mupdf.pdf_mrange_out_set
    __swig_getmethods__["out"] = _mupdf.pdf_mrange_out_get
    if _newclass:
        out = _swig_property(_mupdf.pdf_mrange_out_get, _mupdf.pdf_mrange_out_set)

    def __init__(self):
        """__init__(pdf_mrange self) -> pdf_mrange"""
        this = _mupdf.new_pdf_mrange()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_mrange
    __del__ = lambda self: None
pdf_mrange_swigregister = _mupdf.pdf_mrange_swigregister
pdf_mrange_swigregister(pdf_mrange)

class pdf_cmap(_object):
    """Proxy of C++ pdf_cmap class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_cmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_cmap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["storable"] = _mupdf.pdf_cmap_storable_set
    __swig_getmethods__["storable"] = _mupdf.pdf_cmap_storable_get
    if _newclass:
        storable = _swig_property(_mupdf.pdf_cmap_storable_get, _mupdf.pdf_cmap_storable_set)
    __swig_setmethods__["cmap_name"] = _mupdf.pdf_cmap_cmap_name_set
    __swig_getmethods__["cmap_name"] = _mupdf.pdf_cmap_cmap_name_get
    if _newclass:
        cmap_name = _swig_property(_mupdf.pdf_cmap_cmap_name_get, _mupdf.pdf_cmap_cmap_name_set)
    __swig_setmethods__["usecmap_name"] = _mupdf.pdf_cmap_usecmap_name_set
    __swig_getmethods__["usecmap_name"] = _mupdf.pdf_cmap_usecmap_name_get
    if _newclass:
        usecmap_name = _swig_property(_mupdf.pdf_cmap_usecmap_name_get, _mupdf.pdf_cmap_usecmap_name_set)
    __swig_setmethods__["usecmap"] = _mupdf.pdf_cmap_usecmap_set
    __swig_getmethods__["usecmap"] = _mupdf.pdf_cmap_usecmap_get
    if _newclass:
        usecmap = _swig_property(_mupdf.pdf_cmap_usecmap_get, _mupdf.pdf_cmap_usecmap_set)
    __swig_setmethods__["wmode"] = _mupdf.pdf_cmap_wmode_set
    __swig_getmethods__["wmode"] = _mupdf.pdf_cmap_wmode_get
    if _newclass:
        wmode = _swig_property(_mupdf.pdf_cmap_wmode_get, _mupdf.pdf_cmap_wmode_set)
    __swig_setmethods__["codespace_len"] = _mupdf.pdf_cmap_codespace_len_set
    __swig_getmethods__["codespace_len"] = _mupdf.pdf_cmap_codespace_len_get
    if _newclass:
        codespace_len = _swig_property(_mupdf.pdf_cmap_codespace_len_get, _mupdf.pdf_cmap_codespace_len_set)
    __swig_setmethods__["rlen"] = _mupdf.pdf_cmap_rlen_set
    __swig_getmethods__["rlen"] = _mupdf.pdf_cmap_rlen_get
    if _newclass:
        rlen = _swig_property(_mupdf.pdf_cmap_rlen_get, _mupdf.pdf_cmap_rlen_set)
    __swig_setmethods__["rcap"] = _mupdf.pdf_cmap_rcap_set
    __swig_getmethods__["rcap"] = _mupdf.pdf_cmap_rcap_get
    if _newclass:
        rcap = _swig_property(_mupdf.pdf_cmap_rcap_get, _mupdf.pdf_cmap_rcap_set)
    __swig_setmethods__["ranges"] = _mupdf.pdf_cmap_ranges_set
    __swig_getmethods__["ranges"] = _mupdf.pdf_cmap_ranges_get
    if _newclass:
        ranges = _swig_property(_mupdf.pdf_cmap_ranges_get, _mupdf.pdf_cmap_ranges_set)
    __swig_setmethods__["xlen"] = _mupdf.pdf_cmap_xlen_set
    __swig_getmethods__["xlen"] = _mupdf.pdf_cmap_xlen_get
    if _newclass:
        xlen = _swig_property(_mupdf.pdf_cmap_xlen_get, _mupdf.pdf_cmap_xlen_set)
    __swig_setmethods__["xcap"] = _mupdf.pdf_cmap_xcap_set
    __swig_getmethods__["xcap"] = _mupdf.pdf_cmap_xcap_get
    if _newclass:
        xcap = _swig_property(_mupdf.pdf_cmap_xcap_get, _mupdf.pdf_cmap_xcap_set)
    __swig_setmethods__["xranges"] = _mupdf.pdf_cmap_xranges_set
    __swig_getmethods__["xranges"] = _mupdf.pdf_cmap_xranges_get
    if _newclass:
        xranges = _swig_property(_mupdf.pdf_cmap_xranges_get, _mupdf.pdf_cmap_xranges_set)
    __swig_setmethods__["mlen"] = _mupdf.pdf_cmap_mlen_set
    __swig_getmethods__["mlen"] = _mupdf.pdf_cmap_mlen_get
    if _newclass:
        mlen = _swig_property(_mupdf.pdf_cmap_mlen_get, _mupdf.pdf_cmap_mlen_set)
    __swig_setmethods__["mcap"] = _mupdf.pdf_cmap_mcap_set
    __swig_getmethods__["mcap"] = _mupdf.pdf_cmap_mcap_get
    if _newclass:
        mcap = _swig_property(_mupdf.pdf_cmap_mcap_get, _mupdf.pdf_cmap_mcap_set)
    __swig_setmethods__["mranges"] = _mupdf.pdf_cmap_mranges_set
    __swig_getmethods__["mranges"] = _mupdf.pdf_cmap_mranges_get
    if _newclass:
        mranges = _swig_property(_mupdf.pdf_cmap_mranges_get, _mupdf.pdf_cmap_mranges_set)
    __swig_setmethods__["dlen"] = _mupdf.pdf_cmap_dlen_set
    __swig_getmethods__["dlen"] = _mupdf.pdf_cmap_dlen_get
    if _newclass:
        dlen = _swig_property(_mupdf.pdf_cmap_dlen_get, _mupdf.pdf_cmap_dlen_set)
    __swig_setmethods__["dcap"] = _mupdf.pdf_cmap_dcap_set
    __swig_getmethods__["dcap"] = _mupdf.pdf_cmap_dcap_get
    if _newclass:
        dcap = _swig_property(_mupdf.pdf_cmap_dcap_get, _mupdf.pdf_cmap_dcap_set)
    __swig_setmethods__["dict"] = _mupdf.pdf_cmap_dict_set
    __swig_getmethods__["dict"] = _mupdf.pdf_cmap_dict_get
    if _newclass:
        dict = _swig_property(_mupdf.pdf_cmap_dict_get, _mupdf.pdf_cmap_dict_set)
    __swig_setmethods__["tlen"] = _mupdf.pdf_cmap_tlen_set
    __swig_getmethods__["tlen"] = _mupdf.pdf_cmap_tlen_get
    if _newclass:
        tlen = _swig_property(_mupdf.pdf_cmap_tlen_get, _mupdf.pdf_cmap_tlen_set)
    __swig_setmethods__["tcap"] = _mupdf.pdf_cmap_tcap_set
    __swig_getmethods__["tcap"] = _mupdf.pdf_cmap_tcap_get
    if _newclass:
        tcap = _swig_property(_mupdf.pdf_cmap_tcap_get, _mupdf.pdf_cmap_tcap_set)
    __swig_setmethods__["ttop"] = _mupdf.pdf_cmap_ttop_set
    __swig_getmethods__["ttop"] = _mupdf.pdf_cmap_ttop_get
    if _newclass:
        ttop = _swig_property(_mupdf.pdf_cmap_ttop_get, _mupdf.pdf_cmap_ttop_set)
    __swig_setmethods__["tree"] = _mupdf.pdf_cmap_tree_set
    __swig_getmethods__["tree"] = _mupdf.pdf_cmap_tree_get
    if _newclass:
        tree = _swig_property(_mupdf.pdf_cmap_tree_get, _mupdf.pdf_cmap_tree_set)

    def __init__(self):
        """__init__(pdf_cmap self) -> pdf_cmap"""
        this = _mupdf.new_pdf_cmap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_cmap
    __del__ = lambda self: None
pdf_cmap_swigregister = _mupdf.pdf_cmap_swigregister
pdf_cmap_swigregister(pdf_cmap)

PDF_FD_FIXED_PITCH = _mupdf.PDF_FD_FIXED_PITCH
PDF_FD_SERIF = _mupdf.PDF_FD_SERIF
PDF_FD_SYMBOLIC = _mupdf.PDF_FD_SYMBOLIC
PDF_FD_SCRIPT = _mupdf.PDF_FD_SCRIPT
PDF_FD_NONSYMBOLIC = _mupdf.PDF_FD_NONSYMBOLIC
PDF_FD_ITALIC = _mupdf.PDF_FD_ITALIC
PDF_FD_ALL_CAP = _mupdf.PDF_FD_ALL_CAP
PDF_FD_SMALL_CAP = _mupdf.PDF_FD_SMALL_CAP
PDF_FD_FORCE_BOLD = _mupdf.PDF_FD_FORCE_BOLD
class pdf_hmtx(_object):
    """Proxy of C++ pdf_hmtx class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_hmtx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_hmtx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lo"] = _mupdf.pdf_hmtx_lo_set
    __swig_getmethods__["lo"] = _mupdf.pdf_hmtx_lo_get
    if _newclass:
        lo = _swig_property(_mupdf.pdf_hmtx_lo_get, _mupdf.pdf_hmtx_lo_set)
    __swig_setmethods__["hi"] = _mupdf.pdf_hmtx_hi_set
    __swig_getmethods__["hi"] = _mupdf.pdf_hmtx_hi_get
    if _newclass:
        hi = _swig_property(_mupdf.pdf_hmtx_hi_get, _mupdf.pdf_hmtx_hi_set)
    __swig_setmethods__["w"] = _mupdf.pdf_hmtx_w_set
    __swig_getmethods__["w"] = _mupdf.pdf_hmtx_w_get
    if _newclass:
        w = _swig_property(_mupdf.pdf_hmtx_w_get, _mupdf.pdf_hmtx_w_set)

    def __init__(self):
        """__init__(pdf_hmtx self) -> pdf_hmtx"""
        this = _mupdf.new_pdf_hmtx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_hmtx
    __del__ = lambda self: None
pdf_hmtx_swigregister = _mupdf.pdf_hmtx_swigregister
pdf_hmtx_swigregister(pdf_hmtx)

class pdf_vmtx(_object):
    """Proxy of C++ pdf_vmtx class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_vmtx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_vmtx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lo"] = _mupdf.pdf_vmtx_lo_set
    __swig_getmethods__["lo"] = _mupdf.pdf_vmtx_lo_get
    if _newclass:
        lo = _swig_property(_mupdf.pdf_vmtx_lo_get, _mupdf.pdf_vmtx_lo_set)
    __swig_setmethods__["hi"] = _mupdf.pdf_vmtx_hi_set
    __swig_getmethods__["hi"] = _mupdf.pdf_vmtx_hi_get
    if _newclass:
        hi = _swig_property(_mupdf.pdf_vmtx_hi_get, _mupdf.pdf_vmtx_hi_set)
    __swig_setmethods__["x"] = _mupdf.pdf_vmtx_x_set
    __swig_getmethods__["x"] = _mupdf.pdf_vmtx_x_get
    if _newclass:
        x = _swig_property(_mupdf.pdf_vmtx_x_get, _mupdf.pdf_vmtx_x_set)
    __swig_setmethods__["y"] = _mupdf.pdf_vmtx_y_set
    __swig_getmethods__["y"] = _mupdf.pdf_vmtx_y_get
    if _newclass:
        y = _swig_property(_mupdf.pdf_vmtx_y_get, _mupdf.pdf_vmtx_y_set)
    __swig_setmethods__["w"] = _mupdf.pdf_vmtx_w_set
    __swig_getmethods__["w"] = _mupdf.pdf_vmtx_w_get
    if _newclass:
        w = _swig_property(_mupdf.pdf_vmtx_w_get, _mupdf.pdf_vmtx_w_set)

    def __init__(self):
        """__init__(pdf_vmtx self) -> pdf_vmtx"""
        this = _mupdf.new_pdf_vmtx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_vmtx
    __del__ = lambda self: None
pdf_vmtx_swigregister = _mupdf.pdf_vmtx_swigregister
pdf_vmtx_swigregister(pdf_vmtx)

class pdf_font_desc(_object):
    """Proxy of C++ pdf_font_desc class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_font_desc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_font_desc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["storable"] = _mupdf.pdf_font_desc_storable_set
    __swig_getmethods__["storable"] = _mupdf.pdf_font_desc_storable_get
    if _newclass:
        storable = _swig_property(_mupdf.pdf_font_desc_storable_get, _mupdf.pdf_font_desc_storable_set)
    __swig_setmethods__["size"] = _mupdf.pdf_font_desc_size_set
    __swig_getmethods__["size"] = _mupdf.pdf_font_desc_size_get
    if _newclass:
        size = _swig_property(_mupdf.pdf_font_desc_size_get, _mupdf.pdf_font_desc_size_set)
    __swig_setmethods__["font"] = _mupdf.pdf_font_desc_font_set
    __swig_getmethods__["font"] = _mupdf.pdf_font_desc_font_get
    if _newclass:
        font = _swig_property(_mupdf.pdf_font_desc_font_get, _mupdf.pdf_font_desc_font_set)
    __swig_setmethods__["flags"] = _mupdf.pdf_font_desc_flags_set
    __swig_getmethods__["flags"] = _mupdf.pdf_font_desc_flags_get
    if _newclass:
        flags = _swig_property(_mupdf.pdf_font_desc_flags_get, _mupdf.pdf_font_desc_flags_set)
    __swig_setmethods__["italic_angle"] = _mupdf.pdf_font_desc_italic_angle_set
    __swig_getmethods__["italic_angle"] = _mupdf.pdf_font_desc_italic_angle_get
    if _newclass:
        italic_angle = _swig_property(_mupdf.pdf_font_desc_italic_angle_get, _mupdf.pdf_font_desc_italic_angle_set)
    __swig_setmethods__["ascent"] = _mupdf.pdf_font_desc_ascent_set
    __swig_getmethods__["ascent"] = _mupdf.pdf_font_desc_ascent_get
    if _newclass:
        ascent = _swig_property(_mupdf.pdf_font_desc_ascent_get, _mupdf.pdf_font_desc_ascent_set)
    __swig_setmethods__["descent"] = _mupdf.pdf_font_desc_descent_set
    __swig_getmethods__["descent"] = _mupdf.pdf_font_desc_descent_get
    if _newclass:
        descent = _swig_property(_mupdf.pdf_font_desc_descent_get, _mupdf.pdf_font_desc_descent_set)
    __swig_setmethods__["cap_height"] = _mupdf.pdf_font_desc_cap_height_set
    __swig_getmethods__["cap_height"] = _mupdf.pdf_font_desc_cap_height_get
    if _newclass:
        cap_height = _swig_property(_mupdf.pdf_font_desc_cap_height_get, _mupdf.pdf_font_desc_cap_height_set)
    __swig_setmethods__["x_height"] = _mupdf.pdf_font_desc_x_height_set
    __swig_getmethods__["x_height"] = _mupdf.pdf_font_desc_x_height_get
    if _newclass:
        x_height = _swig_property(_mupdf.pdf_font_desc_x_height_get, _mupdf.pdf_font_desc_x_height_set)
    __swig_setmethods__["missing_width"] = _mupdf.pdf_font_desc_missing_width_set
    __swig_getmethods__["missing_width"] = _mupdf.pdf_font_desc_missing_width_get
    if _newclass:
        missing_width = _swig_property(_mupdf.pdf_font_desc_missing_width_get, _mupdf.pdf_font_desc_missing_width_set)
    __swig_setmethods__["encoding"] = _mupdf.pdf_font_desc_encoding_set
    __swig_getmethods__["encoding"] = _mupdf.pdf_font_desc_encoding_get
    if _newclass:
        encoding = _swig_property(_mupdf.pdf_font_desc_encoding_get, _mupdf.pdf_font_desc_encoding_set)
    __swig_setmethods__["to_ttf_cmap"] = _mupdf.pdf_font_desc_to_ttf_cmap_set
    __swig_getmethods__["to_ttf_cmap"] = _mupdf.pdf_font_desc_to_ttf_cmap_get
    if _newclass:
        to_ttf_cmap = _swig_property(_mupdf.pdf_font_desc_to_ttf_cmap_get, _mupdf.pdf_font_desc_to_ttf_cmap_set)
    __swig_setmethods__["cid_to_gid_len"] = _mupdf.pdf_font_desc_cid_to_gid_len_set
    __swig_getmethods__["cid_to_gid_len"] = _mupdf.pdf_font_desc_cid_to_gid_len_get
    if _newclass:
        cid_to_gid_len = _swig_property(_mupdf.pdf_font_desc_cid_to_gid_len_get, _mupdf.pdf_font_desc_cid_to_gid_len_set)
    __swig_setmethods__["cid_to_gid"] = _mupdf.pdf_font_desc_cid_to_gid_set
    __swig_getmethods__["cid_to_gid"] = _mupdf.pdf_font_desc_cid_to_gid_get
    if _newclass:
        cid_to_gid = _swig_property(_mupdf.pdf_font_desc_cid_to_gid_get, _mupdf.pdf_font_desc_cid_to_gid_set)
    __swig_setmethods__["to_unicode"] = _mupdf.pdf_font_desc_to_unicode_set
    __swig_getmethods__["to_unicode"] = _mupdf.pdf_font_desc_to_unicode_get
    if _newclass:
        to_unicode = _swig_property(_mupdf.pdf_font_desc_to_unicode_get, _mupdf.pdf_font_desc_to_unicode_set)
    __swig_setmethods__["cid_to_ucs_len"] = _mupdf.pdf_font_desc_cid_to_ucs_len_set
    __swig_getmethods__["cid_to_ucs_len"] = _mupdf.pdf_font_desc_cid_to_ucs_len_get
    if _newclass:
        cid_to_ucs_len = _swig_property(_mupdf.pdf_font_desc_cid_to_ucs_len_get, _mupdf.pdf_font_desc_cid_to_ucs_len_set)
    __swig_setmethods__["cid_to_ucs"] = _mupdf.pdf_font_desc_cid_to_ucs_set
    __swig_getmethods__["cid_to_ucs"] = _mupdf.pdf_font_desc_cid_to_ucs_get
    if _newclass:
        cid_to_ucs = _swig_property(_mupdf.pdf_font_desc_cid_to_ucs_get, _mupdf.pdf_font_desc_cid_to_ucs_set)
    __swig_setmethods__["wmode"] = _mupdf.pdf_font_desc_wmode_set
    __swig_getmethods__["wmode"] = _mupdf.pdf_font_desc_wmode_get
    if _newclass:
        wmode = _swig_property(_mupdf.pdf_font_desc_wmode_get, _mupdf.pdf_font_desc_wmode_set)
    __swig_setmethods__["hmtx_len"] = _mupdf.pdf_font_desc_hmtx_len_set
    __swig_getmethods__["hmtx_len"] = _mupdf.pdf_font_desc_hmtx_len_get
    if _newclass:
        hmtx_len = _swig_property(_mupdf.pdf_font_desc_hmtx_len_get, _mupdf.pdf_font_desc_hmtx_len_set)
    __swig_setmethods__["hmtx_cap"] = _mupdf.pdf_font_desc_hmtx_cap_set
    __swig_getmethods__["hmtx_cap"] = _mupdf.pdf_font_desc_hmtx_cap_get
    if _newclass:
        hmtx_cap = _swig_property(_mupdf.pdf_font_desc_hmtx_cap_get, _mupdf.pdf_font_desc_hmtx_cap_set)
    __swig_setmethods__["dhmtx"] = _mupdf.pdf_font_desc_dhmtx_set
    __swig_getmethods__["dhmtx"] = _mupdf.pdf_font_desc_dhmtx_get
    if _newclass:
        dhmtx = _swig_property(_mupdf.pdf_font_desc_dhmtx_get, _mupdf.pdf_font_desc_dhmtx_set)
    __swig_setmethods__["hmtx"] = _mupdf.pdf_font_desc_hmtx_set
    __swig_getmethods__["hmtx"] = _mupdf.pdf_font_desc_hmtx_get
    if _newclass:
        hmtx = _swig_property(_mupdf.pdf_font_desc_hmtx_get, _mupdf.pdf_font_desc_hmtx_set)
    __swig_setmethods__["vmtx_len"] = _mupdf.pdf_font_desc_vmtx_len_set
    __swig_getmethods__["vmtx_len"] = _mupdf.pdf_font_desc_vmtx_len_get
    if _newclass:
        vmtx_len = _swig_property(_mupdf.pdf_font_desc_vmtx_len_get, _mupdf.pdf_font_desc_vmtx_len_set)
    __swig_setmethods__["vmtx_cap"] = _mupdf.pdf_font_desc_vmtx_cap_set
    __swig_getmethods__["vmtx_cap"] = _mupdf.pdf_font_desc_vmtx_cap_get
    if _newclass:
        vmtx_cap = _swig_property(_mupdf.pdf_font_desc_vmtx_cap_get, _mupdf.pdf_font_desc_vmtx_cap_set)
    __swig_setmethods__["dvmtx"] = _mupdf.pdf_font_desc_dvmtx_set
    __swig_getmethods__["dvmtx"] = _mupdf.pdf_font_desc_dvmtx_get
    if _newclass:
        dvmtx = _swig_property(_mupdf.pdf_font_desc_dvmtx_get, _mupdf.pdf_font_desc_dvmtx_set)
    __swig_setmethods__["vmtx"] = _mupdf.pdf_font_desc_vmtx_set
    __swig_getmethods__["vmtx"] = _mupdf.pdf_font_desc_vmtx_get
    if _newclass:
        vmtx = _swig_property(_mupdf.pdf_font_desc_vmtx_get, _mupdf.pdf_font_desc_vmtx_set)
    __swig_setmethods__["is_embedded"] = _mupdf.pdf_font_desc_is_embedded_set
    __swig_getmethods__["is_embedded"] = _mupdf.pdf_font_desc_is_embedded_get
    if _newclass:
        is_embedded = _swig_property(_mupdf.pdf_font_desc_is_embedded_get, _mupdf.pdf_font_desc_is_embedded_set)

    def __init__(self):
        """__init__(pdf_font_desc self) -> pdf_font_desc"""
        this = _mupdf.new_pdf_font_desc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_font_desc
    __del__ = lambda self: None
pdf_font_desc_swigregister = _mupdf.pdf_font_desc_swigregister
pdf_font_desc_swigregister(pdf_font_desc)

PDF_SIMPLE_FONT_RESOURCE = _mupdf.PDF_SIMPLE_FONT_RESOURCE
PDF_CID_FONT_RESOURCE = _mupdf.PDF_CID_FONT_RESOURCE
PDF_CJK_FONT_RESOURCE = _mupdf.PDF_CJK_FONT_RESOURCE
PDF_SIMPLE_ENCODING_LATIN = _mupdf.PDF_SIMPLE_ENCODING_LATIN
PDF_SIMPLE_ENCODING_GREEK = _mupdf.PDF_SIMPLE_ENCODING_GREEK
PDF_SIMPLE_ENCODING_CYRILLIC = _mupdf.PDF_SIMPLE_ENCODING_CYRILLIC
class pdf_font_resource_key(_object):
    """Proxy of C++ pdf_font_resource_key class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_font_resource_key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_font_resource_key, name)
    __repr__ = _swig_repr
    __swig_setmethods__["digest"] = _mupdf.pdf_font_resource_key_digest_set
    __swig_getmethods__["digest"] = _mupdf.pdf_font_resource_key_digest_get
    if _newclass:
        digest = _swig_property(_mupdf.pdf_font_resource_key_digest_get, _mupdf.pdf_font_resource_key_digest_set)
    __swig_setmethods__["type"] = _mupdf.pdf_font_resource_key_type_set
    __swig_getmethods__["type"] = _mupdf.pdf_font_resource_key_type_get
    if _newclass:
        type = _swig_property(_mupdf.pdf_font_resource_key_type_get, _mupdf.pdf_font_resource_key_type_set)
    __swig_setmethods__["encoding"] = _mupdf.pdf_font_resource_key_encoding_set
    __swig_getmethods__["encoding"] = _mupdf.pdf_font_resource_key_encoding_get
    if _newclass:
        encoding = _swig_property(_mupdf.pdf_font_resource_key_encoding_get, _mupdf.pdf_font_resource_key_encoding_set)
    __swig_setmethods__["local_xref"] = _mupdf.pdf_font_resource_key_local_xref_set
    __swig_getmethods__["local_xref"] = _mupdf.pdf_font_resource_key_local_xref_get
    if _newclass:
        local_xref = _swig_property(_mupdf.pdf_font_resource_key_local_xref_get, _mupdf.pdf_font_resource_key_local_xref_set)

    def __init__(self):
        """__init__(pdf_font_resource_key self) -> pdf_font_resource_key"""
        this = _mupdf.new_pdf_font_resource_key()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_font_resource_key
    __del__ = lambda self: None
pdf_font_resource_key_swigregister = _mupdf.pdf_font_resource_key_swigregister
pdf_font_resource_key_swigregister(pdf_font_resource_key)

class pdf_pattern(_object):
    """Proxy of C++ pdf_pattern class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_pattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_pattern, name)
    __repr__ = _swig_repr
    __swig_setmethods__["storable"] = _mupdf.pdf_pattern_storable_set
    __swig_getmethods__["storable"] = _mupdf.pdf_pattern_storable_get
    if _newclass:
        storable = _swig_property(_mupdf.pdf_pattern_storable_get, _mupdf.pdf_pattern_storable_set)
    __swig_setmethods__["ismask"] = _mupdf.pdf_pattern_ismask_set
    __swig_getmethods__["ismask"] = _mupdf.pdf_pattern_ismask_get
    if _newclass:
        ismask = _swig_property(_mupdf.pdf_pattern_ismask_get, _mupdf.pdf_pattern_ismask_set)
    __swig_setmethods__["xstep"] = _mupdf.pdf_pattern_xstep_set
    __swig_getmethods__["xstep"] = _mupdf.pdf_pattern_xstep_get
    if _newclass:
        xstep = _swig_property(_mupdf.pdf_pattern_xstep_get, _mupdf.pdf_pattern_xstep_set)
    __swig_setmethods__["ystep"] = _mupdf.pdf_pattern_ystep_set
    __swig_getmethods__["ystep"] = _mupdf.pdf_pattern_ystep_get
    if _newclass:
        ystep = _swig_property(_mupdf.pdf_pattern_ystep_get, _mupdf.pdf_pattern_ystep_set)
    __swig_setmethods__["matrix"] = _mupdf.pdf_pattern_matrix_set
    __swig_getmethods__["matrix"] = _mupdf.pdf_pattern_matrix_get
    if _newclass:
        matrix = _swig_property(_mupdf.pdf_pattern_matrix_get, _mupdf.pdf_pattern_matrix_set)
    __swig_setmethods__["bbox"] = _mupdf.pdf_pattern_bbox_set
    __swig_getmethods__["bbox"] = _mupdf.pdf_pattern_bbox_get
    if _newclass:
        bbox = _swig_property(_mupdf.pdf_pattern_bbox_get, _mupdf.pdf_pattern_bbox_set)
    __swig_setmethods__["document"] = _mupdf.pdf_pattern_document_set
    __swig_getmethods__["document"] = _mupdf.pdf_pattern_document_get
    if _newclass:
        document = _swig_property(_mupdf.pdf_pattern_document_get, _mupdf.pdf_pattern_document_set)
    __swig_setmethods__["resources"] = _mupdf.pdf_pattern_resources_set
    __swig_getmethods__["resources"] = _mupdf.pdf_pattern_resources_get
    if _newclass:
        resources = _swig_property(_mupdf.pdf_pattern_resources_get, _mupdf.pdf_pattern_resources_set)
    __swig_setmethods__["contents"] = _mupdf.pdf_pattern_contents_set
    __swig_getmethods__["contents"] = _mupdf.pdf_pattern_contents_get
    if _newclass:
        contents = _swig_property(_mupdf.pdf_pattern_contents_get, _mupdf.pdf_pattern_contents_set)
    __swig_setmethods__["id"] = _mupdf.pdf_pattern_id_set
    __swig_getmethods__["id"] = _mupdf.pdf_pattern_id_get
    if _newclass:
        id = _swig_property(_mupdf.pdf_pattern_id_get, _mupdf.pdf_pattern_id_set)

    def __init__(self):
        """__init__(pdf_pattern self) -> pdf_pattern"""
        this = _mupdf.new_pdf_pattern()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_pattern
    __del__ = lambda self: None
pdf_pattern_swigregister = _mupdf.pdf_pattern_swigregister
pdf_pattern_swigregister(pdf_pattern)

class pdf_processor(_object):
    """Proxy of C++ pdf_processor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_processor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_processor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["close_processor"] = _mupdf.pdf_processor_close_processor_set
    __swig_getmethods__["close_processor"] = _mupdf.pdf_processor_close_processor_get
    if _newclass:
        close_processor = _swig_property(_mupdf.pdf_processor_close_processor_get, _mupdf.pdf_processor_close_processor_set)
    __swig_setmethods__["drop_processor"] = _mupdf.pdf_processor_drop_processor_set
    __swig_getmethods__["drop_processor"] = _mupdf.pdf_processor_drop_processor_get
    if _newclass:
        drop_processor = _swig_property(_mupdf.pdf_processor_drop_processor_get, _mupdf.pdf_processor_drop_processor_set)
    __swig_setmethods__["op_w"] = _mupdf.pdf_processor_op_w_set
    __swig_getmethods__["op_w"] = _mupdf.pdf_processor_op_w_get
    if _newclass:
        op_w = _swig_property(_mupdf.pdf_processor_op_w_get, _mupdf.pdf_processor_op_w_set)
    __swig_setmethods__["op_j"] = _mupdf.pdf_processor_op_j_set
    __swig_getmethods__["op_j"] = _mupdf.pdf_processor_op_j_get
    if _newclass:
        op_j = _swig_property(_mupdf.pdf_processor_op_j_get, _mupdf.pdf_processor_op_j_set)
    __swig_setmethods__["op_J"] = _mupdf.pdf_processor_op_J_set
    __swig_getmethods__["op_J"] = _mupdf.pdf_processor_op_J_get
    if _newclass:
        op_J = _swig_property(_mupdf.pdf_processor_op_J_get, _mupdf.pdf_processor_op_J_set)
    __swig_setmethods__["op_M"] = _mupdf.pdf_processor_op_M_set
    __swig_getmethods__["op_M"] = _mupdf.pdf_processor_op_M_get
    if _newclass:
        op_M = _swig_property(_mupdf.pdf_processor_op_M_get, _mupdf.pdf_processor_op_M_set)
    __swig_setmethods__["op_d"] = _mupdf.pdf_processor_op_d_set
    __swig_getmethods__["op_d"] = _mupdf.pdf_processor_op_d_get
    if _newclass:
        op_d = _swig_property(_mupdf.pdf_processor_op_d_get, _mupdf.pdf_processor_op_d_set)
    __swig_setmethods__["op_ri"] = _mupdf.pdf_processor_op_ri_set
    __swig_getmethods__["op_ri"] = _mupdf.pdf_processor_op_ri_get
    if _newclass:
        op_ri = _swig_property(_mupdf.pdf_processor_op_ri_get, _mupdf.pdf_processor_op_ri_set)
    __swig_setmethods__["op_i"] = _mupdf.pdf_processor_op_i_set
    __swig_getmethods__["op_i"] = _mupdf.pdf_processor_op_i_get
    if _newclass:
        op_i = _swig_property(_mupdf.pdf_processor_op_i_get, _mupdf.pdf_processor_op_i_set)
    __swig_setmethods__["op_gs_begin"] = _mupdf.pdf_processor_op_gs_begin_set
    __swig_getmethods__["op_gs_begin"] = _mupdf.pdf_processor_op_gs_begin_get
    if _newclass:
        op_gs_begin = _swig_property(_mupdf.pdf_processor_op_gs_begin_get, _mupdf.pdf_processor_op_gs_begin_set)
    __swig_setmethods__["op_gs_BM"] = _mupdf.pdf_processor_op_gs_BM_set
    __swig_getmethods__["op_gs_BM"] = _mupdf.pdf_processor_op_gs_BM_get
    if _newclass:
        op_gs_BM = _swig_property(_mupdf.pdf_processor_op_gs_BM_get, _mupdf.pdf_processor_op_gs_BM_set)
    __swig_setmethods__["op_gs_ca"] = _mupdf.pdf_processor_op_gs_ca_set
    __swig_getmethods__["op_gs_ca"] = _mupdf.pdf_processor_op_gs_ca_get
    if _newclass:
        op_gs_ca = _swig_property(_mupdf.pdf_processor_op_gs_ca_get, _mupdf.pdf_processor_op_gs_ca_set)
    __swig_setmethods__["op_gs_CA"] = _mupdf.pdf_processor_op_gs_CA_set
    __swig_getmethods__["op_gs_CA"] = _mupdf.pdf_processor_op_gs_CA_get
    if _newclass:
        op_gs_CA = _swig_property(_mupdf.pdf_processor_op_gs_CA_get, _mupdf.pdf_processor_op_gs_CA_set)
    __swig_setmethods__["op_gs_SMask"] = _mupdf.pdf_processor_op_gs_SMask_set
    __swig_getmethods__["op_gs_SMask"] = _mupdf.pdf_processor_op_gs_SMask_get
    if _newclass:
        op_gs_SMask = _swig_property(_mupdf.pdf_processor_op_gs_SMask_get, _mupdf.pdf_processor_op_gs_SMask_set)
    __swig_setmethods__["op_gs_end"] = _mupdf.pdf_processor_op_gs_end_set
    __swig_getmethods__["op_gs_end"] = _mupdf.pdf_processor_op_gs_end_get
    if _newclass:
        op_gs_end = _swig_property(_mupdf.pdf_processor_op_gs_end_get, _mupdf.pdf_processor_op_gs_end_set)
    __swig_setmethods__["op_q"] = _mupdf.pdf_processor_op_q_set
    __swig_getmethods__["op_q"] = _mupdf.pdf_processor_op_q_get
    if _newclass:
        op_q = _swig_property(_mupdf.pdf_processor_op_q_get, _mupdf.pdf_processor_op_q_set)
    __swig_setmethods__["op_Q"] = _mupdf.pdf_processor_op_Q_set
    __swig_getmethods__["op_Q"] = _mupdf.pdf_processor_op_Q_get
    if _newclass:
        op_Q = _swig_property(_mupdf.pdf_processor_op_Q_get, _mupdf.pdf_processor_op_Q_set)
    __swig_setmethods__["op_cm"] = _mupdf.pdf_processor_op_cm_set
    __swig_getmethods__["op_cm"] = _mupdf.pdf_processor_op_cm_get
    if _newclass:
        op_cm = _swig_property(_mupdf.pdf_processor_op_cm_get, _mupdf.pdf_processor_op_cm_set)
    __swig_setmethods__["op_m"] = _mupdf.pdf_processor_op_m_set
    __swig_getmethods__["op_m"] = _mupdf.pdf_processor_op_m_get
    if _newclass:
        op_m = _swig_property(_mupdf.pdf_processor_op_m_get, _mupdf.pdf_processor_op_m_set)
    __swig_setmethods__["op_l"] = _mupdf.pdf_processor_op_l_set
    __swig_getmethods__["op_l"] = _mupdf.pdf_processor_op_l_get
    if _newclass:
        op_l = _swig_property(_mupdf.pdf_processor_op_l_get, _mupdf.pdf_processor_op_l_set)
    __swig_setmethods__["op_c"] = _mupdf.pdf_processor_op_c_set
    __swig_getmethods__["op_c"] = _mupdf.pdf_processor_op_c_get
    if _newclass:
        op_c = _swig_property(_mupdf.pdf_processor_op_c_get, _mupdf.pdf_processor_op_c_set)
    __swig_setmethods__["op_v"] = _mupdf.pdf_processor_op_v_set
    __swig_getmethods__["op_v"] = _mupdf.pdf_processor_op_v_get
    if _newclass:
        op_v = _swig_property(_mupdf.pdf_processor_op_v_get, _mupdf.pdf_processor_op_v_set)
    __swig_setmethods__["op_y"] = _mupdf.pdf_processor_op_y_set
    __swig_getmethods__["op_y"] = _mupdf.pdf_processor_op_y_get
    if _newclass:
        op_y = _swig_property(_mupdf.pdf_processor_op_y_get, _mupdf.pdf_processor_op_y_set)
    __swig_setmethods__["op_h"] = _mupdf.pdf_processor_op_h_set
    __swig_getmethods__["op_h"] = _mupdf.pdf_processor_op_h_get
    if _newclass:
        op_h = _swig_property(_mupdf.pdf_processor_op_h_get, _mupdf.pdf_processor_op_h_set)
    __swig_setmethods__["op_re"] = _mupdf.pdf_processor_op_re_set
    __swig_getmethods__["op_re"] = _mupdf.pdf_processor_op_re_get
    if _newclass:
        op_re = _swig_property(_mupdf.pdf_processor_op_re_get, _mupdf.pdf_processor_op_re_set)
    __swig_setmethods__["op_S"] = _mupdf.pdf_processor_op_S_set
    __swig_getmethods__["op_S"] = _mupdf.pdf_processor_op_S_get
    if _newclass:
        op_S = _swig_property(_mupdf.pdf_processor_op_S_get, _mupdf.pdf_processor_op_S_set)
    __swig_setmethods__["op_s"] = _mupdf.pdf_processor_op_s_set
    __swig_getmethods__["op_s"] = _mupdf.pdf_processor_op_s_get
    if _newclass:
        op_s = _swig_property(_mupdf.pdf_processor_op_s_get, _mupdf.pdf_processor_op_s_set)
    __swig_setmethods__["op_F"] = _mupdf.pdf_processor_op_F_set
    __swig_getmethods__["op_F"] = _mupdf.pdf_processor_op_F_get
    if _newclass:
        op_F = _swig_property(_mupdf.pdf_processor_op_F_get, _mupdf.pdf_processor_op_F_set)
    __swig_setmethods__["op_f"] = _mupdf.pdf_processor_op_f_set
    __swig_getmethods__["op_f"] = _mupdf.pdf_processor_op_f_get
    if _newclass:
        op_f = _swig_property(_mupdf.pdf_processor_op_f_get, _mupdf.pdf_processor_op_f_set)
    __swig_setmethods__["op_fstar"] = _mupdf.pdf_processor_op_fstar_set
    __swig_getmethods__["op_fstar"] = _mupdf.pdf_processor_op_fstar_get
    if _newclass:
        op_fstar = _swig_property(_mupdf.pdf_processor_op_fstar_get, _mupdf.pdf_processor_op_fstar_set)
    __swig_setmethods__["op_B"] = _mupdf.pdf_processor_op_B_set
    __swig_getmethods__["op_B"] = _mupdf.pdf_processor_op_B_get
    if _newclass:
        op_B = _swig_property(_mupdf.pdf_processor_op_B_get, _mupdf.pdf_processor_op_B_set)
    __swig_setmethods__["op_Bstar"] = _mupdf.pdf_processor_op_Bstar_set
    __swig_getmethods__["op_Bstar"] = _mupdf.pdf_processor_op_Bstar_get
    if _newclass:
        op_Bstar = _swig_property(_mupdf.pdf_processor_op_Bstar_get, _mupdf.pdf_processor_op_Bstar_set)
    __swig_setmethods__["op_b"] = _mupdf.pdf_processor_op_b_set
    __swig_getmethods__["op_b"] = _mupdf.pdf_processor_op_b_get
    if _newclass:
        op_b = _swig_property(_mupdf.pdf_processor_op_b_get, _mupdf.pdf_processor_op_b_set)
    __swig_setmethods__["op_bstar"] = _mupdf.pdf_processor_op_bstar_set
    __swig_getmethods__["op_bstar"] = _mupdf.pdf_processor_op_bstar_get
    if _newclass:
        op_bstar = _swig_property(_mupdf.pdf_processor_op_bstar_get, _mupdf.pdf_processor_op_bstar_set)
    __swig_setmethods__["op_n"] = _mupdf.pdf_processor_op_n_set
    __swig_getmethods__["op_n"] = _mupdf.pdf_processor_op_n_get
    if _newclass:
        op_n = _swig_property(_mupdf.pdf_processor_op_n_get, _mupdf.pdf_processor_op_n_set)
    __swig_setmethods__["op_W"] = _mupdf.pdf_processor_op_W_set
    __swig_getmethods__["op_W"] = _mupdf.pdf_processor_op_W_get
    if _newclass:
        op_W = _swig_property(_mupdf.pdf_processor_op_W_get, _mupdf.pdf_processor_op_W_set)
    __swig_setmethods__["op_Wstar"] = _mupdf.pdf_processor_op_Wstar_set
    __swig_getmethods__["op_Wstar"] = _mupdf.pdf_processor_op_Wstar_get
    if _newclass:
        op_Wstar = _swig_property(_mupdf.pdf_processor_op_Wstar_get, _mupdf.pdf_processor_op_Wstar_set)
    __swig_setmethods__["op_BT"] = _mupdf.pdf_processor_op_BT_set
    __swig_getmethods__["op_BT"] = _mupdf.pdf_processor_op_BT_get
    if _newclass:
        op_BT = _swig_property(_mupdf.pdf_processor_op_BT_get, _mupdf.pdf_processor_op_BT_set)
    __swig_setmethods__["op_ET"] = _mupdf.pdf_processor_op_ET_set
    __swig_getmethods__["op_ET"] = _mupdf.pdf_processor_op_ET_get
    if _newclass:
        op_ET = _swig_property(_mupdf.pdf_processor_op_ET_get, _mupdf.pdf_processor_op_ET_set)
    __swig_setmethods__["op_Tc"] = _mupdf.pdf_processor_op_Tc_set
    __swig_getmethods__["op_Tc"] = _mupdf.pdf_processor_op_Tc_get
    if _newclass:
        op_Tc = _swig_property(_mupdf.pdf_processor_op_Tc_get, _mupdf.pdf_processor_op_Tc_set)
    __swig_setmethods__["op_Tw"] = _mupdf.pdf_processor_op_Tw_set
    __swig_getmethods__["op_Tw"] = _mupdf.pdf_processor_op_Tw_get
    if _newclass:
        op_Tw = _swig_property(_mupdf.pdf_processor_op_Tw_get, _mupdf.pdf_processor_op_Tw_set)
    __swig_setmethods__["op_Tz"] = _mupdf.pdf_processor_op_Tz_set
    __swig_getmethods__["op_Tz"] = _mupdf.pdf_processor_op_Tz_get
    if _newclass:
        op_Tz = _swig_property(_mupdf.pdf_processor_op_Tz_get, _mupdf.pdf_processor_op_Tz_set)
    __swig_setmethods__["op_TL"] = _mupdf.pdf_processor_op_TL_set
    __swig_getmethods__["op_TL"] = _mupdf.pdf_processor_op_TL_get
    if _newclass:
        op_TL = _swig_property(_mupdf.pdf_processor_op_TL_get, _mupdf.pdf_processor_op_TL_set)
    __swig_setmethods__["op_Tf"] = _mupdf.pdf_processor_op_Tf_set
    __swig_getmethods__["op_Tf"] = _mupdf.pdf_processor_op_Tf_get
    if _newclass:
        op_Tf = _swig_property(_mupdf.pdf_processor_op_Tf_get, _mupdf.pdf_processor_op_Tf_set)
    __swig_setmethods__["op_Tr"] = _mupdf.pdf_processor_op_Tr_set
    __swig_getmethods__["op_Tr"] = _mupdf.pdf_processor_op_Tr_get
    if _newclass:
        op_Tr = _swig_property(_mupdf.pdf_processor_op_Tr_get, _mupdf.pdf_processor_op_Tr_set)
    __swig_setmethods__["op_Ts"] = _mupdf.pdf_processor_op_Ts_set
    __swig_getmethods__["op_Ts"] = _mupdf.pdf_processor_op_Ts_get
    if _newclass:
        op_Ts = _swig_property(_mupdf.pdf_processor_op_Ts_get, _mupdf.pdf_processor_op_Ts_set)
    __swig_setmethods__["op_Td"] = _mupdf.pdf_processor_op_Td_set
    __swig_getmethods__["op_Td"] = _mupdf.pdf_processor_op_Td_get
    if _newclass:
        op_Td = _swig_property(_mupdf.pdf_processor_op_Td_get, _mupdf.pdf_processor_op_Td_set)
    __swig_setmethods__["op_TD"] = _mupdf.pdf_processor_op_TD_set
    __swig_getmethods__["op_TD"] = _mupdf.pdf_processor_op_TD_get
    if _newclass:
        op_TD = _swig_property(_mupdf.pdf_processor_op_TD_get, _mupdf.pdf_processor_op_TD_set)
    __swig_setmethods__["op_Tm"] = _mupdf.pdf_processor_op_Tm_set
    __swig_getmethods__["op_Tm"] = _mupdf.pdf_processor_op_Tm_get
    if _newclass:
        op_Tm = _swig_property(_mupdf.pdf_processor_op_Tm_get, _mupdf.pdf_processor_op_Tm_set)
    __swig_setmethods__["op_Tstar"] = _mupdf.pdf_processor_op_Tstar_set
    __swig_getmethods__["op_Tstar"] = _mupdf.pdf_processor_op_Tstar_get
    if _newclass:
        op_Tstar = _swig_property(_mupdf.pdf_processor_op_Tstar_get, _mupdf.pdf_processor_op_Tstar_set)
    __swig_setmethods__["op_TJ"] = _mupdf.pdf_processor_op_TJ_set
    __swig_getmethods__["op_TJ"] = _mupdf.pdf_processor_op_TJ_get
    if _newclass:
        op_TJ = _swig_property(_mupdf.pdf_processor_op_TJ_get, _mupdf.pdf_processor_op_TJ_set)
    __swig_setmethods__["op_Tj"] = _mupdf.pdf_processor_op_Tj_set
    __swig_getmethods__["op_Tj"] = _mupdf.pdf_processor_op_Tj_get
    if _newclass:
        op_Tj = _swig_property(_mupdf.pdf_processor_op_Tj_get, _mupdf.pdf_processor_op_Tj_set)
    __swig_setmethods__["op_squote"] = _mupdf.pdf_processor_op_squote_set
    __swig_getmethods__["op_squote"] = _mupdf.pdf_processor_op_squote_get
    if _newclass:
        op_squote = _swig_property(_mupdf.pdf_processor_op_squote_get, _mupdf.pdf_processor_op_squote_set)
    __swig_setmethods__["op_dquote"] = _mupdf.pdf_processor_op_dquote_set
    __swig_getmethods__["op_dquote"] = _mupdf.pdf_processor_op_dquote_get
    if _newclass:
        op_dquote = _swig_property(_mupdf.pdf_processor_op_dquote_get, _mupdf.pdf_processor_op_dquote_set)
    __swig_setmethods__["op_d0"] = _mupdf.pdf_processor_op_d0_set
    __swig_getmethods__["op_d0"] = _mupdf.pdf_processor_op_d0_get
    if _newclass:
        op_d0 = _swig_property(_mupdf.pdf_processor_op_d0_get, _mupdf.pdf_processor_op_d0_set)
    __swig_setmethods__["op_d1"] = _mupdf.pdf_processor_op_d1_set
    __swig_getmethods__["op_d1"] = _mupdf.pdf_processor_op_d1_get
    if _newclass:
        op_d1 = _swig_property(_mupdf.pdf_processor_op_d1_get, _mupdf.pdf_processor_op_d1_set)
    __swig_setmethods__["op_CS"] = _mupdf.pdf_processor_op_CS_set
    __swig_getmethods__["op_CS"] = _mupdf.pdf_processor_op_CS_get
    if _newclass:
        op_CS = _swig_property(_mupdf.pdf_processor_op_CS_get, _mupdf.pdf_processor_op_CS_set)
    __swig_setmethods__["op_cs"] = _mupdf.pdf_processor_op_cs_set
    __swig_getmethods__["op_cs"] = _mupdf.pdf_processor_op_cs_get
    if _newclass:
        op_cs = _swig_property(_mupdf.pdf_processor_op_cs_get, _mupdf.pdf_processor_op_cs_set)
    __swig_setmethods__["op_SC_pattern"] = _mupdf.pdf_processor_op_SC_pattern_set
    __swig_getmethods__["op_SC_pattern"] = _mupdf.pdf_processor_op_SC_pattern_get
    if _newclass:
        op_SC_pattern = _swig_property(_mupdf.pdf_processor_op_SC_pattern_get, _mupdf.pdf_processor_op_SC_pattern_set)
    __swig_setmethods__["op_sc_pattern"] = _mupdf.pdf_processor_op_sc_pattern_set
    __swig_getmethods__["op_sc_pattern"] = _mupdf.pdf_processor_op_sc_pattern_get
    if _newclass:
        op_sc_pattern = _swig_property(_mupdf.pdf_processor_op_sc_pattern_get, _mupdf.pdf_processor_op_sc_pattern_set)
    __swig_setmethods__["op_SC_shade"] = _mupdf.pdf_processor_op_SC_shade_set
    __swig_getmethods__["op_SC_shade"] = _mupdf.pdf_processor_op_SC_shade_get
    if _newclass:
        op_SC_shade = _swig_property(_mupdf.pdf_processor_op_SC_shade_get, _mupdf.pdf_processor_op_SC_shade_set)
    __swig_setmethods__["op_sc_shade"] = _mupdf.pdf_processor_op_sc_shade_set
    __swig_getmethods__["op_sc_shade"] = _mupdf.pdf_processor_op_sc_shade_get
    if _newclass:
        op_sc_shade = _swig_property(_mupdf.pdf_processor_op_sc_shade_get, _mupdf.pdf_processor_op_sc_shade_set)
    __swig_setmethods__["op_SC_color"] = _mupdf.pdf_processor_op_SC_color_set
    __swig_getmethods__["op_SC_color"] = _mupdf.pdf_processor_op_SC_color_get
    if _newclass:
        op_SC_color = _swig_property(_mupdf.pdf_processor_op_SC_color_get, _mupdf.pdf_processor_op_SC_color_set)
    __swig_setmethods__["op_sc_color"] = _mupdf.pdf_processor_op_sc_color_set
    __swig_getmethods__["op_sc_color"] = _mupdf.pdf_processor_op_sc_color_get
    if _newclass:
        op_sc_color = _swig_property(_mupdf.pdf_processor_op_sc_color_get, _mupdf.pdf_processor_op_sc_color_set)
    __swig_setmethods__["op_G"] = _mupdf.pdf_processor_op_G_set
    __swig_getmethods__["op_G"] = _mupdf.pdf_processor_op_G_get
    if _newclass:
        op_G = _swig_property(_mupdf.pdf_processor_op_G_get, _mupdf.pdf_processor_op_G_set)
    __swig_setmethods__["op_g"] = _mupdf.pdf_processor_op_g_set
    __swig_getmethods__["op_g"] = _mupdf.pdf_processor_op_g_get
    if _newclass:
        op_g = _swig_property(_mupdf.pdf_processor_op_g_get, _mupdf.pdf_processor_op_g_set)
    __swig_setmethods__["op_RG"] = _mupdf.pdf_processor_op_RG_set
    __swig_getmethods__["op_RG"] = _mupdf.pdf_processor_op_RG_get
    if _newclass:
        op_RG = _swig_property(_mupdf.pdf_processor_op_RG_get, _mupdf.pdf_processor_op_RG_set)
    __swig_setmethods__["op_rg"] = _mupdf.pdf_processor_op_rg_set
    __swig_getmethods__["op_rg"] = _mupdf.pdf_processor_op_rg_get
    if _newclass:
        op_rg = _swig_property(_mupdf.pdf_processor_op_rg_get, _mupdf.pdf_processor_op_rg_set)
    __swig_setmethods__["op_K"] = _mupdf.pdf_processor_op_K_set
    __swig_getmethods__["op_K"] = _mupdf.pdf_processor_op_K_get
    if _newclass:
        op_K = _swig_property(_mupdf.pdf_processor_op_K_get, _mupdf.pdf_processor_op_K_set)
    __swig_setmethods__["op_k"] = _mupdf.pdf_processor_op_k_set
    __swig_getmethods__["op_k"] = _mupdf.pdf_processor_op_k_get
    if _newclass:
        op_k = _swig_property(_mupdf.pdf_processor_op_k_get, _mupdf.pdf_processor_op_k_set)
    __swig_setmethods__["op_BI"] = _mupdf.pdf_processor_op_BI_set
    __swig_getmethods__["op_BI"] = _mupdf.pdf_processor_op_BI_get
    if _newclass:
        op_BI = _swig_property(_mupdf.pdf_processor_op_BI_get, _mupdf.pdf_processor_op_BI_set)
    __swig_setmethods__["op_sh"] = _mupdf.pdf_processor_op_sh_set
    __swig_getmethods__["op_sh"] = _mupdf.pdf_processor_op_sh_get
    if _newclass:
        op_sh = _swig_property(_mupdf.pdf_processor_op_sh_get, _mupdf.pdf_processor_op_sh_set)
    __swig_setmethods__["op_Do_image"] = _mupdf.pdf_processor_op_Do_image_set
    __swig_getmethods__["op_Do_image"] = _mupdf.pdf_processor_op_Do_image_get
    if _newclass:
        op_Do_image = _swig_property(_mupdf.pdf_processor_op_Do_image_get, _mupdf.pdf_processor_op_Do_image_set)
    __swig_setmethods__["op_Do_form"] = _mupdf.pdf_processor_op_Do_form_set
    __swig_getmethods__["op_Do_form"] = _mupdf.pdf_processor_op_Do_form_get
    if _newclass:
        op_Do_form = _swig_property(_mupdf.pdf_processor_op_Do_form_get, _mupdf.pdf_processor_op_Do_form_set)
    __swig_setmethods__["op_MP"] = _mupdf.pdf_processor_op_MP_set
    __swig_getmethods__["op_MP"] = _mupdf.pdf_processor_op_MP_get
    if _newclass:
        op_MP = _swig_property(_mupdf.pdf_processor_op_MP_get, _mupdf.pdf_processor_op_MP_set)
    __swig_setmethods__["op_DP"] = _mupdf.pdf_processor_op_DP_set
    __swig_getmethods__["op_DP"] = _mupdf.pdf_processor_op_DP_get
    if _newclass:
        op_DP = _swig_property(_mupdf.pdf_processor_op_DP_get, _mupdf.pdf_processor_op_DP_set)
    __swig_setmethods__["op_BMC"] = _mupdf.pdf_processor_op_BMC_set
    __swig_getmethods__["op_BMC"] = _mupdf.pdf_processor_op_BMC_get
    if _newclass:
        op_BMC = _swig_property(_mupdf.pdf_processor_op_BMC_get, _mupdf.pdf_processor_op_BMC_set)
    __swig_setmethods__["op_BDC"] = _mupdf.pdf_processor_op_BDC_set
    __swig_getmethods__["op_BDC"] = _mupdf.pdf_processor_op_BDC_get
    if _newclass:
        op_BDC = _swig_property(_mupdf.pdf_processor_op_BDC_get, _mupdf.pdf_processor_op_BDC_set)
    __swig_setmethods__["op_EMC"] = _mupdf.pdf_processor_op_EMC_set
    __swig_getmethods__["op_EMC"] = _mupdf.pdf_processor_op_EMC_get
    if _newclass:
        op_EMC = _swig_property(_mupdf.pdf_processor_op_EMC_get, _mupdf.pdf_processor_op_EMC_set)
    __swig_setmethods__["op_BX"] = _mupdf.pdf_processor_op_BX_set
    __swig_getmethods__["op_BX"] = _mupdf.pdf_processor_op_BX_get
    if _newclass:
        op_BX = _swig_property(_mupdf.pdf_processor_op_BX_get, _mupdf.pdf_processor_op_BX_set)
    __swig_setmethods__["op_EX"] = _mupdf.pdf_processor_op_EX_set
    __swig_getmethods__["op_EX"] = _mupdf.pdf_processor_op_EX_get
    if _newclass:
        op_EX = _swig_property(_mupdf.pdf_processor_op_EX_get, _mupdf.pdf_processor_op_EX_set)
    __swig_setmethods__["op_gs_OP"] = _mupdf.pdf_processor_op_gs_OP_set
    __swig_getmethods__["op_gs_OP"] = _mupdf.pdf_processor_op_gs_OP_get
    if _newclass:
        op_gs_OP = _swig_property(_mupdf.pdf_processor_op_gs_OP_get, _mupdf.pdf_processor_op_gs_OP_set)
    __swig_setmethods__["op_gs_op"] = _mupdf.pdf_processor_op_gs_op_set
    __swig_getmethods__["op_gs_op"] = _mupdf.pdf_processor_op_gs_op_get
    if _newclass:
        op_gs_op = _swig_property(_mupdf.pdf_processor_op_gs_op_get, _mupdf.pdf_processor_op_gs_op_set)
    __swig_setmethods__["op_gs_OPM"] = _mupdf.pdf_processor_op_gs_OPM_set
    __swig_getmethods__["op_gs_OPM"] = _mupdf.pdf_processor_op_gs_OPM_get
    if _newclass:
        op_gs_OPM = _swig_property(_mupdf.pdf_processor_op_gs_OPM_get, _mupdf.pdf_processor_op_gs_OPM_set)
    __swig_setmethods__["op_gs_UseBlackPtComp"] = _mupdf.pdf_processor_op_gs_UseBlackPtComp_set
    __swig_getmethods__["op_gs_UseBlackPtComp"] = _mupdf.pdf_processor_op_gs_UseBlackPtComp_get
    if _newclass:
        op_gs_UseBlackPtComp = _swig_property(_mupdf.pdf_processor_op_gs_UseBlackPtComp_get, _mupdf.pdf_processor_op_gs_UseBlackPtComp_set)
    __swig_setmethods__["op_END"] = _mupdf.pdf_processor_op_END_set
    __swig_getmethods__["op_END"] = _mupdf.pdf_processor_op_END_get
    if _newclass:
        op_END = _swig_property(_mupdf.pdf_processor_op_END_get, _mupdf.pdf_processor_op_END_set)
    __swig_setmethods__["usage"] = _mupdf.pdf_processor_usage_set
    __swig_getmethods__["usage"] = _mupdf.pdf_processor_usage_get
    if _newclass:
        usage = _swig_property(_mupdf.pdf_processor_usage_get, _mupdf.pdf_processor_usage_set)
    __swig_setmethods__["hidden"] = _mupdf.pdf_processor_hidden_set
    __swig_getmethods__["hidden"] = _mupdf.pdf_processor_hidden_get
    if _newclass:
        hidden = _swig_property(_mupdf.pdf_processor_hidden_get, _mupdf.pdf_processor_hidden_set)

    def __init__(self):
        """__init__(pdf_processor self) -> pdf_processor"""
        this = _mupdf.new_pdf_processor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_processor
    __del__ = lambda self: None
pdf_processor_swigregister = _mupdf.pdf_processor_swigregister
pdf_processor_swigregister(pdf_processor)

class pdf_csi(_object):
    """Proxy of C++ pdf_csi class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_csi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_csi, name)
    __repr__ = _swig_repr
    __swig_setmethods__["doc"] = _mupdf.pdf_csi_doc_set
    __swig_getmethods__["doc"] = _mupdf.pdf_csi_doc_get
    if _newclass:
        doc = _swig_property(_mupdf.pdf_csi_doc_get, _mupdf.pdf_csi_doc_set)
    __swig_setmethods__["rdb"] = _mupdf.pdf_csi_rdb_set
    __swig_getmethods__["rdb"] = _mupdf.pdf_csi_rdb_get
    if _newclass:
        rdb = _swig_property(_mupdf.pdf_csi_rdb_get, _mupdf.pdf_csi_rdb_set)
    __swig_setmethods__["buf"] = _mupdf.pdf_csi_buf_set
    __swig_getmethods__["buf"] = _mupdf.pdf_csi_buf_get
    if _newclass:
        buf = _swig_property(_mupdf.pdf_csi_buf_get, _mupdf.pdf_csi_buf_set)
    __swig_setmethods__["cookie"] = _mupdf.pdf_csi_cookie_set
    __swig_getmethods__["cookie"] = _mupdf.pdf_csi_cookie_get
    if _newclass:
        cookie = _swig_property(_mupdf.pdf_csi_cookie_get, _mupdf.pdf_csi_cookie_set)
    __swig_setmethods__["gstate"] = _mupdf.pdf_csi_gstate_set
    __swig_getmethods__["gstate"] = _mupdf.pdf_csi_gstate_get
    if _newclass:
        gstate = _swig_property(_mupdf.pdf_csi_gstate_get, _mupdf.pdf_csi_gstate_set)
    __swig_setmethods__["xbalance"] = _mupdf.pdf_csi_xbalance_set
    __swig_getmethods__["xbalance"] = _mupdf.pdf_csi_xbalance_get
    if _newclass:
        xbalance = _swig_property(_mupdf.pdf_csi_xbalance_get, _mupdf.pdf_csi_xbalance_set)
    __swig_setmethods__["in_text"] = _mupdf.pdf_csi_in_text_set
    __swig_getmethods__["in_text"] = _mupdf.pdf_csi_in_text_get
    if _newclass:
        in_text = _swig_property(_mupdf.pdf_csi_in_text_get, _mupdf.pdf_csi_in_text_set)
    __swig_setmethods__["d1_rect"] = _mupdf.pdf_csi_d1_rect_set
    __swig_getmethods__["d1_rect"] = _mupdf.pdf_csi_d1_rect_get
    if _newclass:
        d1_rect = _swig_property(_mupdf.pdf_csi_d1_rect_get, _mupdf.pdf_csi_d1_rect_set)
    __swig_setmethods__["obj"] = _mupdf.pdf_csi_obj_set
    __swig_getmethods__["obj"] = _mupdf.pdf_csi_obj_get
    if _newclass:
        obj = _swig_property(_mupdf.pdf_csi_obj_get, _mupdf.pdf_csi_obj_set)
    __swig_setmethods__["name"] = _mupdf.pdf_csi_name_set
    __swig_getmethods__["name"] = _mupdf.pdf_csi_name_get
    if _newclass:
        name = _swig_property(_mupdf.pdf_csi_name_get, _mupdf.pdf_csi_name_set)
    __swig_setmethods__["string"] = _mupdf.pdf_csi_string_set
    __swig_getmethods__["string"] = _mupdf.pdf_csi_string_get
    if _newclass:
        string = _swig_property(_mupdf.pdf_csi_string_get, _mupdf.pdf_csi_string_set)
    __swig_setmethods__["string_len"] = _mupdf.pdf_csi_string_len_set
    __swig_getmethods__["string_len"] = _mupdf.pdf_csi_string_len_get
    if _newclass:
        string_len = _swig_property(_mupdf.pdf_csi_string_len_get, _mupdf.pdf_csi_string_len_set)
    __swig_setmethods__["top"] = _mupdf.pdf_csi_top_set
    __swig_getmethods__["top"] = _mupdf.pdf_csi_top_get
    if _newclass:
        top = _swig_property(_mupdf.pdf_csi_top_get, _mupdf.pdf_csi_top_set)
    __swig_setmethods__["stack"] = _mupdf.pdf_csi_stack_set
    __swig_getmethods__["stack"] = _mupdf.pdf_csi_stack_get
    if _newclass:
        stack = _swig_property(_mupdf.pdf_csi_stack_get, _mupdf.pdf_csi_stack_set)

    def __init__(self):
        """__init__(pdf_csi self) -> pdf_csi"""
        this = _mupdf.new_pdf_csi()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_csi
    __del__ = lambda self: None
pdf_csi_swigregister = _mupdf.pdf_csi_swigregister
pdf_csi_swigregister(pdf_csi)

class pdf_filter_options(_object):
    """Proxy of C++ pdf_filter_options class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_filter_options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_filter_options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opaque"] = _mupdf.pdf_filter_options_opaque_set
    __swig_getmethods__["opaque"] = _mupdf.pdf_filter_options_opaque_get
    if _newclass:
        opaque = _swig_property(_mupdf.pdf_filter_options_opaque_get, _mupdf.pdf_filter_options_opaque_set)
    __swig_setmethods__["image_filter"] = _mupdf.pdf_filter_options_image_filter_set
    __swig_getmethods__["image_filter"] = _mupdf.pdf_filter_options_image_filter_get
    if _newclass:
        image_filter = _swig_property(_mupdf.pdf_filter_options_image_filter_get, _mupdf.pdf_filter_options_image_filter_set)
    __swig_setmethods__["text_filter"] = _mupdf.pdf_filter_options_text_filter_set
    __swig_getmethods__["text_filter"] = _mupdf.pdf_filter_options_text_filter_get
    if _newclass:
        text_filter = _swig_property(_mupdf.pdf_filter_options_text_filter_get, _mupdf.pdf_filter_options_text_filter_set)
    __swig_setmethods__["after_text_object"] = _mupdf.pdf_filter_options_after_text_object_set
    __swig_getmethods__["after_text_object"] = _mupdf.pdf_filter_options_after_text_object_get
    if _newclass:
        after_text_object = _swig_property(_mupdf.pdf_filter_options_after_text_object_get, _mupdf.pdf_filter_options_after_text_object_set)
    __swig_setmethods__["end_page"] = _mupdf.pdf_filter_options_end_page_set
    __swig_getmethods__["end_page"] = _mupdf.pdf_filter_options_end_page_get
    if _newclass:
        end_page = _swig_property(_mupdf.pdf_filter_options_end_page_get, _mupdf.pdf_filter_options_end_page_set)
    __swig_setmethods__["recurse"] = _mupdf.pdf_filter_options_recurse_set
    __swig_getmethods__["recurse"] = _mupdf.pdf_filter_options_recurse_get
    if _newclass:
        recurse = _swig_property(_mupdf.pdf_filter_options_recurse_get, _mupdf.pdf_filter_options_recurse_set)
    __swig_setmethods__["instance_forms"] = _mupdf.pdf_filter_options_instance_forms_set
    __swig_getmethods__["instance_forms"] = _mupdf.pdf_filter_options_instance_forms_get
    if _newclass:
        instance_forms = _swig_property(_mupdf.pdf_filter_options_instance_forms_get, _mupdf.pdf_filter_options_instance_forms_set)
    __swig_setmethods__["sanitize"] = _mupdf.pdf_filter_options_sanitize_set
    __swig_getmethods__["sanitize"] = _mupdf.pdf_filter_options_sanitize_get
    if _newclass:
        sanitize = _swig_property(_mupdf.pdf_filter_options_sanitize_get, _mupdf.pdf_filter_options_sanitize_set)
    __swig_setmethods__["ascii"] = _mupdf.pdf_filter_options_ascii_set
    __swig_getmethods__["ascii"] = _mupdf.pdf_filter_options_ascii_get
    if _newclass:
        ascii = _swig_property(_mupdf.pdf_filter_options_ascii_get, _mupdf.pdf_filter_options_ascii_set)

    def __init__(self):
        """__init__(pdf_filter_options self) -> pdf_filter_options"""
        this = _mupdf.new_pdf_filter_options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_filter_options
    __del__ = lambda self: None
pdf_filter_options_swigregister = _mupdf.pdf_filter_options_swigregister
pdf_filter_options_swigregister(pdf_filter_options)

class pdf_text_state(_object):
    """Proxy of C++ pdf_text_state class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_text_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_text_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["char_space"] = _mupdf.pdf_text_state_char_space_set
    __swig_getmethods__["char_space"] = _mupdf.pdf_text_state_char_space_get
    if _newclass:
        char_space = _swig_property(_mupdf.pdf_text_state_char_space_get, _mupdf.pdf_text_state_char_space_set)
    __swig_setmethods__["word_space"] = _mupdf.pdf_text_state_word_space_set
    __swig_getmethods__["word_space"] = _mupdf.pdf_text_state_word_space_get
    if _newclass:
        word_space = _swig_property(_mupdf.pdf_text_state_word_space_get, _mupdf.pdf_text_state_word_space_set)
    __swig_setmethods__["scale"] = _mupdf.pdf_text_state_scale_set
    __swig_getmethods__["scale"] = _mupdf.pdf_text_state_scale_get
    if _newclass:
        scale = _swig_property(_mupdf.pdf_text_state_scale_get, _mupdf.pdf_text_state_scale_set)
    __swig_setmethods__["leading"] = _mupdf.pdf_text_state_leading_set
    __swig_getmethods__["leading"] = _mupdf.pdf_text_state_leading_get
    if _newclass:
        leading = _swig_property(_mupdf.pdf_text_state_leading_get, _mupdf.pdf_text_state_leading_set)
    __swig_setmethods__["font"] = _mupdf.pdf_text_state_font_set
    __swig_getmethods__["font"] = _mupdf.pdf_text_state_font_get
    if _newclass:
        font = _swig_property(_mupdf.pdf_text_state_font_get, _mupdf.pdf_text_state_font_set)
    __swig_setmethods__["size"] = _mupdf.pdf_text_state_size_set
    __swig_getmethods__["size"] = _mupdf.pdf_text_state_size_get
    if _newclass:
        size = _swig_property(_mupdf.pdf_text_state_size_get, _mupdf.pdf_text_state_size_set)
    __swig_setmethods__["render"] = _mupdf.pdf_text_state_render_set
    __swig_getmethods__["render"] = _mupdf.pdf_text_state_render_get
    if _newclass:
        render = _swig_property(_mupdf.pdf_text_state_render_get, _mupdf.pdf_text_state_render_set)
    __swig_setmethods__["rise"] = _mupdf.pdf_text_state_rise_set
    __swig_getmethods__["rise"] = _mupdf.pdf_text_state_rise_get
    if _newclass:
        rise = _swig_property(_mupdf.pdf_text_state_rise_get, _mupdf.pdf_text_state_rise_set)

    def __init__(self):
        """__init__(pdf_text_state self) -> pdf_text_state"""
        this = _mupdf.new_pdf_text_state()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_text_state
    __del__ = lambda self: None
pdf_text_state_swigregister = _mupdf.pdf_text_state_swigregister
pdf_text_state_swigregister(pdf_text_state)

class pdf_text_object_state(_object):
    """Proxy of C++ pdf_text_object_state class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_text_object_state, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_text_object_state, name)
    __repr__ = _swig_repr
    __swig_setmethods__["text"] = _mupdf.pdf_text_object_state_text_set
    __swig_getmethods__["text"] = _mupdf.pdf_text_object_state_text_get
    if _newclass:
        text = _swig_property(_mupdf.pdf_text_object_state_text_get, _mupdf.pdf_text_object_state_text_set)
    __swig_setmethods__["text_bbox"] = _mupdf.pdf_text_object_state_text_bbox_set
    __swig_getmethods__["text_bbox"] = _mupdf.pdf_text_object_state_text_bbox_get
    if _newclass:
        text_bbox = _swig_property(_mupdf.pdf_text_object_state_text_bbox_get, _mupdf.pdf_text_object_state_text_bbox_set)
    __swig_setmethods__["tlm"] = _mupdf.pdf_text_object_state_tlm_set
    __swig_getmethods__["tlm"] = _mupdf.pdf_text_object_state_tlm_get
    if _newclass:
        tlm = _swig_property(_mupdf.pdf_text_object_state_tlm_get, _mupdf.pdf_text_object_state_tlm_set)
    __swig_setmethods__["tm"] = _mupdf.pdf_text_object_state_tm_set
    __swig_getmethods__["tm"] = _mupdf.pdf_text_object_state_tm_get
    if _newclass:
        tm = _swig_property(_mupdf.pdf_text_object_state_tm_get, _mupdf.pdf_text_object_state_tm_set)
    __swig_setmethods__["text_mode"] = _mupdf.pdf_text_object_state_text_mode_set
    __swig_getmethods__["text_mode"] = _mupdf.pdf_text_object_state_text_mode_get
    if _newclass:
        text_mode = _swig_property(_mupdf.pdf_text_object_state_text_mode_get, _mupdf.pdf_text_object_state_text_mode_set)
    __swig_setmethods__["cid"] = _mupdf.pdf_text_object_state_cid_set
    __swig_getmethods__["cid"] = _mupdf.pdf_text_object_state_cid_get
    if _newclass:
        cid = _swig_property(_mupdf.pdf_text_object_state_cid_get, _mupdf.pdf_text_object_state_cid_set)
    __swig_setmethods__["gid"] = _mupdf.pdf_text_object_state_gid_set
    __swig_getmethods__["gid"] = _mupdf.pdf_text_object_state_gid_get
    if _newclass:
        gid = _swig_property(_mupdf.pdf_text_object_state_gid_get, _mupdf.pdf_text_object_state_gid_set)
    __swig_setmethods__["char_bbox"] = _mupdf.pdf_text_object_state_char_bbox_set
    __swig_getmethods__["char_bbox"] = _mupdf.pdf_text_object_state_char_bbox_get
    if _newclass:
        char_bbox = _swig_property(_mupdf.pdf_text_object_state_char_bbox_get, _mupdf.pdf_text_object_state_char_bbox_set)
    __swig_setmethods__["fontdesc"] = _mupdf.pdf_text_object_state_fontdesc_set
    __swig_getmethods__["fontdesc"] = _mupdf.pdf_text_object_state_fontdesc_get
    if _newclass:
        fontdesc = _swig_property(_mupdf.pdf_text_object_state_fontdesc_get, _mupdf.pdf_text_object_state_fontdesc_set)
    __swig_setmethods__["char_tx"] = _mupdf.pdf_text_object_state_char_tx_set
    __swig_getmethods__["char_tx"] = _mupdf.pdf_text_object_state_char_tx_get
    if _newclass:
        char_tx = _swig_property(_mupdf.pdf_text_object_state_char_tx_get, _mupdf.pdf_text_object_state_char_tx_set)
    __swig_setmethods__["char_ty"] = _mupdf.pdf_text_object_state_char_ty_set
    __swig_getmethods__["char_ty"] = _mupdf.pdf_text_object_state_char_ty_get
    if _newclass:
        char_ty = _swig_property(_mupdf.pdf_text_object_state_char_ty_get, _mupdf.pdf_text_object_state_char_ty_set)

    def __init__(self):
        """__init__(pdf_text_object_state self) -> pdf_text_object_state"""
        this = _mupdf.new_pdf_text_object_state()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_text_object_state
    __del__ = lambda self: None
pdf_text_object_state_swigregister = _mupdf.pdf_text_object_state_swigregister
pdf_text_object_state_swigregister(pdf_text_object_state)

PDF_REDACT_IMAGE_NONE = _mupdf.PDF_REDACT_IMAGE_NONE
PDF_REDACT_IMAGE_REMOVE = _mupdf.PDF_REDACT_IMAGE_REMOVE
PDF_REDACT_IMAGE_PIXELS = _mupdf.PDF_REDACT_IMAGE_PIXELS
class pdf_redact_options(_object):
    """Proxy of C++ pdf_redact_options class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_redact_options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_redact_options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["black_boxes"] = _mupdf.pdf_redact_options_black_boxes_set
    __swig_getmethods__["black_boxes"] = _mupdf.pdf_redact_options_black_boxes_get
    if _newclass:
        black_boxes = _swig_property(_mupdf.pdf_redact_options_black_boxes_get, _mupdf.pdf_redact_options_black_boxes_set)
    __swig_setmethods__["image_method"] = _mupdf.pdf_redact_options_image_method_set
    __swig_getmethods__["image_method"] = _mupdf.pdf_redact_options_image_method_get
    if _newclass:
        image_method = _swig_property(_mupdf.pdf_redact_options_image_method_get, _mupdf.pdf_redact_options_image_method_set)

    def __init__(self):
        """__init__(pdf_redact_options self) -> pdf_redact_options"""
        this = _mupdf.new_pdf_redact_options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_redact_options
    __del__ = lambda self: None
pdf_redact_options_swigregister = _mupdf.pdf_redact_options_swigregister
pdf_redact_options_swigregister(pdf_redact_options)

class pdf_page(_object):
    """Proxy of C++ pdf_page class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_page, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_page, name)
    __repr__ = _swig_repr
    __swig_setmethods__["super"] = _mupdf.pdf_page_super_set
    __swig_getmethods__["super"] = _mupdf.pdf_page_super_get
    if _newclass:
        super = _swig_property(_mupdf.pdf_page_super_get, _mupdf.pdf_page_super_set)
    __swig_setmethods__["doc"] = _mupdf.pdf_page_doc_set
    __swig_getmethods__["doc"] = _mupdf.pdf_page_doc_get
    if _newclass:
        doc = _swig_property(_mupdf.pdf_page_doc_get, _mupdf.pdf_page_doc_set)
    __swig_setmethods__["obj"] = _mupdf.pdf_page_obj_set
    __swig_getmethods__["obj"] = _mupdf.pdf_page_obj_get
    if _newclass:
        obj = _swig_property(_mupdf.pdf_page_obj_get, _mupdf.pdf_page_obj_set)
    __swig_setmethods__["transparency"] = _mupdf.pdf_page_transparency_set
    __swig_getmethods__["transparency"] = _mupdf.pdf_page_transparency_get
    if _newclass:
        transparency = _swig_property(_mupdf.pdf_page_transparency_get, _mupdf.pdf_page_transparency_set)
    __swig_setmethods__["overprint"] = _mupdf.pdf_page_overprint_set
    __swig_getmethods__["overprint"] = _mupdf.pdf_page_overprint_get
    if _newclass:
        overprint = _swig_property(_mupdf.pdf_page_overprint_get, _mupdf.pdf_page_overprint_set)
    __swig_setmethods__["links"] = _mupdf.pdf_page_links_set
    __swig_getmethods__["links"] = _mupdf.pdf_page_links_get
    if _newclass:
        links = _swig_property(_mupdf.pdf_page_links_get, _mupdf.pdf_page_links_set)
    __swig_setmethods__["annots"] = _mupdf.pdf_page_annots_set
    __swig_getmethods__["annots"] = _mupdf.pdf_page_annots_get
    if _newclass:
        annots = _swig_property(_mupdf.pdf_page_annots_get, _mupdf.pdf_page_annots_set)
    __swig_setmethods__["annot_tailp"] = _mupdf.pdf_page_annot_tailp_set
    __swig_getmethods__["annot_tailp"] = _mupdf.pdf_page_annot_tailp_get
    if _newclass:
        annot_tailp = _swig_property(_mupdf.pdf_page_annot_tailp_get, _mupdf.pdf_page_annot_tailp_set)
    __swig_setmethods__["widgets"] = _mupdf.pdf_page_widgets_set
    __swig_getmethods__["widgets"] = _mupdf.pdf_page_widgets_get
    if _newclass:
        widgets = _swig_property(_mupdf.pdf_page_widgets_get, _mupdf.pdf_page_widgets_set)
    __swig_setmethods__["widget_tailp"] = _mupdf.pdf_page_widget_tailp_set
    __swig_getmethods__["widget_tailp"] = _mupdf.pdf_page_widget_tailp_get
    if _newclass:
        widget_tailp = _swig_property(_mupdf.pdf_page_widget_tailp_get, _mupdf.pdf_page_widget_tailp_set)

    def __init__(self):
        """__init__(pdf_page self) -> pdf_page"""
        this = _mupdf.new_pdf_page()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_page
    __del__ = lambda self: None
pdf_page_swigregister = _mupdf.pdf_page_swigregister
pdf_page_swigregister(pdf_page)

PDF_ANNOT_IS_INVISIBLE = _mupdf.PDF_ANNOT_IS_INVISIBLE
PDF_ANNOT_IS_HIDDEN = _mupdf.PDF_ANNOT_IS_HIDDEN
PDF_ANNOT_IS_PRINT = _mupdf.PDF_ANNOT_IS_PRINT
PDF_ANNOT_IS_NO_ZOOM = _mupdf.PDF_ANNOT_IS_NO_ZOOM
PDF_ANNOT_IS_NO_ROTATE = _mupdf.PDF_ANNOT_IS_NO_ROTATE
PDF_ANNOT_IS_NO_VIEW = _mupdf.PDF_ANNOT_IS_NO_VIEW
PDF_ANNOT_IS_READ_ONLY = _mupdf.PDF_ANNOT_IS_READ_ONLY
PDF_ANNOT_IS_LOCKED = _mupdf.PDF_ANNOT_IS_LOCKED
PDF_ANNOT_IS_TOGGLE_NO_VIEW = _mupdf.PDF_ANNOT_IS_TOGGLE_NO_VIEW
PDF_ANNOT_IS_LOCKED_CONTENTS = _mupdf.PDF_ANNOT_IS_LOCKED_CONTENTS
PDF_ANNOT_LE_NONE = _mupdf.PDF_ANNOT_LE_NONE
PDF_ANNOT_LE_SQUARE = _mupdf.PDF_ANNOT_LE_SQUARE
PDF_ANNOT_LE_CIRCLE = _mupdf.PDF_ANNOT_LE_CIRCLE
PDF_ANNOT_LE_DIAMOND = _mupdf.PDF_ANNOT_LE_DIAMOND
PDF_ANNOT_LE_OPEN_ARROW = _mupdf.PDF_ANNOT_LE_OPEN_ARROW
PDF_ANNOT_LE_CLOSED_ARROW = _mupdf.PDF_ANNOT_LE_CLOSED_ARROW
PDF_ANNOT_LE_BUTT = _mupdf.PDF_ANNOT_LE_BUTT
PDF_ANNOT_LE_R_OPEN_ARROW = _mupdf.PDF_ANNOT_LE_R_OPEN_ARROW
PDF_ANNOT_LE_R_CLOSED_ARROW = _mupdf.PDF_ANNOT_LE_R_CLOSED_ARROW
PDF_ANNOT_LE_SLASH = _mupdf.PDF_ANNOT_LE_SLASH
PDF_ANNOT_Q_LEFT = _mupdf.PDF_ANNOT_Q_LEFT
PDF_ANNOT_Q_CENTER = _mupdf.PDF_ANNOT_Q_CENTER
PDF_ANNOT_Q_RIGHT = _mupdf.PDF_ANNOT_Q_RIGHT
PDF_WIDGET_TX_FORMAT_NONE = _mupdf.PDF_WIDGET_TX_FORMAT_NONE
PDF_WIDGET_TX_FORMAT_NUMBER = _mupdf.PDF_WIDGET_TX_FORMAT_NUMBER
PDF_WIDGET_TX_FORMAT_SPECIAL = _mupdf.PDF_WIDGET_TX_FORMAT_SPECIAL
PDF_WIDGET_TX_FORMAT_DATE = _mupdf.PDF_WIDGET_TX_FORMAT_DATE
PDF_WIDGET_TX_FORMAT_TIME = _mupdf.PDF_WIDGET_TX_FORMAT_TIME
PDF_FIELD_IS_READ_ONLY = _mupdf.PDF_FIELD_IS_READ_ONLY
PDF_FIELD_IS_REQUIRED = _mupdf.PDF_FIELD_IS_REQUIRED
PDF_FIELD_IS_NO_EXPORT = _mupdf.PDF_FIELD_IS_NO_EXPORT
PDF_TX_FIELD_IS_MULTILINE = _mupdf.PDF_TX_FIELD_IS_MULTILINE
PDF_TX_FIELD_IS_PASSWORD = _mupdf.PDF_TX_FIELD_IS_PASSWORD
PDF_TX_FIELD_IS_FILE_SELECT = _mupdf.PDF_TX_FIELD_IS_FILE_SELECT
PDF_TX_FIELD_IS_DO_NOT_SPELL_CHECK = _mupdf.PDF_TX_FIELD_IS_DO_NOT_SPELL_CHECK
PDF_TX_FIELD_IS_DO_NOT_SCROLL = _mupdf.PDF_TX_FIELD_IS_DO_NOT_SCROLL
PDF_TX_FIELD_IS_COMB = _mupdf.PDF_TX_FIELD_IS_COMB
PDF_TX_FIELD_IS_RICH_TEXT = _mupdf.PDF_TX_FIELD_IS_RICH_TEXT
PDF_BTN_FIELD_IS_NO_TOGGLE_TO_OFF = _mupdf.PDF_BTN_FIELD_IS_NO_TOGGLE_TO_OFF
PDF_BTN_FIELD_IS_RADIO = _mupdf.PDF_BTN_FIELD_IS_RADIO
PDF_BTN_FIELD_IS_PUSHBUTTON = _mupdf.PDF_BTN_FIELD_IS_PUSHBUTTON
PDF_BTN_FIELD_IS_RADIOS_IN_UNISON = _mupdf.PDF_BTN_FIELD_IS_RADIOS_IN_UNISON
PDF_CH_FIELD_IS_COMBO = _mupdf.PDF_CH_FIELD_IS_COMBO
PDF_CH_FIELD_IS_EDIT = _mupdf.PDF_CH_FIELD_IS_EDIT
PDF_CH_FIELD_IS_SORT = _mupdf.PDF_CH_FIELD_IS_SORT
PDF_CH_FIELD_IS_MULTI_SELECT = _mupdf.PDF_CH_FIELD_IS_MULTI_SELECT
PDF_CH_FIELD_IS_DO_NOT_SPELL_CHECK = _mupdf.PDF_CH_FIELD_IS_DO_NOT_SPELL_CHECK
PDF_CH_FIELD_IS_COMMIT_ON_SEL_CHANGE = _mupdf.PDF_CH_FIELD_IS_COMMIT_ON_SEL_CHANGE
class pdf_pkcs7_distinguished_name(_object):
    """Proxy of C++ pdf_pkcs7_distinguished_name class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_pkcs7_distinguished_name, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_pkcs7_distinguished_name, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cn"] = _mupdf.pdf_pkcs7_distinguished_name_cn_set
    __swig_getmethods__["cn"] = _mupdf.pdf_pkcs7_distinguished_name_cn_get
    if _newclass:
        cn = _swig_property(_mupdf.pdf_pkcs7_distinguished_name_cn_get, _mupdf.pdf_pkcs7_distinguished_name_cn_set)
    __swig_setmethods__["o"] = _mupdf.pdf_pkcs7_distinguished_name_o_set
    __swig_getmethods__["o"] = _mupdf.pdf_pkcs7_distinguished_name_o_get
    if _newclass:
        o = _swig_property(_mupdf.pdf_pkcs7_distinguished_name_o_get, _mupdf.pdf_pkcs7_distinguished_name_o_set)
    __swig_setmethods__["ou"] = _mupdf.pdf_pkcs7_distinguished_name_ou_set
    __swig_getmethods__["ou"] = _mupdf.pdf_pkcs7_distinguished_name_ou_get
    if _newclass:
        ou = _swig_property(_mupdf.pdf_pkcs7_distinguished_name_ou_get, _mupdf.pdf_pkcs7_distinguished_name_ou_set)
    __swig_setmethods__["email"] = _mupdf.pdf_pkcs7_distinguished_name_email_set
    __swig_getmethods__["email"] = _mupdf.pdf_pkcs7_distinguished_name_email_get
    if _newclass:
        email = _swig_property(_mupdf.pdf_pkcs7_distinguished_name_email_get, _mupdf.pdf_pkcs7_distinguished_name_email_set)
    __swig_setmethods__["c"] = _mupdf.pdf_pkcs7_distinguished_name_c_set
    __swig_getmethods__["c"] = _mupdf.pdf_pkcs7_distinguished_name_c_get
    if _newclass:
        c = _swig_property(_mupdf.pdf_pkcs7_distinguished_name_c_get, _mupdf.pdf_pkcs7_distinguished_name_c_set)

    def __init__(self):
        """__init__(pdf_pkcs7_distinguished_name self) -> pdf_pkcs7_distinguished_name"""
        this = _mupdf.new_pdf_pkcs7_distinguished_name()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_pkcs7_distinguished_name
    __del__ = lambda self: None
pdf_pkcs7_distinguished_name_swigregister = _mupdf.pdf_pkcs7_distinguished_name_swigregister
pdf_pkcs7_distinguished_name_swigregister(pdf_pkcs7_distinguished_name)

PDF_SIGNATURE_ERROR_OKAY = _mupdf.PDF_SIGNATURE_ERROR_OKAY
PDF_SIGNATURE_ERROR_NO_SIGNATURES = _mupdf.PDF_SIGNATURE_ERROR_NO_SIGNATURES
PDF_SIGNATURE_ERROR_NO_CERTIFICATE = _mupdf.PDF_SIGNATURE_ERROR_NO_CERTIFICATE
PDF_SIGNATURE_ERROR_DIGEST_FAILURE = _mupdf.PDF_SIGNATURE_ERROR_DIGEST_FAILURE
PDF_SIGNATURE_ERROR_SELF_SIGNED = _mupdf.PDF_SIGNATURE_ERROR_SELF_SIGNED
PDF_SIGNATURE_ERROR_SELF_SIGNED_IN_CHAIN = _mupdf.PDF_SIGNATURE_ERROR_SELF_SIGNED_IN_CHAIN
PDF_SIGNATURE_ERROR_NOT_TRUSTED = _mupdf.PDF_SIGNATURE_ERROR_NOT_TRUSTED
PDF_SIGNATURE_ERROR_UNKNOWN = _mupdf.PDF_SIGNATURE_ERROR_UNKNOWN
class pdf_pkcs7_signer(_object):
    """Proxy of C++ pdf_pkcs7_signer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_pkcs7_signer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_pkcs7_signer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["keep"] = _mupdf.pdf_pkcs7_signer_keep_set
    __swig_getmethods__["keep"] = _mupdf.pdf_pkcs7_signer_keep_get
    if _newclass:
        keep = _swig_property(_mupdf.pdf_pkcs7_signer_keep_get, _mupdf.pdf_pkcs7_signer_keep_set)
    __swig_setmethods__["drop"] = _mupdf.pdf_pkcs7_signer_drop_set
    __swig_getmethods__["drop"] = _mupdf.pdf_pkcs7_signer_drop_get
    if _newclass:
        drop = _swig_property(_mupdf.pdf_pkcs7_signer_drop_get, _mupdf.pdf_pkcs7_signer_drop_set)
    __swig_setmethods__["get_signing_name"] = _mupdf.pdf_pkcs7_signer_get_signing_name_set
    __swig_getmethods__["get_signing_name"] = _mupdf.pdf_pkcs7_signer_get_signing_name_get
    if _newclass:
        get_signing_name = _swig_property(_mupdf.pdf_pkcs7_signer_get_signing_name_get, _mupdf.pdf_pkcs7_signer_get_signing_name_set)
    __swig_setmethods__["max_digest_size"] = _mupdf.pdf_pkcs7_signer_max_digest_size_set
    __swig_getmethods__["max_digest_size"] = _mupdf.pdf_pkcs7_signer_max_digest_size_get
    if _newclass:
        max_digest_size = _swig_property(_mupdf.pdf_pkcs7_signer_max_digest_size_get, _mupdf.pdf_pkcs7_signer_max_digest_size_set)
    __swig_setmethods__["create_digest"] = _mupdf.pdf_pkcs7_signer_create_digest_set
    __swig_getmethods__["create_digest"] = _mupdf.pdf_pkcs7_signer_create_digest_get
    if _newclass:
        create_digest = _swig_property(_mupdf.pdf_pkcs7_signer_create_digest_get, _mupdf.pdf_pkcs7_signer_create_digest_set)

    def __init__(self):
        """__init__(pdf_pkcs7_signer self) -> pdf_pkcs7_signer"""
        this = _mupdf.new_pdf_pkcs7_signer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_pkcs7_signer
    __del__ = lambda self: None
pdf_pkcs7_signer_swigregister = _mupdf.pdf_pkcs7_signer_swigregister
pdf_pkcs7_signer_swigregister(pdf_pkcs7_signer)

class pdf_pkcs7_verifier(_object):
    """Proxy of C++ pdf_pkcs7_verifier class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_pkcs7_verifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_pkcs7_verifier, name)
    __repr__ = _swig_repr
    __swig_setmethods__["drop"] = _mupdf.pdf_pkcs7_verifier_drop_set
    __swig_getmethods__["drop"] = _mupdf.pdf_pkcs7_verifier_drop_get
    if _newclass:
        drop = _swig_property(_mupdf.pdf_pkcs7_verifier_drop_get, _mupdf.pdf_pkcs7_verifier_drop_set)
    __swig_setmethods__["check_certificate"] = _mupdf.pdf_pkcs7_verifier_check_certificate_set
    __swig_getmethods__["check_certificate"] = _mupdf.pdf_pkcs7_verifier_check_certificate_get
    if _newclass:
        check_certificate = _swig_property(_mupdf.pdf_pkcs7_verifier_check_certificate_get, _mupdf.pdf_pkcs7_verifier_check_certificate_set)
    __swig_setmethods__["check_digest"] = _mupdf.pdf_pkcs7_verifier_check_digest_set
    __swig_getmethods__["check_digest"] = _mupdf.pdf_pkcs7_verifier_check_digest_get
    if _newclass:
        check_digest = _swig_property(_mupdf.pdf_pkcs7_verifier_check_digest_get, _mupdf.pdf_pkcs7_verifier_check_digest_set)
    __swig_setmethods__["get_signatory"] = _mupdf.pdf_pkcs7_verifier_get_signatory_set
    __swig_getmethods__["get_signatory"] = _mupdf.pdf_pkcs7_verifier_get_signatory_get
    if _newclass:
        get_signatory = _swig_property(_mupdf.pdf_pkcs7_verifier_get_signatory_get, _mupdf.pdf_pkcs7_verifier_get_signatory_set)

    def __init__(self):
        """__init__(pdf_pkcs7_verifier self) -> pdf_pkcs7_verifier"""
        this = _mupdf.new_pdf_pkcs7_verifier()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_pkcs7_verifier
    __del__ = lambda self: None
pdf_pkcs7_verifier_swigregister = _mupdf.pdf_pkcs7_verifier_swigregister
pdf_pkcs7_verifier_swigregister(pdf_pkcs7_verifier)

PDF_SIGNATURE_SHOW_LABELS = _mupdf.PDF_SIGNATURE_SHOW_LABELS
PDF_SIGNATURE_SHOW_DN = _mupdf.PDF_SIGNATURE_SHOW_DN
PDF_SIGNATURE_SHOW_DATE = _mupdf.PDF_SIGNATURE_SHOW_DATE
PDF_SIGNATURE_SHOW_TEXT_NAME = _mupdf.PDF_SIGNATURE_SHOW_TEXT_NAME
PDF_SIGNATURE_SHOW_GRAPHIC_NAME = _mupdf.PDF_SIGNATURE_SHOW_GRAPHIC_NAME
PDF_SIGNATURE_SHOW_LOGO = _mupdf.PDF_SIGNATURE_SHOW_LOGO
class pdf_keystroke_event(_object):
    """Proxy of C++ pdf_keystroke_event class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_keystroke_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_keystroke_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _mupdf.pdf_keystroke_event_value_set
    __swig_getmethods__["value"] = _mupdf.pdf_keystroke_event_value_get
    if _newclass:
        value = _swig_property(_mupdf.pdf_keystroke_event_value_get, _mupdf.pdf_keystroke_event_value_set)
    __swig_setmethods__["change"] = _mupdf.pdf_keystroke_event_change_set
    __swig_getmethods__["change"] = _mupdf.pdf_keystroke_event_change_get
    if _newclass:
        change = _swig_property(_mupdf.pdf_keystroke_event_change_get, _mupdf.pdf_keystroke_event_change_set)
    __swig_setmethods__["selStart"] = _mupdf.pdf_keystroke_event_selStart_set
    __swig_getmethods__["selStart"] = _mupdf.pdf_keystroke_event_selStart_get
    if _newclass:
        selStart = _swig_property(_mupdf.pdf_keystroke_event_selStart_get, _mupdf.pdf_keystroke_event_selStart_set)
    __swig_setmethods__["selEnd"] = _mupdf.pdf_keystroke_event_selEnd_set
    __swig_getmethods__["selEnd"] = _mupdf.pdf_keystroke_event_selEnd_get
    if _newclass:
        selEnd = _swig_property(_mupdf.pdf_keystroke_event_selEnd_get, _mupdf.pdf_keystroke_event_selEnd_set)
    __swig_setmethods__["willCommit"] = _mupdf.pdf_keystroke_event_willCommit_set
    __swig_getmethods__["willCommit"] = _mupdf.pdf_keystroke_event_willCommit_get
    if _newclass:
        willCommit = _swig_property(_mupdf.pdf_keystroke_event_willCommit_get, _mupdf.pdf_keystroke_event_willCommit_set)
    __swig_setmethods__["newChange"] = _mupdf.pdf_keystroke_event_newChange_set
    __swig_getmethods__["newChange"] = _mupdf.pdf_keystroke_event_newChange_get
    if _newclass:
        newChange = _swig_property(_mupdf.pdf_keystroke_event_newChange_get, _mupdf.pdf_keystroke_event_newChange_set)
    __swig_setmethods__["newValue"] = _mupdf.pdf_keystroke_event_newValue_set
    __swig_getmethods__["newValue"] = _mupdf.pdf_keystroke_event_newValue_get
    if _newclass:
        newValue = _swig_property(_mupdf.pdf_keystroke_event_newValue_get, _mupdf.pdf_keystroke_event_newValue_set)

    def __init__(self):
        """__init__(pdf_keystroke_event self) -> pdf_keystroke_event"""
        this = _mupdf.new_pdf_keystroke_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_keystroke_event
    __del__ = lambda self: None
pdf_keystroke_event_swigregister = _mupdf.pdf_keystroke_event_swigregister
pdf_keystroke_event_swigregister(pdf_keystroke_event)

class pdf_doc_event(_object):
    """Proxy of C++ pdf_doc_event class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_doc_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_doc_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _mupdf.pdf_doc_event_type_set
    __swig_getmethods__["type"] = _mupdf.pdf_doc_event_type_get
    if _newclass:
        type = _swig_property(_mupdf.pdf_doc_event_type_get, _mupdf.pdf_doc_event_type_set)

    def __init__(self):
        """__init__(pdf_doc_event self) -> pdf_doc_event"""
        this = _mupdf.new_pdf_doc_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_doc_event
    __del__ = lambda self: None
pdf_doc_event_swigregister = _mupdf.pdf_doc_event_swigregister
pdf_doc_event_swigregister(pdf_doc_event)

PDF_DOCUMENT_EVENT_ALERT = _mupdf.PDF_DOCUMENT_EVENT_ALERT
PDF_DOCUMENT_EVENT_PRINT = _mupdf.PDF_DOCUMENT_EVENT_PRINT
PDF_DOCUMENT_EVENT_LAUNCH_URL = _mupdf.PDF_DOCUMENT_EVENT_LAUNCH_URL
PDF_DOCUMENT_EVENT_MAIL_DOC = _mupdf.PDF_DOCUMENT_EVENT_MAIL_DOC
PDF_DOCUMENT_EVENT_SUBMIT = _mupdf.PDF_DOCUMENT_EVENT_SUBMIT
PDF_DOCUMENT_EVENT_EXEC_MENU_ITEM = _mupdf.PDF_DOCUMENT_EVENT_EXEC_MENU_ITEM
class pdf_alert_event(_object):
    """Proxy of C++ pdf_alert_event class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_alert_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_alert_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["message"] = _mupdf.pdf_alert_event_message_set
    __swig_getmethods__["message"] = _mupdf.pdf_alert_event_message_get
    if _newclass:
        message = _swig_property(_mupdf.pdf_alert_event_message_get, _mupdf.pdf_alert_event_message_set)
    __swig_setmethods__["icon_type"] = _mupdf.pdf_alert_event_icon_type_set
    __swig_getmethods__["icon_type"] = _mupdf.pdf_alert_event_icon_type_get
    if _newclass:
        icon_type = _swig_property(_mupdf.pdf_alert_event_icon_type_get, _mupdf.pdf_alert_event_icon_type_set)
    __swig_setmethods__["button_group_type"] = _mupdf.pdf_alert_event_button_group_type_set
    __swig_getmethods__["button_group_type"] = _mupdf.pdf_alert_event_button_group_type_get
    if _newclass:
        button_group_type = _swig_property(_mupdf.pdf_alert_event_button_group_type_get, _mupdf.pdf_alert_event_button_group_type_set)
    __swig_setmethods__["title"] = _mupdf.pdf_alert_event_title_set
    __swig_getmethods__["title"] = _mupdf.pdf_alert_event_title_get
    if _newclass:
        title = _swig_property(_mupdf.pdf_alert_event_title_get, _mupdf.pdf_alert_event_title_set)
    __swig_setmethods__["check_box_message"] = _mupdf.pdf_alert_event_check_box_message_set
    __swig_getmethods__["check_box_message"] = _mupdf.pdf_alert_event_check_box_message_get
    if _newclass:
        check_box_message = _swig_property(_mupdf.pdf_alert_event_check_box_message_get, _mupdf.pdf_alert_event_check_box_message_set)
    __swig_setmethods__["initially_checked"] = _mupdf.pdf_alert_event_initially_checked_set
    __swig_getmethods__["initially_checked"] = _mupdf.pdf_alert_event_initially_checked_get
    if _newclass:
        initially_checked = _swig_property(_mupdf.pdf_alert_event_initially_checked_get, _mupdf.pdf_alert_event_initially_checked_set)
    __swig_setmethods__["finally_checked"] = _mupdf.pdf_alert_event_finally_checked_set
    __swig_getmethods__["finally_checked"] = _mupdf.pdf_alert_event_finally_checked_get
    if _newclass:
        finally_checked = _swig_property(_mupdf.pdf_alert_event_finally_checked_get, _mupdf.pdf_alert_event_finally_checked_set)
    __swig_setmethods__["button_pressed"] = _mupdf.pdf_alert_event_button_pressed_set
    __swig_getmethods__["button_pressed"] = _mupdf.pdf_alert_event_button_pressed_get
    if _newclass:
        button_pressed = _swig_property(_mupdf.pdf_alert_event_button_pressed_get, _mupdf.pdf_alert_event_button_pressed_set)

    def __init__(self):
        """__init__(pdf_alert_event self) -> pdf_alert_event"""
        this = _mupdf.new_pdf_alert_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_alert_event
    __del__ = lambda self: None
pdf_alert_event_swigregister = _mupdf.pdf_alert_event_swigregister
pdf_alert_event_swigregister(pdf_alert_event)

PDF_ALERT_ICON_ERROR = _mupdf.PDF_ALERT_ICON_ERROR
PDF_ALERT_ICON_WARNING = _mupdf.PDF_ALERT_ICON_WARNING
PDF_ALERT_ICON_QUESTION = _mupdf.PDF_ALERT_ICON_QUESTION
PDF_ALERT_ICON_STATUS = _mupdf.PDF_ALERT_ICON_STATUS
PDF_ALERT_BUTTON_GROUP_OK = _mupdf.PDF_ALERT_BUTTON_GROUP_OK
PDF_ALERT_BUTTON_GROUP_OK_CANCEL = _mupdf.PDF_ALERT_BUTTON_GROUP_OK_CANCEL
PDF_ALERT_BUTTON_GROUP_YES_NO = _mupdf.PDF_ALERT_BUTTON_GROUP_YES_NO
PDF_ALERT_BUTTON_GROUP_YES_NO_CANCEL = _mupdf.PDF_ALERT_BUTTON_GROUP_YES_NO_CANCEL
PDF_ALERT_BUTTON_NONE = _mupdf.PDF_ALERT_BUTTON_NONE
PDF_ALERT_BUTTON_OK = _mupdf.PDF_ALERT_BUTTON_OK
PDF_ALERT_BUTTON_CANCEL = _mupdf.PDF_ALERT_BUTTON_CANCEL
PDF_ALERT_BUTTON_NO = _mupdf.PDF_ALERT_BUTTON_NO
PDF_ALERT_BUTTON_YES = _mupdf.PDF_ALERT_BUTTON_YES
class pdf_launch_url_event(_object):
    """Proxy of C++ pdf_launch_url_event class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_launch_url_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_launch_url_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["url"] = _mupdf.pdf_launch_url_event_url_set
    __swig_getmethods__["url"] = _mupdf.pdf_launch_url_event_url_get
    if _newclass:
        url = _swig_property(_mupdf.pdf_launch_url_event_url_get, _mupdf.pdf_launch_url_event_url_set)
    __swig_setmethods__["new_frame"] = _mupdf.pdf_launch_url_event_new_frame_set
    __swig_getmethods__["new_frame"] = _mupdf.pdf_launch_url_event_new_frame_get
    if _newclass:
        new_frame = _swig_property(_mupdf.pdf_launch_url_event_new_frame_get, _mupdf.pdf_launch_url_event_new_frame_set)

    def __init__(self):
        """__init__(pdf_launch_url_event self) -> pdf_launch_url_event"""
        this = _mupdf.new_pdf_launch_url_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_launch_url_event
    __del__ = lambda self: None
pdf_launch_url_event_swigregister = _mupdf.pdf_launch_url_event_swigregister
pdf_launch_url_event_swigregister(pdf_launch_url_event)

class pdf_mail_doc_event(_object):
    """Proxy of C++ pdf_mail_doc_event class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdf_mail_doc_event, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdf_mail_doc_event, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ask_user"] = _mupdf.pdf_mail_doc_event_ask_user_set
    __swig_getmethods__["ask_user"] = _mupdf.pdf_mail_doc_event_ask_user_get
    if _newclass:
        ask_user = _swig_property(_mupdf.pdf_mail_doc_event_ask_user_get, _mupdf.pdf_mail_doc_event_ask_user_set)
    __swig_setmethods__["to"] = _mupdf.pdf_mail_doc_event_to_set
    __swig_getmethods__["to"] = _mupdf.pdf_mail_doc_event_to_get
    if _newclass:
        to = _swig_property(_mupdf.pdf_mail_doc_event_to_get, _mupdf.pdf_mail_doc_event_to_set)
    __swig_setmethods__["cc"] = _mupdf.pdf_mail_doc_event_cc_set
    __swig_getmethods__["cc"] = _mupdf.pdf_mail_doc_event_cc_get
    if _newclass:
        cc = _swig_property(_mupdf.pdf_mail_doc_event_cc_get, _mupdf.pdf_mail_doc_event_cc_set)
    __swig_setmethods__["bcc"] = _mupdf.pdf_mail_doc_event_bcc_set
    __swig_getmethods__["bcc"] = _mupdf.pdf_mail_doc_event_bcc_get
    if _newclass:
        bcc = _swig_property(_mupdf.pdf_mail_doc_event_bcc_get, _mupdf.pdf_mail_doc_event_bcc_set)
    __swig_setmethods__["subject"] = _mupdf.pdf_mail_doc_event_subject_set
    __swig_getmethods__["subject"] = _mupdf.pdf_mail_doc_event_subject_get
    if _newclass:
        subject = _swig_property(_mupdf.pdf_mail_doc_event_subject_get, _mupdf.pdf_mail_doc_event_subject_set)
    __swig_setmethods__["message"] = _mupdf.pdf_mail_doc_event_message_set
    __swig_getmethods__["message"] = _mupdf.pdf_mail_doc_event_message_get
    if _newclass:
        message = _swig_property(_mupdf.pdf_mail_doc_event_message_get, _mupdf.pdf_mail_doc_event_message_set)

    def __init__(self):
        """__init__(pdf_mail_doc_event self) -> pdf_mail_doc_event"""
        this = _mupdf.new_pdf_mail_doc_event()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_pdf_mail_doc_event
    __del__ = lambda self: None
pdf_mail_doc_event_swigregister = _mupdf.pdf_mail_doc_event_swigregister
pdf_mail_doc_event_swigregister(pdf_mail_doc_event)


def aa_level():
    """aa_level() -> int"""
    return _mupdf.aa_level()

def absi(i):
    """
    absi(int i) -> int

    Parameters
    ----------
    i: int

    """
    return _mupdf.absi(i)

def add_layout_char(block, x, w, p):
    """
    add_layout_char(fz_layout_block block, float x, float w, char const * p)

    Parameters
    ----------
    block: fz_layout_block *
    x: float
    w: float
    p: char const *

    """
    return _mupdf.add_layout_char(block, x, w, p)

def add_layout_line(block, x, y, h, p):
    """
    add_layout_line(fz_layout_block block, float x, float y, float h, char const * p)

    Parameters
    ----------
    block: fz_layout_block *
    x: float
    y: float
    h: float
    p: char const *

    """
    return _mupdf.add_layout_line(block, x, y, h, p)

def add_separation(sep, name, cs, cs_channel):
    """
    add_separation(fz_separations * sep, char const * name, fz_colorspace * cs, int cs_channel)

    Parameters
    ----------
    sep: fz_separations *
    name: char const *
    cs: fz_colorspace *
    cs_channel: int

    """
    return _mupdf.add_separation(sep, name, cs, cs_channel)

def add_separation_equivalents(sep, rgba, cmyk, name):
    """
    add_separation_equivalents(fz_separations * sep, uint32_t rgba, uint32_t cmyk, char const * name)

    Parameters
    ----------
    sep: fz_separations *
    rgba: uint32_t
    cmyk: uint32_t
    name: char const *

    """
    return _mupdf.add_separation_equivalents(sep, rgba, cmyk, name)

def adjust_rect_for_stroke(rect, stroke, ctm):
    """
    adjust_rect_for_stroke(fz_rect rect, fz_stroke_state stroke, fz_matrix ctm) -> fz_rect

    Parameters
    ----------
    rect: fz_rect
    stroke: fz_stroke_state const *
    ctm: fz_matrix

    """
    return _mupdf.adjust_rect_for_stroke(rect, stroke, ctm)

def advance_glyph(font, glyph, wmode):
    """
    advance_glyph(fz_font * font, int glyph, int wmode) -> float

    Parameters
    ----------
    font: fz_font *
    glyph: int
    wmode: int

    """
    return _mupdf.advance_glyph(font, glyph, wmode)

def aes_crypt_cbc(ctx, mode, length, iv, input, output):
    """
    aes_crypt_cbc(fz_aes ctx, int mode, size_t length, unsigned char [16] iv, unsigned char const * input, unsigned char * output)

    Parameters
    ----------
    ctx: fz_aes *
    mode: int
    length: size_t
    iv: unsigned char [16]
    input: unsigned char const *
    output: unsigned char *

    """
    return _mupdf.aes_crypt_cbc(ctx, mode, length, iv, input, output)

def aes_setkey_dec(ctx, key, keysize):
    """
    aes_setkey_dec(fz_aes ctx, unsigned char const * key, int keysize) -> int

    Parameters
    ----------
    ctx: fz_aes *
    key: unsigned char const *
    keysize: int

    """
    return _mupdf.aes_setkey_dec(ctx, key, keysize)

def aes_setkey_enc(ctx, key, keysize):
    """
    aes_setkey_enc(fz_aes ctx, unsigned char const * key, int keysize) -> int

    Parameters
    ----------
    ctx: fz_aes *
    key: unsigned char const *
    keysize: int

    """
    return _mupdf.aes_setkey_enc(ctx, key, keysize)

def alpha_from_gray(gray):
    """
    alpha_from_gray(fz_pixmap * gray) -> fz_pixmap *

    Parameters
    ----------
    gray: fz_pixmap *

    """
    return _mupdf.alpha_from_gray(gray)

def append_bits(buf, value, count):
    """
    append_bits(fz_buffer buf, int value, int count)

    Parameters
    ----------
    buf: fz_buffer *
    value: int
    count: int

    """
    return _mupdf.append_bits(buf, value, count)

def append_bits_pad(buf):
    """
    append_bits_pad(fz_buffer buf)

    Parameters
    ----------
    buf: fz_buffer *

    """
    return _mupdf.append_bits_pad(buf)

def append_buffer(destination, source):
    """
    append_buffer(fz_buffer destination, fz_buffer source)

    Parameters
    ----------
    destination: fz_buffer *
    source: fz_buffer *

    """
    return _mupdf.append_buffer(destination, source)

def append_byte(buf, c):
    """
    append_byte(fz_buffer buf, int c)

    Parameters
    ----------
    buf: fz_buffer *
    c: int

    """
    return _mupdf.append_byte(buf, c)

def append_data(buf, data, len):
    """
    append_data(fz_buffer buf, void const * data, size_t len)

    Parameters
    ----------
    buf: fz_buffer *
    data: void const *
    len: size_t

    """
    return _mupdf.append_data(buf, data, len)

def append_int16_be(buf, x):
    """
    append_int16_be(fz_buffer buf, int x)

    Parameters
    ----------
    buf: fz_buffer *
    x: int

    """
    return _mupdf.append_int16_be(buf, x)

def append_int16_le(buf, x):
    """
    append_int16_le(fz_buffer buf, int x)

    Parameters
    ----------
    buf: fz_buffer *
    x: int

    """
    return _mupdf.append_int16_le(buf, x)

def append_int32_be(buf, x):
    """
    append_int32_be(fz_buffer buf, int x)

    Parameters
    ----------
    buf: fz_buffer *
    x: int

    """
    return _mupdf.append_int32_be(buf, x)

def append_int32_le(buf, x):
    """
    append_int32_le(fz_buffer buf, int x)

    Parameters
    ----------
    buf: fz_buffer *
    x: int

    """
    return _mupdf.append_int32_le(buf, x)

def append_pdf_string(buffer, text):
    """
    append_pdf_string(fz_buffer buffer, char const * text)

    Parameters
    ----------
    buffer: fz_buffer *
    text: char const *

    """
    return _mupdf.append_pdf_string(buffer, text)

def append_rune(buf, c):
    """
    append_rune(fz_buffer buf, int c)

    Parameters
    ----------
    buf: fz_buffer *
    c: int

    """
    return _mupdf.append_rune(buf, c)

def append_string(buf, data):
    """
    append_string(fz_buffer buf, char const * data)

    Parameters
    ----------
    buf: fz_buffer *
    data: char const *

    """
    return _mupdf.append_string(buf, data)

def arc4_encrypt(state, dest, src, len):
    """
    arc4_encrypt(fz_arc4 state, unsigned char * dest, unsigned char const * src, size_t len)

    Parameters
    ----------
    state: fz_arc4 *
    dest: unsigned char *
    src: unsigned char const *
    len: size_t

    """
    return _mupdf.arc4_encrypt(state, dest, src, len)

def arc4_init(state, key, len):
    """
    arc4_init(fz_arc4 state, unsigned char const * key, size_t len)

    Parameters
    ----------
    state: fz_arc4 *
    key: unsigned char const *
    len: size_t

    """
    return _mupdf.arc4_init(state, key, len)

def archive_format(arch):
    """
    archive_format(fz_archive * arch) -> char const *

    Parameters
    ----------
    arch: fz_archive *

    """
    return _mupdf.archive_format(arch)

def atoi64(s):
    """
    atoi64(char const * s) -> int64_t

    Parameters
    ----------
    s: char const *

    """
    return _mupdf.atoi64(s)

def authenticate_password(doc, password):
    """
    authenticate_password(fz_document * doc, char const * password) -> int

    Parameters
    ----------
    doc: fz_document *
    password: char const *

    """
    return _mupdf.authenticate_password(doc, password)

def available(stm, max):
    """
    available(fz_stream * stm, size_t max) -> size_t

    Parameters
    ----------
    stm: fz_stream *
    max: size_t

    """
    return _mupdf.available(stm, max)

def begin_group(dev, area, cs, isolated, knockout, blendmode, alpha):
    """
    begin_group(fz_device * dev, fz_rect area, fz_colorspace * cs, int isolated, int knockout, int blendmode, float alpha)

    Parameters
    ----------
    dev: fz_device *
    area: fz_rect
    cs: fz_colorspace *
    isolated: int
    knockout: int
    blendmode: int
    alpha: float

    """
    return _mupdf.begin_group(dev, area, cs, isolated, knockout, blendmode, alpha)

def begin_layer(dev, layer_name):
    """
    begin_layer(fz_device * dev, char const * layer_name)

    Parameters
    ----------
    dev: fz_device *
    layer_name: char const *

    """
    return _mupdf.begin_layer(dev, layer_name)

def begin_mask(dev, area, luminosity, colorspace, bc, color_params):
    """
    begin_mask(fz_device * dev, fz_rect area, int luminosity, fz_colorspace * colorspace, float const * bc, fz_color_params color_params)

    Parameters
    ----------
    dev: fz_device *
    area: fz_rect
    luminosity: int
    colorspace: fz_colorspace *
    bc: float const *
    color_params: fz_color_params

    """
    return _mupdf.begin_mask(dev, area, luminosity, colorspace, bc, color_params)

def begin_page(wri, mediabox):
    """
    begin_page(fz_document_writer * wri, fz_rect mediabox) -> fz_device *

    Parameters
    ----------
    wri: fz_document_writer *
    mediabox: fz_rect

    """
    return _mupdf.begin_page(wri, mediabox)

def begin_tile(dev, area, view, xstep, ystep, ctm):
    """
    begin_tile(fz_device * dev, fz_rect area, fz_rect view, float xstep, float ystep, fz_matrix ctm)

    Parameters
    ----------
    dev: fz_device *
    area: fz_rect
    view: fz_rect
    xstep: float
    ystep: float
    ctm: fz_matrix

    """
    return _mupdf.begin_tile(dev, area, view, xstep, ystep, ctm)

def begin_tile_id(dev, area, view, xstep, ystep, ctm, id):
    """
    begin_tile_id(fz_device * dev, fz_rect area, fz_rect view, float xstep, float ystep, fz_matrix ctm, int id) -> int

    Parameters
    ----------
    dev: fz_device *
    area: fz_rect
    view: fz_rect
    xstep: float
    ystep: float
    ctm: fz_matrix
    id: int

    """
    return _mupdf.begin_tile_id(dev, area, view, xstep, ystep, ctm, id)

def bidi_fragment_text(text, textlen, baseDir, callback, arg, flags):
    """
    bidi_fragment_text(uint32_t const * text, size_t textlen, fz_bidi_direction * baseDir, fz_bidi_fragment_fn * callback, void * arg, int flags)

    Parameters
    ----------
    text: uint32_t const *
    textlen: size_t
    baseDir: fz_bidi_direction *
    callback: fz_bidi_fragment_fn *
    arg: void *
    flags: int

    """
    return _mupdf.bidi_fragment_text(text, textlen, baseDir, callback, arg, flags)

def bitmap_details(bitmap, w, h, n, stride):
    """
    bitmap_details(fz_bitmap bitmap, int * w, int * h, int * n, int * stride)

    Parameters
    ----------
    bitmap: fz_bitmap *
    w: int *
    h: int *
    n: int *
    stride: int *

    """
    return _mupdf.bitmap_details(bitmap, w, h, n, stride)

def blendmode_name(blendmode):
    """
    blendmode_name(int blendmode) -> char const *

    Parameters
    ----------
    blendmode: int

    """
    return _mupdf.blendmode_name(blendmode)

def bound_display_list(list):
    """
    bound_display_list(fz_display_list * list) -> fz_rect

    Parameters
    ----------
    list: fz_display_list *

    """
    return _mupdf.bound_display_list(list)

def bound_glyph(font, gid, trm):
    """
    bound_glyph(fz_font * font, int gid, fz_matrix trm) -> fz_rect

    Parameters
    ----------
    font: fz_font *
    gid: int
    trm: fz_matrix

    """
    return _mupdf.bound_glyph(font, gid, trm)

def bound_page(page):
    """
    bound_page(fz_page * page) -> fz_rect

    Parameters
    ----------
    page: fz_page *

    """
    return _mupdf.bound_page(page)

def bound_path(path, stroke, ctm):
    """
    bound_path(fz_path const * path, fz_stroke_state stroke, fz_matrix ctm) -> fz_rect

    Parameters
    ----------
    path: fz_path const *
    stroke: fz_stroke_state const *
    ctm: fz_matrix

    """
    return _mupdf.bound_path(path, stroke, ctm)

def bound_shade(shade, ctm):
    """
    bound_shade(fz_shade shade, fz_matrix ctm) -> fz_rect

    Parameters
    ----------
    shade: fz_shade *
    ctm: fz_matrix

    """
    return _mupdf.bound_shade(shade, ctm)

def bound_text(text, stroke, ctm):
    """
    bound_text(fz_text text, fz_stroke_state stroke, fz_matrix ctm) -> fz_rect

    Parameters
    ----------
    text: fz_text const *
    stroke: fz_stroke_state const *
    ctm: fz_matrix

    """
    return _mupdf.bound_text(text, stroke, ctm)

def buffer_extract(buf, data):
    """
    buffer_extract(fz_buffer buf, unsigned char ** data) -> size_t

    Parameters
    ----------
    buf: fz_buffer *
    data: unsigned char **

    """
    return _mupdf.buffer_extract(buf, data)

def buffer_storage(buf, datap):
    """
    buffer_storage(fz_buffer buf, unsigned char ** datap) -> size_t

    Parameters
    ----------
    buf: fz_buffer *
    datap: unsigned char **

    """
    return _mupdf.buffer_storage(buf, datap)

def calloc_no_throw(count, size):
    """
    calloc_no_throw(size_t count, size_t size) -> void *

    Parameters
    ----------
    count: size_t
    size: size_t

    """
    return _mupdf.calloc_no_throw(count, size)

def caught():
    """caught() -> int"""
    return _mupdf.caught()

def caught_message():
    """caught_message() -> char const *"""
    return _mupdf.caught_message()

def chartorune(rune, str):
    """
    chartorune(int * rune, char const * str) -> int

    Parameters
    ----------
    rune: int *
    str: char const *

    """
    return _mupdf.chartorune(rune, str)

def clamp(f, min, max):
    """
    clamp(float f, float min, float max) -> float

    Parameters
    ----------
    f: float
    min: float
    max: float

    """
    return _mupdf.clamp(f, min, max)

def clamp_color(cs, arg2, out):
    """
    clamp_color(fz_colorspace * cs, float const * arg2, float * out)

    Parameters
    ----------
    cs: fz_colorspace *
    in: float const *
    out: float *

    """
    return _mupdf.clamp_color(cs, arg2, out)

def clamp_location(doc, loc):
    """
    clamp_location(fz_document * doc, fz_location loc) -> fz_location

    Parameters
    ----------
    doc: fz_document *
    loc: fz_location

    """
    return _mupdf.clamp_location(doc, loc)

def clampd(d, min, max):
    """
    clampd(double d, double min, double max) -> double

    Parameters
    ----------
    d: double
    min: double
    max: double

    """
    return _mupdf.clampd(d, min, max)

def clampi(i, min, max):
    """
    clampi(int i, int min, int max) -> int

    Parameters
    ----------
    i: int
    min: int
    max: int

    """
    return _mupdf.clampi(i, min, max)

def clampp(p, min, max):
    """
    clampp(void * p, void * min, void * max) -> void *

    Parameters
    ----------
    p: void *
    min: void *
    max: void *

    """
    return _mupdf.clampp(p, min, max)

def cleanname(name):
    """
    cleanname(char * name) -> char *

    Parameters
    ----------
    name: char *

    """
    return _mupdf.cleanname(name)

def clear_bitmap(bit):
    """
    clear_bitmap(fz_bitmap bit)

    Parameters
    ----------
    bit: fz_bitmap *

    """
    return _mupdf.clear_bitmap(bit)

def clear_buffer(buf):
    """
    clear_buffer(fz_buffer buf)

    Parameters
    ----------
    buf: fz_buffer *

    """
    return _mupdf.clear_buffer(buf)

def clear_pixmap(pix):
    """
    clear_pixmap(fz_pixmap * pix)

    Parameters
    ----------
    pix: fz_pixmap *

    """
    return _mupdf.clear_pixmap(pix)

def clear_pixmap_rect_with_value(pix, value, r):
    """
    clear_pixmap_rect_with_value(fz_pixmap * pix, int value, fz_irect r)

    Parameters
    ----------
    pix: fz_pixmap *
    value: int
    r: fz_irect

    """
    return _mupdf.clear_pixmap_rect_with_value(pix, value, r)

def clear_pixmap_with_value(pix, value):
    """
    clear_pixmap_with_value(fz_pixmap * pix, int value)

    Parameters
    ----------
    pix: fz_pixmap *
    value: int

    """
    return _mupdf.clear_pixmap_with_value(pix, value)

def clip_image_mask(dev, image, ctm, scissor):
    """
    clip_image_mask(fz_device * dev, fz_image * image, fz_matrix ctm, fz_rect scissor)

    Parameters
    ----------
    dev: fz_device *
    image: fz_image *
    ctm: fz_matrix
    scissor: fz_rect

    """
    return _mupdf.clip_image_mask(dev, image, ctm, scissor)

def clip_path(dev, path, even_odd, ctm, scissor):
    """
    clip_path(fz_device * dev, fz_path const * path, int even_odd, fz_matrix ctm, fz_rect scissor)

    Parameters
    ----------
    dev: fz_device *
    path: fz_path const *
    even_odd: int
    ctm: fz_matrix
    scissor: fz_rect

    """
    return _mupdf.clip_path(dev, path, even_odd, ctm, scissor)

def clip_stroke_path(dev, path, stroke, ctm, scissor):
    """
    clip_stroke_path(fz_device * dev, fz_path const * path, fz_stroke_state stroke, fz_matrix ctm, fz_rect scissor)

    Parameters
    ----------
    dev: fz_device *
    path: fz_path const *
    stroke: fz_stroke_state const *
    ctm: fz_matrix
    scissor: fz_rect

    """
    return _mupdf.clip_stroke_path(dev, path, stroke, ctm, scissor)

def clip_stroke_text(dev, text, stroke, ctm, scissor):
    """
    clip_stroke_text(fz_device * dev, fz_text text, fz_stroke_state stroke, fz_matrix ctm, fz_rect scissor)

    Parameters
    ----------
    dev: fz_device *
    text: fz_text const *
    stroke: fz_stroke_state const *
    ctm: fz_matrix
    scissor: fz_rect

    """
    return _mupdf.clip_stroke_text(dev, text, stroke, ctm, scissor)

def clip_text(dev, text, ctm, scissor):
    """
    clip_text(fz_device * dev, fz_text text, fz_matrix ctm, fz_rect scissor)

    Parameters
    ----------
    dev: fz_device *
    text: fz_text const *
    ctm: fz_matrix
    scissor: fz_rect

    """
    return _mupdf.clip_text(dev, text, ctm, scissor)

def clone_context():
    """clone_context() -> fz_context *"""
    return _mupdf.clone_context()

def clone_default_colorspaces(base):
    """
    clone_default_colorspaces(fz_default_colorspaces base) -> fz_default_colorspaces

    Parameters
    ----------
    base: fz_default_colorspaces *

    """
    return _mupdf.clone_default_colorspaces(base)

def clone_path(path):
    """
    clone_path(fz_path * path) -> fz_path *

    Parameters
    ----------
    path: fz_path *

    """
    return _mupdf.clone_path(path)

def clone_pixmap(old):
    """
    clone_pixmap(fz_pixmap const * old) -> fz_pixmap *

    Parameters
    ----------
    old: fz_pixmap const *

    """
    return _mupdf.clone_pixmap(old)

def clone_pixmap_area_with_different_seps(src, bbox, dcs, seps, color_params, default_cs):
    """
    clone_pixmap_area_with_different_seps(fz_pixmap * src, fz_irect bbox, fz_colorspace * dcs, fz_separations * seps, fz_color_params color_params, fz_default_colorspaces default_cs) -> fz_pixmap *

    Parameters
    ----------
    src: fz_pixmap *
    bbox: fz_irect const *
    dcs: fz_colorspace *
    seps: fz_separations *
    color_params: fz_color_params
    default_cs: fz_default_colorspaces *

    """
    return _mupdf.clone_pixmap_area_with_different_seps(src, bbox, dcs, seps, color_params, default_cs)

def clone_separations_for_overprint(seps):
    """
    clone_separations_for_overprint(fz_separations * seps) -> fz_separations *

    Parameters
    ----------
    seps: fz_separations *

    """
    return _mupdf.clone_separations_for_overprint(seps)

def clone_stroke_state(stroke):
    """
    clone_stroke_state(fz_stroke_state stroke) -> fz_stroke_state

    Parameters
    ----------
    stroke: fz_stroke_state *

    """
    return _mupdf.clone_stroke_state(stroke)

def close_band_writer(writer):
    """
    close_band_writer(fz_band_writer * writer)

    Parameters
    ----------
    writer: fz_band_writer *

    """
    return _mupdf.close_band_writer(writer)

def close_device(dev):
    """
    close_device(fz_device * dev)

    Parameters
    ----------
    dev: fz_device *

    """
    return _mupdf.close_device(dev)

def close_document_writer(wri):
    """
    close_document_writer(fz_document_writer * wri)

    Parameters
    ----------
    wri: fz_document_writer *

    """
    return _mupdf.close_document_writer(wri)

def close_output(arg_1):
    """
    close_output(fz_output * arg_1)

    Parameters
    ----------
    arg_1: fz_output *

    """
    return _mupdf.close_output(arg_1)

def close_zip_writer(zip):
    """
    close_zip_writer(fz_zip_writer * zip)

    Parameters
    ----------
    zip: fz_zip_writer *

    """
    return _mupdf.close_zip_writer(zip)

def closepath(path):
    """
    closepath(fz_path * path)

    Parameters
    ----------
    path: fz_path *

    """
    return _mupdf.closepath(path)

def colorspace_colorant(cs, n):
    """
    colorspace_colorant(fz_colorspace * cs, int n) -> char const *

    Parameters
    ----------
    cs: fz_colorspace *
    n: int

    """
    return _mupdf.colorspace_colorant(cs, n)

def colorspace_device_n_has_cmyk(cs):
    """
    colorspace_device_n_has_cmyk(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_device_n_has_cmyk(cs)

def colorspace_device_n_has_only_cmyk(cs):
    """
    colorspace_device_n_has_only_cmyk(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_device_n_has_only_cmyk(cs)

def colorspace_is_cmyk(cs):
    """
    colorspace_is_cmyk(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_is_cmyk(cs)

def colorspace_is_device(cs):
    """
    colorspace_is_device(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_is_device(cs)

def colorspace_is_device_cmyk(cs):
    """
    colorspace_is_device_cmyk(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_is_device_cmyk(cs)

def colorspace_is_device_gray(cs):
    """
    colorspace_is_device_gray(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_is_device_gray(cs)

def colorspace_is_device_n(cs):
    """
    colorspace_is_device_n(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_is_device_n(cs)

def colorspace_is_gray(cs):
    """
    colorspace_is_gray(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_is_gray(cs)

def colorspace_is_indexed(cs):
    """
    colorspace_is_indexed(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_is_indexed(cs)

def colorspace_is_lab(cs):
    """
    colorspace_is_lab(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_is_lab(cs)

def colorspace_is_lab_icc(cs):
    """
    colorspace_is_lab_icc(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_is_lab_icc(cs)

def colorspace_is_rgb(cs):
    """
    colorspace_is_rgb(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_is_rgb(cs)

def colorspace_is_subtractive(cs):
    """
    colorspace_is_subtractive(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_is_subtractive(cs)

def colorspace_n(cs):
    """
    colorspace_n(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_n(cs)

def colorspace_name(cs):
    """
    colorspace_name(fz_colorspace * cs) -> char const *

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_name(cs)

def colorspace_name_colorant(cs, n, name):
    """
    colorspace_name_colorant(fz_colorspace * cs, int n, char const * name)

    Parameters
    ----------
    cs: fz_colorspace *
    n: int
    name: char const *

    """
    return _mupdf.colorspace_name_colorant(cs, n, name)

def colorspace_type(cs):
    """
    colorspace_type(fz_colorspace * cs) -> enum fz_colorspace_type

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.colorspace_type(cs)

def compress_ccitt_fax_g3(data, columns, rows):
    """
    compress_ccitt_fax_g3(unsigned char const * data, int columns, int rows) -> fz_buffer

    Parameters
    ----------
    data: unsigned char const *
    columns: int
    rows: int

    """
    return _mupdf.compress_ccitt_fax_g3(data, columns, rows)

def compress_ccitt_fax_g4(data, columns, rows):
    """
    compress_ccitt_fax_g4(unsigned char const * data, int columns, int rows) -> fz_buffer

    Parameters
    ----------
    data: unsigned char const *
    columns: int
    rows: int

    """
    return _mupdf.compress_ccitt_fax_g4(data, columns, rows)

def compressed_buffer_size(buffer):
    """
    compressed_buffer_size(fz_compressed_buffer buffer) -> size_t

    Parameters
    ----------
    buffer: fz_compressed_buffer *

    """
    return _mupdf.compressed_buffer_size(buffer)

def compressed_image_buffer(image):
    """
    compressed_image_buffer(fz_image * image) -> fz_compressed_buffer

    Parameters
    ----------
    image: fz_image *

    """
    return _mupdf.compressed_image_buffer(image)

def concat(left, right):
    """
    concat(fz_matrix left, fz_matrix right) -> fz_matrix

    Parameters
    ----------
    left: fz_matrix
    right: fz_matrix

    """
    return _mupdf.concat(left, right)

def concat_push_drop(concat, chain):
    """
    concat_push_drop(fz_stream * concat, fz_stream * chain)

    Parameters
    ----------
    concat: fz_stream *
    chain: fz_stream *

    """
    return _mupdf.concat_push_drop(concat, chain)

def contains_rect(a, b):
    """
    contains_rect(fz_rect a, fz_rect b) -> int

    Parameters
    ----------
    a: fz_rect
    b: fz_rect

    """
    return _mupdf.contains_rect(a, b)

def convert_color(ss, sv, ds, dv, arg5, params):
    """
    convert_color(fz_colorspace * ss, float const * sv, fz_colorspace * ds, float * dv, fz_colorspace * arg5, fz_color_params params)

    Parameters
    ----------
    ss: fz_colorspace *
    sv: float const *
    ds: fz_colorspace *
    dv: float *
    is: fz_colorspace *
    params: fz_color_params

    """
    return _mupdf.convert_color(ss, sv, ds, dv, arg5, params)

def convert_indexed_pixmap_to_base(src):
    """
    convert_indexed_pixmap_to_base(fz_pixmap const * src) -> fz_pixmap *

    Parameters
    ----------
    src: fz_pixmap const *

    """
    return _mupdf.convert_indexed_pixmap_to_base(src)

def convert_pixmap(pix, cs_des, prf, default_cs, color_params, keep_alpha):
    """
    convert_pixmap(fz_pixmap const * pix, fz_colorspace * cs_des, fz_colorspace * prf, fz_default_colorspaces default_cs, fz_color_params color_params, int keep_alpha) -> fz_pixmap *

    Parameters
    ----------
    pix: fz_pixmap const *
    cs_des: fz_colorspace *
    prf: fz_colorspace *
    default_cs: fz_default_colorspaces *
    color_params: fz_color_params
    keep_alpha: int

    """
    return _mupdf.convert_pixmap(pix, cs_des, prf, default_cs, color_params, keep_alpha)

def convert_separation_colors(src_cs, src_color, dst_seps, dst_cs, dst_color, color_params):
    """
    convert_separation_colors(fz_colorspace * src_cs, float const * src_color, fz_separations * dst_seps, fz_colorspace * dst_cs, float * dst_color, fz_color_params color_params)

    Parameters
    ----------
    src_cs: fz_colorspace *
    src_color: float const *
    dst_seps: fz_separations *
    dst_cs: fz_colorspace *
    dst_color: float *
    color_params: fz_color_params

    """
    return _mupdf.convert_separation_colors(src_cs, src_color, dst_seps, dst_cs, dst_color, color_params)

def convert_separation_pixmap_to_base(src):
    """
    convert_separation_pixmap_to_base(fz_pixmap const * src) -> fz_pixmap *

    Parameters
    ----------
    src: fz_pixmap const *

    """
    return _mupdf.convert_separation_pixmap_to_base(src)

def copy_option(val, dest, maxlen):
    """
    copy_option(char const * val, char * dest, size_t maxlen) -> size_t

    Parameters
    ----------
    val: char const *
    dest: char *
    maxlen: size_t

    """
    return _mupdf.copy_option(val, dest, maxlen)

def copy_rectangle(page, area, crlf):
    """
    copy_rectangle(fz_stext_page page, fz_rect area, int crlf) -> char *

    Parameters
    ----------
    page: fz_stext_page *
    area: fz_rect
    crlf: int

    """
    return _mupdf.copy_rectangle(page, area, crlf)

def copy_selection(page, a, b, crlf):
    """
    copy_selection(fz_stext_page page, fz_point a, fz_point b, int crlf) -> char *

    Parameters
    ----------
    page: fz_stext_page *
    a: fz_point
    b: fz_point
    crlf: int

    """
    return _mupdf.copy_selection(page, a, b, crlf)

def count_active_separations(seps):
    """
    count_active_separations(fz_separations const * seps) -> int

    Parameters
    ----------
    seps: fz_separations const *

    """
    return _mupdf.count_active_separations(seps)

def count_archive_entries(arch):
    """
    count_archive_entries(fz_archive * arch) -> int

    Parameters
    ----------
    arch: fz_archive *

    """
    return _mupdf.count_archive_entries(arch)

def count_chapter_pages(doc, chapter):
    """
    count_chapter_pages(fz_document * doc, int chapter) -> int

    Parameters
    ----------
    doc: fz_document *
    chapter: int

    """
    return _mupdf.count_chapter_pages(doc, chapter)

def count_chapters(doc):
    """
    count_chapters(fz_document * doc) -> int

    Parameters
    ----------
    doc: fz_document *

    """
    return _mupdf.count_chapters(doc)

def count_pages(doc):
    """
    count_pages(fz_document * doc) -> int

    Parameters
    ----------
    doc: fz_document *

    """
    return _mupdf.count_pages(doc)

def count_separations(sep):
    """
    count_separations(fz_separations const * sep) -> int

    Parameters
    ----------
    sep: fz_separations const *

    """
    return _mupdf.count_separations(sep)

def create_link(page, bbox, uri):
    """
    create_link(fz_page * page, fz_rect bbox, char const * uri) -> fz_link

    Parameters
    ----------
    page: fz_page *
    bbox: fz_rect
    uri: char const *

    """
    return _mupdf.create_link(page, bbox, uri)

def currentpoint(path):
    """
    currentpoint(fz_path * path) -> fz_point

    Parameters
    ----------
    path: fz_path *

    """
    return _mupdf.currentpoint(path)

def curveto(path, x0, y0, x1, y1, x2, y2):
    """
    curveto(fz_path * path, float x0, float y0, float x1, float y1, float x2, float y2)

    Parameters
    ----------
    path: fz_path *
    x0: float
    y0: float
    x1: float
    y1: float
    x2: float
    y2: float

    """
    return _mupdf.curveto(path, x0, y0, x1, y1, x2, y2)

def curvetov(path, x1, y1, x2, y2):
    """
    curvetov(fz_path * path, float x1, float y1, float x2, float y2)

    Parameters
    ----------
    path: fz_path *
    x1: float
    y1: float
    x2: float
    y2: float

    """
    return _mupdf.curvetov(path, x1, y1, x2, y2)

def curvetoy(path, x0, y0, x2, y2):
    """
    curvetoy(fz_path * path, float x0, float y0, float x2, float y2)

    Parameters
    ----------
    path: fz_path *
    x0: float
    y0: float
    x2: float
    y2: float

    """
    return _mupdf.curvetoy(path, x0, y0, x2, y2)

def debug_store(out):
    """
    debug_store(fz_output * out)

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.debug_store(out)

def debug_xml(item, level):
    """
    debug_xml(fz_xml * item, int level)

    Parameters
    ----------
    item: fz_xml *
    level: int

    """
    return _mupdf.debug_xml(item, level)

def decode_tile(pix, decode):
    """
    decode_tile(fz_pixmap * pix, float const * decode)

    Parameters
    ----------
    pix: fz_pixmap *
    decode: float const *

    """
    return _mupdf.decode_tile(pix, decode)

def decomp_image_from_stream(stm, image, subarea, indexed, l2factor, l2extra):
    """
    decomp_image_from_stream(fz_stream * stm, fz_compressed_image * image, fz_irect subarea, int indexed, int l2factor, int * l2extra) -> fz_pixmap *

    Parameters
    ----------
    stm: fz_stream *
    image: fz_compressed_image *
    subarea: fz_irect *
    indexed: int
    l2factor: int
    l2extra: int *

    """
    return _mupdf.decomp_image_from_stream(stm, image, subarea, indexed, l2factor, l2extra)

def decouple_type3_font(font, t3doc):
    """
    decouple_type3_font(fz_font * font, void * t3doc)

    Parameters
    ----------
    font: fz_font *
    t3doc: void *

    """
    return _mupdf.decouple_type3_font(font, t3doc)

def default_cmyk(default_cs):
    """
    default_cmyk(fz_default_colorspaces default_cs) -> fz_colorspace *

    Parameters
    ----------
    default_cs: fz_default_colorspaces const *

    """
    return _mupdf.default_cmyk(default_cs)

def default_error_callback(user, message):
    """
    default_error_callback(void * user, char const * message)

    Parameters
    ----------
    user: void *
    message: char const *

    """
    return _mupdf.default_error_callback(user, message)

def default_gray(default_cs):
    """
    default_gray(fz_default_colorspaces default_cs) -> fz_colorspace *

    Parameters
    ----------
    default_cs: fz_default_colorspaces const *

    """
    return _mupdf.default_gray(default_cs)

def default_halftone(num_comps):
    """
    default_halftone(int num_comps) -> fz_halftone *

    Parameters
    ----------
    num_comps: int

    """
    return _mupdf.default_halftone(num_comps)

def default_output_intent(default_cs):
    """
    default_output_intent(fz_default_colorspaces default_cs) -> fz_colorspace *

    Parameters
    ----------
    default_cs: fz_default_colorspaces const *

    """
    return _mupdf.default_output_intent(default_cs)

def default_rgb(default_cs):
    """
    default_rgb(fz_default_colorspaces default_cs) -> fz_colorspace *

    Parameters
    ----------
    default_cs: fz_default_colorspaces const *

    """
    return _mupdf.default_rgb(default_cs)

def default_warning_callback(user, message):
    """
    default_warning_callback(void * user, char const * message)

    Parameters
    ----------
    user: void *
    message: char const *

    """
    return _mupdf.default_warning_callback(user, message)

def defer_reap_end():
    """defer_reap_end()"""
    return _mupdf.defer_reap_end()

def defer_reap_start():
    """defer_reap_start()"""
    return _mupdf.defer_reap_start()

def deflate(dest, compressed_length, source, source_length, level):
    """
    deflate(unsigned char * dest, size_t * compressed_length, unsigned char const * source, size_t source_length, fz_deflate_level level)

    Parameters
    ----------
    dest: unsigned char *
    compressed_length: size_t *
    source: unsigned char const *
    source_length: size_t
    level: enum fz_deflate_level

    """
    return _mupdf.deflate(dest, compressed_length, source, source_length, level)

def deflate_bound(size):
    """
    deflate_bound(size_t size) -> size_t

    Parameters
    ----------
    size: size_t

    """
    return _mupdf.deflate_bound(size)

def detach_xml(xml, node):
    """
    detach_xml(fz_xml_doc * xml, fz_xml * node)

    Parameters
    ----------
    xml: fz_xml_doc *
    node: fz_xml *

    """
    return _mupdf.detach_xml(xml, node)

def device_bgr():
    """device_bgr() -> fz_colorspace *"""
    return _mupdf.device_bgr()

def device_cmyk():
    """device_cmyk() -> fz_colorspace *"""
    return _mupdf.device_cmyk()

def device_current_scissor(dev):
    """
    device_current_scissor(fz_device * dev) -> fz_rect

    Parameters
    ----------
    dev: fz_device *

    """
    return _mupdf.device_current_scissor(dev)

def device_gray():
    """device_gray() -> fz_colorspace *"""
    return _mupdf.device_gray()

def device_lab():
    """device_lab() -> fz_colorspace *"""
    return _mupdf.device_lab()

def device_rgb():
    """device_rgb() -> fz_colorspace *"""
    return _mupdf.device_rgb()

def dirname(dir, path, dirsize):
    """
    dirname(char * dir, char const * path, size_t dirsize)

    Parameters
    ----------
    dir: char *
    path: char const *
    dirsize: size_t

    """
    return _mupdf.dirname(dir, path, dirsize)

def disable_device_hints(dev, hints):
    """
    disable_device_hints(fz_device * dev, int hints)

    Parameters
    ----------
    dev: fz_device *
    hints: int

    """
    return _mupdf.disable_device_hints(dev, hints)

def disable_icc():
    """disable_icc()"""
    return _mupdf.disable_icc()

def display_list_is_empty(list):
    """
    display_list_is_empty(fz_display_list const * list) -> int

    Parameters
    ----------
    list: fz_display_list const *

    """
    return _mupdf.display_list_is_empty(list)

def div255(c, a):
    """
    div255(int c, int a) -> int

    Parameters
    ----------
    c: int
    a: int

    """
    return _mupdf.div255(c, a)

def do_always():
    """do_always() -> int"""
    return _mupdf.do_always()

def do_catch():
    """do_catch() -> int"""
    return _mupdf.do_catch()

def do_try():
    """do_try() -> int"""
    return _mupdf.do_try()

def document_output_intent(doc):
    """
    document_output_intent(fz_document * doc) -> fz_colorspace *

    Parameters
    ----------
    doc: fz_document *

    """
    return _mupdf.document_output_intent(doc)

def document_supports_accelerator(doc):
    """
    document_supports_accelerator(fz_document * doc) -> int

    Parameters
    ----------
    doc: fz_document *

    """
    return _mupdf.document_supports_accelerator(doc)

def drop_archive(arch):
    """
    drop_archive(fz_archive * arch)

    Parameters
    ----------
    arch: fz_archive *

    """
    return _mupdf.drop_archive(arch)

def drop_band_writer(writer):
    """
    drop_band_writer(fz_band_writer * writer)

    Parameters
    ----------
    writer: fz_band_writer *

    """
    return _mupdf.drop_band_writer(writer)

def drop_bitmap(bit):
    """
    drop_bitmap(fz_bitmap bit)

    Parameters
    ----------
    bit: fz_bitmap *

    """
    return _mupdf.drop_bitmap(bit)

def drop_buffer(buf):
    """
    drop_buffer(fz_buffer buf)

    Parameters
    ----------
    buf: fz_buffer *

    """
    return _mupdf.drop_buffer(buf)

def drop_colorspace(colorspace):
    """
    drop_colorspace(fz_colorspace * colorspace)

    Parameters
    ----------
    colorspace: fz_colorspace *

    """
    return _mupdf.drop_colorspace(colorspace)

def drop_colorspace_imp(cs_):
    """
    drop_colorspace_imp(fz_storable * cs_)

    Parameters
    ----------
    cs_: fz_storable *

    """
    return _mupdf.drop_colorspace_imp(cs_)

def drop_compressed_buffer(buf):
    """
    drop_compressed_buffer(fz_compressed_buffer buf)

    Parameters
    ----------
    buf: fz_compressed_buffer *

    """
    return _mupdf.drop_compressed_buffer(buf)

def drop_context():
    """drop_context()"""
    return _mupdf.drop_context()

def drop_default_colorspaces(default_cs):
    """
    drop_default_colorspaces(fz_default_colorspaces default_cs)

    Parameters
    ----------
    default_cs: fz_default_colorspaces *

    """
    return _mupdf.drop_default_colorspaces(default_cs)

def drop_device(dev):
    """
    drop_device(fz_device * dev)

    Parameters
    ----------
    dev: fz_device *

    """
    return _mupdf.drop_device(dev)

def drop_display_list(list):
    """
    drop_display_list(fz_display_list * list)

    Parameters
    ----------
    list: fz_display_list *

    """
    return _mupdf.drop_display_list(list)

def drop_document(doc):
    """
    drop_document(fz_document * doc)

    Parameters
    ----------
    doc: fz_document *

    """
    return _mupdf.drop_document(doc)

def drop_document_writer(wri):
    """
    drop_document_writer(fz_document_writer * wri)

    Parameters
    ----------
    wri: fz_document_writer *

    """
    return _mupdf.drop_document_writer(wri)

def drop_font(font):
    """
    drop_font(fz_font * font)

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.drop_font(font)

def drop_glyph(pix):
    """
    drop_glyph(fz_glyph * pix)

    Parameters
    ----------
    pix: fz_glyph *

    """
    return _mupdf.drop_glyph(pix)

def drop_halftone(ht):
    """
    drop_halftone(fz_halftone * ht)

    Parameters
    ----------
    ht: fz_halftone *

    """
    return _mupdf.drop_halftone(ht)

def drop_hash_table(table):
    """
    drop_hash_table(fz_hash_table * table)

    Parameters
    ----------
    table: fz_hash_table *

    """
    return _mupdf.drop_hash_table(table)

def drop_image(image):
    """
    drop_image(fz_image * image)

    Parameters
    ----------
    image: fz_image *

    """
    return _mupdf.drop_image(image)

def drop_image_base(image):
    """
    drop_image_base(fz_image * image)

    Parameters
    ----------
    image: fz_image *

    """
    return _mupdf.drop_image_base(image)

def drop_image_imp(image):
    """
    drop_image_imp(fz_storable * image)

    Parameters
    ----------
    image: fz_storable *

    """
    return _mupdf.drop_image_imp(image)

def drop_image_store_key(image):
    """
    drop_image_store_key(fz_image * image)

    Parameters
    ----------
    image: fz_image *

    """
    return _mupdf.drop_image_store_key(image)

def drop_imp(p, refs):
    """
    drop_imp(void * p, int * refs) -> int

    Parameters
    ----------
    p: void *
    refs: int *

    """
    return _mupdf.drop_imp(p, refs)

def drop_imp16(p, refs):
    """
    drop_imp16(void * p, int16_t * refs) -> int

    Parameters
    ----------
    p: void *
    refs: int16_t *

    """
    return _mupdf.drop_imp16(p, refs)

def drop_imp8(p, refs):
    """
    drop_imp8(void * p, int8_t * refs) -> int

    Parameters
    ----------
    p: void *
    refs: int8_t *

    """
    return _mupdf.drop_imp8(p, refs)

def drop_jbig2_globals(globals):
    """
    drop_jbig2_globals(fz_jbig2_globals * globals)

    Parameters
    ----------
    globals: fz_jbig2_globals *

    """
    return _mupdf.drop_jbig2_globals(globals)

def drop_jbig2_globals_imp(globals):
    """
    drop_jbig2_globals_imp(fz_storable * globals)

    Parameters
    ----------
    globals: fz_storable *

    """
    return _mupdf.drop_jbig2_globals_imp(globals)

def drop_key_storable(arg_1):
    """
    drop_key_storable(fz_key_storable arg_1)

    Parameters
    ----------
    arg_1: fz_key_storable const *

    """
    return _mupdf.drop_key_storable(arg_1)

def drop_key_storable_key(arg_1):
    """
    drop_key_storable_key(fz_key_storable arg_1)

    Parameters
    ----------
    arg_1: fz_key_storable const *

    """
    return _mupdf.drop_key_storable_key(arg_1)

def drop_layout(block):
    """
    drop_layout(fz_layout_block block)

    Parameters
    ----------
    block: fz_layout_block *

    """
    return _mupdf.drop_layout(block)

def drop_link(link):
    """
    drop_link(fz_link link)

    Parameters
    ----------
    link: fz_link *

    """
    return _mupdf.drop_link(link)

def drop_outline(outline):
    """
    drop_outline(fz_outline outline)

    Parameters
    ----------
    outline: fz_outline *

    """
    return _mupdf.drop_outline(outline)

def drop_output(arg_1):
    """
    drop_output(fz_output * arg_1)

    Parameters
    ----------
    arg_1: fz_output *

    """
    return _mupdf.drop_output(arg_1)

def drop_page(page):
    """
    drop_page(fz_page * page)

    Parameters
    ----------
    page: fz_page *

    """
    return _mupdf.drop_page(page)

def drop_path(path):
    """
    drop_path(fz_path const * path)

    Parameters
    ----------
    path: fz_path const *

    """
    return _mupdf.drop_path(path)

def drop_pixmap(pix):
    """
    drop_pixmap(fz_pixmap * pix)

    Parameters
    ----------
    pix: fz_pixmap *

    """
    return _mupdf.drop_pixmap(pix)

def drop_pool(pool):
    """
    drop_pool(fz_pool * pool)

    Parameters
    ----------
    pool: fz_pool *

    """
    return _mupdf.drop_pool(pool)

def drop_separations(sep):
    """
    drop_separations(fz_separations * sep)

    Parameters
    ----------
    sep: fz_separations *

    """
    return _mupdf.drop_separations(sep)

def drop_shade(shade):
    """
    drop_shade(fz_shade shade)

    Parameters
    ----------
    shade: fz_shade *

    """
    return _mupdf.drop_shade(shade)

def drop_shade_color_cache(cache):
    """
    drop_shade_color_cache(fz_shade_color_cache * cache)

    Parameters
    ----------
    cache: fz_shade_color_cache *

    """
    return _mupdf.drop_shade_color_cache(cache)

def drop_shade_imp(shade):
    """
    drop_shade_imp(fz_storable * shade)

    Parameters
    ----------
    shade: fz_storable *

    """
    return _mupdf.drop_shade_imp(shade)

def drop_stext_page(page):
    """
    drop_stext_page(fz_stext_page page)

    Parameters
    ----------
    page: fz_stext_page *

    """
    return _mupdf.drop_stext_page(page)

def drop_storable(arg_1):
    """
    drop_storable(fz_storable const * arg_1)

    Parameters
    ----------
    arg_1: fz_storable const *

    """
    return _mupdf.drop_storable(arg_1)

def drop_store_context():
    """drop_store_context()"""
    return _mupdf.drop_store_context()

def drop_stream(stm):
    """
    drop_stream(fz_stream * stm)

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.drop_stream(stm)

def drop_stroke_state(stroke):
    """
    drop_stroke_state(fz_stroke_state stroke)

    Parameters
    ----------
    stroke: fz_stroke_state const *

    """
    return _mupdf.drop_stroke_state(stroke)

def drop_text(text):
    """
    drop_text(fz_text text)

    Parameters
    ----------
    text: fz_text const *

    """
    return _mupdf.drop_text(text)

def drop_tree(node, dropfunc):
    """
    drop_tree(fz_tree * node, void (*)(fz_context *,void *) dropfunc)

    Parameters
    ----------
    node: fz_tree *
    dropfunc: void (*)(fz_context *,void *)

    """
    return _mupdf.drop_tree(node, dropfunc)

def drop_xml(xml):
    """
    drop_xml(fz_xml_doc * xml)

    Parameters
    ----------
    xml: fz_xml_doc *

    """
    return _mupdf.drop_xml(xml)

def drop_zip_writer(zip):
    """
    drop_zip_writer(fz_zip_writer * zip)

    Parameters
    ----------
    zip: fz_zip_writer *

    """
    return _mupdf.drop_zip_writer(zip)

def dump_glyph_cache_stats(out):
    """
    dump_glyph_cache_stats(fz_output * out)

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.dump_glyph_cache_stats(out)

def duplicate_glyph_names_from_unicode(unicode):
    """
    duplicate_glyph_names_from_unicode(int unicode) -> char const **

    Parameters
    ----------
    unicode: int

    """
    return _mupdf.duplicate_glyph_names_from_unicode(unicode)

def empty_store():
    """empty_store()"""
    return _mupdf.empty_store()

def enable_device_hints(dev, hints):
    """
    enable_device_hints(fz_device * dev, int hints)

    Parameters
    ----------
    dev: fz_device *
    hints: int

    """
    return _mupdf.enable_device_hints(dev, hints)

def enable_icc():
    """enable_icc()"""
    return _mupdf.enable_icc()

def encode_character(font, unicode):
    """
    encode_character(fz_font * font, int unicode) -> int

    Parameters
    ----------
    font: fz_font *
    unicode: int

    """
    return _mupdf.encode_character(font, unicode)

def encode_character_by_glyph_name(font, glyphname):
    """
    encode_character_by_glyph_name(fz_font * font, char const * glyphname) -> int

    Parameters
    ----------
    font: fz_font *
    glyphname: char const *

    """
    return _mupdf.encode_character_by_glyph_name(font, glyphname)

def encode_character_sc(font, unicode):
    """
    encode_character_sc(fz_font * font, int unicode) -> int

    Parameters
    ----------
    font: fz_font *
    unicode: int

    """
    return _mupdf.encode_character_sc(font, unicode)

def encode_character_with_fallback(font, unicode, script, language, out_font):
    """
    encode_character_with_fallback(fz_font * font, int unicode, int script, int language, fz_font ** out_font) -> int

    Parameters
    ----------
    font: fz_font *
    unicode: int
    script: int
    language: int
    out_font: fz_font **

    """
    return _mupdf.encode_character_with_fallback(font, unicode, script, language, out_font)

def end_group(dev):
    """
    end_group(fz_device * dev)

    Parameters
    ----------
    dev: fz_device *

    """
    return _mupdf.end_group(dev)

def end_layer(dev):
    """
    end_layer(fz_device * dev)

    Parameters
    ----------
    dev: fz_device *

    """
    return _mupdf.end_layer(dev)

def end_mask(dev):
    """
    end_mask(fz_device * dev)

    Parameters
    ----------
    dev: fz_device *

    """
    return _mupdf.end_mask(dev)

def end_page(wri):
    """
    end_page(fz_document_writer * wri)

    Parameters
    ----------
    wri: fz_document_writer *

    """
    return _mupdf.end_page(wri)

def end_throw_on_repair():
    """end_throw_on_repair()"""
    return _mupdf.end_throw_on_repair()

def end_tile(dev):
    """
    end_tile(fz_device * dev)

    Parameters
    ----------
    dev: fz_device *

    """
    return _mupdf.end_tile(dev)

def expand_irect(a, expand):
    """
    expand_irect(fz_irect a, int expand) -> fz_irect

    Parameters
    ----------
    a: fz_irect
    expand: int

    """
    return _mupdf.expand_irect(a, expand)

def expand_rect(b, expand):
    """
    expand_rect(fz_rect b, float expand) -> fz_rect

    Parameters
    ----------
    b: fz_rect
    expand: float

    """
    return _mupdf.expand_rect(b, expand)

def file_exists(path):
    """
    file_exists(char const * path) -> int

    Parameters
    ----------
    path: char const *

    """
    return _mupdf.file_exists(path)

def fill_image(dev, image, ctm, alpha, color_params):
    """
    fill_image(fz_device * dev, fz_image * image, fz_matrix ctm, float alpha, fz_color_params color_params)

    Parameters
    ----------
    dev: fz_device *
    image: fz_image *
    ctm: fz_matrix
    alpha: float
    color_params: fz_color_params

    """
    return _mupdf.fill_image(dev, image, ctm, alpha, color_params)

def fill_image_mask(dev, image, ctm, colorspace, color, alpha, color_params):
    """
    fill_image_mask(fz_device * dev, fz_image * image, fz_matrix ctm, fz_colorspace * colorspace, float const * color, float alpha, fz_color_params color_params)

    Parameters
    ----------
    dev: fz_device *
    image: fz_image *
    ctm: fz_matrix
    colorspace: fz_colorspace *
    color: float const *
    alpha: float
    color_params: fz_color_params

    """
    return _mupdf.fill_image_mask(dev, image, ctm, colorspace, color, alpha, color_params)

def fill_path(dev, path, even_odd, ctm, colorspace, color, alpha, color_params):
    """
    fill_path(fz_device * dev, fz_path const * path, int even_odd, fz_matrix ctm, fz_colorspace * colorspace, float const * color, float alpha, fz_color_params color_params)

    Parameters
    ----------
    dev: fz_device *
    path: fz_path const *
    even_odd: int
    ctm: fz_matrix
    colorspace: fz_colorspace *
    color: float const *
    alpha: float
    color_params: fz_color_params

    """
    return _mupdf.fill_path(dev, path, even_odd, ctm, colorspace, color, alpha, color_params)

def fill_pixmap_with_color(pix, colorspace, color, color_params):
    """
    fill_pixmap_with_color(fz_pixmap * pix, fz_colorspace * colorspace, float * color, fz_color_params color_params)

    Parameters
    ----------
    pix: fz_pixmap *
    colorspace: fz_colorspace *
    color: float *
    color_params: fz_color_params

    """
    return _mupdf.fill_pixmap_with_color(pix, colorspace, color, color_params)

def fill_shade(dev, shade, ctm, alpha, color_params):
    """
    fill_shade(fz_device * dev, fz_shade shade, fz_matrix ctm, float alpha, fz_color_params color_params)

    Parameters
    ----------
    dev: fz_device *
    shade: fz_shade *
    ctm: fz_matrix
    alpha: float
    color_params: fz_color_params

    """
    return _mupdf.fill_shade(dev, shade, ctm, alpha, color_params)

def fill_text(dev, text, ctm, colorspace, color, alpha, color_params):
    """
    fill_text(fz_device * dev, fz_text text, fz_matrix ctm, fz_colorspace * colorspace, float const * color, float alpha, fz_color_params color_params)

    Parameters
    ----------
    dev: fz_device *
    text: fz_text const *
    ctm: fz_matrix
    colorspace: fz_colorspace *
    color: float const *
    alpha: float
    color_params: fz_color_params

    """
    return _mupdf.fill_text(dev, text, ctm, colorspace, color, alpha, color_params)

def filter_store(fn, arg, type):
    """
    filter_store(fz_store_filter_fn * fn, void * arg, fz_store_type type)

    Parameters
    ----------
    fn: fz_store_filter_fn *
    arg: void *
    type: fz_store_type const *

    """
    return _mupdf.filter_store(fn, arg, type)

def find_item(drop, key, type):
    """
    find_item(fz_store_drop_fn * drop, void * key, fz_store_type type) -> void *

    Parameters
    ----------
    drop: fz_store_drop_fn *
    key: void *
    type: fz_store_type const *

    """
    return _mupdf.find_item(drop, key, type)

def flush_output(out):
    """
    flush_output(fz_output * out)

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.flush_output(out)

def flush_warnings():
    """flush_warnings()"""
    return _mupdf.flush_warnings()

def font_ascender(font):
    """
    font_ascender(fz_font * font) -> float

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.font_ascender(font)

def font_bbox(font):
    """
    font_bbox(fz_font * font) -> fz_rect

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.font_bbox(font)

def font_descender(font):
    """
    font_descender(fz_font * font) -> float

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.font_descender(font)

def font_digest(font, digest):
    """
    font_digest(fz_font * font, unsigned char [16] digest)

    Parameters
    ----------
    font: fz_font *
    digest: unsigned char [16]

    """
    return _mupdf.font_digest(font, digest)

def font_flags(font):
    """
    font_flags(fz_font * font) -> fz_font_flags_t

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.font_flags(font)

def font_ft_face(font):
    """
    font_ft_face(fz_font * font) -> void *

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.font_ft_face(font)

def font_is_bold(font):
    """
    font_is_bold(fz_font * font) -> int

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.font_is_bold(font)

def font_is_italic(font):
    """
    font_is_italic(fz_font * font) -> int

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.font_is_italic(font)

def font_is_monospaced(font):
    """
    font_is_monospaced(fz_font * font) -> int

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.font_is_monospaced(font)

def font_is_serif(font):
    """
    font_is_serif(fz_font * font) -> int

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.font_is_serif(font)

def font_name(font):
    """
    font_name(fz_font * font) -> char const *

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.font_name(font)

def font_shaper_data(font):
    """
    font_shaper_data(fz_font * font) -> fz_shaper_data_t

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.font_shaper_data(font)

def font_t3_procs(font):
    """
    font_t3_procs(fz_font * font) -> fz_buffer **

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.font_t3_procs(font)

def format_output_path(path, size, fmt, page):
    """
    format_output_path(char * path, size_t size, char const * fmt, int page)

    Parameters
    ----------
    path: char *
    size: size_t
    fmt: char const *
    page: int

    """
    return _mupdf.format_output_path(path, size, fmt, page)

def gamma_pixmap(pix, gamma):
    """
    gamma_pixmap(fz_pixmap * pix, float gamma)

    Parameters
    ----------
    pix: fz_pixmap *
    gamma: float

    """
    return _mupdf.gamma_pixmap(pix, gamma)

def generate_transition(tpix, opix, npix, time, trans):
    """
    generate_transition(fz_pixmap * tpix, fz_pixmap * opix, fz_pixmap * npix, int time, fz_transition trans) -> int

    Parameters
    ----------
    tpix: fz_pixmap *
    opix: fz_pixmap *
    npix: fz_pixmap *
    time: int
    trans: fz_transition *

    """
    return _mupdf.generate_transition(tpix, opix, npix, time, trans)

def get_glyph_name(font, glyph, buf, size):
    """
    get_glyph_name(fz_font * font, int glyph, char * buf, int size)

    Parameters
    ----------
    font: fz_font *
    glyph: int
    buf: char *
    size: int

    """
    return _mupdf.get_glyph_name(font, glyph, buf, size)

def get_pixmap_from_image(image, subarea, ctm, w, h):
    """
    get_pixmap_from_image(fz_image * image, fz_irect subarea, fz_matrix ctm, int * w, int * h) -> fz_pixmap *

    Parameters
    ----------
    image: fz_image *
    subarea: fz_irect const *
    ctm: fz_matrix *
    w: int *
    h: int *

    """
    return _mupdf.get_pixmap_from_image(image, subarea, ctm, w, h)

def get_unscaled_pixmap_from_image(image):
    """
    get_unscaled_pixmap_from_image(fz_image * image) -> fz_pixmap *

    Parameters
    ----------
    image: fz_image *

    """
    return _mupdf.get_unscaled_pixmap_from_image(image)

def getopt(nargc, nargv, ostr):
    """
    getopt(int nargc, char ** nargv, char const * ostr) -> int

    Parameters
    ----------
    nargc: int
    nargv: char **
    ostr: char const *

    """
    return _mupdf.getopt(nargc, nargv, ostr)

def glyph_bbox(glyph):
    """
    glyph_bbox(fz_glyph * glyph) -> fz_irect

    Parameters
    ----------
    glyph: fz_glyph *

    """
    return _mupdf.glyph_bbox(glyph)

def glyph_bbox_no_ctx(src):
    """
    glyph_bbox_no_ctx(fz_glyph * src) -> fz_irect

    Parameters
    ----------
    src: fz_glyph *

    """
    return _mupdf.glyph_bbox_no_ctx(src)

def glyph_cacheable(font, gid):
    """
    glyph_cacheable(fz_font * font, int gid) -> int

    Parameters
    ----------
    font: fz_font *
    gid: int

    """
    return _mupdf.glyph_cacheable(font, gid)

def glyph_height(glyph):
    """
    glyph_height(fz_glyph * glyph) -> int

    Parameters
    ----------
    glyph: fz_glyph *

    """
    return _mupdf.glyph_height(glyph)

def glyph_name_from_unicode_sc(unicode):
    """
    glyph_name_from_unicode_sc(int unicode) -> char const *

    Parameters
    ----------
    unicode: int

    """
    return _mupdf.glyph_name_from_unicode_sc(unicode)

def glyph_width(glyph):
    """
    glyph_width(fz_glyph * glyph) -> int

    Parameters
    ----------
    glyph: fz_glyph *

    """
    return _mupdf.glyph_width(glyph)

def graphics_aa_level():
    """graphics_aa_level() -> int"""
    return _mupdf.graphics_aa_level()

def graphics_min_line_width():
    """graphics_min_line_width() -> float"""
    return _mupdf.graphics_min_line_width()

def gridfit_matrix(as_tiled, m):
    """
    gridfit_matrix(int as_tiled, fz_matrix m) -> fz_matrix

    Parameters
    ----------
    as_tiled: int
    m: fz_matrix

    """
    return _mupdf.gridfit_matrix(as_tiled, m)

def grisu(f, s, exp):
    """
    grisu(float f, char * s, int * exp) -> int

    Parameters
    ----------
    f: float
    s: char *
    exp: int *

    """
    return _mupdf.grisu(f, s, exp)

def grow_buffer(buf):
    """
    grow_buffer(fz_buffer buf)

    Parameters
    ----------
    buf: fz_buffer *

    """
    return _mupdf.grow_buffer(buf)

def has_archive_entry(arch, name):
    """
    has_archive_entry(fz_archive * arch, char const * name) -> int

    Parameters
    ----------
    arch: fz_archive *
    name: char const *

    """
    return _mupdf.has_archive_entry(arch, name)

def has_option(opts, key, val):
    """
    has_option(char const * opts, char const * key, char const ** val) -> int

    Parameters
    ----------
    opts: char const *
    key: char const *
    val: char const **

    """
    return _mupdf.has_option(opts, key, val)

def has_permission(doc, p):
    """
    has_permission(fz_document * doc, fz_permission p) -> int

    Parameters
    ----------
    doc: fz_document *
    p: enum fz_permission

    """
    return _mupdf.has_permission(doc, p)

def hash_filter(table, state, callback):
    """
    hash_filter(fz_hash_table * table, void * state, fz_hash_table_filter_fn * callback)

    Parameters
    ----------
    table: fz_hash_table *
    state: void *
    callback: fz_hash_table_filter_fn *

    """
    return _mupdf.hash_filter(table, state, callback)

def hash_find(table, key):
    """
    hash_find(fz_hash_table * table, void const * key) -> void *

    Parameters
    ----------
    table: fz_hash_table *
    key: void const *

    """
    return _mupdf.hash_find(table, key)

def hash_for_each(table, state, callback):
    """
    hash_for_each(fz_hash_table * table, void * state, fz_hash_table_for_each_fn * callback)

    Parameters
    ----------
    table: fz_hash_table *
    state: void *
    callback: fz_hash_table_for_each_fn *

    """
    return _mupdf.hash_for_each(table, state, callback)

def hash_insert(table, key, val):
    """
    hash_insert(fz_hash_table * table, void const * key, void * val) -> void *

    Parameters
    ----------
    table: fz_hash_table *
    key: void const *
    val: void *

    """
    return _mupdf.hash_insert(table, key, val)

def hash_remove(table, key):
    """
    hash_remove(fz_hash_table * table, void const * key)

    Parameters
    ----------
    table: fz_hash_table *
    key: void const *

    """
    return _mupdf.hash_remove(table, key)

def hb_lock():
    """hb_lock()"""
    return _mupdf.hb_lock()

def hb_unlock():
    """hb_unlock()"""
    return _mupdf.hb_unlock()

def highlight_selection(page, a, b, quads, max_quads):
    """
    highlight_selection(fz_stext_page page, fz_point a, fz_point b, fz_quad quads, int max_quads) -> int

    Parameters
    ----------
    page: fz_stext_page *
    a: fz_point
    b: fz_point
    quads: fz_quad *
    max_quads: int

    """
    return _mupdf.highlight_selection(page, a, b, quads, max_quads)

def ignore_text(dev, text, ctm):
    """
    ignore_text(fz_device * dev, fz_text text, fz_matrix ctm)

    Parameters
    ----------
    dev: fz_device *
    text: fz_text const *
    ctm: fz_matrix

    """
    return _mupdf.ignore_text(dev, text, ctm)

def image_orientation(image):
    """
    image_orientation(fz_image * image) -> uint8_t

    Parameters
    ----------
    image: fz_image *

    """
    return _mupdf.image_orientation(image)

def image_orientation_matrix(image):
    """
    image_orientation_matrix(fz_image * image) -> fz_matrix

    Parameters
    ----------
    image: fz_image *

    """
    return _mupdf.image_orientation_matrix(image)

def image_resolution(image, xres, yres):
    """
    image_resolution(fz_image * image, int * xres, int * yres)

    Parameters
    ----------
    image: fz_image *
    xres: int *
    yres: int *

    """
    return _mupdf.image_resolution(image, xres, yres)

def image_size(im):
    """
    image_size(fz_image * im) -> size_t

    Parameters
    ----------
    im: fz_image *

    """
    return _mupdf.image_size(im)

def include_point_in_rect(r, p):
    """
    include_point_in_rect(fz_rect r, fz_point p) -> fz_rect

    Parameters
    ----------
    r: fz_rect
    p: fz_point

    """
    return _mupdf.include_point_in_rect(r, p)

def install_load_system_font_funcs(f, f_cjk, f_fallback):
    """
    install_load_system_font_funcs(fz_load_system_font_fn * f, fz_load_system_cjk_font_fn * f_cjk, fz_load_system_fallback_font_fn * f_fallback)

    Parameters
    ----------
    f: fz_load_system_font_fn *
    f_cjk: fz_load_system_cjk_font_fn *
    f_fallback: fz_load_system_fallback_font_fn *

    """
    return _mupdf.install_load_system_font_funcs(f, f_cjk, f_fallback)

def intersect_irect(a, b):
    """
    intersect_irect(fz_irect a, fz_irect b) -> fz_irect

    Parameters
    ----------
    a: fz_irect
    b: fz_irect

    """
    return _mupdf.intersect_irect(a, b)

def intersect_rect(a, b):
    """
    intersect_rect(fz_rect a, fz_rect b) -> fz_rect

    Parameters
    ----------
    a: fz_rect
    b: fz_rect

    """
    return _mupdf.intersect_rect(a, b)

def invert_matrix(matrix):
    """
    invert_matrix(fz_matrix matrix) -> fz_matrix

    Parameters
    ----------
    matrix: fz_matrix

    """
    return _mupdf.invert_matrix(matrix)

def invert_pixmap(pix):
    """
    invert_pixmap(fz_pixmap * pix)

    Parameters
    ----------
    pix: fz_pixmap *

    """
    return _mupdf.invert_pixmap(pix)

def invert_pixmap_alpha(pix):
    """
    invert_pixmap_alpha(fz_pixmap * pix)

    Parameters
    ----------
    pix: fz_pixmap *

    """
    return _mupdf.invert_pixmap_alpha(pix)

def invert_pixmap_luminance(pix):
    """
    invert_pixmap_luminance(fz_pixmap * pix)

    Parameters
    ----------
    pix: fz_pixmap *

    """
    return _mupdf.invert_pixmap_luminance(pix)

def invert_pixmap_rect(image, rect):
    """
    invert_pixmap_rect(fz_pixmap * image, fz_irect rect)

    Parameters
    ----------
    image: fz_pixmap *
    rect: fz_irect

    """
    return _mupdf.invert_pixmap_rect(image, rect)

def irect_from_rect(rect):
    """
    irect_from_rect(fz_rect rect) -> fz_irect

    Parameters
    ----------
    rect: fz_rect

    """
    return _mupdf.irect_from_rect(rect)

def irect_height(r):
    """
    irect_height(fz_irect r) -> int

    Parameters
    ----------
    r: fz_irect

    """
    return _mupdf.irect_height(r)

def irect_width(r):
    """
    irect_width(fz_irect r) -> unsigned int

    Parameters
    ----------
    r: fz_irect

    """
    return _mupdf.irect_width(r)

def is_directory(path):
    """
    is_directory(char const * path) -> int

    Parameters
    ----------
    path: char const *

    """
    return _mupdf.is_directory(path)

def is_document_reflowable(doc):
    """
    is_document_reflowable(fz_document * doc) -> int

    Parameters
    ----------
    doc: fz_document *

    """
    return _mupdf.is_document_reflowable(doc)

def is_empty_irect(r):
    """
    is_empty_irect(fz_irect r) -> int

    Parameters
    ----------
    r: fz_irect

    """
    return _mupdf.is_empty_irect(r)

def is_empty_rect(r):
    """
    is_empty_rect(fz_rect r) -> int

    Parameters
    ----------
    r: fz_rect

    """
    return _mupdf.is_empty_rect(r)

def is_eof(stm):
    """
    is_eof(fz_stream * stm) -> int

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.is_eof(stm)

def is_eof_bits(stm):
    """
    is_eof_bits(fz_stream * stm) -> int

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.is_eof_bits(stm)

def is_external_link(uri):
    """
    is_external_link(char const * uri) -> int

    Parameters
    ----------
    uri: char const *

    """
    return _mupdf.is_external_link(uri)

def is_identity(m):
    """
    is_identity(fz_matrix m) -> int

    Parameters
    ----------
    m: fz_matrix

    """
    return _mupdf.is_identity(m)

def is_infinite_irect(r):
    """
    is_infinite_irect(fz_irect r) -> int

    Parameters
    ----------
    r: fz_irect

    """
    return _mupdf.is_infinite_irect(r)

def is_infinite_rect(r):
    """
    is_infinite_rect(fz_rect r) -> int

    Parameters
    ----------
    r: fz_rect

    """
    return _mupdf.is_infinite_rect(r)

def is_page_range(s):
    """
    is_page_range(char const * s) -> int

    Parameters
    ----------
    s: char const *

    """
    return _mupdf.is_page_range(s)

def is_pixmap_monochrome(pixmap):
    """
    is_pixmap_monochrome(fz_pixmap * pixmap) -> int

    Parameters
    ----------
    pixmap: fz_pixmap *

    """
    return _mupdf.is_pixmap_monochrome(pixmap)

def is_point_inside_irect(x, y, r):
    """
    is_point_inside_irect(int x, int y, fz_irect r) -> int

    Parameters
    ----------
    x: int
    y: int
    r: fz_irect

    """
    return _mupdf.is_point_inside_irect(x, y, r)

def is_point_inside_quad(p, q):
    """
    is_point_inside_quad(fz_point p, fz_quad q) -> int

    Parameters
    ----------
    p: fz_point
    q: fz_quad

    """
    return _mupdf.is_point_inside_quad(p, q)

def is_point_inside_rect(p, r):
    """
    is_point_inside_rect(fz_point p, fz_rect r) -> int

    Parameters
    ----------
    p: fz_point
    r: fz_rect

    """
    return _mupdf.is_point_inside_rect(p, r)

def is_pow2(a):
    """
    is_pow2(int a) -> int

    Parameters
    ----------
    a: int

    """
    return _mupdf.is_pow2(a)

def is_quad_inside_quad(needle, haystack):
    """
    is_quad_inside_quad(fz_quad needle, fz_quad haystack) -> int

    Parameters
    ----------
    needle: fz_quad
    haystack: fz_quad

    """
    return _mupdf.is_quad_inside_quad(needle, haystack)

def is_quad_intersecting_quad(a, b):
    """
    is_quad_intersecting_quad(fz_quad a, fz_quad b) -> int

    Parameters
    ----------
    a: fz_quad
    b: fz_quad

    """
    return _mupdf.is_quad_intersecting_quad(a, b)

def is_rectilinear(m):
    """
    is_rectilinear(fz_matrix m) -> int

    Parameters
    ----------
    m: fz_matrix

    """
    return _mupdf.is_rectilinear(m)

def is_tar_archive(file):
    """
    is_tar_archive(fz_stream * file) -> int

    Parameters
    ----------
    file: fz_stream *

    """
    return _mupdf.is_tar_archive(file)

def is_valid_blend_colorspace(cs):
    """
    is_valid_blend_colorspace(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.is_valid_blend_colorspace(cs)

def is_valid_irect(r):
    """
    is_valid_irect(fz_irect r) -> int

    Parameters
    ----------
    r: fz_irect

    """
    return _mupdf.is_valid_irect(r)

def is_valid_rect(r):
    """
    is_valid_rect(fz_rect r) -> int

    Parameters
    ----------
    r: fz_rect

    """
    return _mupdf.is_valid_rect(r)

def is_zip_archive(file):
    """
    is_zip_archive(fz_stream * file) -> int

    Parameters
    ----------
    file: fz_stream *

    """
    return _mupdf.is_zip_archive(file)

def iso8859_1_from_unicode(u):
    """
    iso8859_1_from_unicode(int u) -> int

    Parameters
    ----------
    u: int

    """
    return _mupdf.iso8859_1_from_unicode(u)

def iso8859_7_from_unicode(u):
    """
    iso8859_7_from_unicode(int u) -> int

    Parameters
    ----------
    u: int

    """
    return _mupdf.iso8859_7_from_unicode(u)

def jbig2_globals_data(globals):
    """
    jbig2_globals_data(fz_jbig2_globals * globals) -> fz_buffer

    Parameters
    ----------
    globals: fz_jbig2_globals *

    """
    return _mupdf.jbig2_globals_data(globals)

def keep_bitmap(bit):
    """
    keep_bitmap(fz_bitmap bit) -> fz_bitmap

    Parameters
    ----------
    bit: fz_bitmap *

    """
    return _mupdf.keep_bitmap(bit)

def keep_buffer(buf):
    """
    keep_buffer(fz_buffer buf) -> fz_buffer

    Parameters
    ----------
    buf: fz_buffer *

    """
    return _mupdf.keep_buffer(buf)

def keep_colorspace(colorspace):
    """
    keep_colorspace(fz_colorspace * colorspace) -> fz_colorspace *

    Parameters
    ----------
    colorspace: fz_colorspace *

    """
    return _mupdf.keep_colorspace(colorspace)

def keep_default_colorspaces(default_cs):
    """
    keep_default_colorspaces(fz_default_colorspaces default_cs) -> fz_default_colorspaces

    Parameters
    ----------
    default_cs: fz_default_colorspaces *

    """
    return _mupdf.keep_default_colorspaces(default_cs)

def keep_device(dev):
    """
    keep_device(fz_device * dev) -> fz_device *

    Parameters
    ----------
    dev: fz_device *

    """
    return _mupdf.keep_device(dev)

def keep_display_list(list):
    """
    keep_display_list(fz_display_list * list) -> fz_display_list *

    Parameters
    ----------
    list: fz_display_list *

    """
    return _mupdf.keep_display_list(list)

def keep_document(doc):
    """
    keep_document(fz_document * doc) -> fz_document *

    Parameters
    ----------
    doc: fz_document *

    """
    return _mupdf.keep_document(doc)

def keep_font(font):
    """
    keep_font(fz_font * font) -> fz_font *

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.keep_font(font)

def keep_glyph(pix):
    """
    keep_glyph(fz_glyph * pix) -> fz_glyph *

    Parameters
    ----------
    pix: fz_glyph *

    """
    return _mupdf.keep_glyph(pix)

def keep_halftone(half):
    """
    keep_halftone(fz_halftone * half) -> fz_halftone *

    Parameters
    ----------
    half: fz_halftone *

    """
    return _mupdf.keep_halftone(half)

def keep_image(image):
    """
    keep_image(fz_image * image) -> fz_image *

    Parameters
    ----------
    image: fz_image *

    """
    return _mupdf.keep_image(image)

def keep_image_store_key(image):
    """
    keep_image_store_key(fz_image * image) -> fz_image *

    Parameters
    ----------
    image: fz_image *

    """
    return _mupdf.keep_image_store_key(image)

def keep_imp(p, refs):
    """
    keep_imp(void * p, int * refs) -> void *

    Parameters
    ----------
    p: void *
    refs: int *

    """
    return _mupdf.keep_imp(p, refs)

def keep_imp16(p, refs):
    """
    keep_imp16(void * p, int16_t * refs) -> void *

    Parameters
    ----------
    p: void *
    refs: int16_t *

    """
    return _mupdf.keep_imp16(p, refs)

def keep_imp8(p, refs):
    """
    keep_imp8(void * p, int8_t * refs) -> void *

    Parameters
    ----------
    p: void *
    refs: int8_t *

    """
    return _mupdf.keep_imp8(p, refs)

def keep_imp_locked(p, refs):
    """
    keep_imp_locked(void * p, int * refs) -> void *

    Parameters
    ----------
    p: void *
    refs: int *

    """
    return _mupdf.keep_imp_locked(p, refs)

def keep_jbig2_globals(globals):
    """
    keep_jbig2_globals(fz_jbig2_globals * globals) -> fz_jbig2_globals *

    Parameters
    ----------
    globals: fz_jbig2_globals *

    """
    return _mupdf.keep_jbig2_globals(globals)

def keep_key_storable(arg_1):
    """
    keep_key_storable(fz_key_storable arg_1) -> void *

    Parameters
    ----------
    arg_1: fz_key_storable const *

    """
    return _mupdf.keep_key_storable(arg_1)

def keep_key_storable_key(arg_1):
    """
    keep_key_storable_key(fz_key_storable arg_1) -> void *

    Parameters
    ----------
    arg_1: fz_key_storable const *

    """
    return _mupdf.keep_key_storable_key(arg_1)

def keep_link(link):
    """
    keep_link(fz_link link) -> fz_link

    Parameters
    ----------
    link: fz_link *

    """
    return _mupdf.keep_link(link)

def keep_outline(outline):
    """
    keep_outline(fz_outline outline) -> fz_outline

    Parameters
    ----------
    outline: fz_outline *

    """
    return _mupdf.keep_outline(outline)

def keep_page(page):
    """
    keep_page(fz_page * page) -> fz_page *

    Parameters
    ----------
    page: fz_page *

    """
    return _mupdf.keep_page(page)

def keep_page_locked(page):
    """
    keep_page_locked(fz_page * page) -> fz_page *

    Parameters
    ----------
    page: fz_page *

    """
    return _mupdf.keep_page_locked(page)

def keep_path(path):
    """
    keep_path(fz_path const * path) -> fz_path *

    Parameters
    ----------
    path: fz_path const *

    """
    return _mupdf.keep_path(path)

def keep_pixmap(pix):
    """
    keep_pixmap(fz_pixmap * pix) -> fz_pixmap *

    Parameters
    ----------
    pix: fz_pixmap *

    """
    return _mupdf.keep_pixmap(pix)

def keep_separations(sep):
    """
    keep_separations(fz_separations * sep) -> fz_separations *

    Parameters
    ----------
    sep: fz_separations *

    """
    return _mupdf.keep_separations(sep)

def keep_shade(shade):
    """
    keep_shade(fz_shade shade) -> fz_shade

    Parameters
    ----------
    shade: fz_shade *

    """
    return _mupdf.keep_shade(shade)

def keep_storable(arg_1):
    """
    keep_storable(fz_storable const * arg_1) -> void *

    Parameters
    ----------
    arg_1: fz_storable const *

    """
    return _mupdf.keep_storable(arg_1)

def keep_store_context():
    """keep_store_context() -> fz_store *"""
    return _mupdf.keep_store_context()

def keep_stream(stm):
    """
    keep_stream(fz_stream * stm) -> fz_stream *

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.keep_stream(stm)

def keep_stroke_state(stroke):
    """
    keep_stroke_state(fz_stroke_state stroke) -> fz_stroke_state

    Parameters
    ----------
    stroke: fz_stroke_state const *

    """
    return _mupdf.keep_stroke_state(stroke)

def keep_text(text):
    """
    keep_text(fz_text text) -> fz_text

    Parameters
    ----------
    text: fz_text const *

    """
    return _mupdf.keep_text(text)

def koi8u_from_unicode(u):
    """
    koi8u_from_unicode(int u) -> int

    Parameters
    ----------
    u: int

    """
    return _mupdf.koi8u_from_unicode(u)

def last_page(doc):
    """
    last_page(fz_document * doc) -> fz_location

    Parameters
    ----------
    doc: fz_document *

    """
    return _mupdf.last_page(doc)

def layout_document(doc, w, h, em):
    """
    layout_document(fz_document * doc, float w, float h, float em)

    Parameters
    ----------
    doc: fz_document *
    w: float
    h: float
    em: float

    """
    return _mupdf.layout_document(doc, w, h, em)

def lineto(path, x, y):
    """
    lineto(fz_path * path, float x, float y)

    Parameters
    ----------
    path: fz_path *
    x: float
    y: float

    """
    return _mupdf.lineto(path, x, y)

def list_archive_entry(arch, idx):
    """
    list_archive_entry(fz_archive * arch, int idx) -> char const *

    Parameters
    ----------
    arch: fz_archive *
    idx: int

    """
    return _mupdf.list_archive_entry(arch, idx)

def load_bmp_subimage(buf, len, subimage):
    """
    load_bmp_subimage(unsigned char const * buf, size_t len, int subimage) -> fz_pixmap *

    Parameters
    ----------
    buf: unsigned char const *
    len: size_t
    subimage: int

    """
    return _mupdf.load_bmp_subimage(buf, len, subimage)

def load_bmp_subimage_count(buf, len):
    """
    load_bmp_subimage_count(unsigned char const * buf, size_t len) -> int

    Parameters
    ----------
    buf: unsigned char const *
    len: size_t

    """
    return _mupdf.load_bmp_subimage_count(buf, len)

def load_chapter_page(doc, chapter, page):
    """
    load_chapter_page(fz_document * doc, int chapter, int page) -> fz_page *

    Parameters
    ----------
    doc: fz_document *
    chapter: int
    page: int

    """
    return _mupdf.load_chapter_page(doc, chapter, page)

def load_fallback_font(script, language, serif, bold, italic):
    """
    load_fallback_font(int script, int language, int serif, int bold, int italic) -> fz_font *

    Parameters
    ----------
    script: int
    language: int
    serif: int
    bold: int
    italic: int

    """
    return _mupdf.load_fallback_font(script, language, serif, bold, italic)

def load_jbig2_globals(buf):
    """
    load_jbig2_globals(fz_buffer buf) -> fz_jbig2_globals *

    Parameters
    ----------
    buf: fz_buffer *

    """
    return _mupdf.load_jbig2_globals(buf)

def load_jbig2_subimage(buf, len, subimage):
    """
    load_jbig2_subimage(unsigned char const * buf, size_t len, int subimage) -> fz_pixmap *

    Parameters
    ----------
    buf: unsigned char const *
    len: size_t
    subimage: int

    """
    return _mupdf.load_jbig2_subimage(buf, len, subimage)

def load_jbig2_subimage_count(buf, len):
    """
    load_jbig2_subimage_count(unsigned char const * buf, size_t len) -> int

    Parameters
    ----------
    buf: unsigned char const *
    len: size_t

    """
    return _mupdf.load_jbig2_subimage_count(buf, len)

def load_jpx(data, size, cs):
    """
    load_jpx(unsigned char const * data, size_t size, fz_colorspace * cs) -> fz_pixmap *

    Parameters
    ----------
    data: unsigned char const *
    size: size_t
    cs: fz_colorspace *

    """
    return _mupdf.load_jpx(data, size, cs)

def load_links(page):
    """
    load_links(fz_page * page) -> fz_link

    Parameters
    ----------
    page: fz_page *

    """
    return _mupdf.load_links(page)

def load_outline(doc):
    """
    load_outline(fz_document * doc) -> fz_outline

    Parameters
    ----------
    doc: fz_document *

    """
    return _mupdf.load_outline(doc)

def load_page(doc, number):
    """
    load_page(fz_document * doc, int number) -> fz_page *

    Parameters
    ----------
    doc: fz_document *
    number: int

    """
    return _mupdf.load_page(doc, number)

def load_pnm_subimage(buf, len, subimage):
    """
    load_pnm_subimage(unsigned char const * buf, size_t len, int subimage) -> fz_pixmap *

    Parameters
    ----------
    buf: unsigned char const *
    len: size_t
    subimage: int

    """
    return _mupdf.load_pnm_subimage(buf, len, subimage)

def load_pnm_subimage_count(buf, len):
    """
    load_pnm_subimage_count(unsigned char const * buf, size_t len) -> int

    Parameters
    ----------
    buf: unsigned char const *
    len: size_t

    """
    return _mupdf.load_pnm_subimage_count(buf, len)

def load_system_cjk_font(name, ordering, serif):
    """
    load_system_cjk_font(char const * name, int ordering, int serif) -> fz_font *

    Parameters
    ----------
    name: char const *
    ordering: int
    serif: int

    """
    return _mupdf.load_system_cjk_font(name, ordering, serif)

def load_system_font(name, bold, italic, needs_exact_metrics):
    """
    load_system_font(char const * name, int bold, int italic, int needs_exact_metrics) -> fz_font *

    Parameters
    ----------
    name: char const *
    bold: int
    italic: int
    needs_exact_metrics: int

    """
    return _mupdf.load_system_font(name, bold, italic, needs_exact_metrics)

def load_tiff_subimage(buf, len, subimage):
    """
    load_tiff_subimage(unsigned char const * buf, size_t len, int subimage) -> fz_pixmap *

    Parameters
    ----------
    buf: unsigned char const *
    len: size_t
    subimage: int

    """
    return _mupdf.load_tiff_subimage(buf, len, subimage)

def load_tiff_subimage_count(buf, len):
    """
    load_tiff_subimage_count(unsigned char const * buf, size_t len) -> int

    Parameters
    ----------
    buf: unsigned char const *
    len: size_t

    """
    return _mupdf.load_tiff_subimage_count(buf, len)

def location_from_page_number(doc, number):
    """
    location_from_page_number(fz_document * doc, int number) -> fz_location

    Parameters
    ----------
    doc: fz_document *
    number: int

    """
    return _mupdf.location_from_page_number(doc, number)

def lock(lock):
    """
    lock(int lock)

    Parameters
    ----------
    lock: int

    """
    return _mupdf.lock(lock)

def lookup_base14_font(name, len):
    """
    lookup_base14_font(char const * name, int * len) -> unsigned char const *

    Parameters
    ----------
    name: char const *
    len: int *

    """
    return _mupdf.lookup_base14_font(name, len)

def lookup_blendmode(name):
    """
    lookup_blendmode(char const * name) -> int

    Parameters
    ----------
    name: char const *

    """
    return _mupdf.lookup_blendmode(name)

def lookup_bookmark(doc, mark):
    """
    lookup_bookmark(fz_document * doc, fz_bookmark mark) -> fz_location

    Parameters
    ----------
    doc: fz_document *
    mark: fz_bookmark

    """
    return _mupdf.lookup_bookmark(doc, mark)

def lookup_builtin_font(name, bold, italic, len):
    """
    lookup_builtin_font(char const * name, int bold, int italic, int * len) -> unsigned char const *

    Parameters
    ----------
    name: char const *
    bold: int
    italic: int
    len: int *

    """
    return _mupdf.lookup_builtin_font(name, bold, italic, len)

def lookup_cjk_font(ordering, len, index):
    """
    lookup_cjk_font(int ordering, int * len, int * index) -> unsigned char const *

    Parameters
    ----------
    ordering: int
    len: int *
    index: int *

    """
    return _mupdf.lookup_cjk_font(ordering, len, index)

def lookup_cjk_font_by_language(lang, len, subfont):
    """
    lookup_cjk_font_by_language(char const * lang, int * len, int * subfont) -> unsigned char const *

    Parameters
    ----------
    lang: char const *
    len: int *
    subfont: int *

    """
    return _mupdf.lookup_cjk_font_by_language(lang, len, subfont)

def lookup_cjk_ordering_by_language(name):
    """
    lookup_cjk_ordering_by_language(char const * name) -> int

    Parameters
    ----------
    name: char const *

    """
    return _mupdf.lookup_cjk_ordering_by_language(name)

def lookup_metadata(*args):
    """
    lookup_metadata(fz_document * doc, char const * key, char * buf, int size) -> int

    Parameters
    ----------
    doc: fz_document *
    key: char const *
    buf: char *
    size: int

    lookup_metadata(fz_document * doc, char const * key, int * o_out=None) -> std::string

    Parameters
    ----------
    doc: fz_document *
    key: char const *
    o_out: int *

    lookup_metadata(fz_document * doc, char const * key) -> std::string

    Parameters
    ----------
    doc: fz_document *
    key: char const *

    """
    return _mupdf.lookup_metadata(*args)

def lookup_noto_emoji_font(len):
    """
    lookup_noto_emoji_font(int * len) -> unsigned char const *

    Parameters
    ----------
    len: int *

    """
    return _mupdf.lookup_noto_emoji_font(len)

def lookup_noto_font(script, lang, len, subfont):
    """
    lookup_noto_font(int script, int lang, int * len, int * subfont) -> unsigned char const *

    Parameters
    ----------
    script: int
    lang: int
    len: int *
    subfont: int *

    """
    return _mupdf.lookup_noto_font(script, lang, len, subfont)

def lookup_noto_math_font(len):
    """
    lookup_noto_math_font(int * len) -> unsigned char const *

    Parameters
    ----------
    len: int *

    """
    return _mupdf.lookup_noto_math_font(len)

def lookup_noto_music_font(len):
    """
    lookup_noto_music_font(int * len) -> unsigned char const *

    Parameters
    ----------
    len: int *

    """
    return _mupdf.lookup_noto_music_font(len)

def lookup_noto_symbol1_font(len):
    """
    lookup_noto_symbol1_font(int * len) -> unsigned char const *

    Parameters
    ----------
    len: int *

    """
    return _mupdf.lookup_noto_symbol1_font(len)

def lookup_noto_symbol2_font(len):
    """
    lookup_noto_symbol2_font(int * len) -> unsigned char const *

    Parameters
    ----------
    len: int *

    """
    return _mupdf.lookup_noto_symbol2_font(len)

def lookup_rendering_intent(name):
    """
    lookup_rendering_intent(char const * name) -> int

    Parameters
    ----------
    name: char const *

    """
    return _mupdf.lookup_rendering_intent(name)

def make_bookmark(doc, loc):
    """
    make_bookmark(fz_document * doc, fz_location loc) -> fz_bookmark

    Parameters
    ----------
    doc: fz_document *
    loc: fz_location

    """
    return _mupdf.make_bookmark(doc, loc)

def make_irect(x0, y0, x1, y1):
    """
    make_irect(int x0, int y0, int x1, int y1) -> fz_irect

    Parameters
    ----------
    x0: int
    y0: int
    x1: int
    y1: int

    """
    return _mupdf.make_irect(x0, y0, x1, y1)

def make_location(chapter, page):
    """
    make_location(int chapter, int page) -> fz_location

    Parameters
    ----------
    chapter: int
    page: int

    """
    return _mupdf.make_location(chapter, page)

def make_matrix(a, b, c, d, e, f):
    """
    make_matrix(float a, float b, float c, float d, float e, float f) -> fz_matrix

    Parameters
    ----------
    a: float
    b: float
    c: float
    d: float
    e: float
    f: float

    """
    return _mupdf.make_matrix(a, b, c, d, e, f)

def make_point(x, y):
    """
    make_point(float x, float y) -> fz_point

    Parameters
    ----------
    x: float
    y: float

    """
    return _mupdf.make_point(x, y)

def make_quad(ul_x, ul_y, ur_x, ur_y, ll_x, ll_y, lr_x, lr_y):
    """
    make_quad(float ul_x, float ul_y, float ur_x, float ur_y, float ll_x, float ll_y, float lr_x, float lr_y) -> fz_quad

    Parameters
    ----------
    ul_x: float
    ul_y: float
    ur_x: float
    ur_y: float
    ll_x: float
    ll_y: float
    lr_x: float
    lr_y: float

    """
    return _mupdf.make_quad(ul_x, ul_y, ur_x, ur_y, ll_x, ll_y, lr_x, lr_y)

def make_rect(x0, y0, x1, y1):
    """
    make_rect(float x0, float y0, float x1, float y1) -> fz_rect

    Parameters
    ----------
    x0: float
    y0: float
    x1: float
    y1: float

    """
    return _mupdf.make_rect(x0, y0, x1, y1)

def malloc_no_throw(size):
    """
    malloc_no_throw(size_t size) -> void *

    Parameters
    ----------
    size: size_t

    """
    return _mupdf.malloc_no_throw(size)

def matrix_expansion(m):
    """
    matrix_expansion(fz_matrix m) -> float

    Parameters
    ----------
    m: fz_matrix

    """
    return _mupdf.matrix_expansion(m)

def matrix_max_expansion(m):
    """
    matrix_max_expansion(fz_matrix m) -> float

    Parameters
    ----------
    m: fz_matrix

    """
    return _mupdf.matrix_max_expansion(m)

def max(a, b):
    """
    max(float a, float b) -> float

    Parameters
    ----------
    a: float
    b: float

    """
    return _mupdf.max(a, b)

def maxi(a, b):
    """
    maxi(int a, int b) -> int

    Parameters
    ----------
    a: int
    b: int

    """
    return _mupdf.maxi(a, b)

def maxi64(a, b):
    """
    maxi64(int64_t a, int64_t b) -> int64_t

    Parameters
    ----------
    a: int64_t
    b: int64_t

    """
    return _mupdf.maxi64(a, b)

def maxz(a, b):
    """
    maxz(size_t a, size_t b) -> size_t

    Parameters
    ----------
    a: size_t
    b: size_t

    """
    return _mupdf.maxz(a, b)

def md5_buffer(buffer, digest):
    """
    md5_buffer(fz_buffer buffer, unsigned char [16] digest)

    Parameters
    ----------
    buffer: fz_buffer *
    digest: unsigned char [16]

    """
    return _mupdf.md5_buffer(buffer, digest)

def md5_final(state, digest):
    """
    md5_final(fz_md5 state, unsigned char [16] digest)

    Parameters
    ----------
    state: fz_md5 *
    digest: unsigned char [16]

    """
    return _mupdf.md5_final(state, digest)

def md5_init(state):
    """
    md5_init(fz_md5 state)

    Parameters
    ----------
    state: fz_md5 *

    """
    return _mupdf.md5_init(state)

def md5_pixmap(pixmap, digest):
    """
    md5_pixmap(fz_pixmap * pixmap, unsigned char [16] digest)

    Parameters
    ----------
    pixmap: fz_pixmap *
    digest: unsigned char [16]

    """
    return _mupdf.md5_pixmap(pixmap, digest)

def md5_update(state, input, inlen):
    """
    md5_update(fz_md5 state, unsigned char const * input, size_t inlen)

    Parameters
    ----------
    state: fz_md5 *
    input: unsigned char const *
    inlen: size_t

    """
    return _mupdf.md5_update(state, input, inlen)

def md5_update_int64(state, i):
    """
    md5_update_int64(fz_md5 state, int64_t i)

    Parameters
    ----------
    state: fz_md5 *
    i: int64_t

    """
    return _mupdf.md5_update_int64(state, i)

def measure_string(user_font, trm, s, wmode, bidi_level, markup_dir, language):
    """
    measure_string(fz_font * user_font, fz_matrix trm, char const * s, int wmode, int bidi_level, fz_bidi_direction markup_dir, fz_text_language language) -> fz_matrix

    Parameters
    ----------
    user_font: fz_font *
    trm: fz_matrix
    s: char const *
    wmode: int
    bidi_level: int
    markup_dir: enum fz_bidi_direction
    language: enum fz_text_language

    """
    return _mupdf.measure_string(user_font, trm, s, wmode, bidi_level, markup_dir, language)

def memmem(haystack, haystacklen, needle, needlelen):
    """
    memmem(void const * haystack, size_t haystacklen, void const * needle, size_t needlelen) -> void *

    Parameters
    ----------
    haystack: void const *
    haystacklen: size_t
    needle: void const *
    needlelen: size_t

    """
    return _mupdf.memmem(haystack, haystacklen, needle, needlelen)

def memrnd(block, len):
    """
    memrnd(uint8_t * block, int len)

    Parameters
    ----------
    block: uint8_t *
    len: int

    """
    return _mupdf.memrnd(block, len)

def min(a, b):
    """
    min(float a, float b) -> float

    Parameters
    ----------
    a: float
    b: float

    """
    return _mupdf.min(a, b)

def mini(a, b):
    """
    mini(int a, int b) -> int

    Parameters
    ----------
    a: int
    b: int

    """
    return _mupdf.mini(a, b)

def minz(a, b):
    """
    minz(size_t a, size_t b) -> size_t

    Parameters
    ----------
    a: size_t
    b: size_t

    """
    return _mupdf.minz(a, b)

def moveto(path, x, y):
    """
    moveto(fz_path * path, float x, float y)

    Parameters
    ----------
    path: fz_path *
    x: float
    y: float

    """
    return _mupdf.moveto(path, x, y)

def mul255(a, b):
    """
    mul255(int a, int b) -> int

    Parameters
    ----------
    a: int
    b: int

    """
    return _mupdf.mul255(a, b)

def needs_password(doc):
    """
    needs_password(fz_document * doc) -> int

    Parameters
    ----------
    doc: fz_document *

    """
    return _mupdf.needs_password(doc)

def new_arc4_output(chain, key, keylen):
    """
    new_arc4_output(fz_output * chain, unsigned char * key, size_t keylen) -> fz_output *

    Parameters
    ----------
    chain: fz_output *
    key: unsigned char *
    keylen: size_t

    """
    return _mupdf.new_arc4_output(chain, key, keylen)

def new_archive_of_size(file, size):
    """
    new_archive_of_size(fz_stream * file, int size) -> fz_archive *

    Parameters
    ----------
    file: fz_stream *
    size: int

    """
    return _mupdf.new_archive_of_size(file, size)

def new_ascii85_output(chain):
    """
    new_ascii85_output(fz_output * chain) -> fz_output *

    Parameters
    ----------
    chain: fz_output *

    """
    return _mupdf.new_ascii85_output(chain)

def new_asciihex_output(chain):
    """
    new_asciihex_output(fz_output * chain) -> fz_output *

    Parameters
    ----------
    chain: fz_output *

    """
    return _mupdf.new_asciihex_output(chain)

def new_band_writer_of_size(size, out):
    """
    new_band_writer_of_size(size_t size, fz_output * out) -> fz_band_writer *

    Parameters
    ----------
    size: size_t
    out: fz_output *

    """
    return _mupdf.new_band_writer_of_size(size, out)

def new_base14_font(name):
    """
    new_base14_font(char const * name) -> fz_font *

    Parameters
    ----------
    name: char const *

    """
    return _mupdf.new_base14_font(name)

def new_bbox_device(rectp):
    """
    new_bbox_device(fz_rect rectp) -> fz_device *

    Parameters
    ----------
    rectp: fz_rect *

    """
    return _mupdf.new_bbox_device(rectp)

def new_bitmap(w, h, n, xres, yres):
    """
    new_bitmap(int w, int h, int n, int xres, int yres) -> fz_bitmap

    Parameters
    ----------
    w: int
    h: int
    n: int
    xres: int
    yres: int

    """
    return _mupdf.new_bitmap(w, h, n, xres, yres)

def new_bitmap_from_pixmap(pix, ht):
    """
    new_bitmap_from_pixmap(fz_pixmap * pix, fz_halftone * ht) -> fz_bitmap

    Parameters
    ----------
    pix: fz_pixmap *
    ht: fz_halftone *

    """
    return _mupdf.new_bitmap_from_pixmap(pix, ht)

def new_bitmap_from_pixmap_band(pix, ht, band_start):
    """
    new_bitmap_from_pixmap_band(fz_pixmap * pix, fz_halftone * ht, int band_start) -> fz_bitmap

    Parameters
    ----------
    pix: fz_pixmap *
    ht: fz_halftone *
    band_start: int

    """
    return _mupdf.new_bitmap_from_pixmap_band(pix, ht, band_start)

def new_buffer(capacity):
    """
    new_buffer(size_t capacity) -> fz_buffer

    Parameters
    ----------
    capacity: size_t

    """
    return _mupdf.new_buffer(capacity)

def new_buffer_from_base64(data, size):
    """
    new_buffer_from_base64(char const * data, size_t size) -> fz_buffer

    Parameters
    ----------
    data: char const *
    size: size_t

    """
    return _mupdf.new_buffer_from_base64(data, size)

def new_buffer_from_copied_data(data, size):
    """
    new_buffer_from_copied_data(unsigned char const * data, size_t size) -> fz_buffer

    Parameters
    ----------
    data: unsigned char const *
    size: size_t

    """
    return _mupdf.new_buffer_from_copied_data(data, size)

def new_buffer_from_data(data, size):
    """
    new_buffer_from_data(unsigned char * data, size_t size) -> fz_buffer

    Parameters
    ----------
    data: unsigned char *
    size: size_t

    """
    return _mupdf.new_buffer_from_data(data, size)

def new_buffer_from_display_list(list, options):
    """
    new_buffer_from_display_list(fz_display_list * list, fz_stext_options options) -> fz_buffer

    Parameters
    ----------
    list: fz_display_list *
    options: fz_stext_options const *

    """
    return _mupdf.new_buffer_from_display_list(list, options)

def new_buffer_from_image_as_png(image, color_params):
    """
    new_buffer_from_image_as_png(fz_image * image, fz_color_params color_params) -> fz_buffer

    Parameters
    ----------
    image: fz_image *
    color_params: fz_color_params

    """
    return _mupdf.new_buffer_from_image_as_png(image, color_params)

def new_buffer_from_page(page, options):
    """
    new_buffer_from_page(fz_page * page, fz_stext_options options) -> fz_buffer

    Parameters
    ----------
    page: fz_page *
    options: fz_stext_options const *

    """
    return _mupdf.new_buffer_from_page(page, options)

def new_buffer_from_page_number(doc, number, options):
    """
    new_buffer_from_page_number(fz_document * doc, int number, fz_stext_options options) -> fz_buffer

    Parameters
    ----------
    doc: fz_document *
    number: int
    options: fz_stext_options const *

    """
    return _mupdf.new_buffer_from_page_number(doc, number, options)

def new_buffer_from_page_with_format(page, format, options, transform, cookie):
    """
    new_buffer_from_page_with_format(fz_page * page, char const * format, char const * options, fz_matrix transform, fz_cookie cookie) -> fz_buffer

    Parameters
    ----------
    page: fz_page *
    format: char const *
    options: char const *
    transform: fz_matrix
    cookie: fz_cookie *

    """
    return _mupdf.new_buffer_from_page_with_format(page, format, options, transform, cookie)

def new_buffer_from_pixmap_as_png(pixmap, color_params):
    """
    new_buffer_from_pixmap_as_png(fz_pixmap * pixmap, fz_color_params color_params) -> fz_buffer

    Parameters
    ----------
    pixmap: fz_pixmap *
    color_params: fz_color_params

    """
    return _mupdf.new_buffer_from_pixmap_as_png(pixmap, color_params)

def new_buffer_from_shared_data(data, size):
    """
    new_buffer_from_shared_data(unsigned char const * data, size_t size) -> fz_buffer

    Parameters
    ----------
    data: unsigned char const *
    size: size_t

    """
    return _mupdf.new_buffer_from_shared_data(data, size)

def new_buffer_from_stext_page(text):
    """
    new_buffer_from_stext_page(fz_stext_page text) -> fz_buffer

    Parameters
    ----------
    text: fz_stext_page *

    """
    return _mupdf.new_buffer_from_stext_page(text)

def new_builtin_font(name, is_bold, is_italic):
    """
    new_builtin_font(char const * name, int is_bold, int is_italic) -> fz_font *

    Parameters
    ----------
    name: char const *
    is_bold: int
    is_italic: int

    """
    return _mupdf.new_builtin_font(name, is_bold, is_italic)

def new_cal_gray_colorspace(wp, bp, gamma):
    """
    new_cal_gray_colorspace(float [3] wp, float [3] bp, float gamma) -> fz_colorspace *

    Parameters
    ----------
    wp: float [3]
    bp: float [3]
    gamma: float

    """
    return _mupdf.new_cal_gray_colorspace(wp, bp, gamma)

def new_cal_rgb_colorspace(wp, bp, gamma, matrix):
    """
    new_cal_rgb_colorspace(float [3] wp, float [3] bp, float [3] gamma, float [9] matrix) -> fz_colorspace *

    Parameters
    ----------
    wp: float [3]
    bp: float [3]
    gamma: float [3]
    matrix: float [9]

    """
    return _mupdf.new_cal_rgb_colorspace(wp, bp, gamma, matrix)

def new_cbz_writer(path, options):
    """
    new_cbz_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_cbz_writer(path, options)

def new_cbz_writer_with_output(out, options):
    """
    new_cbz_writer_with_output(fz_output * out, char const * options) -> fz_document_writer *

    Parameters
    ----------
    out: fz_output *
    options: char const *

    """
    return _mupdf.new_cbz_writer_with_output(out, options)

def new_cjk_font(ordering):
    """
    new_cjk_font(int ordering) -> fz_font *

    Parameters
    ----------
    ordering: int

    """
    return _mupdf.new_cjk_font(ordering)

def new_color_pcl_band_writer(out, options):
    """
    new_color_pcl_band_writer(fz_output * out, fz_pcl_options options) -> fz_band_writer *

    Parameters
    ----------
    out: fz_output *
    options: fz_pcl_options const *

    """
    return _mupdf.new_color_pcl_band_writer(out, options)

def new_colorspace(type, flags, n, name):
    """
    new_colorspace(enum fz_colorspace_type type, int flags, int n, char const * name) -> fz_colorspace *

    Parameters
    ----------
    type: enum enum fz_colorspace_type
    flags: int
    n: int
    name: char const *

    """
    return _mupdf.new_colorspace(type, flags, n, name)

def new_context_imp(alloc, locks, max_store, version):
    """
    new_context_imp(fz_alloc_context alloc, fz_locks_context locks, size_t max_store, char const * version) -> fz_context *

    Parameters
    ----------
    alloc: fz_alloc_context const *
    locks: fz_locks_context const *
    max_store: size_t
    version: char const *

    """
    return _mupdf.new_context_imp(alloc, locks, max_store, version)

def new_default_colorspaces():
    """new_default_colorspaces() -> fz_default_colorspaces"""
    return _mupdf.new_default_colorspaces()

def new_deflate_output(chain, effort, raw):
    """
    new_deflate_output(fz_output * chain, int effort, int raw) -> fz_output *

    Parameters
    ----------
    chain: fz_output *
    effort: int
    raw: int

    """
    return _mupdf.new_deflate_output(chain, effort, raw)

def new_deflated_data(compressed_length, source, source_length, level):
    """
    new_deflated_data(size_t * compressed_length, unsigned char const * source, size_t source_length, fz_deflate_level level) -> unsigned char *

    Parameters
    ----------
    compressed_length: size_t *
    source: unsigned char const *
    source_length: size_t
    level: enum fz_deflate_level

    """
    return _mupdf.new_deflated_data(compressed_length, source, source_length, level)

def new_deflated_data_from_buffer(compressed_length, buffer, level):
    """
    new_deflated_data_from_buffer(size_t * compressed_length, fz_buffer buffer, fz_deflate_level level) -> unsigned char *

    Parameters
    ----------
    compressed_length: size_t *
    buffer: fz_buffer *
    level: enum fz_deflate_level

    """
    return _mupdf.new_deflated_data_from_buffer(compressed_length, buffer, level)

def new_device_of_size(size):
    """
    new_device_of_size(int size) -> fz_device *

    Parameters
    ----------
    size: int

    """
    return _mupdf.new_device_of_size(size)

def new_display_list(mediabox):
    """
    new_display_list(fz_rect mediabox) -> fz_display_list *

    Parameters
    ----------
    mediabox: fz_rect

    """
    return _mupdf.new_display_list(mediabox)

def new_display_list_from_page(page):
    """
    new_display_list_from_page(fz_page * page) -> fz_display_list *

    Parameters
    ----------
    page: fz_page *

    """
    return _mupdf.new_display_list_from_page(page)

def new_display_list_from_page_contents(page):
    """
    new_display_list_from_page_contents(fz_page * page) -> fz_display_list *

    Parameters
    ----------
    page: fz_page *

    """
    return _mupdf.new_display_list_from_page_contents(page)

def new_display_list_from_page_number(doc, number):
    """
    new_display_list_from_page_number(fz_document * doc, int number) -> fz_display_list *

    Parameters
    ----------
    doc: fz_document *
    number: int

    """
    return _mupdf.new_display_list_from_page_number(doc, number)

def new_display_list_from_svg(buf, base_uri, zip, w, h):
    """
    new_display_list_from_svg(fz_buffer buf, char const * base_uri, fz_archive * zip, float * w, float * h) -> fz_display_list *

    Parameters
    ----------
    buf: fz_buffer *
    base_uri: char const *
    zip: fz_archive *
    w: float *
    h: float *

    """
    return _mupdf.new_display_list_from_svg(buf, base_uri, zip, w, h)

def new_display_list_from_svg_xml(xmldoc, xml, base_uri, zip, w, h):
    """
    new_display_list_from_svg_xml(fz_xml_doc * xmldoc, fz_xml * xml, char const * base_uri, fz_archive * zip, float * w, float * h) -> fz_display_list *

    Parameters
    ----------
    xmldoc: fz_xml_doc *
    xml: fz_xml *
    base_uri: char const *
    zip: fz_archive *
    w: float *
    h: float *

    """
    return _mupdf.new_display_list_from_svg_xml(xmldoc, xml, base_uri, zip, w, h)

def new_document_of_size(size):
    """
    new_document_of_size(int size) -> void *

    Parameters
    ----------
    size: int

    """
    return _mupdf.new_document_of_size(size)

def new_document_writer(path, format, options):
    """
    new_document_writer(char const * path, char const * format, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    format: char const *
    options: char const *

    """
    return _mupdf.new_document_writer(path, format, options)

def new_document_writer_of_size(size, begin_page, end_page, close, drop):
    """
    new_document_writer_of_size(size_t size, fz_document_writer_begin_page_fn * begin_page, fz_document_writer_end_page_fn * end_page, fz_document_writer_close_writer_fn * close, fz_document_writer_drop_writer_fn * drop) -> fz_document_writer *

    Parameters
    ----------
    size: size_t
    begin_page: fz_document_writer_begin_page_fn *
    end_page: fz_document_writer_end_page_fn *
    close: fz_document_writer_close_writer_fn *
    drop: fz_document_writer_drop_writer_fn *

    """
    return _mupdf.new_document_writer_of_size(size, begin_page, end_page, close, drop)

def new_document_writer_with_output(out, format, options):
    """
    new_document_writer_with_output(fz_output * out, char const * format, char const * options) -> fz_document_writer *

    Parameters
    ----------
    out: fz_output *
    format: char const *
    options: char const *

    """
    return _mupdf.new_document_writer_with_output(out, format, options)

def new_docx_writer(path, options):
    """
    new_docx_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_docx_writer(path, options)

def new_docx_writer_with_output(out, options):
    """
    new_docx_writer_with_output(fz_output * out, char const * options) -> fz_document_writer *

    Parameters
    ----------
    out: fz_output *
    options: char const *

    """
    return _mupdf.new_docx_writer_with_output(out, options)

def new_draw_device(transform, dest):
    """
    new_draw_device(fz_matrix transform, fz_pixmap * dest) -> fz_device *

    Parameters
    ----------
    transform: fz_matrix
    dest: fz_pixmap *

    """
    return _mupdf.new_draw_device(transform, dest)

def new_draw_device_type3(transform, dest):
    """
    new_draw_device_type3(fz_matrix transform, fz_pixmap * dest) -> fz_device *

    Parameters
    ----------
    transform: fz_matrix
    dest: fz_pixmap *

    """
    return _mupdf.new_draw_device_type3(transform, dest)

def new_draw_device_with_bbox(transform, dest, clip):
    """
    new_draw_device_with_bbox(fz_matrix transform, fz_pixmap * dest, fz_irect clip) -> fz_device *

    Parameters
    ----------
    transform: fz_matrix
    dest: fz_pixmap *
    clip: fz_irect const *

    """
    return _mupdf.new_draw_device_with_bbox(transform, dest, clip)

def new_draw_device_with_bbox_proof(transform, dest, clip, cs):
    """
    new_draw_device_with_bbox_proof(fz_matrix transform, fz_pixmap * dest, fz_irect clip, fz_colorspace * cs) -> fz_device *

    Parameters
    ----------
    transform: fz_matrix
    dest: fz_pixmap *
    clip: fz_irect const *
    cs: fz_colorspace *

    """
    return _mupdf.new_draw_device_with_bbox_proof(transform, dest, clip, cs)

def new_draw_device_with_options(options, mediabox, pixmap):
    """
    new_draw_device_with_options(fz_draw_options options, fz_rect mediabox, fz_pixmap ** pixmap) -> fz_device *

    Parameters
    ----------
    options: fz_draw_options const *
    mediabox: fz_rect
    pixmap: fz_pixmap **

    """
    return _mupdf.new_draw_device_with_options(options, mediabox, pixmap)

def new_draw_device_with_proof(transform, dest, proof_cs):
    """
    new_draw_device_with_proof(fz_matrix transform, fz_pixmap * dest, fz_colorspace * proof_cs) -> fz_device *

    Parameters
    ----------
    transform: fz_matrix
    dest: fz_pixmap *
    proof_cs: fz_colorspace *

    """
    return _mupdf.new_draw_device_with_proof(transform, dest, proof_cs)

def new_font_from_buffer(name, buffer, index, use_glyph_bbox):
    """
    new_font_from_buffer(char const * name, fz_buffer buffer, int index, int use_glyph_bbox) -> fz_font *

    Parameters
    ----------
    name: char const *
    buffer: fz_buffer *
    index: int
    use_glyph_bbox: int

    """
    return _mupdf.new_font_from_buffer(name, buffer, index, use_glyph_bbox)

def new_font_from_file(name, path, index, use_glyph_bbox):
    """
    new_font_from_file(char const * name, char const * path, int index, int use_glyph_bbox) -> fz_font *

    Parameters
    ----------
    name: char const *
    path: char const *
    index: int
    use_glyph_bbox: int

    """
    return _mupdf.new_font_from_file(name, path, index, use_glyph_bbox)

def new_font_from_memory(name, data, len, index, use_glyph_bbox):
    """
    new_font_from_memory(char const * name, unsigned char const * data, int len, int index, int use_glyph_bbox) -> fz_font *

    Parameters
    ----------
    name: char const *
    data: unsigned char const *
    len: int
    index: int
    use_glyph_bbox: int

    """
    return _mupdf.new_font_from_memory(name, data, len, index, use_glyph_bbox)

def new_hash_table(initialsize, keylen, lock, drop_val):
    """
    new_hash_table(int initialsize, int keylen, int lock, fz_hash_table_drop_fn * drop_val) -> fz_hash_table *

    Parameters
    ----------
    initialsize: int
    keylen: int
    lock: int
    drop_val: fz_hash_table_drop_fn *

    """
    return _mupdf.new_hash_table(initialsize, keylen, lock, drop_val)

def new_icc_colorspace(type, flags, name, buf):
    """
    new_icc_colorspace(enum fz_colorspace_type type, int flags, char const * name, fz_buffer buf) -> fz_colorspace *

    Parameters
    ----------
    type: enum enum fz_colorspace_type
    flags: int
    name: char const *
    buf: fz_buffer *

    """
    return _mupdf.new_icc_colorspace(type, flags, name, buf)

def new_image_from_buffer(buffer):
    """
    new_image_from_buffer(fz_buffer buffer) -> fz_image *

    Parameters
    ----------
    buffer: fz_buffer *

    """
    return _mupdf.new_image_from_buffer(buffer)

def new_image_from_compressed_buffer(w, h, bpc, colorspace, xres, yres, interpolate, imagemask, decode, colorkey, buffer, mask):
    """
    new_image_from_compressed_buffer(int w, int h, int bpc, fz_colorspace * colorspace, int xres, int yres, int interpolate, int imagemask, float * decode, int * colorkey, fz_compressed_buffer buffer, fz_image * mask) -> fz_image *

    Parameters
    ----------
    w: int
    h: int
    bpc: int
    colorspace: fz_colorspace *
    xres: int
    yres: int
    interpolate: int
    imagemask: int
    decode: float *
    colorkey: int *
    buffer: fz_compressed_buffer *
    mask: fz_image *

    """
    return _mupdf.new_image_from_compressed_buffer(w, h, bpc, colorspace, xres, yres, interpolate, imagemask, decode, colorkey, buffer, mask)

def new_image_from_display_list(w, h, list):
    """
    new_image_from_display_list(float w, float h, fz_display_list * list) -> fz_image *

    Parameters
    ----------
    w: float
    h: float
    list: fz_display_list *

    """
    return _mupdf.new_image_from_display_list(w, h, list)

def new_image_from_file(path):
    """
    new_image_from_file(char const * path) -> fz_image *

    Parameters
    ----------
    path: char const *

    """
    return _mupdf.new_image_from_file(path)

def new_image_from_pixmap(pixmap, mask):
    """
    new_image_from_pixmap(fz_pixmap * pixmap, fz_image * mask) -> fz_image *

    Parameters
    ----------
    pixmap: fz_pixmap *
    mask: fz_image *

    """
    return _mupdf.new_image_from_pixmap(pixmap, mask)

def new_image_from_svg(buf, base_uri, zip):
    """
    new_image_from_svg(fz_buffer buf, char const * base_uri, fz_archive * zip) -> fz_image *

    Parameters
    ----------
    buf: fz_buffer *
    base_uri: char const *
    zip: fz_archive *

    """
    return _mupdf.new_image_from_svg(buf, base_uri, zip)

def new_image_from_svg_xml(xmldoc, xml, base_uri, zip):
    """
    new_image_from_svg_xml(fz_xml_doc * xmldoc, fz_xml * xml, char const * base_uri, fz_archive * zip) -> fz_image *

    Parameters
    ----------
    xmldoc: fz_xml_doc *
    xml: fz_xml *
    base_uri: char const *
    zip: fz_archive *

    """
    return _mupdf.new_image_from_svg_xml(xmldoc, xml, base_uri, zip)

def new_image_of_size(w, h, bpc, colorspace, xres, yres, interpolate, imagemask, decode, colorkey, mask, size, get_pixmap, get_size, drop):
    """
    new_image_of_size(int w, int h, int bpc, fz_colorspace * colorspace, int xres, int yres, int interpolate, int imagemask, float * decode, int * colorkey, fz_image * mask, size_t size, fz_image_get_pixmap_fn * get_pixmap, fz_image_get_size_fn * get_size, fz_drop_image_fn * drop) -> fz_image *

    Parameters
    ----------
    w: int
    h: int
    bpc: int
    colorspace: fz_colorspace *
    xres: int
    yres: int
    interpolate: int
    imagemask: int
    decode: float *
    colorkey: int *
    mask: fz_image *
    size: size_t
    get_pixmap: fz_image_get_pixmap_fn *
    get_size: fz_image_get_size_fn *
    drop: fz_drop_image_fn *

    """
    return _mupdf.new_image_of_size(w, h, bpc, colorspace, xres, yres, interpolate, imagemask, decode, colorkey, mask, size, get_pixmap, get_size, drop)

def new_indexed_colorspace(base, high, lookup):
    """
    new_indexed_colorspace(fz_colorspace * base, int high, unsigned char * lookup) -> fz_colorspace *

    Parameters
    ----------
    base: fz_colorspace *
    high: int
    lookup: unsigned char *

    """
    return _mupdf.new_indexed_colorspace(base, high, lookup)

def new_layout():
    """new_layout() -> fz_layout_block"""
    return _mupdf.new_layout()

def new_link(bbox, uri):
    """
    new_link(fz_rect bbox, char const * uri) -> fz_link

    Parameters
    ----------
    bbox: fz_rect
    uri: char const *

    """
    return _mupdf.new_link(bbox, uri)

def new_list_device(list):
    """
    new_list_device(fz_display_list * list) -> fz_device *

    Parameters
    ----------
    list: fz_display_list *

    """
    return _mupdf.new_list_device(list)

def new_log_for_module(module):
    """
    new_log_for_module(char const * module) -> fz_output *

    Parameters
    ----------
    module: char const *

    """
    return _mupdf.new_log_for_module(module)

def new_mono_pcl_band_writer(out, options):
    """
    new_mono_pcl_band_writer(fz_output * out, fz_pcl_options options) -> fz_band_writer *

    Parameters
    ----------
    out: fz_output *
    options: fz_pcl_options const *

    """
    return _mupdf.new_mono_pcl_band_writer(out, options)

def new_mono_pwg_band_writer(out, pwg):
    """
    new_mono_pwg_band_writer(fz_output * out, fz_pwg_options pwg) -> fz_band_writer *

    Parameters
    ----------
    out: fz_output *
    pwg: fz_pwg_options const *

    """
    return _mupdf.new_mono_pwg_band_writer(out, pwg)

def new_ocr_device(target, ctm, mediabox, with_list, language, datadir, progress, progress_arg):
    """
    new_ocr_device(fz_device * target, fz_matrix ctm, fz_rect mediabox, int with_list, char const * language, char const * datadir, int (*)(fz_context *,void *,int) progress, void * progress_arg) -> fz_device *

    Parameters
    ----------
    target: fz_device *
    ctm: fz_matrix
    mediabox: fz_rect
    with_list: int
    language: char const *
    datadir: char const *
    progress: int (*)(fz_context *,void *,int)
    progress_arg: void *

    """
    return _mupdf.new_ocr_device(target, ctm, mediabox, with_list, language, datadir, progress, progress_arg)

def new_odt_writer(path, options):
    """
    new_odt_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_odt_writer(path, options)

def new_odt_writer_with_output(out, options):
    """
    new_odt_writer_with_output(fz_output * out, char const * options) -> fz_document_writer *

    Parameters
    ----------
    out: fz_output *
    options: char const *

    """
    return _mupdf.new_odt_writer_with_output(out, options)

def new_outline():
    """new_outline() -> fz_outline"""
    return _mupdf.new_outline()

def new_output(bufsiz, state, write, close, drop):
    """
    new_output(int bufsiz, void * state, fz_output_write_fn * write, fz_output_close_fn * close, fz_output_drop_fn * drop) -> fz_output *

    Parameters
    ----------
    bufsiz: int
    state: void *
    write: fz_output_write_fn *
    close: fz_output_close_fn *
    drop: fz_output_drop_fn *

    """
    return _mupdf.new_output(bufsiz, state, write, close, drop)

def new_output_with_buffer(buf):
    """
    new_output_with_buffer(fz_buffer buf) -> fz_output *

    Parameters
    ----------
    buf: fz_buffer *

    """
    return _mupdf.new_output_with_buffer(buf)

def new_output_with_path(filename, append):
    """
    new_output_with_path(char const * filename, int append) -> fz_output *

    Parameters
    ----------
    filename: char const *
    append: int

    """
    return _mupdf.new_output_with_path(filename, append)

def new_page_of_size(size, doc):
    """
    new_page_of_size(int size, fz_document * doc) -> fz_page *

    Parameters
    ----------
    size: int
    doc: fz_document *

    """
    return _mupdf.new_page_of_size(size, doc)

def new_pam_band_writer(out):
    """
    new_pam_band_writer(fz_output * out) -> fz_band_writer *

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.new_pam_band_writer(out)

def new_pam_pixmap_writer(path, options):
    """
    new_pam_pixmap_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_pam_pixmap_writer(path, options)

def new_path():
    """new_path() -> fz_path *"""
    return _mupdf.new_path()

def new_pbm_band_writer(out):
    """
    new_pbm_band_writer(fz_output * out) -> fz_band_writer *

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.new_pbm_band_writer(out)

def new_pbm_pixmap_writer(path, options):
    """
    new_pbm_pixmap_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_pbm_pixmap_writer(path, options)

def new_pcl_writer(path, options):
    """
    new_pcl_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_pcl_writer(path, options)

def new_pcl_writer_with_output(out, options):
    """
    new_pcl_writer_with_output(fz_output * out, char const * options) -> fz_document_writer *

    Parameters
    ----------
    out: fz_output *
    options: char const *

    """
    return _mupdf.new_pcl_writer_with_output(out, options)

def new_pclm_band_writer(out, options):
    """
    new_pclm_band_writer(fz_output * out, fz_pclm_options options) -> fz_band_writer *

    Parameters
    ----------
    out: fz_output *
    options: fz_pclm_options const *

    """
    return _mupdf.new_pclm_band_writer(out, options)

def new_pclm_writer(path, options):
    """
    new_pclm_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_pclm_writer(path, options)

def new_pclm_writer_with_output(out, options):
    """
    new_pclm_writer_with_output(fz_output * out, char const * options) -> fz_document_writer *

    Parameters
    ----------
    out: fz_output *
    options: char const *

    """
    return _mupdf.new_pclm_writer_with_output(out, options)

def new_pdf_writer(path, options):
    """
    new_pdf_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_pdf_writer(path, options)

def new_pdf_writer_with_output(out, options):
    """
    new_pdf_writer_with_output(fz_output * out, char const * options) -> fz_document_writer *

    Parameters
    ----------
    out: fz_output *
    options: char const *

    """
    return _mupdf.new_pdf_writer_with_output(out, options)

def new_pdfocr_band_writer(out, options):
    """
    new_pdfocr_band_writer(fz_output * out, fz_pdfocr_options options) -> fz_band_writer *

    Parameters
    ----------
    out: fz_output *
    options: fz_pdfocr_options const *

    """
    return _mupdf.new_pdfocr_band_writer(out, options)

def new_pdfocr_writer(path, options):
    """
    new_pdfocr_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_pdfocr_writer(path, options)

def new_pdfocr_writer_with_output(out, options):
    """
    new_pdfocr_writer_with_output(fz_output * out, char const * options) -> fz_document_writer *

    Parameters
    ----------
    out: fz_output *
    options: char const *

    """
    return _mupdf.new_pdfocr_writer_with_output(out, options)

def new_pgm_pixmap_writer(path, options):
    """
    new_pgm_pixmap_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_pgm_pixmap_writer(path, options)

def new_pixmap(cs, w, h, seps, alpha):
    """
    new_pixmap(fz_colorspace * cs, int w, int h, fz_separations * seps, int alpha) -> fz_pixmap *

    Parameters
    ----------
    cs: fz_colorspace *
    w: int
    h: int
    seps: fz_separations *
    alpha: int

    """
    return _mupdf.new_pixmap(cs, w, h, seps, alpha)

def new_pixmap_from_alpha_channel(src):
    """
    new_pixmap_from_alpha_channel(fz_pixmap * src) -> fz_pixmap *

    Parameters
    ----------
    src: fz_pixmap *

    """
    return _mupdf.new_pixmap_from_alpha_channel(src)

def new_pixmap_from_color_and_mask(color, mask):
    """
    new_pixmap_from_color_and_mask(fz_pixmap * color, fz_pixmap * mask) -> fz_pixmap *

    Parameters
    ----------
    color: fz_pixmap *
    mask: fz_pixmap *

    """
    return _mupdf.new_pixmap_from_color_and_mask(color, mask)

def new_pixmap_from_display_list(list, ctm, cs, alpha):
    """
    new_pixmap_from_display_list(fz_display_list * list, fz_matrix ctm, fz_colorspace * cs, int alpha) -> fz_pixmap *

    Parameters
    ----------
    list: fz_display_list *
    ctm: fz_matrix
    cs: fz_colorspace *
    alpha: int

    """
    return _mupdf.new_pixmap_from_display_list(list, ctm, cs, alpha)

def new_pixmap_from_display_list_with_separations(list, ctm, cs, seps, alpha):
    """
    new_pixmap_from_display_list_with_separations(fz_display_list * list, fz_matrix ctm, fz_colorspace * cs, fz_separations * seps, int alpha) -> fz_pixmap *

    Parameters
    ----------
    list: fz_display_list *
    ctm: fz_matrix
    cs: fz_colorspace *
    seps: fz_separations *
    alpha: int

    """
    return _mupdf.new_pixmap_from_display_list_with_separations(list, ctm, cs, seps, alpha)

def new_pixmap_from_page(page, ctm, cs, alpha):
    """
    new_pixmap_from_page(fz_page * page, fz_matrix ctm, fz_colorspace * cs, int alpha) -> fz_pixmap *

    Parameters
    ----------
    page: fz_page *
    ctm: fz_matrix
    cs: fz_colorspace *
    alpha: int

    """
    return _mupdf.new_pixmap_from_page(page, ctm, cs, alpha)

def new_pixmap_from_page_contents(page, ctm, cs, alpha):
    """
    new_pixmap_from_page_contents(fz_page * page, fz_matrix ctm, fz_colorspace * cs, int alpha) -> fz_pixmap *

    Parameters
    ----------
    page: fz_page *
    ctm: fz_matrix
    cs: fz_colorspace *
    alpha: int

    """
    return _mupdf.new_pixmap_from_page_contents(page, ctm, cs, alpha)

def new_pixmap_from_page_contents_with_separations(page, ctm, cs, seps, alpha):
    """
    new_pixmap_from_page_contents_with_separations(fz_page * page, fz_matrix ctm, fz_colorspace * cs, fz_separations * seps, int alpha) -> fz_pixmap *

    Parameters
    ----------
    page: fz_page *
    ctm: fz_matrix
    cs: fz_colorspace *
    seps: fz_separations *
    alpha: int

    """
    return _mupdf.new_pixmap_from_page_contents_with_separations(page, ctm, cs, seps, alpha)

def new_pixmap_from_page_number(doc, number, ctm, cs, alpha):
    """
    new_pixmap_from_page_number(fz_document * doc, int number, fz_matrix ctm, fz_colorspace * cs, int alpha) -> fz_pixmap *

    Parameters
    ----------
    doc: fz_document *
    number: int
    ctm: fz_matrix
    cs: fz_colorspace *
    alpha: int

    """
    return _mupdf.new_pixmap_from_page_number(doc, number, ctm, cs, alpha)

def new_pixmap_from_page_number_with_separations(doc, number, ctm, cs, seps, alpha):
    """
    new_pixmap_from_page_number_with_separations(fz_document * doc, int number, fz_matrix ctm, fz_colorspace * cs, fz_separations * seps, int alpha) -> fz_pixmap *

    Parameters
    ----------
    doc: fz_document *
    number: int
    ctm: fz_matrix
    cs: fz_colorspace *
    seps: fz_separations *
    alpha: int

    """
    return _mupdf.new_pixmap_from_page_number_with_separations(doc, number, ctm, cs, seps, alpha)

def new_pixmap_from_page_with_separations(page, ctm, cs, seps, alpha):
    """
    new_pixmap_from_page_with_separations(fz_page * page, fz_matrix ctm, fz_colorspace * cs, fz_separations * seps, int alpha) -> fz_pixmap *

    Parameters
    ----------
    page: fz_page *
    ctm: fz_matrix
    cs: fz_colorspace *
    seps: fz_separations *
    alpha: int

    """
    return _mupdf.new_pixmap_from_page_with_separations(page, ctm, cs, seps, alpha)

def new_pixmap_from_pixmap(pixmap, rect):
    """
    new_pixmap_from_pixmap(fz_pixmap * pixmap, fz_irect rect) -> fz_pixmap *

    Parameters
    ----------
    pixmap: fz_pixmap *
    rect: fz_irect const *

    """
    return _mupdf.new_pixmap_from_pixmap(pixmap, rect)

def new_pixmap_with_bbox(colorspace, bbox, seps, alpha):
    """
    new_pixmap_with_bbox(fz_colorspace * colorspace, fz_irect bbox, fz_separations * seps, int alpha) -> fz_pixmap *

    Parameters
    ----------
    colorspace: fz_colorspace *
    bbox: fz_irect
    seps: fz_separations *
    alpha: int

    """
    return _mupdf.new_pixmap_with_bbox(colorspace, bbox, seps, alpha)

def new_pixmap_with_bbox_and_data(colorspace, rect, seps, alpha, samples):
    """
    new_pixmap_with_bbox_and_data(fz_colorspace * colorspace, fz_irect rect, fz_separations * seps, int alpha, unsigned char * samples) -> fz_pixmap *

    Parameters
    ----------
    colorspace: fz_colorspace *
    rect: fz_irect
    seps: fz_separations *
    alpha: int
    samples: unsigned char *

    """
    return _mupdf.new_pixmap_with_bbox_and_data(colorspace, rect, seps, alpha, samples)

def new_pixmap_with_data(colorspace, w, h, seps, alpha, stride, samples):
    """
    new_pixmap_with_data(fz_colorspace * colorspace, int w, int h, fz_separations * seps, int alpha, int stride, unsigned char * samples) -> fz_pixmap *

    Parameters
    ----------
    colorspace: fz_colorspace *
    w: int
    h: int
    seps: fz_separations *
    alpha: int
    stride: int
    samples: unsigned char *

    """
    return _mupdf.new_pixmap_with_data(colorspace, w, h, seps, alpha, stride, samples)

def new_pixmap_writer(path, options, default_path, n, save):
    """
    new_pixmap_writer(char const * path, char const * options, char const * default_path, int n, void (*)(fz_context *,fz_pixmap *,char const *) save) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *
    default_path: char const *
    n: int
    save: void (*)(fz_context *,fz_pixmap *,char const *)

    """
    return _mupdf.new_pixmap_writer(path, options, default_path, n, save)

def new_pkm_band_writer(out):
    """
    new_pkm_band_writer(fz_output * out) -> fz_band_writer *

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.new_pkm_band_writer(out)

def new_pkm_pixmap_writer(path, options):
    """
    new_pkm_pixmap_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_pkm_pixmap_writer(path, options)

def new_png_band_writer(out):
    """
    new_png_band_writer(fz_output * out) -> fz_band_writer *

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.new_png_band_writer(out)

def new_png_pixmap_writer(path, options):
    """
    new_png_pixmap_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_png_pixmap_writer(path, options)

def new_pnm_band_writer(out):
    """
    new_pnm_band_writer(fz_output * out) -> fz_band_writer *

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.new_pnm_band_writer(out)

def new_pnm_pixmap_writer(path, options):
    """
    new_pnm_pixmap_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_pnm_pixmap_writer(path, options)

def new_pool():
    """new_pool() -> fz_pool *"""
    return _mupdf.new_pool()

def new_ppm_pixmap_writer(path, options):
    """
    new_ppm_pixmap_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_ppm_pixmap_writer(path, options)

def new_ps_band_writer(out):
    """
    new_ps_band_writer(fz_output * out) -> fz_band_writer *

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.new_ps_band_writer(out)

def new_ps_writer(path, options):
    """
    new_ps_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_ps_writer(path, options)

def new_ps_writer_with_output(out, options):
    """
    new_ps_writer_with_output(fz_output * out, char const * options) -> fz_document_writer *

    Parameters
    ----------
    out: fz_output *
    options: char const *

    """
    return _mupdf.new_ps_writer_with_output(out, options)

def new_psd_band_writer(out):
    """
    new_psd_band_writer(fz_output * out) -> fz_band_writer *

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.new_psd_band_writer(out)

def new_pwg_band_writer(out, pwg):
    """
    new_pwg_band_writer(fz_output * out, fz_pwg_options pwg) -> fz_band_writer *

    Parameters
    ----------
    out: fz_output *
    pwg: fz_pwg_options const *

    """
    return _mupdf.new_pwg_band_writer(out, pwg)

def new_pwg_writer(path, options):
    """
    new_pwg_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_pwg_writer(path, options)

def new_pwg_writer_with_output(out, options):
    """
    new_pwg_writer_with_output(fz_output * out, char const * options) -> fz_document_writer *

    Parameters
    ----------
    out: fz_output *
    options: char const *

    """
    return _mupdf.new_pwg_writer_with_output(out, options)

def new_rle_output(chain):
    """
    new_rle_output(fz_output * chain) -> fz_output *

    Parameters
    ----------
    chain: fz_output *

    """
    return _mupdf.new_rle_output(chain)

def new_separations(controllable):
    """
    new_separations(int controllable) -> fz_separations *

    Parameters
    ----------
    controllable: int

    """
    return _mupdf.new_separations(controllable)

def new_stext_device(page, options):
    """
    new_stext_device(fz_stext_page page, fz_stext_options options) -> fz_device *

    Parameters
    ----------
    page: fz_stext_page *
    options: fz_stext_options const *

    """
    return _mupdf.new_stext_device(page, options)

def new_stext_page(mediabox):
    """
    new_stext_page(fz_rect mediabox) -> fz_stext_page

    Parameters
    ----------
    mediabox: fz_rect

    """
    return _mupdf.new_stext_page(mediabox)

def new_stext_page_from_chapter_page_number(doc, chapter, number, options):
    """
    new_stext_page_from_chapter_page_number(fz_document * doc, int chapter, int number, fz_stext_options options) -> fz_stext_page

    Parameters
    ----------
    doc: fz_document *
    chapter: int
    number: int
    options: fz_stext_options const *

    """
    return _mupdf.new_stext_page_from_chapter_page_number(doc, chapter, number, options)

def new_stext_page_from_display_list(list, options):
    """
    new_stext_page_from_display_list(fz_display_list * list, fz_stext_options options) -> fz_stext_page

    Parameters
    ----------
    list: fz_display_list *
    options: fz_stext_options const *

    """
    return _mupdf.new_stext_page_from_display_list(list, options)

def new_stext_page_from_page(page, options):
    """
    new_stext_page_from_page(fz_page * page, fz_stext_options options) -> fz_stext_page

    Parameters
    ----------
    page: fz_page *
    options: fz_stext_options const *

    """
    return _mupdf.new_stext_page_from_page(page, options)

def new_stext_page_from_page_number(doc, number, options):
    """
    new_stext_page_from_page_number(fz_document * doc, int number, fz_stext_options options) -> fz_stext_page

    Parameters
    ----------
    doc: fz_document *
    number: int
    options: fz_stext_options const *

    """
    return _mupdf.new_stext_page_from_page_number(doc, number, options)

def new_store_context(max):
    """
    new_store_context(size_t max)

    Parameters
    ----------
    max: size_t

    """
    return _mupdf.new_store_context(max)

def new_stream(state, next, drop):
    """
    new_stream(void * state, fz_stream_next_fn * next, fz_stream_drop_fn * drop) -> fz_stream *

    Parameters
    ----------
    state: void *
    next: fz_stream_next_fn *
    drop: fz_stream_drop_fn *

    """
    return _mupdf.new_stream(state, next, drop)

def new_stroke_state():
    """new_stroke_state() -> fz_stroke_state"""
    return _mupdf.new_stroke_state()

def new_stroke_state_with_dash_len(len):
    """
    new_stroke_state_with_dash_len(int len) -> fz_stroke_state

    Parameters
    ----------
    len: int

    """
    return _mupdf.new_stroke_state_with_dash_len(len)

def new_svg_device(out, page_width, page_height, text_format, reuse_images):
    """
    new_svg_device(fz_output * out, float page_width, float page_height, int text_format, int reuse_images) -> fz_device *

    Parameters
    ----------
    out: fz_output *
    page_width: float
    page_height: float
    text_format: int
    reuse_images: int

    """
    return _mupdf.new_svg_device(out, page_width, page_height, text_format, reuse_images)

def new_svg_device_with_id(out, page_width, page_height, text_format, reuse_images, id):
    """
    new_svg_device_with_id(fz_output * out, float page_width, float page_height, int text_format, int reuse_images, int * id) -> fz_device *

    Parameters
    ----------
    out: fz_output *
    page_width: float
    page_height: float
    text_format: int
    reuse_images: int
    id: int *

    """
    return _mupdf.new_svg_device_with_id(out, page_width, page_height, text_format, reuse_images, id)

def new_svg_writer(path, options):
    """
    new_svg_writer(char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    path: char const *
    options: char const *

    """
    return _mupdf.new_svg_writer(path, options)

def new_test_device(is_color, threshold, options, passthrough):
    """
    new_test_device(int * is_color, float threshold, int options, fz_device * passthrough) -> fz_device *

    Parameters
    ----------
    is_color: int *
    threshold: float
    options: int
    passthrough: fz_device *

    """
    return _mupdf.new_test_device(is_color, threshold, options, passthrough)

def new_text():
    """new_text() -> fz_text"""
    return _mupdf.new_text()

def new_text_writer(format, path, options):
    """
    new_text_writer(char const * format, char const * path, char const * options) -> fz_document_writer *

    Parameters
    ----------
    format: char const *
    path: char const *
    options: char const *

    """
    return _mupdf.new_text_writer(format, path, options)

def new_text_writer_with_output(format, out, options):
    """
    new_text_writer_with_output(char const * format, fz_output * out, char const * options) -> fz_document_writer *

    Parameters
    ----------
    format: char const *
    out: fz_output *
    options: char const *

    """
    return _mupdf.new_text_writer_with_output(format, out, options)

def new_trace_device(out):
    """
    new_trace_device(fz_output * out) -> fz_device *

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.new_trace_device(out)

def new_type3_font(name, matrix):
    """
    new_type3_font(char const * name, fz_matrix matrix) -> fz_font *

    Parameters
    ----------
    name: char const *
    matrix: fz_matrix

    """
    return _mupdf.new_type3_font(name, matrix)

def new_xhtml_document_from_document(old_doc, opts):
    """
    new_xhtml_document_from_document(fz_document * old_doc, fz_stext_options opts) -> fz_document *

    Parameters
    ----------
    old_doc: fz_document *
    opts: fz_stext_options const *

    """
    return _mupdf.new_xhtml_document_from_document(old_doc, opts)

def new_xmltext_device(out):
    """
    new_xmltext_device(fz_output * out) -> fz_device *

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.new_xmltext_device(out)

def new_zip_writer(filename):
    """
    new_zip_writer(char const * filename) -> fz_zip_writer *

    Parameters
    ----------
    filename: char const *

    """
    return _mupdf.new_zip_writer(filename)

def new_zip_writer_with_output(out):
    """
    new_zip_writer_with_output(fz_output * out) -> fz_zip_writer *

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.new_zip_writer_with_output(out)

def next_page(doc, loc):
    """
    next_page(fz_document * doc, fz_location loc) -> fz_location

    Parameters
    ----------
    doc: fz_document *
    loc: fz_location

    """
    return _mupdf.next_page(doc, loc)

def normalize_vector(p):
    """
    normalize_vector(fz_point p) -> fz_point

    Parameters
    ----------
    p: fz_point

    """
    return _mupdf.normalize_vector(p)

def open_a85d(chain):
    """
    open_a85d(fz_stream * chain) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *

    """
    return _mupdf.open_a85d(chain)

def open_accelerated_document(filename, accel):
    """
    open_accelerated_document(char const * filename, char const * accel) -> fz_document *

    Parameters
    ----------
    filename: char const *
    accel: char const *

    """
    return _mupdf.open_accelerated_document(filename, accel)

def open_accelerated_document_with_stream(magic, stream, accel):
    """
    open_accelerated_document_with_stream(char const * magic, fz_stream * stream, fz_stream * accel) -> fz_document *

    Parameters
    ----------
    magic: char const *
    stream: fz_stream *
    accel: fz_stream *

    """
    return _mupdf.open_accelerated_document_with_stream(magic, stream, accel)

def open_aesd(chain, key, keylen):
    """
    open_aesd(fz_stream * chain, unsigned char * key, unsigned int keylen) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    key: unsigned char *
    keylen: unsigned int

    """
    return _mupdf.open_aesd(chain, key, keylen)

def open_ahxd(chain):
    """
    open_ahxd(fz_stream * chain) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *

    """
    return _mupdf.open_ahxd(chain)

def open_arc4(chain, key, keylen):
    """
    open_arc4(fz_stream * chain, unsigned char * key, unsigned int keylen) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    key: unsigned char *
    keylen: unsigned int

    """
    return _mupdf.open_arc4(chain, key, keylen)

def open_archive(filename):
    """
    open_archive(char const * filename) -> fz_archive *

    Parameters
    ----------
    filename: char const *

    """
    return _mupdf.open_archive(filename)

def open_archive_entry(arch, name):
    """
    open_archive_entry(fz_archive * arch, char const * name) -> fz_stream *

    Parameters
    ----------
    arch: fz_archive *
    name: char const *

    """
    return _mupdf.open_archive_entry(arch, name)

def open_archive_with_stream(file):
    """
    open_archive_with_stream(fz_stream * file) -> fz_archive *

    Parameters
    ----------
    file: fz_stream *

    """
    return _mupdf.open_archive_with_stream(file)

def open_buffer(buf):
    """
    open_buffer(fz_buffer buf) -> fz_stream *

    Parameters
    ----------
    buf: fz_buffer *

    """
    return _mupdf.open_buffer(buf)

def open_compressed_buffer(arg_1):
    """
    open_compressed_buffer(fz_compressed_buffer arg_1) -> fz_stream *

    Parameters
    ----------
    arg_1: fz_compressed_buffer *

    """
    return _mupdf.open_compressed_buffer(arg_1)

def open_concat(max, pad):
    """
    open_concat(int max, int pad) -> fz_stream *

    Parameters
    ----------
    max: int
    pad: int

    """
    return _mupdf.open_concat(max, pad)

def open_dctd(chain, color_transform, l2factor, jpegtables):
    """
    open_dctd(fz_stream * chain, int color_transform, int l2factor, fz_stream * jpegtables) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    color_transform: int
    l2factor: int
    jpegtables: fz_stream *

    """
    return _mupdf.open_dctd(chain, color_transform, l2factor, jpegtables)

def open_directory(path):
    """
    open_directory(char const * path) -> fz_archive *

    Parameters
    ----------
    path: char const *

    """
    return _mupdf.open_directory(path)

def open_document(filename):
    """
    open_document(char const * filename) -> fz_document *

    Parameters
    ----------
    filename: char const *

    """
    return _mupdf.open_document(filename)

def open_document_with_stream(magic, stream):
    """
    open_document_with_stream(char const * magic, fz_stream * stream) -> fz_document *

    Parameters
    ----------
    magic: char const *
    stream: fz_stream *

    """
    return _mupdf.open_document_with_stream(magic, stream)

def open_endstream_filter(chain, len, offset):
    """
    open_endstream_filter(fz_stream * chain, int len, int64_t offset) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    len: int
    offset: int64_t

    """
    return _mupdf.open_endstream_filter(chain, len, offset)

def open_faxd(chain, k, end_of_line, encoded_byte_align, columns, rows, end_of_block, black_is_1):
    """
    open_faxd(fz_stream * chain, int k, int end_of_line, int encoded_byte_align, int columns, int rows, int end_of_block, int black_is_1) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    k: int
    end_of_line: int
    encoded_byte_align: int
    columns: int
    rows: int
    end_of_block: int
    black_is_1: int

    """
    return _mupdf.open_faxd(chain, k, end_of_line, encoded_byte_align, columns, rows, end_of_block, black_is_1)

def open_file(filename):
    """
    open_file(char const * filename) -> fz_stream *

    Parameters
    ----------
    filename: char const *

    """
    return _mupdf.open_file(filename)

def open_file_ptr_no_close(file):
    """
    open_file_ptr_no_close(FILE * file) -> fz_stream *

    Parameters
    ----------
    file: FILE *

    """
    return _mupdf.open_file_ptr_no_close(file)

def open_flated(chain, window_bits):
    """
    open_flated(fz_stream * chain, int window_bits) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    window_bits: int

    """
    return _mupdf.open_flated(chain, window_bits)

def open_image_decomp_stream(arg_1, arg_2, l2factor):
    """
    open_image_decomp_stream(fz_stream * arg_1, fz_compression_params arg_2, int * l2factor) -> fz_stream *

    Parameters
    ----------
    arg_1: fz_stream *
    arg_2: fz_compression_params *
    l2factor: int *

    """
    return _mupdf.open_image_decomp_stream(arg_1, arg_2, l2factor)

def open_image_decomp_stream_from_buffer(arg_1, l2factor):
    """
    open_image_decomp_stream_from_buffer(fz_compressed_buffer arg_1, int * l2factor) -> fz_stream *

    Parameters
    ----------
    arg_1: fz_compressed_buffer *
    l2factor: int *

    """
    return _mupdf.open_image_decomp_stream_from_buffer(arg_1, l2factor)

def open_jbig2d(chain, globals, embedded):
    """
    open_jbig2d(fz_stream * chain, fz_jbig2_globals * globals, int embedded) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    globals: fz_jbig2_globals *
    embedded: int

    """
    return _mupdf.open_jbig2d(chain, globals, embedded)

def open_leecher(chain, buf):
    """
    open_leecher(fz_stream * chain, fz_buffer buf) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    buf: fz_buffer *

    """
    return _mupdf.open_leecher(chain, buf)

def open_lzwd(chain, early_change, min_bits, reverse_bits, old_tiff):
    """
    open_lzwd(fz_stream * chain, int early_change, int min_bits, int reverse_bits, int old_tiff) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    early_change: int
    min_bits: int
    reverse_bits: int
    old_tiff: int

    """
    return _mupdf.open_lzwd(chain, early_change, min_bits, reverse_bits, old_tiff)

def open_memory(data, len):
    """
    open_memory(unsigned char const * data, size_t len) -> fz_stream *

    Parameters
    ----------
    data: unsigned char const *
    len: size_t

    """
    return _mupdf.open_memory(data, len)

def open_null_filter(chain, len, offset):
    """
    open_null_filter(fz_stream * chain, int len, int64_t offset) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    len: int
    offset: int64_t

    """
    return _mupdf.open_null_filter(chain, len, offset)

def open_predict(chain, predictor, columns, colors, bpc):
    """
    open_predict(fz_stream * chain, int predictor, int columns, int colors, int bpc) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    predictor: int
    columns: int
    colors: int
    bpc: int

    """
    return _mupdf.open_predict(chain, predictor, columns, colors, bpc)

def open_range_filter(chain, ranges, nranges):
    """
    open_range_filter(fz_stream * chain, fz_range ranges, int nranges) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    ranges: fz_range *
    nranges: int

    """
    return _mupdf.open_range_filter(chain, ranges, nranges)

def open_reflowed_document(underdoc, opts):
    """
    open_reflowed_document(fz_document * underdoc, fz_stext_options opts) -> fz_document *

    Parameters
    ----------
    underdoc: fz_document *
    opts: fz_stext_options const *

    """
    return _mupdf.open_reflowed_document(underdoc, opts)

def open_rld(chain):
    """
    open_rld(fz_stream * chain) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *

    """
    return _mupdf.open_rld(chain)

def open_sgilog16(chain, w):
    """
    open_sgilog16(fz_stream * chain, int w) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    w: int

    """
    return _mupdf.open_sgilog16(chain, w)

def open_sgilog24(chain, w):
    """
    open_sgilog24(fz_stream * chain, int w) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    w: int

    """
    return _mupdf.open_sgilog24(chain, w)

def open_sgilog32(chain, w):
    """
    open_sgilog32(fz_stream * chain, int w) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    w: int

    """
    return _mupdf.open_sgilog32(chain, w)

def open_tar_archive(filename):
    """
    open_tar_archive(char const * filename) -> fz_archive *

    Parameters
    ----------
    filename: char const *

    """
    return _mupdf.open_tar_archive(filename)

def open_tar_archive_with_stream(file):
    """
    open_tar_archive_with_stream(fz_stream * file) -> fz_archive *

    Parameters
    ----------
    file: fz_stream *

    """
    return _mupdf.open_tar_archive_with_stream(file)

def open_thunder(chain, w):
    """
    open_thunder(fz_stream * chain, int w) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    w: int

    """
    return _mupdf.open_thunder(chain, w)

def open_zip_archive(path):
    """
    open_zip_archive(char const * path) -> fz_archive *

    Parameters
    ----------
    path: char const *

    """
    return _mupdf.open_zip_archive(path)

def open_zip_archive_with_stream(file):
    """
    open_zip_archive_with_stream(fz_stream * file) -> fz_archive *

    Parameters
    ----------
    file: fz_stream *

    """
    return _mupdf.open_zip_archive_with_stream(file)

def option_eq(a, b):
    """
    option_eq(char const * a, char const * b) -> int

    Parameters
    ----------
    a: char const *
    b: char const *

    """
    return _mupdf.option_eq(a, b)

def outline_glyph(font, gid, ctm):
    """
    outline_glyph(fz_font * font, int gid, fz_matrix ctm) -> fz_path *

    Parameters
    ----------
    font: fz_font *
    gid: int
    ctm: fz_matrix

    """
    return _mupdf.outline_glyph(font, gid, ctm)

def output_accelerator(doc, accel):
    """
    output_accelerator(fz_document * doc, fz_output * accel)

    Parameters
    ----------
    doc: fz_document *
    accel: fz_output *

    """
    return _mupdf.output_accelerator(doc, accel)

def output_supports_stream(out):
    """
    output_supports_stream(fz_output * out) -> int

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.output_supports_stream(out)

def pack_path(pack, max, path):
    """
    pack_path(uint8_t * pack, size_t max, fz_path const * path) -> size_t

    Parameters
    ----------
    pack: uint8_t *
    max: size_t
    path: fz_path const *

    """
    return _mupdf.pack_path(pack, max, path)

def packed_path_size(path):
    """
    packed_path_size(fz_path const * path) -> int

    Parameters
    ----------
    path: fz_path const *

    """
    return _mupdf.packed_path_size(path)

def page_number_from_location(doc, loc):
    """
    page_number_from_location(fz_document * doc, fz_location loc) -> int

    Parameters
    ----------
    doc: fz_document *
    loc: fz_location

    """
    return _mupdf.page_number_from_location(doc, loc)

def page_presentation(page, transition, duration):
    """
    page_presentation(fz_page * page, fz_transition transition, float * duration) -> fz_transition

    Parameters
    ----------
    page: fz_page *
    transition: fz_transition *
    duration: float *

    """
    return _mupdf.page_presentation(page, transition, duration)

def page_separations(page):
    """
    page_separations(fz_page * page) -> fz_separations *

    Parameters
    ----------
    page: fz_page *

    """
    return _mupdf.page_separations(page)

def page_uses_overprint(page):
    """
    page_uses_overprint(fz_page * page) -> int

    Parameters
    ----------
    page: fz_page *

    """
    return _mupdf.page_uses_overprint(page)

def paint_shade(shade, override_cs, ctm, dest, color_params, bbox, eop, cache):
    """
    paint_shade(fz_shade shade, fz_colorspace * override_cs, fz_matrix ctm, fz_pixmap * dest, fz_color_params color_params, fz_irect bbox, fz_overprint const * eop, fz_shade_color_cache ** cache)

    Parameters
    ----------
    shade: fz_shade *
    override_cs: fz_colorspace *
    ctm: fz_matrix
    dest: fz_pixmap *
    color_params: fz_color_params
    bbox: fz_irect
    eop: fz_overprint const *
    cache: fz_shade_color_cache **

    """
    return _mupdf.paint_shade(shade, override_cs, ctm, dest, color_params, bbox, eop, cache)

def parse_draw_options(options, string):
    """
    parse_draw_options(fz_draw_options options, char const * string) -> fz_draw_options

    Parameters
    ----------
    options: fz_draw_options *
    string: char const *

    """
    return _mupdf.parse_draw_options(options, string)

def parse_page_range(s, a, b, n):
    """
    parse_page_range(char const * s, int * a, int * b, int n) -> char const *

    Parameters
    ----------
    s: char const *
    a: int *
    b: int *
    n: int

    """
    return _mupdf.parse_page_range(s, a, b, n)

def parse_pcl_options(opts, args):
    """
    parse_pcl_options(fz_pcl_options opts, char const * args) -> fz_pcl_options

    Parameters
    ----------
    opts: fz_pcl_options *
    args: char const *

    """
    return _mupdf.parse_pcl_options(opts, args)

def parse_pclm_options(opts, args):
    """
    parse_pclm_options(fz_pclm_options opts, char const * args) -> fz_pclm_options

    Parameters
    ----------
    opts: fz_pclm_options *
    args: char const *

    """
    return _mupdf.parse_pclm_options(opts, args)

def parse_pdfocr_options(opts, args):
    """
    parse_pdfocr_options(fz_pdfocr_options opts, char const * args) -> fz_pdfocr_options

    Parameters
    ----------
    opts: fz_pdfocr_options *
    args: char const *

    """
    return _mupdf.parse_pdfocr_options(opts, args)

def parse_stext_options(opts, string):
    """
    parse_stext_options(fz_stext_options opts, char const * string) -> fz_stext_options

    Parameters
    ----------
    opts: fz_stext_options *
    string: char const *

    """
    return _mupdf.parse_stext_options(opts, string)

def parse_xml(buf, preserve_white):
    """
    parse_xml(fz_buffer buf, int preserve_white) -> fz_xml_doc *

    Parameters
    ----------
    buf: fz_buffer *
    preserve_white: int

    """
    return _mupdf.parse_xml(buf, preserve_white)

def parse_xml_from_html5(buf):
    """
    parse_xml_from_html5(fz_buffer buf) -> fz_xml_doc *

    Parameters
    ----------
    buf: fz_buffer *

    """
    return _mupdf.parse_xml_from_html5(buf)

def pcl_preset(opts, preset):
    """
    pcl_preset(fz_pcl_options opts, char const * preset)

    Parameters
    ----------
    opts: fz_pcl_options *
    preset: char const *

    """
    return _mupdf.pcl_preset(opts, preset)

def pdfocr_band_writer_set_progress(writer, progress_fn, progress_arg):
    """
    pdfocr_band_writer_set_progress(fz_band_writer * writer, fz_pdfocr_progress_fn * progress_fn, void * progress_arg)

    Parameters
    ----------
    writer: fz_band_writer *
    progress_fn: fz_pdfocr_progress_fn *
    progress_arg: void *

    """
    return _mupdf.pdfocr_band_writer_set_progress(writer, progress_fn, progress_arg)

def pdfocr_writer_set_progress(writer, progress, arg_3):
    """
    pdfocr_writer_set_progress(fz_document_writer * writer, fz_pdfocr_progress_fn * progress, void * arg_3)

    Parameters
    ----------
    writer: fz_document_writer *
    progress: fz_pdfocr_progress_fn *
    arg_3: void *

    """
    return _mupdf.pdfocr_writer_set_progress(writer, progress, arg_3)

def peek_byte(stm):
    """
    peek_byte(fz_stream * stm) -> int

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.peek_byte(stm)

def pixmap_alpha(pix):
    """
    pixmap_alpha(fz_pixmap const * pix) -> int

    Parameters
    ----------
    pix: fz_pixmap const *

    """
    return _mupdf.pixmap_alpha(pix)

def pixmap_bbox(pix):
    """
    pixmap_bbox(fz_pixmap const * pix) -> fz_irect

    Parameters
    ----------
    pix: fz_pixmap const *

    """
    return _mupdf.pixmap_bbox(pix)

def pixmap_colorants(pix):
    """
    pixmap_colorants(fz_pixmap const * pix) -> int

    Parameters
    ----------
    pix: fz_pixmap const *

    """
    return _mupdf.pixmap_colorants(pix)

def pixmap_colorspace(pix):
    """
    pixmap_colorspace(fz_pixmap const * pix) -> fz_colorspace *

    Parameters
    ----------
    pix: fz_pixmap const *

    """
    return _mupdf.pixmap_colorspace(pix)

def pixmap_components(pix):
    """
    pixmap_components(fz_pixmap const * pix) -> int

    Parameters
    ----------
    pix: fz_pixmap const *

    """
    return _mupdf.pixmap_components(pix)

def pixmap_height(pix):
    """
    pixmap_height(fz_pixmap const * pix) -> int

    Parameters
    ----------
    pix: fz_pixmap const *

    """
    return _mupdf.pixmap_height(pix)

def pixmap_image_tile(cimg):
    """
    pixmap_image_tile(fz_pixmap_image * cimg) -> fz_pixmap *

    Parameters
    ----------
    cimg: fz_pixmap_image *

    """
    return _mupdf.pixmap_image_tile(cimg)

def pixmap_samples(pix):
    """
    pixmap_samples(fz_pixmap const * pix) -> unsigned char *

    Parameters
    ----------
    pix: fz_pixmap const *

    """
    return _mupdf.pixmap_samples(pix)

def pixmap_spots(pix):
    """
    pixmap_spots(fz_pixmap const * pix) -> int

    Parameters
    ----------
    pix: fz_pixmap const *

    """
    return _mupdf.pixmap_spots(pix)

def pixmap_stride(pix):
    """
    pixmap_stride(fz_pixmap const * pix) -> int

    Parameters
    ----------
    pix: fz_pixmap const *

    """
    return _mupdf.pixmap_stride(pix)

def pixmap_width(pix):
    """
    pixmap_width(fz_pixmap const * pix) -> int

    Parameters
    ----------
    pix: fz_pixmap const *

    """
    return _mupdf.pixmap_width(pix)

def pixmap_x(pix):
    """
    pixmap_x(fz_pixmap const * pix) -> int

    Parameters
    ----------
    pix: fz_pixmap const *

    """
    return _mupdf.pixmap_x(pix)

def pixmap_y(pix):
    """
    pixmap_y(fz_pixmap const * pix) -> int

    Parameters
    ----------
    pix: fz_pixmap const *

    """
    return _mupdf.pixmap_y(pix)

def pool_alloc(pool, size):
    """
    pool_alloc(fz_pool * pool, size_t size) -> void *

    Parameters
    ----------
    pool: fz_pool *
    size: size_t

    """
    return _mupdf.pool_alloc(pool, size)

def pool_size(pool):
    """
    pool_size(fz_pool * pool) -> size_t

    Parameters
    ----------
    pool: fz_pool *

    """
    return _mupdf.pool_size(pool)

def pool_strdup(pool, s):
    """
    pool_strdup(fz_pool * pool, char const * s) -> char *

    Parameters
    ----------
    pool: fz_pool *
    s: char const *

    """
    return _mupdf.pool_strdup(pool, s)

def pop_clip(dev):
    """
    pop_clip(fz_device * dev)

    Parameters
    ----------
    dev: fz_device *

    """
    return _mupdf.pop_clip(dev)

def post_scale(m, sx, sy):
    """
    post_scale(fz_matrix m, float sx, float sy) -> fz_matrix

    Parameters
    ----------
    m: fz_matrix
    sx: float
    sy: float

    """
    return _mupdf.post_scale(m, sx, sy)

def pre_rotate(m, degrees):
    """
    pre_rotate(fz_matrix m, float degrees) -> fz_matrix

    Parameters
    ----------
    m: fz_matrix
    degrees: float

    """
    return _mupdf.pre_rotate(m, degrees)

def pre_scale(m, sx, sy):
    """
    pre_scale(fz_matrix m, float sx, float sy) -> fz_matrix

    Parameters
    ----------
    m: fz_matrix
    sx: float
    sy: float

    """
    return _mupdf.pre_scale(m, sx, sy)

def pre_shear(m, sx, sy):
    """
    pre_shear(fz_matrix m, float sx, float sy) -> fz_matrix

    Parameters
    ----------
    m: fz_matrix
    sx: float
    sy: float

    """
    return _mupdf.pre_shear(m, sx, sy)

def pre_translate(m, tx, ty):
    """
    pre_translate(fz_matrix m, float tx, float ty) -> fz_matrix

    Parameters
    ----------
    m: fz_matrix
    tx: float
    ty: float

    """
    return _mupdf.pre_translate(m, tx, ty)

def prepare_t3_glyph(font, gid):
    """
    prepare_t3_glyph(fz_font * font, int gid)

    Parameters
    ----------
    font: fz_font *
    gid: int

    """
    return _mupdf.prepare_t3_glyph(font, gid)

def previous_page(doc, loc):
    """
    previous_page(fz_document * doc, fz_location loc) -> fz_location

    Parameters
    ----------
    doc: fz_document *
    loc: fz_location

    """
    return _mupdf.previous_page(doc, loc)

def print_stext_header_as_html(out):
    """
    print_stext_header_as_html(fz_output * out)

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.print_stext_header_as_html(out)

def print_stext_header_as_xhtml(out):
    """
    print_stext_header_as_xhtml(fz_output * out)

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.print_stext_header_as_xhtml(out)

def print_stext_page_as_html(out, page, id):
    """
    print_stext_page_as_html(fz_output * out, fz_stext_page page, int id)

    Parameters
    ----------
    out: fz_output *
    page: fz_stext_page *
    id: int

    """
    return _mupdf.print_stext_page_as_html(out, page, id)

def print_stext_page_as_json(out, page, scale):
    """
    print_stext_page_as_json(fz_output * out, fz_stext_page page, float scale)

    Parameters
    ----------
    out: fz_output *
    page: fz_stext_page *
    scale: float

    """
    return _mupdf.print_stext_page_as_json(out, page, scale)

def print_stext_page_as_text(out, page):
    """
    print_stext_page_as_text(fz_output * out, fz_stext_page page)

    Parameters
    ----------
    out: fz_output *
    page: fz_stext_page *

    """
    return _mupdf.print_stext_page_as_text(out, page)

def print_stext_page_as_xhtml(out, page, id):
    """
    print_stext_page_as_xhtml(fz_output * out, fz_stext_page page, int id)

    Parameters
    ----------
    out: fz_output *
    page: fz_stext_page *
    id: int

    """
    return _mupdf.print_stext_page_as_xhtml(out, page, id)

def print_stext_page_as_xml(out, page, id):
    """
    print_stext_page_as_xml(fz_output * out, fz_stext_page page, int id)

    Parameters
    ----------
    out: fz_output *
    page: fz_stext_page *
    id: int

    """
    return _mupdf.print_stext_page_as_xml(out, page, id)

def print_stext_trailer_as_html(out):
    """
    print_stext_trailer_as_html(fz_output * out)

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.print_stext_trailer_as_html(out)

def print_stext_trailer_as_xhtml(out):
    """
    print_stext_trailer_as_xhtml(fz_output * out)

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.print_stext_trailer_as_xhtml(out)

def process_opened_pages(doc, process_openend_page, state):
    """
    process_opened_pages(fz_document * doc, fz_process_opened_page_fn * process_openend_page, void * state) -> void *

    Parameters
    ----------
    doc: fz_document *
    process_openend_page: fz_process_opened_page_fn *
    state: void *

    """
    return _mupdf.process_opened_pages(doc, process_openend_page, state)

def process_shade(shade, ctm, scissor, prepare, process, process_arg):
    """
    process_shade(fz_shade shade, fz_matrix ctm, fz_rect scissor, fz_shade_prepare_fn * prepare, fz_shade_process_fn * process, void * process_arg)

    Parameters
    ----------
    shade: fz_shade *
    ctm: fz_matrix
    scissor: fz_rect
    prepare: fz_shade_prepare_fn *
    process: fz_shade_process_fn *
    process_arg: void *

    """
    return _mupdf.process_shade(shade, ctm, scissor, prepare, process, process_arg)

def purge_glyph_cache():
    """purge_glyph_cache()"""
    return _mupdf.purge_glyph_cache()

def quad_from_rect(r):
    """
    quad_from_rect(fz_rect r) -> fz_quad

    Parameters
    ----------
    r: fz_rect

    """
    return _mupdf.quad_from_rect(r)

def quadto(path, x0, y0, x1, y1):
    """
    quadto(fz_path * path, float x0, float y0, float x1, float y1)

    Parameters
    ----------
    path: fz_path *
    x0: float
    y0: float
    x1: float
    y1: float

    """
    return _mupdf.quadto(path, x0, y0, x1, y1)

def read(stm, data, len):
    """
    read(fz_stream * stm, unsigned char * data, size_t len) -> size_t

    Parameters
    ----------
    stm: fz_stream *
    data: unsigned char *
    len: size_t

    """
    return _mupdf.read(stm, data, len)

def read_all(stm, initial):
    """
    read_all(fz_stream * stm, size_t initial) -> fz_buffer

    Parameters
    ----------
    stm: fz_stream *
    initial: size_t

    """
    return _mupdf.read_all(stm, initial)

def read_archive_entry(arch, name):
    """
    read_archive_entry(fz_archive * arch, char const * name) -> fz_buffer

    Parameters
    ----------
    arch: fz_archive *
    name: char const *

    """
    return _mupdf.read_archive_entry(arch, name)

def read_best(stm, initial, truncated):
    """
    read_best(fz_stream * stm, size_t initial, int * truncated) -> fz_buffer

    Parameters
    ----------
    stm: fz_stream *
    initial: size_t
    truncated: int *

    """
    return _mupdf.read_best(stm, initial, truncated)

def read_bits(stm, n):
    """
    read_bits(fz_stream * stm, int n) -> unsigned int

    Parameters
    ----------
    stm: fz_stream *
    n: int

    """
    return _mupdf.read_bits(stm, n)

def read_byte(stm):
    """
    read_byte(fz_stream * stm) -> int

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_byte(stm)

def read_file(filename):
    """
    read_file(char const * filename) -> fz_buffer

    Parameters
    ----------
    filename: char const *

    """
    return _mupdf.read_file(filename)

def read_float(stm):
    """
    read_float(fz_stream * stm) -> float

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_float(stm)

def read_float_le(stm):
    """
    read_float_le(fz_stream * stm) -> float

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_float_le(stm)

def read_int16(stm):
    """
    read_int16(fz_stream * stm) -> int16_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_int16(stm)

def read_int16_le(stm):
    """
    read_int16_le(fz_stream * stm) -> int16_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_int16_le(stm)

def read_int32(stm):
    """
    read_int32(fz_stream * stm) -> int32_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_int32(stm)

def read_int32_le(stm):
    """
    read_int32_le(fz_stream * stm) -> int32_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_int32_le(stm)

def read_int64(stm):
    """
    read_int64(fz_stream * stm) -> int64_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_int64(stm)

def read_int64_le(stm):
    """
    read_int64_le(fz_stream * stm) -> int64_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_int64_le(stm)

def read_line(stm, buf, max):
    """
    read_line(fz_stream * stm, char * buf, size_t max) -> char *

    Parameters
    ----------
    stm: fz_stream *
    buf: char *
    max: size_t

    """
    return _mupdf.read_line(stm, buf, max)

def read_rbits(stm, n):
    """
    read_rbits(fz_stream * stm, int n) -> unsigned int

    Parameters
    ----------
    stm: fz_stream *
    n: int

    """
    return _mupdf.read_rbits(stm, n)

def read_string(stm, buffer, len):
    """
    read_string(fz_stream * stm, char * buffer, int len)

    Parameters
    ----------
    stm: fz_stream *
    buffer: char *
    len: int

    """
    return _mupdf.read_string(stm, buffer, len)

def read_uint16(stm):
    """
    read_uint16(fz_stream * stm) -> uint16_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_uint16(stm)

def read_uint16_le(stm):
    """
    read_uint16_le(fz_stream * stm) -> uint16_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_uint16_le(stm)

def read_uint24(stm):
    """
    read_uint24(fz_stream * stm) -> uint32_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_uint24(stm)

def read_uint24_le(stm):
    """
    read_uint24_le(fz_stream * stm) -> uint32_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_uint24_le(stm)

def read_uint32(stm):
    """
    read_uint32(fz_stream * stm) -> uint32_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_uint32(stm)

def read_uint32_le(stm):
    """
    read_uint32_le(fz_stream * stm) -> uint32_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_uint32_le(stm)

def read_uint64(stm):
    """
    read_uint64(fz_stream * stm) -> uint64_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_uint64(stm)

def read_uint64_le(stm):
    """
    read_uint64_le(fz_stream * stm) -> uint64_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.read_uint64_le(stm)

def realloc_no_throw(p, size):
    """
    realloc_no_throw(void * p, size_t size) -> void *

    Parameters
    ----------
    p: void *
    size: size_t

    """
    return _mupdf.realloc_no_throw(p, size)

def recognize_document(magic):
    """
    recognize_document(char const * magic) -> fz_document_handler const *

    Parameters
    ----------
    magic: char const *

    """
    return _mupdf.recognize_document(magic)

def recognize_image_format(p):
    """
    recognize_image_format(unsigned char [8] p) -> int

    Parameters
    ----------
    p: unsigned char [8]

    """
    return _mupdf.recognize_image_format(p)

def rect_from_irect(bbox):
    """
    rect_from_irect(fz_irect bbox) -> fz_rect

    Parameters
    ----------
    bbox: fz_irect

    """
    return _mupdf.rect_from_irect(bbox)

def rect_from_quad(q):
    """
    rect_from_quad(fz_quad q) -> fz_rect

    Parameters
    ----------
    q: fz_quad

    """
    return _mupdf.rect_from_quad(q)

def rectto(path, x0, y0, x1, y1):
    """
    rectto(fz_path * path, float x0, float y0, float x1, float y1)

    Parameters
    ----------
    path: fz_path *
    x0: float
    y0: float
    x1: float
    y1: float

    """
    return _mupdf.rectto(path, x0, y0, x1, y1)

def register_document_handler(handler):
    """
    register_document_handler(fz_document_handler const * handler)

    Parameters
    ----------
    handler: fz_document_handler const *

    """
    return _mupdf.register_document_handler(handler)

def register_document_handlers():
    """register_document_handlers()"""
    return _mupdf.register_document_handlers()

def remove_item(drop, key, type):
    """
    remove_item(fz_store_drop_fn * drop, void * key, fz_store_type type)

    Parameters
    ----------
    drop: fz_store_drop_fn *
    key: void *
    type: fz_store_type const *

    """
    return _mupdf.remove_item(drop, key, type)

def render_flags(dev, set, clear):
    """
    render_flags(fz_device * dev, int set, int clear)

    Parameters
    ----------
    dev: fz_device *
    set: int
    clear: int

    """
    return _mupdf.render_flags(dev, set, clear)

def render_glyph_pixmap(font, gid, ctm, scissor, aa):
    """
    render_glyph_pixmap(fz_font * font, int gid, fz_matrix ctm, fz_irect scissor, int aa) -> fz_pixmap *

    Parameters
    ----------
    font: fz_font *
    gid: int
    ctm: fz_matrix *
    scissor: fz_irect const *
    aa: int

    """
    return _mupdf.render_glyph_pixmap(font, gid, ctm, scissor, aa)

def render_t3_glyph_direct(dev, font, gid, trm, gstate, def_cs):
    """
    render_t3_glyph_direct(fz_device * dev, fz_font * font, int gid, fz_matrix trm, void * gstate, fz_default_colorspaces def_cs)

    Parameters
    ----------
    dev: fz_device *
    font: fz_font *
    gid: int
    trm: fz_matrix
    gstate: void *
    def_cs: fz_default_colorspaces *

    """
    return _mupdf.render_t3_glyph_direct(dev, font, gid, trm, gstate, def_cs)

def rendering_intent_name(ri):
    """
    rendering_intent_name(int ri) -> char const *

    Parameters
    ----------
    ri: int

    """
    return _mupdf.rendering_intent_name(ri)

def resize_buffer(buf, capacity):
    """
    resize_buffer(fz_buffer buf, size_t capacity)

    Parameters
    ----------
    buf: fz_buffer *
    capacity: size_t

    """
    return _mupdf.resize_buffer(buf, capacity)

def resolve_link(doc, uri, xp, yp):
    """
    resolve_link(fz_document * doc, char const * uri, float * xp, float * yp) -> fz_location

    Parameters
    ----------
    doc: fz_document *
    uri: char const *
    xp: float *
    yp: float *

    """
    return _mupdf.resolve_link(doc, uri, xp, yp)

def rethrow():
    """rethrow()"""
    return _mupdf.rethrow()

def rethrow_if(errcode):
    """
    rethrow_if(int errcode)

    Parameters
    ----------
    errcode: int

    """
    return _mupdf.rethrow_if(errcode)

def rotate(degrees):
    """
    rotate(float degrees) -> fz_matrix

    Parameters
    ----------
    degrees: float

    """
    return _mupdf.rotate(degrees)

def round_rect(rect):
    """
    round_rect(fz_rect rect) -> fz_irect

    Parameters
    ----------
    rect: fz_rect

    """
    return _mupdf.round_rect(rect)

def run_display_list(list, dev, ctm, scissor, cookie):
    """
    run_display_list(fz_display_list * list, fz_device * dev, fz_matrix ctm, fz_rect scissor, fz_cookie cookie)

    Parameters
    ----------
    list: fz_display_list *
    dev: fz_device *
    ctm: fz_matrix
    scissor: fz_rect
    cookie: fz_cookie *

    """
    return _mupdf.run_display_list(list, dev, ctm, scissor, cookie)

def run_page(page, dev, transform, cookie):
    """
    run_page(fz_page * page, fz_device * dev, fz_matrix transform, fz_cookie cookie)

    Parameters
    ----------
    page: fz_page *
    dev: fz_device *
    transform: fz_matrix
    cookie: fz_cookie *

    """
    return _mupdf.run_page(page, dev, transform, cookie)

def run_page_annots(page, dev, transform, cookie):
    """
    run_page_annots(fz_page * page, fz_device * dev, fz_matrix transform, fz_cookie cookie)

    Parameters
    ----------
    page: fz_page *
    dev: fz_device *
    transform: fz_matrix
    cookie: fz_cookie *

    """
    return _mupdf.run_page_annots(page, dev, transform, cookie)

def run_page_contents(page, dev, transform, cookie):
    """
    run_page_contents(fz_page * page, fz_device * dev, fz_matrix transform, fz_cookie cookie)

    Parameters
    ----------
    page: fz_page *
    dev: fz_device *
    transform: fz_matrix
    cookie: fz_cookie *

    """
    return _mupdf.run_page_contents(page, dev, transform, cookie)

def run_page_widgets(page, dev, transform, cookie):
    """
    run_page_widgets(fz_page * page, fz_device * dev, fz_matrix transform, fz_cookie cookie)

    Parameters
    ----------
    page: fz_page *
    dev: fz_device *
    transform: fz_matrix
    cookie: fz_cookie *

    """
    return _mupdf.run_page_widgets(page, dev, transform, cookie)

def run_t3_glyph(font, gid, trm, dev):
    """
    run_t3_glyph(fz_font * font, int gid, fz_matrix trm, fz_device * dev)

    Parameters
    ----------
    font: fz_font *
    gid: int
    trm: fz_matrix
    dev: fz_device *

    """
    return _mupdf.run_t3_glyph(font, gid, trm, dev)

def runeidx(str, p):
    """
    runeidx(char const * str, char const * p) -> int

    Parameters
    ----------
    str: char const *
    p: char const *

    """
    return _mupdf.runeidx(str, p)

def runelen(rune):
    """
    runelen(int rune) -> int

    Parameters
    ----------
    rune: int

    """
    return _mupdf.runelen(rune)

def runeptr(str, idx):
    """
    runeptr(char const * str, int idx) -> char const *

    Parameters
    ----------
    str: char const *
    idx: int

    """
    return _mupdf.runeptr(str, idx)

def runetochar(str, rune):
    """
    runetochar(char * str, int rune) -> int

    Parameters
    ----------
    str: char *
    rune: int

    """
    return _mupdf.runetochar(str, rune)

def save_accelerator(doc, accel):
    """
    save_accelerator(fz_document * doc, char const * accel)

    Parameters
    ----------
    doc: fz_document *
    accel: char const *

    """
    return _mupdf.save_accelerator(doc, accel)

def save_bitmap_as_pbm(bitmap, filename):
    """
    save_bitmap_as_pbm(fz_bitmap bitmap, char const * filename)

    Parameters
    ----------
    bitmap: fz_bitmap *
    filename: char const *

    """
    return _mupdf.save_bitmap_as_pbm(bitmap, filename)

def save_bitmap_as_pcl(bitmap, filename, append, pcl):
    """
    save_bitmap_as_pcl(fz_bitmap bitmap, char * filename, int append, fz_pcl_options pcl)

    Parameters
    ----------
    bitmap: fz_bitmap *
    filename: char *
    append: int
    pcl: fz_pcl_options const *

    """
    return _mupdf.save_bitmap_as_pcl(bitmap, filename, append, pcl)

def save_bitmap_as_pkm(bitmap, filename):
    """
    save_bitmap_as_pkm(fz_bitmap bitmap, char const * filename)

    Parameters
    ----------
    bitmap: fz_bitmap *
    filename: char const *

    """
    return _mupdf.save_bitmap_as_pkm(bitmap, filename)

def save_bitmap_as_pwg(bitmap, filename, append, pwg):
    """
    save_bitmap_as_pwg(fz_bitmap bitmap, char * filename, int append, fz_pwg_options pwg)

    Parameters
    ----------
    bitmap: fz_bitmap *
    filename: char *
    append: int
    pwg: fz_pwg_options const *

    """
    return _mupdf.save_bitmap_as_pwg(bitmap, filename, append, pwg)

def save_buffer(buf, filename):
    """
    save_buffer(fz_buffer buf, char const * filename)

    Parameters
    ----------
    buf: fz_buffer *
    filename: char const *

    """
    return _mupdf.save_buffer(buf, filename)

def save_pixmap_as_pam(pixmap, filename):
    """
    save_pixmap_as_pam(fz_pixmap * pixmap, char const * filename)

    Parameters
    ----------
    pixmap: fz_pixmap *
    filename: char const *

    """
    return _mupdf.save_pixmap_as_pam(pixmap, filename)

def save_pixmap_as_pbm(pixmap, filename):
    """
    save_pixmap_as_pbm(fz_pixmap * pixmap, char const * filename)

    Parameters
    ----------
    pixmap: fz_pixmap *
    filename: char const *

    """
    return _mupdf.save_pixmap_as_pbm(pixmap, filename)

def save_pixmap_as_pcl(pixmap, filename, append, pcl):
    """
    save_pixmap_as_pcl(fz_pixmap * pixmap, char * filename, int append, fz_pcl_options pcl)

    Parameters
    ----------
    pixmap: fz_pixmap *
    filename: char *
    append: int
    pcl: fz_pcl_options const *

    """
    return _mupdf.save_pixmap_as_pcl(pixmap, filename, append, pcl)

def save_pixmap_as_pclm(pixmap, filename, append, options):
    """
    save_pixmap_as_pclm(fz_pixmap * pixmap, char * filename, int append, fz_pclm_options options)

    Parameters
    ----------
    pixmap: fz_pixmap *
    filename: char *
    append: int
    options: fz_pclm_options const *

    """
    return _mupdf.save_pixmap_as_pclm(pixmap, filename, append, options)

def save_pixmap_as_pdfocr(pixmap, filename, append, options):
    """
    save_pixmap_as_pdfocr(fz_pixmap * pixmap, char * filename, int append, fz_pdfocr_options options)

    Parameters
    ----------
    pixmap: fz_pixmap *
    filename: char *
    append: int
    options: fz_pdfocr_options const *

    """
    return _mupdf.save_pixmap_as_pdfocr(pixmap, filename, append, options)

def save_pixmap_as_pkm(pixmap, filename):
    """
    save_pixmap_as_pkm(fz_pixmap * pixmap, char const * filename)

    Parameters
    ----------
    pixmap: fz_pixmap *
    filename: char const *

    """
    return _mupdf.save_pixmap_as_pkm(pixmap, filename)

def save_pixmap_as_png(pixmap, filename):
    """
    save_pixmap_as_png(fz_pixmap * pixmap, char const * filename)

    Parameters
    ----------
    pixmap: fz_pixmap *
    filename: char const *

    """
    return _mupdf.save_pixmap_as_png(pixmap, filename)

def save_pixmap_as_pnm(pixmap, filename):
    """
    save_pixmap_as_pnm(fz_pixmap * pixmap, char const * filename)

    Parameters
    ----------
    pixmap: fz_pixmap *
    filename: char const *

    """
    return _mupdf.save_pixmap_as_pnm(pixmap, filename)

def save_pixmap_as_ps(pixmap, filename, append):
    """
    save_pixmap_as_ps(fz_pixmap * pixmap, char * filename, int append)

    Parameters
    ----------
    pixmap: fz_pixmap *
    filename: char *
    append: int

    """
    return _mupdf.save_pixmap_as_ps(pixmap, filename, append)

def save_pixmap_as_psd(pixmap, filename):
    """
    save_pixmap_as_psd(fz_pixmap * pixmap, char const * filename)

    Parameters
    ----------
    pixmap: fz_pixmap *
    filename: char const *

    """
    return _mupdf.save_pixmap_as_psd(pixmap, filename)

def save_pixmap_as_pwg(pixmap, filename, append, pwg):
    """
    save_pixmap_as_pwg(fz_pixmap * pixmap, char * filename, int append, fz_pwg_options pwg)

    Parameters
    ----------
    pixmap: fz_pixmap *
    filename: char *
    append: int
    pwg: fz_pwg_options const *

    """
    return _mupdf.save_pixmap_as_pwg(pixmap, filename, append, pwg)

def scale(sx, sy):
    """
    scale(float sx, float sy) -> fz_matrix

    Parameters
    ----------
    sx: float
    sy: float

    """
    return _mupdf.scale(sx, sy)

def search_chapter_page_number(doc, chapter, page, needle, hit_bbox, hit_max):
    """
    search_chapter_page_number(fz_document * doc, int chapter, int page, char const * needle, fz_quad hit_bbox, int hit_max) -> int

    Parameters
    ----------
    doc: fz_document *
    chapter: int
    page: int
    needle: char const *
    hit_bbox: fz_quad *
    hit_max: int

    """
    return _mupdf.search_chapter_page_number(doc, chapter, page, needle, hit_bbox, hit_max)

def search_display_list(list, needle, hit_bbox, hit_max):
    """
    search_display_list(fz_display_list * list, char const * needle, fz_quad hit_bbox, int hit_max) -> int

    Parameters
    ----------
    list: fz_display_list *
    needle: char const *
    hit_bbox: fz_quad *
    hit_max: int

    """
    return _mupdf.search_display_list(list, needle, hit_bbox, hit_max)

def search_page(page, needle, hit_bbox, hit_max):
    """
    search_page(fz_page * page, char const * needle, fz_quad hit_bbox, int hit_max) -> int

    Parameters
    ----------
    page: fz_page *
    needle: char const *
    hit_bbox: fz_quad *
    hit_max: int

    """
    return _mupdf.search_page(page, needle, hit_bbox, hit_max)

def search_page_number(doc, number, needle, hit_bbox, hit_max):
    """
    search_page_number(fz_document * doc, int number, char const * needle, fz_quad hit_bbox, int hit_max) -> int

    Parameters
    ----------
    doc: fz_document *
    number: int
    needle: char const *
    hit_bbox: fz_quad *
    hit_max: int

    """
    return _mupdf.search_page_number(doc, number, needle, hit_bbox, hit_max)

def search_stext_page(text, needle, quads, max_quads):
    """
    search_stext_page(fz_stext_page text, char const * needle, fz_quad quads, int max_quads) -> int

    Parameters
    ----------
    text: fz_stext_page *
    needle: char const *
    quads: fz_quad *
    max_quads: int

    """
    return _mupdf.search_stext_page(text, needle, quads, max_quads)

def seek(stm, offset, whence):
    """
    seek(fz_stream * stm, int64_t offset, int whence)

    Parameters
    ----------
    stm: fz_stream *
    offset: int64_t
    whence: int

    """
    return _mupdf.seek(stm, offset, whence)

def seek_output(out, off, whence):
    """
    seek_output(fz_output * out, int64_t off, int whence)

    Parameters
    ----------
    out: fz_output *
    off: int64_t
    whence: int

    """
    return _mupdf.seek_output(out, off, whence)

def separation_current_behavior(sep, separation):
    """
    separation_current_behavior(fz_separations const * sep, int separation) -> fz_separation_behavior

    Parameters
    ----------
    sep: fz_separations const *
    separation: int

    """
    return _mupdf.separation_current_behavior(sep, separation)

def separation_equivalent(seps, idx, dst_cs, dst_color, prf, color_params):
    """
    separation_equivalent(fz_separations const * seps, int idx, fz_colorspace * dst_cs, float * dst_color, fz_colorspace * prf, fz_color_params color_params)

    Parameters
    ----------
    seps: fz_separations const *
    idx: int
    dst_cs: fz_colorspace *
    dst_color: float *
    prf: fz_colorspace *
    color_params: fz_color_params

    """
    return _mupdf.separation_equivalent(seps, idx, dst_cs, dst_color, prf, color_params)

def separation_name(sep, separation):
    """
    separation_name(fz_separations const * sep, int separation) -> char const *

    Parameters
    ----------
    sep: fz_separations const *
    separation: int

    """
    return _mupdf.separation_name(sep, separation)

def set_aa_level(bits):
    """
    set_aa_level(int bits)

    Parameters
    ----------
    bits: int

    """
    return _mupdf.set_aa_level(bits)

def set_compressed_image_buffer(cimg, buf):
    """
    set_compressed_image_buffer(fz_compressed_image * cimg, fz_compressed_buffer buf)

    Parameters
    ----------
    cimg: fz_compressed_image *
    buf: fz_compressed_buffer *

    """
    return _mupdf.set_compressed_image_buffer(cimg, buf)

def set_default_cmyk(default_cs, cs):
    """
    set_default_cmyk(fz_default_colorspaces default_cs, fz_colorspace * cs)

    Parameters
    ----------
    default_cs: fz_default_colorspaces *
    cs: fz_colorspace *

    """
    return _mupdf.set_default_cmyk(default_cs, cs)

def set_default_colorspaces(dev, default_cs):
    """
    set_default_colorspaces(fz_device * dev, fz_default_colorspaces default_cs)

    Parameters
    ----------
    dev: fz_device *
    default_cs: fz_default_colorspaces *

    """
    return _mupdf.set_default_colorspaces(dev, default_cs)

def set_default_gray(default_cs, cs):
    """
    set_default_gray(fz_default_colorspaces default_cs, fz_colorspace * cs)

    Parameters
    ----------
    default_cs: fz_default_colorspaces *
    cs: fz_colorspace *

    """
    return _mupdf.set_default_gray(default_cs, cs)

def set_default_output_intent(default_cs, cs):
    """
    set_default_output_intent(fz_default_colorspaces default_cs, fz_colorspace * cs)

    Parameters
    ----------
    default_cs: fz_default_colorspaces *
    cs: fz_colorspace *

    """
    return _mupdf.set_default_output_intent(default_cs, cs)

def set_default_rgb(default_cs, cs):
    """
    set_default_rgb(fz_default_colorspaces default_cs, fz_colorspace * cs)

    Parameters
    ----------
    default_cs: fz_default_colorspaces *
    cs: fz_colorspace *

    """
    return _mupdf.set_default_rgb(default_cs, cs)

def set_error_callback(arg1, user):
    """
    set_error_callback(void (*)(void *,char const *) arg1, void * user)

    Parameters
    ----------
    print: void (*)(void *,char const *)
    user: void *

    """
    return _mupdf.set_error_callback(arg1, user)

def set_font_bbox(font, xmin, ymin, xmax, ymax):
    """
    set_font_bbox(fz_font * font, float xmin, float ymin, float xmax, float ymax)

    Parameters
    ----------
    font: fz_font *
    xmin: float
    ymin: float
    xmax: float
    ymax: float

    """
    return _mupdf.set_font_bbox(font, xmin, ymin, xmax, ymax)

def set_graphics_aa_level(bits):
    """
    set_graphics_aa_level(int bits)

    Parameters
    ----------
    bits: int

    """
    return _mupdf.set_graphics_aa_level(bits)

def set_graphics_min_line_width(min_line_width):
    """
    set_graphics_min_line_width(float min_line_width)

    Parameters
    ----------
    min_line_width: float

    """
    return _mupdf.set_graphics_min_line_width(min_line_width)

def set_metadata(doc, key, value):
    """
    set_metadata(fz_document * doc, char const * key, char const * value)

    Parameters
    ----------
    doc: fz_document *
    key: char const *
    value: char const *

    """
    return _mupdf.set_metadata(doc, key, value)

def set_pixmap_image_tile(cimg, pix):
    """
    set_pixmap_image_tile(fz_pixmap_image * cimg, fz_pixmap * pix)

    Parameters
    ----------
    cimg: fz_pixmap_image *
    pix: fz_pixmap *

    """
    return _mupdf.set_pixmap_image_tile(cimg, pix)

def set_pixmap_resolution(pix, xres, yres):
    """
    set_pixmap_resolution(fz_pixmap * pix, int xres, int yres)

    Parameters
    ----------
    pix: fz_pixmap *
    xres: int
    yres: int

    """
    return _mupdf.set_pixmap_resolution(pix, xres, yres)

def set_separation_behavior(sep, separation, behavior):
    """
    set_separation_behavior(fz_separations * sep, int separation, fz_separation_behavior behavior)

    Parameters
    ----------
    sep: fz_separations *
    separation: int
    behavior: enum fz_separation_behavior

    """
    return _mupdf.set_separation_behavior(sep, separation, behavior)

def set_stddbg(out):
    """
    set_stddbg(fz_output * out)

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.set_stddbg(out)

def set_text_aa_level(bits):
    """
    set_text_aa_level(int bits)

    Parameters
    ----------
    bits: int

    """
    return _mupdf.set_text_aa_level(bits)

def set_use_document_css(use):
    """
    set_use_document_css(int use)

    Parameters
    ----------
    use: int

    """
    return _mupdf.set_use_document_css(use)

def set_user_context(user):
    """
    set_user_context(void * user)

    Parameters
    ----------
    user: void *

    """
    return _mupdf.set_user_context(user)

def set_user_css(text):
    """
    set_user_css(char const * text)

    Parameters
    ----------
    text: char const *

    """
    return _mupdf.set_user_css(text)

def set_warning_callback(arg1, user):
    """
    set_warning_callback(void (*)(void *,char const *) arg1, void * user)

    Parameters
    ----------
    print: void (*)(void *,char const *)
    user: void *

    """
    return _mupdf.set_warning_callback(arg1, user)

def sha256_final(state, digest):
    """
    sha256_final(fz_sha256 state, unsigned char [32] digest)

    Parameters
    ----------
    state: fz_sha256 *
    digest: unsigned char [32]

    """
    return _mupdf.sha256_final(state, digest)

def sha256_init(state):
    """
    sha256_init(fz_sha256 state)

    Parameters
    ----------
    state: fz_sha256 *

    """
    return _mupdf.sha256_init(state)

def sha256_update(state, input, inlen):
    """
    sha256_update(fz_sha256 state, unsigned char const * input, size_t inlen)

    Parameters
    ----------
    state: fz_sha256 *
    input: unsigned char const *
    inlen: size_t

    """
    return _mupdf.sha256_update(state, input, inlen)

def sha384_final(state, digest):
    """
    sha384_final(fz_sha512 state, unsigned char [64] digest)

    Parameters
    ----------
    state: fz_sha384 *
    digest: unsigned char [64]

    """
    return _mupdf.sha384_final(state, digest)

def sha384_init(state):
    """
    sha384_init(fz_sha512 state)

    Parameters
    ----------
    state: fz_sha384 *

    """
    return _mupdf.sha384_init(state)

def sha384_update(state, input, inlen):
    """
    sha384_update(fz_sha512 state, unsigned char const * input, size_t inlen)

    Parameters
    ----------
    state: fz_sha384 *
    input: unsigned char const *
    inlen: size_t

    """
    return _mupdf.sha384_update(state, input, inlen)

def sha512_final(state, digest):
    """
    sha512_final(fz_sha512 state, unsigned char [64] digest)

    Parameters
    ----------
    state: fz_sha512 *
    digest: unsigned char [64]

    """
    return _mupdf.sha512_final(state, digest)

def sha512_init(state):
    """
    sha512_init(fz_sha512 state)

    Parameters
    ----------
    state: fz_sha512 *

    """
    return _mupdf.sha512_init(state)

def sha512_update(state, input, inlen):
    """
    sha512_update(fz_sha512 state, unsigned char const * input, size_t inlen)

    Parameters
    ----------
    state: fz_sha512 *
    input: unsigned char const *
    inlen: size_t

    """
    return _mupdf.sha512_update(state, input, inlen)

def shear(sx, sy):
    """
    shear(float sx, float sy) -> fz_matrix

    Parameters
    ----------
    sx: float
    sy: float

    """
    return _mupdf.shear(sx, sy)

def show_glyph(text, font, trm, glyph, unicode, wmode, bidi_level, markup_dir, language):
    """
    show_glyph(fz_text text, fz_font * font, fz_matrix trm, int glyph, int unicode, int wmode, int bidi_level, fz_bidi_direction markup_dir, fz_text_language language)

    Parameters
    ----------
    text: fz_text *
    font: fz_font *
    trm: fz_matrix
    glyph: int
    unicode: int
    wmode: int
    bidi_level: int
    markup_dir: enum fz_bidi_direction
    language: enum fz_text_language

    """
    return _mupdf.show_glyph(text, font, trm, glyph, unicode, wmode, bidi_level, markup_dir, language)

def show_string(text, font, trm, s, wmode, bidi_level, markup_dir, language):
    """
    show_string(fz_text text, fz_font * font, fz_matrix trm, char const * s, int wmode, int bidi_level, fz_bidi_direction markup_dir, fz_text_language language) -> fz_matrix

    Parameters
    ----------
    text: fz_text *
    font: fz_font *
    trm: fz_matrix
    s: char const *
    wmode: int
    bidi_level: int
    markup_dir: enum fz_bidi_direction
    language: enum fz_text_language

    """
    return _mupdf.show_string(text, font, trm, s, wmode, bidi_level, markup_dir, language)

def shrink_store(percent):
    """
    shrink_store(unsigned int percent) -> int

    Parameters
    ----------
    percent: unsigned int

    """
    return _mupdf.shrink_store(percent)

def skip(stm, len):
    """
    skip(fz_stream * stm, size_t len) -> size_t

    Parameters
    ----------
    stm: fz_stream *
    len: size_t

    """
    return _mupdf.skip(stm, len)

def skip_space(stm):
    """
    skip_space(fz_stream * stm)

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.skip_space(stm)

def skip_string(stm, str):
    """
    skip_string(fz_stream * stm, char const * str) -> int

    Parameters
    ----------
    stm: fz_stream *
    str: char const *

    """
    return _mupdf.skip_string(stm, str)

def snap_selection(page, ap, bp, mode):
    """
    snap_selection(fz_stext_page page, fz_point ap, fz_point bp, int mode) -> fz_quad

    Parameters
    ----------
    page: fz_stext_page *
    ap: fz_point *
    bp: fz_point *
    mode: int

    """
    return _mupdf.snap_selection(page, ap, bp, mode)

def start_throw_on_repair():
    """start_throw_on_repair()"""
    return _mupdf.start_throw_on_repair()

def stddbg():
    """stddbg() -> fz_output *"""
    return _mupdf.stddbg()

def stderr_():
    """stderr_() -> fz_output *"""
    return _mupdf.stderr_()

def stdout_():
    """stdout_() -> fz_output *"""
    return _mupdf.stdout_()

def store_item(key, val, itemsize, type):
    """
    store_item(void * key, void * val, size_t itemsize, fz_store_type type) -> void *

    Parameters
    ----------
    key: void *
    val: void *
    itemsize: size_t
    type: fz_store_type const *

    """
    return _mupdf.store_item(key, val, itemsize, type)

def store_scavenge(size, phase):
    """
    store_scavenge(size_t size, int * phase) -> int

    Parameters
    ----------
    size: size_t
    phase: int *

    """
    return _mupdf.store_scavenge(size, phase)

def store_scavenge_external(size, phase):
    """
    store_scavenge_external(size_t size, int * phase) -> int

    Parameters
    ----------
    size: size_t
    phase: int *

    """
    return _mupdf.store_scavenge_external(size, phase)

def strcasecmp(a, b):
    """
    strcasecmp(char const * a, char const * b) -> int

    Parameters
    ----------
    a: char const *
    b: char const *

    """
    return _mupdf.strcasecmp(a, b)

def strdup(s):
    """
    strdup(char const * s) -> char *

    Parameters
    ----------
    s: char const *

    """
    return _mupdf.strdup(s)

def stream_from_output(arg_1):
    """
    stream_from_output(fz_output * arg_1) -> fz_stream *

    Parameters
    ----------
    arg_1: fz_output *

    """
    return _mupdf.stream_from_output(arg_1)

def string_from_buffer(buf):
    """
    string_from_buffer(fz_buffer buf) -> char const *

    Parameters
    ----------
    buf: fz_buffer *

    """
    return _mupdf.string_from_buffer(buf)

def string_from_text_language(str, lang):
    """
    string_from_text_language(char [8] str, fz_text_language lang) -> char *

    Parameters
    ----------
    str: char [8]
    lang: enum fz_text_language

    """
    return _mupdf.string_from_text_language(str, lang)

def strlcat(dst, src, n):
    """
    strlcat(char * dst, char const * src, size_t n) -> size_t

    Parameters
    ----------
    dst: char *
    src: char const *
    n: size_t

    """
    return _mupdf.strlcat(dst, src, n)

def strlcpy(dst, src, n):
    """
    strlcpy(char * dst, char const * src, size_t n) -> size_t

    Parameters
    ----------
    dst: char *
    src: char const *
    n: size_t

    """
    return _mupdf.strlcpy(dst, src, n)

def strncasecmp(a, b, n):
    """
    strncasecmp(char const * a, char const * b, size_t n) -> int

    Parameters
    ----------
    a: char const *
    b: char const *
    n: size_t

    """
    return _mupdf.strncasecmp(a, b, n)

def strnlen(s, maxlen):
    """
    strnlen(char const * s, size_t maxlen) -> size_t

    Parameters
    ----------
    s: char const *
    maxlen: size_t

    """
    return _mupdf.strnlen(s, maxlen)

def stroke_path(dev, path, stroke, ctm, colorspace, color, alpha, color_params):
    """
    stroke_path(fz_device * dev, fz_path const * path, fz_stroke_state stroke, fz_matrix ctm, fz_colorspace * colorspace, float const * color, float alpha, fz_color_params color_params)

    Parameters
    ----------
    dev: fz_device *
    path: fz_path const *
    stroke: fz_stroke_state const *
    ctm: fz_matrix
    colorspace: fz_colorspace *
    color: float const *
    alpha: float
    color_params: fz_color_params

    """
    return _mupdf.stroke_path(dev, path, stroke, ctm, colorspace, color, alpha, color_params)

def stroke_text(dev, text, stroke, ctm, colorspace, color, alpha, color_params):
    """
    stroke_text(fz_device * dev, fz_text text, fz_stroke_state stroke, fz_matrix ctm, fz_colorspace * colorspace, float const * color, float alpha, fz_color_params color_params)

    Parameters
    ----------
    dev: fz_device *
    text: fz_text const *
    stroke: fz_stroke_state const *
    ctm: fz_matrix
    colorspace: fz_colorspace *
    color: float const *
    alpha: float
    color_params: fz_color_params

    """
    return _mupdf.stroke_text(dev, text, stroke, ctm, colorspace, color, alpha, color_params)

def strsep(stringp, delim):
    """
    strsep(char ** stringp, char const * delim) -> char *

    Parameters
    ----------
    stringp: char **
    delim: char const *

    """
    return _mupdf.strsep(stringp, delim)

def subpixel_adjust(ctm, subpix_ctm, qe, qf):
    """
    subpixel_adjust(fz_matrix ctm, fz_matrix subpix_ctm, unsigned char * qe, unsigned char * qf) -> float

    Parameters
    ----------
    ctm: fz_matrix *
    subpix_ctm: fz_matrix *
    qe: unsigned char *
    qf: unsigned char *

    """
    return _mupdf.subpixel_adjust(ctm, subpix_ctm, qe, qf)

def sync_bits(stm):
    """
    sync_bits(fz_stream * stm)

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.sync_bits(stm)

def tell(stm):
    """
    tell(fz_stream * stm) -> int64_t

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.tell(stm)

def tell_output(out):
    """
    tell_output(fz_output * out) -> int64_t

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.tell_output(out)

def terminate_buffer(buf):
    """
    terminate_buffer(fz_buffer buf)

    Parameters
    ----------
    buf: fz_buffer *

    """
    return _mupdf.terminate_buffer(buf)

def text_aa_level():
    """text_aa_level() -> int"""
    return _mupdf.text_aa_level()

def text_language_from_string(str):
    """
    text_language_from_string(char const * str) -> fz_text_language

    Parameters
    ----------
    str: char const *

    """
    return _mupdf.text_language_from_string(str)

def tint_pixmap(pix, black, white):
    """
    tint_pixmap(fz_pixmap * pix, int black, int white)

    Parameters
    ----------
    pix: fz_pixmap *
    black: int
    white: int

    """
    return _mupdf.tint_pixmap(pix, black, white)

def transform_page(mediabox, resolution, rotate):
    """
    transform_page(fz_rect mediabox, float resolution, float rotate) -> fz_matrix

    Parameters
    ----------
    mediabox: fz_rect
    resolution: float
    rotate: float

    """
    return _mupdf.transform_page(mediabox, resolution, rotate)

def transform_path(path, transform):
    """
    transform_path(fz_path * path, fz_matrix transform)

    Parameters
    ----------
    path: fz_path *
    transform: fz_matrix

    """
    return _mupdf.transform_path(path, transform)

def transform_point(point, m):
    """
    transform_point(fz_point point, fz_matrix m) -> fz_point

    Parameters
    ----------
    point: fz_point
    m: fz_matrix

    """
    return _mupdf.transform_point(point, m)

def transform_point_xy(x, y, m):
    """
    transform_point_xy(float x, float y, fz_matrix m) -> fz_point

    Parameters
    ----------
    x: float
    y: float
    m: fz_matrix

    """
    return _mupdf.transform_point_xy(x, y, m)

def transform_quad(q, m):
    """
    transform_quad(fz_quad q, fz_matrix m) -> fz_quad

    Parameters
    ----------
    q: fz_quad
    m: fz_matrix

    """
    return _mupdf.transform_quad(q, m)

def transform_rect(rect, m):
    """
    transform_rect(fz_rect rect, fz_matrix m) -> fz_rect

    Parameters
    ----------
    rect: fz_rect
    m: fz_matrix

    """
    return _mupdf.transform_rect(rect, m)

def transform_vector(vector, m):
    """
    transform_vector(fz_point vector, fz_matrix m) -> fz_point

    Parameters
    ----------
    vector: fz_point
    m: fz_matrix

    """
    return _mupdf.transform_vector(vector, m)

def translate(tx, ty):
    """
    translate(float tx, float ty) -> fz_matrix

    Parameters
    ----------
    tx: float
    ty: float

    """
    return _mupdf.translate(tx, ty)

def translate_irect(a, xoff, yoff):
    """
    translate_irect(fz_irect a, int xoff, int yoff) -> fz_irect

    Parameters
    ----------
    a: fz_irect
    xoff: int
    yoff: int

    """
    return _mupdf.translate_irect(a, xoff, yoff)

def translate_rect(a, xoff, yoff):
    """
    translate_rect(fz_rect a, float xoff, float yoff) -> fz_rect

    Parameters
    ----------
    a: fz_rect
    xoff: float
    yoff: float

    """
    return _mupdf.translate_rect(a, xoff, yoff)

def tree_insert(root, key, value):
    """
    tree_insert(fz_tree * root, char const * key, void * value) -> fz_tree *

    Parameters
    ----------
    root: fz_tree *
    key: char const *
    value: void *

    """
    return _mupdf.tree_insert(root, key, value)

def tree_lookup(node, key):
    """
    tree_lookup(fz_tree * node, char const * key) -> void *

    Parameters
    ----------
    node: fz_tree *
    key: char const *

    """
    return _mupdf.tree_lookup(node, key)

def trim_buffer(buf):
    """
    trim_buffer(fz_buffer buf)

    Parameters
    ----------
    buf: fz_buffer *

    """
    return _mupdf.trim_buffer(buf)

def trim_path(path):
    """
    trim_path(fz_path * path)

    Parameters
    ----------
    path: fz_path *

    """
    return _mupdf.trim_path(path)

def truncate_output(arg_1):
    """
    truncate_output(fz_output * arg_1)

    Parameters
    ----------
    arg_1: fz_output *

    """
    return _mupdf.truncate_output(arg_1)

def try_invert_matrix(inv, src):
    """
    try_invert_matrix(fz_matrix inv, fz_matrix src) -> int

    Parameters
    ----------
    inv: fz_matrix *
    src: fz_matrix

    """
    return _mupdf.try_invert_matrix(inv, src)

def tune_image_decode(image_decode, arg):
    """
    tune_image_decode(fz_tune_image_decode_fn * image_decode, void * arg)

    Parameters
    ----------
    image_decode: fz_tune_image_decode_fn *
    arg: void *

    """
    return _mupdf.tune_image_decode(image_decode, arg)

def tune_image_scale(image_scale, arg):
    """
    tune_image_scale(fz_tune_image_scale_fn * image_scale, void * arg)

    Parameters
    ----------
    image_scale: fz_tune_image_scale_fn *
    arg: void *

    """
    return _mupdf.tune_image_scale(image_scale, arg)

def unicode_from_glyph_name(name):
    """
    unicode_from_glyph_name(char const * name) -> int

    Parameters
    ----------
    name: char const *

    """
    return _mupdf.unicode_from_glyph_name(name)

def unicode_from_glyph_name_strict(name):
    """
    unicode_from_glyph_name_strict(char const * name) -> int

    Parameters
    ----------
    name: char const *

    """
    return _mupdf.unicode_from_glyph_name_strict(name)

def union_rect(a, b):
    """
    union_rect(fz_rect a, fz_rect b) -> fz_rect

    Parameters
    ----------
    a: fz_rect
    b: fz_rect

    """
    return _mupdf.union_rect(a, b)

def unlock(lock):
    """
    unlock(int lock)

    Parameters
    ----------
    lock: int

    """
    return _mupdf.unlock(lock)

def unpack_stream(src, depth, w, h, n, indexed, pad, skip):
    """
    unpack_stream(fz_stream * src, int depth, int w, int h, int n, int indexed, int pad, int skip) -> fz_stream *

    Parameters
    ----------
    src: fz_stream *
    depth: int
    w: int
    h: int
    n: int
    indexed: int
    pad: int
    skip: int

    """
    return _mupdf.unpack_stream(src, depth, w, h, n, indexed, pad, skip)

def unread_byte(stm):
    """
    unread_byte(fz_stream * stm)

    Parameters
    ----------
    stm: fz_stream *

    """
    return _mupdf.unread_byte(stm)

def unshare_stroke_state(shared):
    """
    unshare_stroke_state(fz_stroke_state shared) -> fz_stroke_state

    Parameters
    ----------
    shared: fz_stroke_state *

    """
    return _mupdf.unshare_stroke_state(shared)

def unshare_stroke_state_with_dash_len(shared, len):
    """
    unshare_stroke_state_with_dash_len(fz_stroke_state shared, int len) -> fz_stroke_state

    Parameters
    ----------
    shared: fz_stroke_state *
    len: int

    """
    return _mupdf.unshare_stroke_state_with_dash_len(shared, len)

def urldecode(url):
    """
    urldecode(char * url) -> char *

    Parameters
    ----------
    url: char *

    """
    return _mupdf.urldecode(url)

def use_document_css():
    """use_document_css() -> int"""
    return _mupdf.use_document_css()

def user_context():
    """user_context() -> void *"""
    return _mupdf.user_context()

def user_css():
    """user_css() -> char const *"""
    return _mupdf.user_css()

def utflen(s):
    """
    utflen(char const * s) -> int

    Parameters
    ----------
    s: char const *

    """
    return _mupdf.utflen(s)

def var_imp(arg_0):
    """
    var_imp(void * arg_0)

    Parameters
    ----------
    arg_0: void *

    """
    return _mupdf.var_imp(arg_0)

def walk_path(path, walker, arg):
    """
    walk_path(fz_path const * path, fz_path_walker walker, void * arg)

    Parameters
    ----------
    path: fz_path const *
    walker: fz_path_walker const *
    arg: void *

    """
    return _mupdf.walk_path(path, walker, arg)

def warp_pixmap(src, points, width, height):
    """
    warp_pixmap(fz_pixmap * src, fz_point points, int width, int height) -> fz_pixmap *

    Parameters
    ----------
    src: fz_pixmap *
    points: fz_point const [4]
    width: int
    height: int

    """
    return _mupdf.warp_pixmap(src, points, width, height)

def windows_1250_from_unicode(u):
    """
    windows_1250_from_unicode(int u) -> int

    Parameters
    ----------
    u: int

    """
    return _mupdf.windows_1250_from_unicode(u)

def windows_1251_from_unicode(u):
    """
    windows_1251_from_unicode(int u) -> int

    Parameters
    ----------
    u: int

    """
    return _mupdf.windows_1251_from_unicode(u)

def windows_1252_from_unicode(u):
    """
    windows_1252_from_unicode(int u) -> int

    Parameters
    ----------
    u: int

    """
    return _mupdf.windows_1252_from_unicode(u)

def write_band(writer, stride, band_height, samples):
    """
    write_band(fz_band_writer * writer, int stride, int band_height, unsigned char const * samples)

    Parameters
    ----------
    writer: fz_band_writer *
    stride: int
    band_height: int
    samples: unsigned char const *

    """
    return _mupdf.write_band(writer, stride, band_height, samples)

def write_base64(out, data, size, newline):
    """
    write_base64(fz_output * out, unsigned char const * data, size_t size, int newline)

    Parameters
    ----------
    out: fz_output *
    data: unsigned char const *
    size: size_t
    newline: int

    """
    return _mupdf.write_base64(out, data, size, newline)

def write_base64_buffer(out, data, newline):
    """
    write_base64_buffer(fz_output * out, fz_buffer data, int newline)

    Parameters
    ----------
    out: fz_output *
    data: fz_buffer *
    newline: int

    """
    return _mupdf.write_base64_buffer(out, data, newline)

def write_bitmap_as_pbm(out, bitmap):
    """
    write_bitmap_as_pbm(fz_output * out, fz_bitmap bitmap)

    Parameters
    ----------
    out: fz_output *
    bitmap: fz_bitmap *

    """
    return _mupdf.write_bitmap_as_pbm(out, bitmap)

def write_bitmap_as_pcl(out, bitmap, pcl):
    """
    write_bitmap_as_pcl(fz_output * out, fz_bitmap bitmap, fz_pcl_options pcl)

    Parameters
    ----------
    out: fz_output *
    bitmap: fz_bitmap const *
    pcl: fz_pcl_options const *

    """
    return _mupdf.write_bitmap_as_pcl(out, bitmap, pcl)

def write_bitmap_as_pkm(out, bitmap):
    """
    write_bitmap_as_pkm(fz_output * out, fz_bitmap bitmap)

    Parameters
    ----------
    out: fz_output *
    bitmap: fz_bitmap *

    """
    return _mupdf.write_bitmap_as_pkm(out, bitmap)

def write_bitmap_as_pwg(out, bitmap, pwg):
    """
    write_bitmap_as_pwg(fz_output * out, fz_bitmap bitmap, fz_pwg_options pwg)

    Parameters
    ----------
    out: fz_output *
    bitmap: fz_bitmap const *
    pwg: fz_pwg_options const *

    """
    return _mupdf.write_bitmap_as_pwg(out, bitmap, pwg)

def write_bitmap_as_pwg_page(out, bitmap, pwg):
    """
    write_bitmap_as_pwg_page(fz_output * out, fz_bitmap bitmap, fz_pwg_options pwg)

    Parameters
    ----------
    out: fz_output *
    bitmap: fz_bitmap const *
    pwg: fz_pwg_options const *

    """
    return _mupdf.write_bitmap_as_pwg_page(out, bitmap, pwg)

def write_byte(out, x):
    """
    write_byte(fz_output * out, unsigned char x)

    Parameters
    ----------
    out: fz_output *
    x: unsigned char

    """
    return _mupdf.write_byte(out, x)

def write_char(out, x):
    """
    write_char(fz_output * out, char x)

    Parameters
    ----------
    out: fz_output *
    x: char

    """
    return _mupdf.write_char(out, x)

def write_data(out, data, size):
    """
    write_data(fz_output * out, void const * data, size_t size)

    Parameters
    ----------
    out: fz_output *
    data: void const *
    size: size_t

    """
    return _mupdf.write_data(out, data, size)

def write_document(wri, doc):
    """
    write_document(fz_document_writer * wri, fz_document * doc)

    Parameters
    ----------
    wri: fz_document_writer *
    doc: fz_document *

    """
    return _mupdf.write_document(wri, doc)

def write_float_be(out, f):
    """
    write_float_be(fz_output * out, float f)

    Parameters
    ----------
    out: fz_output *
    f: float

    """
    return _mupdf.write_float_be(out, f)

def write_float_le(out, f):
    """
    write_float_le(fz_output * out, float f)

    Parameters
    ----------
    out: fz_output *
    f: float

    """
    return _mupdf.write_float_le(out, f)

def write_header(writer, w, h, n, alpha, xres, yres, pagenum, cs, seps):
    """
    write_header(fz_band_writer * writer, int w, int h, int n, int alpha, int xres, int yres, int pagenum, fz_colorspace * cs, fz_separations * seps)

    Parameters
    ----------
    writer: fz_band_writer *
    w: int
    h: int
    n: int
    alpha: int
    xres: int
    yres: int
    pagenum: int
    cs: fz_colorspace *
    seps: fz_separations *

    """
    return _mupdf.write_header(writer, w, h, n, alpha, xres, yres, pagenum, cs, seps)

def write_image_as_data_uri(out, image):
    """
    write_image_as_data_uri(fz_output * out, fz_image * image)

    Parameters
    ----------
    out: fz_output *
    image: fz_image *

    """
    return _mupdf.write_image_as_data_uri(out, image)

def write_int16_be(out, x):
    """
    write_int16_be(fz_output * out, int x)

    Parameters
    ----------
    out: fz_output *
    x: int

    """
    return _mupdf.write_int16_be(out, x)

def write_int16_le(out, x):
    """
    write_int16_le(fz_output * out, int x)

    Parameters
    ----------
    out: fz_output *
    x: int

    """
    return _mupdf.write_int16_le(out, x)

def write_int32_be(out, x):
    """
    write_int32_be(fz_output * out, int x)

    Parameters
    ----------
    out: fz_output *
    x: int

    """
    return _mupdf.write_int32_be(out, x)

def write_int32_le(out, x):
    """
    write_int32_le(fz_output * out, int x)

    Parameters
    ----------
    out: fz_output *
    x: int

    """
    return _mupdf.write_int32_le(out, x)

def write_pixmap_as_data_uri(out, pixmap):
    """
    write_pixmap_as_data_uri(fz_output * out, fz_pixmap * pixmap)

    Parameters
    ----------
    out: fz_output *
    pixmap: fz_pixmap *

    """
    return _mupdf.write_pixmap_as_data_uri(out, pixmap)

def write_pixmap_as_pam(out, pixmap):
    """
    write_pixmap_as_pam(fz_output * out, fz_pixmap * pixmap)

    Parameters
    ----------
    out: fz_output *
    pixmap: fz_pixmap *

    """
    return _mupdf.write_pixmap_as_pam(out, pixmap)

def write_pixmap_as_pcl(out, pixmap, pcl):
    """
    write_pixmap_as_pcl(fz_output * out, fz_pixmap const * pixmap, fz_pcl_options pcl)

    Parameters
    ----------
    out: fz_output *
    pixmap: fz_pixmap const *
    pcl: fz_pcl_options const *

    """
    return _mupdf.write_pixmap_as_pcl(out, pixmap, pcl)

def write_pixmap_as_pclm(out, pixmap, options):
    """
    write_pixmap_as_pclm(fz_output * out, fz_pixmap const * pixmap, fz_pclm_options options)

    Parameters
    ----------
    out: fz_output *
    pixmap: fz_pixmap const *
    options: fz_pclm_options const *

    """
    return _mupdf.write_pixmap_as_pclm(out, pixmap, options)

def write_pixmap_as_pdfocr(out, pixmap, options):
    """
    write_pixmap_as_pdfocr(fz_output * out, fz_pixmap const * pixmap, fz_pdfocr_options options)

    Parameters
    ----------
    out: fz_output *
    pixmap: fz_pixmap const *
    options: fz_pdfocr_options const *

    """
    return _mupdf.write_pixmap_as_pdfocr(out, pixmap, options)

def write_pixmap_as_png(out, pixmap):
    """
    write_pixmap_as_png(fz_output * out, fz_pixmap const * pixmap)

    Parameters
    ----------
    out: fz_output *
    pixmap: fz_pixmap const *

    """
    return _mupdf.write_pixmap_as_png(out, pixmap)

def write_pixmap_as_pnm(out, pixmap):
    """
    write_pixmap_as_pnm(fz_output * out, fz_pixmap * pixmap)

    Parameters
    ----------
    out: fz_output *
    pixmap: fz_pixmap *

    """
    return _mupdf.write_pixmap_as_pnm(out, pixmap)

def write_pixmap_as_ps(out, pixmap):
    """
    write_pixmap_as_ps(fz_output * out, fz_pixmap const * pixmap)

    Parameters
    ----------
    out: fz_output *
    pixmap: fz_pixmap const *

    """
    return _mupdf.write_pixmap_as_ps(out, pixmap)

def write_pixmap_as_psd(out, pixmap):
    """
    write_pixmap_as_psd(fz_output * out, fz_pixmap const * pixmap)

    Parameters
    ----------
    out: fz_output *
    pixmap: fz_pixmap const *

    """
    return _mupdf.write_pixmap_as_psd(out, pixmap)

def write_pixmap_as_pwg(out, pixmap, pwg):
    """
    write_pixmap_as_pwg(fz_output * out, fz_pixmap const * pixmap, fz_pwg_options pwg)

    Parameters
    ----------
    out: fz_output *
    pixmap: fz_pixmap const *
    pwg: fz_pwg_options const *

    """
    return _mupdf.write_pixmap_as_pwg(out, pixmap, pwg)

def write_pixmap_as_pwg_page(out, pixmap, pwg):
    """
    write_pixmap_as_pwg_page(fz_output * out, fz_pixmap const * pixmap, fz_pwg_options pwg)

    Parameters
    ----------
    out: fz_output *
    pixmap: fz_pixmap const *
    pwg: fz_pwg_options const *

    """
    return _mupdf.write_pixmap_as_pwg_page(out, pixmap, pwg)

def write_ps_file_header(out):
    """
    write_ps_file_header(fz_output * out)

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.write_ps_file_header(out)

def write_ps_file_trailer(out, pages):
    """
    write_ps_file_trailer(fz_output * out, int pages)

    Parameters
    ----------
    out: fz_output *
    pages: int

    """
    return _mupdf.write_ps_file_trailer(out, pages)

def write_pwg_file_header(out):
    """
    write_pwg_file_header(fz_output * out)

    Parameters
    ----------
    out: fz_output *

    """
    return _mupdf.write_pwg_file_header(out)

def write_rune(out, rune):
    """
    write_rune(fz_output * out, int rune)

    Parameters
    ----------
    out: fz_output *
    rune: int

    """
    return _mupdf.write_rune(out, rune)

def write_string(out, s):
    """
    write_string(fz_output * out, char const * s)

    Parameters
    ----------
    out: fz_output *
    s: char const *

    """
    return _mupdf.write_string(out, s)

def write_uint16_be(out, x):
    """
    write_uint16_be(fz_output * out, unsigned int x)

    Parameters
    ----------
    out: fz_output *
    x: unsigned int

    """
    return _mupdf.write_uint16_be(out, x)

def write_uint16_le(out, x):
    """
    write_uint16_le(fz_output * out, unsigned int x)

    Parameters
    ----------
    out: fz_output *
    x: unsigned int

    """
    return _mupdf.write_uint16_le(out, x)

def write_uint32_be(out, x):
    """
    write_uint32_be(fz_output * out, unsigned int x)

    Parameters
    ----------
    out: fz_output *
    x: unsigned int

    """
    return _mupdf.write_uint32_be(out, x)

def write_uint32_le(out, x):
    """
    write_uint32_le(fz_output * out, unsigned int x)

    Parameters
    ----------
    out: fz_output *
    x: unsigned int

    """
    return _mupdf.write_uint32_le(out, x)

def write_zip_entry(zip, name, buf, compress):
    """
    write_zip_entry(fz_zip_writer * zip, char const * name, fz_buffer buf, int compress)

    Parameters
    ----------
    zip: fz_zip_writer *
    name: char const *
    buf: fz_buffer *
    compress: int

    """
    return _mupdf.write_zip_entry(zip, name, buf, compress)

def xml_att(item, att):
    """
    xml_att(fz_xml * item, char const * att) -> char *

    Parameters
    ----------
    item: fz_xml *
    att: char const *

    """
    return _mupdf.xml_att(item, att)

def xml_att_alt(item, one, two):
    """
    xml_att_alt(fz_xml * item, char const * one, char const * two) -> char *

    Parameters
    ----------
    item: fz_xml *
    one: char const *
    two: char const *

    """
    return _mupdf.xml_att_alt(item, one, two)

def xml_att_eq(item, name, match):
    """
    xml_att_eq(fz_xml * item, char const * name, char const * match) -> int

    Parameters
    ----------
    item: fz_xml *
    name: char const *
    match: char const *

    """
    return _mupdf.xml_att_eq(item, name, match)

def xml_down(item):
    """
    xml_down(fz_xml * item) -> fz_xml *

    Parameters
    ----------
    item: fz_xml *

    """
    return _mupdf.xml_down(item)

def xml_find(item, tag):
    """
    xml_find(fz_xml * item, char const * tag) -> fz_xml *

    Parameters
    ----------
    item: fz_xml *
    tag: char const *

    """
    return _mupdf.xml_find(item, tag)

def xml_find_down(item, tag):
    """
    xml_find_down(fz_xml * item, char const * tag) -> fz_xml *

    Parameters
    ----------
    item: fz_xml *
    tag: char const *

    """
    return _mupdf.xml_find_down(item, tag)

def xml_find_down_match(item, tag, att, match):
    """
    xml_find_down_match(fz_xml * item, char const * tag, char const * att, char const * match) -> fz_xml *

    Parameters
    ----------
    item: fz_xml *
    tag: char const *
    att: char const *
    match: char const *

    """
    return _mupdf.xml_find_down_match(item, tag, att, match)

def xml_find_match(item, tag, att, match):
    """
    xml_find_match(fz_xml * item, char const * tag, char const * att, char const * match) -> fz_xml *

    Parameters
    ----------
    item: fz_xml *
    tag: char const *
    att: char const *
    match: char const *

    """
    return _mupdf.xml_find_match(item, tag, att, match)

def xml_find_next(item, tag):
    """
    xml_find_next(fz_xml * item, char const * tag) -> fz_xml *

    Parameters
    ----------
    item: fz_xml *
    tag: char const *

    """
    return _mupdf.xml_find_next(item, tag)

def xml_find_next_match(item, tag, att, match):
    """
    xml_find_next_match(fz_xml * item, char const * tag, char const * att, char const * match) -> fz_xml *

    Parameters
    ----------
    item: fz_xml *
    tag: char const *
    att: char const *
    match: char const *

    """
    return _mupdf.xml_find_next_match(item, tag, att, match)

def xml_is_tag(item, name):
    """
    xml_is_tag(fz_xml * item, char const * name) -> int

    Parameters
    ----------
    item: fz_xml *
    name: char const *

    """
    return _mupdf.xml_is_tag(item, name)

def xml_next(item):
    """
    xml_next(fz_xml * item) -> fz_xml *

    Parameters
    ----------
    item: fz_xml *

    """
    return _mupdf.xml_next(item)

def xml_prev(item):
    """
    xml_prev(fz_xml * item) -> fz_xml *

    Parameters
    ----------
    item: fz_xml *

    """
    return _mupdf.xml_prev(item)

def xml_root(xml):
    """
    xml_root(fz_xml_doc * xml) -> fz_xml *

    Parameters
    ----------
    xml: fz_xml_doc *

    """
    return _mupdf.xml_root(xml)

def xml_tag(item):
    """
    xml_tag(fz_xml * item) -> char *

    Parameters
    ----------
    item: fz_xml *

    """
    return _mupdf.xml_tag(item)

def xml_text(item):
    """
    xml_text(fz_xml * item) -> char *

    Parameters
    ----------
    item: fz_xml *

    """
    return _mupdf.xml_text(item)

def xml_up(item):
    """
    xml_up(fz_xml * item) -> fz_xml *

    Parameters
    ----------
    item: fz_xml *

    """
    return _mupdf.xml_up(item)

def ppdf_access_alert_event(evt):
    """
    ppdf_access_alert_event(pdf_doc_event * evt) -> pdf_alert_event

    Parameters
    ----------
    evt: pdf_doc_event *

    """
    return _mupdf.ppdf_access_alert_event(evt)

def ppdf_access_exec_menu_item_event(evt):
    """
    ppdf_access_exec_menu_item_event(pdf_doc_event * evt) -> char const *

    Parameters
    ----------
    evt: pdf_doc_event *

    """
    return _mupdf.ppdf_access_exec_menu_item_event(evt)

def ppdf_access_launch_url_event(evt):
    """
    ppdf_access_launch_url_event(pdf_doc_event * evt) -> pdf_launch_url_event

    Parameters
    ----------
    evt: pdf_doc_event *

    """
    return _mupdf.ppdf_access_launch_url_event(evt)

def ppdf_access_mail_doc_event(evt):
    """
    ppdf_access_mail_doc_event(pdf_doc_event * evt) -> pdf_mail_doc_event

    Parameters
    ----------
    evt: pdf_doc_event *

    """
    return _mupdf.ppdf_access_mail_doc_event(evt)

def ppdf_add_annot_ink_list(annot, n, stroke):
    """
    ppdf_add_annot_ink_list(pdf_annot * annot, int n, fz_point stroke)

    Parameters
    ----------
    annot: pdf_annot *
    n: int
    stroke: fz_point []

    """
    return _mupdf.ppdf_add_annot_ink_list(annot, n, stroke)

def ppdf_add_annot_ink_list_stroke(annot):
    """
    ppdf_add_annot_ink_list_stroke(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_add_annot_ink_list_stroke(annot)

def ppdf_add_annot_ink_list_stroke_vertex(annot, p):
    """
    ppdf_add_annot_ink_list_stroke_vertex(pdf_annot * annot, fz_point p)

    Parameters
    ----------
    annot: pdf_annot *
    p: fz_point

    """
    return _mupdf.ppdf_add_annot_ink_list_stroke_vertex(annot, p)

def ppdf_add_annot_quad_point(annot, quad):
    """
    ppdf_add_annot_quad_point(pdf_annot * annot, fz_quad quad)

    Parameters
    ----------
    annot: pdf_annot *
    quad: fz_quad

    """
    return _mupdf.ppdf_add_annot_quad_point(annot, quad)

def ppdf_add_annot_vertex(annot, p):
    """
    ppdf_add_annot_vertex(pdf_annot * annot, fz_point p)

    Parameters
    ----------
    annot: pdf_annot *
    p: fz_point

    """
    return _mupdf.ppdf_add_annot_vertex(annot, p)

def ppdf_add_cid_font(doc, font):
    """
    ppdf_add_cid_font(pdf_document * doc, fz_font * font) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    font: fz_font *

    """
    return _mupdf.ppdf_add_cid_font(doc, font)

def ppdf_add_cjk_font(doc, font, script, wmode, serif):
    """
    ppdf_add_cjk_font(pdf_document * doc, fz_font * font, int script, int wmode, int serif) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    font: fz_font *
    script: int
    wmode: int
    serif: int

    """
    return _mupdf.ppdf_add_cjk_font(doc, font, script, wmode, serif)

def ppdf_add_codespace(cmap, low, high, n):
    """
    ppdf_add_codespace(pdf_cmap cmap, unsigned int low, unsigned int high, size_t n)

    Parameters
    ----------
    cmap: pdf_cmap *
    low: unsigned int
    high: unsigned int
    n: size_t

    """
    return _mupdf.ppdf_add_codespace(cmap, low, high, n)

def ppdf_add_embedded_file(doc, filename, mimetype, contents):
    """
    ppdf_add_embedded_file(pdf_document * doc, char const * filename, char const * mimetype, fz_buffer contents) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    filename: char const *
    mimetype: char const *
    contents: fz_buffer *

    """
    return _mupdf.ppdf_add_embedded_file(doc, filename, mimetype, contents)

def ppdf_add_hmtx(font, lo, hi, w):
    """
    ppdf_add_hmtx(pdf_font_desc font, int lo, int hi, int w)

    Parameters
    ----------
    font: pdf_font_desc *
    lo: int
    hi: int
    w: int

    """
    return _mupdf.ppdf_add_hmtx(font, lo, hi, w)

def ppdf_add_image(doc, image):
    """
    ppdf_add_image(pdf_document * doc, fz_image * image) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    image: fz_image *

    """
    return _mupdf.ppdf_add_image(doc, image)

def ppdf_add_journal_fragment(doc, parent, copy, copy_stream, newobj):
    """
    ppdf_add_journal_fragment(pdf_document * doc, int parent, pdf_obj * copy, fz_buffer copy_stream, int newobj)

    Parameters
    ----------
    doc: pdf_document *
    parent: int
    copy: pdf_obj *
    copy_stream: fz_buffer *
    newobj: int

    """
    return _mupdf.ppdf_add_journal_fragment(doc, parent, copy, copy_stream, newobj)

def ppdf_add_new_array(doc, initial):
    """
    ppdf_add_new_array(pdf_document * doc, int initial) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    initial: int

    """
    return _mupdf.ppdf_add_new_array(doc, initial)

def ppdf_add_new_dict(doc, initial):
    """
    ppdf_add_new_dict(pdf_document * doc, int initial) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    initial: int

    """
    return _mupdf.ppdf_add_new_dict(doc, initial)

def ppdf_add_object(doc, obj):
    """
    ppdf_add_object(pdf_document * doc, pdf_obj * obj) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_add_object(doc, obj)

def ppdf_add_object_drop(doc, obj):
    """
    ppdf_add_object_drop(pdf_document * doc, pdf_obj * obj) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_add_object_drop(doc, obj)

def ppdf_add_page(doc, mediabox, rotate, resources, contents):
    """
    ppdf_add_page(pdf_document * doc, fz_rect mediabox, int rotate, pdf_obj * resources, fz_buffer contents) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    mediabox: fz_rect
    rotate: int
    resources: pdf_obj *
    contents: fz_buffer *

    """
    return _mupdf.ppdf_add_page(doc, mediabox, rotate, resources, contents)

def ppdf_add_simple_font(doc, font, encoding):
    """
    ppdf_add_simple_font(pdf_document * doc, fz_font * font, int encoding) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    font: fz_font *
    encoding: int

    """
    return _mupdf.ppdf_add_simple_font(doc, font, encoding)

def ppdf_add_stream(doc, buf, obj, compressed):
    """
    ppdf_add_stream(pdf_document * doc, fz_buffer buf, pdf_obj * obj, int compressed) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    buf: fz_buffer *
    obj: pdf_obj *
    compressed: int

    """
    return _mupdf.ppdf_add_stream(doc, buf, obj, compressed)

def ppdf_add_substitute_font(doc, font):
    """
    ppdf_add_substitute_font(pdf_document * doc, fz_font * font) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    font: fz_font *

    """
    return _mupdf.ppdf_add_substitute_font(doc, font)

def ppdf_add_vmtx(font, lo, hi, x, y, w):
    """
    ppdf_add_vmtx(pdf_font_desc font, int lo, int hi, int x, int y, int w)

    Parameters
    ----------
    font: pdf_font_desc *
    lo: int
    hi: int
    x: int
    y: int
    w: int

    """
    return _mupdf.ppdf_add_vmtx(font, lo, hi, x, y, w)

def ppdf_annot_MK_BC(annot, n, color):
    """
    ppdf_annot_MK_BC(pdf_annot * annot, int * n, float [4] color)

    Parameters
    ----------
    annot: pdf_annot *
    n: int *
    color: float [4]

    """
    return _mupdf.ppdf_annot_MK_BC(annot, n, color)

def ppdf_annot_MK_BC_rgb(annot, rgb):
    """
    ppdf_annot_MK_BC_rgb(pdf_annot * annot, float [3] rgb) -> int

    Parameters
    ----------
    annot: pdf_annot *
    rgb: float [3]

    """
    return _mupdf.ppdf_annot_MK_BC_rgb(annot, rgb)

def ppdf_annot_MK_BG(annot, n, color):
    """
    ppdf_annot_MK_BG(pdf_annot * annot, int * n, float [4] color)

    Parameters
    ----------
    annot: pdf_annot *
    n: int *
    color: float [4]

    """
    return _mupdf.ppdf_annot_MK_BG(annot, n, color)

def ppdf_annot_MK_BG_rgb(annot, rgb):
    """
    ppdf_annot_MK_BG_rgb(pdf_annot * annot, float [3] rgb) -> int

    Parameters
    ----------
    annot: pdf_annot *
    rgb: float [3]

    """
    return _mupdf.ppdf_annot_MK_BG_rgb(annot, rgb)

def ppdf_annot_active(annot):
    """
    ppdf_annot_active(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_active(annot)

def ppdf_annot_ap(annot):
    """
    ppdf_annot_ap(pdf_annot * annot) -> pdf_obj *

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_ap(annot)

def ppdf_annot_author(annot):
    """
    ppdf_annot_author(pdf_annot * annot) -> char const *

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_author(annot)

def ppdf_annot_border(annot):
    """
    ppdf_annot_border(pdf_annot * annot) -> float

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_border(annot)

def ppdf_annot_color(annot, n, color):
    """
    ppdf_annot_color(pdf_annot * annot, int * n, float [4] color)

    Parameters
    ----------
    annot: pdf_annot *
    n: int *
    color: float [4]

    """
    return _mupdf.ppdf_annot_color(annot, n, color)

def ppdf_annot_contents(annot):
    """
    ppdf_annot_contents(pdf_annot * annot) -> char const *

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_contents(annot)

def ppdf_annot_creation_date(annot):
    """
    ppdf_annot_creation_date(pdf_annot * annot) -> int64_t

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_creation_date(annot)

def ppdf_annot_default_appearance(annot, font, size, n, color):
    """
    ppdf_annot_default_appearance(pdf_annot * annot, char const ** font, float * size, int * n, float [4] color)

    Parameters
    ----------
    annot: pdf_annot *
    font: char const **
    size: float *
    n: int *
    color: float [4]

    """
    return _mupdf.ppdf_annot_default_appearance(annot, font, size, n, color)

def ppdf_annot_ensure_local_xref(annot):
    """
    ppdf_annot_ensure_local_xref(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_ensure_local_xref(annot)

def ppdf_annot_event_blur(annot):
    """
    ppdf_annot_event_blur(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_event_blur(annot)

def ppdf_annot_event_down(annot):
    """
    ppdf_annot_event_down(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_event_down(annot)

def ppdf_annot_event_enter(annot):
    """
    ppdf_annot_event_enter(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_event_enter(annot)

def ppdf_annot_event_exit(annot):
    """
    ppdf_annot_event_exit(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_event_exit(annot)

def ppdf_annot_event_focus(annot):
    """
    ppdf_annot_event_focus(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_event_focus(annot)

def ppdf_annot_event_page_close(annot):
    """
    ppdf_annot_event_page_close(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_event_page_close(annot)

def ppdf_annot_event_page_invisible(annot):
    """
    ppdf_annot_event_page_invisible(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_event_page_invisible(annot)

def ppdf_annot_event_page_open(annot):
    """
    ppdf_annot_event_page_open(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_event_page_open(annot)

def ppdf_annot_event_page_visible(annot):
    """
    ppdf_annot_event_page_visible(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_event_page_visible(annot)

def ppdf_annot_event_up(annot):
    """
    ppdf_annot_event_up(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_event_up(annot)

def ppdf_annot_field_event_keystroke(doc, annot, evt):
    """
    ppdf_annot_field_event_keystroke(pdf_document * doc, pdf_annot * annot, pdf_keystroke_event evt) -> int

    Parameters
    ----------
    doc: pdf_document *
    annot: pdf_annot *
    evt: pdf_keystroke_event *

    """
    return _mupdf.ppdf_annot_field_event_keystroke(doc, annot, evt)

def ppdf_annot_field_flags(annot):
    """
    ppdf_annot_field_flags(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_field_flags(annot)

def ppdf_annot_field_label(widget):
    """
    ppdf_annot_field_label(pdf_annot * widget) -> char const *

    Parameters
    ----------
    widget: pdf_annot *

    """
    return _mupdf.ppdf_annot_field_label(widget)

def ppdf_annot_field_value(annot):
    """
    ppdf_annot_field_value(pdf_annot * annot) -> char const *

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_field_value(annot)

def ppdf_annot_flags(annot):
    """
    ppdf_annot_flags(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_flags(annot)

def ppdf_annot_has_author(annot):
    """
    ppdf_annot_has_author(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_has_author(annot)

def ppdf_annot_has_icon_name(annot):
    """
    ppdf_annot_has_icon_name(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_has_icon_name(annot)

def ppdf_annot_has_ink_list(annot):
    """
    ppdf_annot_has_ink_list(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_has_ink_list(annot)

def ppdf_annot_has_interior_color(annot):
    """
    ppdf_annot_has_interior_color(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_has_interior_color(annot)

def ppdf_annot_has_line(annot):
    """
    ppdf_annot_has_line(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_has_line(annot)

def ppdf_annot_has_line_ending_styles(annot):
    """
    ppdf_annot_has_line_ending_styles(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_has_line_ending_styles(annot)

def ppdf_annot_has_open(annot):
    """
    ppdf_annot_has_open(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_has_open(annot)

def ppdf_annot_has_quad_points(annot):
    """
    ppdf_annot_has_quad_points(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_has_quad_points(annot)

def ppdf_annot_has_vertices(annot):
    """
    ppdf_annot_has_vertices(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_has_vertices(annot)

def ppdf_annot_hot(annot):
    """
    ppdf_annot_hot(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_hot(annot)

def ppdf_annot_icon_name(annot):
    """
    ppdf_annot_icon_name(pdf_annot * annot) -> char const *

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_icon_name(annot)

def ppdf_annot_ink_list_count(annot):
    """
    ppdf_annot_ink_list_count(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_ink_list_count(annot)

def ppdf_annot_ink_list_stroke_count(annot, i):
    """
    ppdf_annot_ink_list_stroke_count(pdf_annot * annot, int i) -> int

    Parameters
    ----------
    annot: pdf_annot *
    i: int

    """
    return _mupdf.ppdf_annot_ink_list_stroke_count(annot, i)

def ppdf_annot_ink_list_stroke_vertex(annot, i, k):
    """
    ppdf_annot_ink_list_stroke_vertex(pdf_annot * annot, int i, int k) -> fz_point

    Parameters
    ----------
    annot: pdf_annot *
    i: int
    k: int

    """
    return _mupdf.ppdf_annot_ink_list_stroke_vertex(annot, i, k)

def ppdf_annot_interior_color(annot, n, color):
    """
    ppdf_annot_interior_color(pdf_annot * annot, int * n, float [4] color)

    Parameters
    ----------
    annot: pdf_annot *
    n: int *
    color: float [4]

    """
    return _mupdf.ppdf_annot_interior_color(annot, n, color)

def ppdf_annot_is_open(annot):
    """
    ppdf_annot_is_open(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_is_open(annot)

def ppdf_annot_language(annot):
    """
    ppdf_annot_language(pdf_annot * annot) -> fz_text_language

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_language(annot)

def ppdf_annot_line(annot, a, b):
    """
    ppdf_annot_line(pdf_annot * annot, fz_point a, fz_point b)

    Parameters
    ----------
    annot: pdf_annot *
    a: fz_point *
    b: fz_point *

    """
    return _mupdf.ppdf_annot_line(annot, a, b)

def ppdf_annot_line_end_style(annot):
    """
    ppdf_annot_line_end_style(pdf_annot * annot) -> enum pdf_line_ending

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_line_end_style(annot)

def ppdf_annot_line_ending_styles(annot, start_style, end_style):
    """
    ppdf_annot_line_ending_styles(pdf_annot * annot, enum pdf_line_ending * start_style, enum pdf_line_ending * end_style)

    Parameters
    ----------
    annot: pdf_annot *
    start_style: enum pdf_line_ending *
    end_style: enum pdf_line_ending *

    """
    return _mupdf.ppdf_annot_line_ending_styles(annot, start_style, end_style)

def ppdf_annot_line_start_style(annot):
    """
    ppdf_annot_line_start_style(pdf_annot * annot) -> enum pdf_line_ending

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_line_start_style(annot)

def ppdf_annot_modification_date(annot):
    """
    ppdf_annot_modification_date(pdf_annot * annot) -> int64_t

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_modification_date(annot)

def ppdf_annot_needs_resynthesis(annot):
    """
    ppdf_annot_needs_resynthesis(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_needs_resynthesis(annot)

def ppdf_annot_obj(annot):
    """
    ppdf_annot_obj(pdf_annot * annot) -> pdf_obj *

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_obj(annot)

def ppdf_annot_opacity(annot):
    """
    ppdf_annot_opacity(pdf_annot * annot) -> float

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_opacity(annot)

def ppdf_annot_page(annot):
    """
    ppdf_annot_page(pdf_annot * annot) -> pdf_page *

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_page(annot)

def ppdf_annot_pop_and_discard_local_xref(annot):
    """
    ppdf_annot_pop_and_discard_local_xref(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_pop_and_discard_local_xref(annot)

def ppdf_annot_pop_local_xref(annot):
    """
    ppdf_annot_pop_local_xref(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_pop_local_xref(annot)

def ppdf_annot_popup(annot):
    """
    ppdf_annot_popup(pdf_annot * annot) -> fz_rect

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_popup(annot)

def ppdf_annot_push_local_xref(annot):
    """
    ppdf_annot_push_local_xref(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_push_local_xref(annot)

def ppdf_annot_quad_point(annot, i):
    """
    ppdf_annot_quad_point(pdf_annot * annot, int i) -> fz_quad

    Parameters
    ----------
    annot: pdf_annot *
    i: int

    """
    return _mupdf.ppdf_annot_quad_point(annot, i)

def ppdf_annot_quad_point_count(annot):
    """
    ppdf_annot_quad_point_count(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_quad_point_count(annot)

def ppdf_annot_quadding(annot):
    """
    ppdf_annot_quadding(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_quadding(annot)

def ppdf_annot_rect(annot):
    """
    ppdf_annot_rect(pdf_annot * annot) -> fz_rect

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_rect(annot)

def ppdf_annot_request_resynthesis(annot):
    """
    ppdf_annot_request_resynthesis(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_request_resynthesis(annot)

def ppdf_annot_transform(annot):
    """
    ppdf_annot_transform(pdf_annot * annot) -> fz_matrix

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_transform(annot)

def ppdf_annot_type(annot):
    """
    ppdf_annot_type(pdf_annot * annot) -> enum pdf_annot_type

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_type(annot)

def ppdf_annot_type_from_string(subtype):
    """
    ppdf_annot_type_from_string(char const * subtype) -> enum pdf_annot_type

    Parameters
    ----------
    subtype: char const *

    """
    return _mupdf.ppdf_annot_type_from_string(subtype)

def ppdf_annot_vertex(annot, i):
    """
    ppdf_annot_vertex(pdf_annot * annot, int i) -> fz_point

    Parameters
    ----------
    annot: pdf_annot *
    i: int

    """
    return _mupdf.ppdf_annot_vertex(annot, i)

def ppdf_annot_vertex_count(annot):
    """
    ppdf_annot_vertex_count(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_annot_vertex_count(annot)

def ppdf_append_token(buf, tok, lex):
    """
    ppdf_append_token(fz_buffer buf, int tok, pdf_lexbuf lex)

    Parameters
    ----------
    buf: fz_buffer *
    tok: int
    lex: pdf_lexbuf *

    """
    return _mupdf.ppdf_append_token(buf, tok, lex)

def ppdf_array_contains(array, obj):
    """
    ppdf_array_contains(pdf_obj * array, pdf_obj * obj) -> int

    Parameters
    ----------
    array: pdf_obj *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_array_contains(array, obj)

def ppdf_array_delete(array, index):
    """
    ppdf_array_delete(pdf_obj * array, int index)

    Parameters
    ----------
    array: pdf_obj *
    index: int

    """
    return _mupdf.ppdf_array_delete(array, index)

def ppdf_array_find(array, obj):
    """
    ppdf_array_find(pdf_obj * array, pdf_obj * obj) -> int

    Parameters
    ----------
    array: pdf_obj *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_array_find(array, obj)

def ppdf_array_get(array, i):
    """
    ppdf_array_get(pdf_obj * array, int i) -> pdf_obj *

    Parameters
    ----------
    array: pdf_obj *
    i: int

    """
    return _mupdf.ppdf_array_get(array, i)

def ppdf_array_get_bool(array, index):
    """
    ppdf_array_get_bool(pdf_obj * array, int index) -> int

    Parameters
    ----------
    array: pdf_obj *
    index: int

    """
    return _mupdf.ppdf_array_get_bool(array, index)

def ppdf_array_get_int(array, index):
    """
    ppdf_array_get_int(pdf_obj * array, int index) -> int

    Parameters
    ----------
    array: pdf_obj *
    index: int

    """
    return _mupdf.ppdf_array_get_int(array, index)

def ppdf_array_get_matrix(array, index):
    """
    ppdf_array_get_matrix(pdf_obj * array, int index) -> fz_matrix

    Parameters
    ----------
    array: pdf_obj *
    index: int

    """
    return _mupdf.ppdf_array_get_matrix(array, index)

def ppdf_array_get_name(array, index):
    """
    ppdf_array_get_name(pdf_obj * array, int index) -> char const *

    Parameters
    ----------
    array: pdf_obj *
    index: int

    """
    return _mupdf.ppdf_array_get_name(array, index)

def ppdf_array_get_real(array, index):
    """
    ppdf_array_get_real(pdf_obj * array, int index) -> float

    Parameters
    ----------
    array: pdf_obj *
    index: int

    """
    return _mupdf.ppdf_array_get_real(array, index)

def ppdf_array_get_rect(array, index):
    """
    ppdf_array_get_rect(pdf_obj * array, int index) -> fz_rect

    Parameters
    ----------
    array: pdf_obj *
    index: int

    """
    return _mupdf.ppdf_array_get_rect(array, index)

def ppdf_array_get_string(array, index, sizep):
    """
    ppdf_array_get_string(pdf_obj * array, int index, size_t * sizep) -> char const *

    Parameters
    ----------
    array: pdf_obj *
    index: int
    sizep: size_t *

    """
    return _mupdf.ppdf_array_get_string(array, index, sizep)

def ppdf_array_get_text_string(array, index):
    """
    ppdf_array_get_text_string(pdf_obj * array, int index) -> char const *

    Parameters
    ----------
    array: pdf_obj *
    index: int

    """
    return _mupdf.ppdf_array_get_text_string(array, index)

def ppdf_array_insert(array, obj, index):
    """
    ppdf_array_insert(pdf_obj * array, pdf_obj * obj, int index)

    Parameters
    ----------
    array: pdf_obj *
    obj: pdf_obj *
    index: int

    """
    return _mupdf.ppdf_array_insert(array, obj, index)

def ppdf_array_insert_drop(array, obj, index):
    """
    ppdf_array_insert_drop(pdf_obj * array, pdf_obj * obj, int index)

    Parameters
    ----------
    array: pdf_obj *
    obj: pdf_obj *
    index: int

    """
    return _mupdf.ppdf_array_insert_drop(array, obj, index)

def ppdf_array_len(array):
    """
    ppdf_array_len(pdf_obj * array) -> int

    Parameters
    ----------
    array: pdf_obj *

    """
    return _mupdf.ppdf_array_len(array)

def ppdf_array_push(array, obj):
    """
    ppdf_array_push(pdf_obj * array, pdf_obj * obj)

    Parameters
    ----------
    array: pdf_obj *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_array_push(array, obj)

def ppdf_array_push_array(array, initial):
    """
    ppdf_array_push_array(pdf_obj * array, int initial) -> pdf_obj *

    Parameters
    ----------
    array: pdf_obj *
    initial: int

    """
    return _mupdf.ppdf_array_push_array(array, initial)

def ppdf_array_push_bool(array, x):
    """
    ppdf_array_push_bool(pdf_obj * array, int x)

    Parameters
    ----------
    array: pdf_obj *
    x: int

    """
    return _mupdf.ppdf_array_push_bool(array, x)

def ppdf_array_push_dict(array, initial):
    """
    ppdf_array_push_dict(pdf_obj * array, int initial) -> pdf_obj *

    Parameters
    ----------
    array: pdf_obj *
    initial: int

    """
    return _mupdf.ppdf_array_push_dict(array, initial)

def ppdf_array_push_drop(array, obj):
    """
    ppdf_array_push_drop(pdf_obj * array, pdf_obj * obj)

    Parameters
    ----------
    array: pdf_obj *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_array_push_drop(array, obj)

def ppdf_array_push_int(array, x):
    """
    ppdf_array_push_int(pdf_obj * array, int64_t x)

    Parameters
    ----------
    array: pdf_obj *
    x: int64_t

    """
    return _mupdf.ppdf_array_push_int(array, x)

def ppdf_array_push_name(array, x):
    """
    ppdf_array_push_name(pdf_obj * array, char const * x)

    Parameters
    ----------
    array: pdf_obj *
    x: char const *

    """
    return _mupdf.ppdf_array_push_name(array, x)

def ppdf_array_push_real(array, x):
    """
    ppdf_array_push_real(pdf_obj * array, double x)

    Parameters
    ----------
    array: pdf_obj *
    x: double

    """
    return _mupdf.ppdf_array_push_real(array, x)

def ppdf_array_push_string(array, x, n):
    """
    ppdf_array_push_string(pdf_obj * array, char const * x, size_t n)

    Parameters
    ----------
    array: pdf_obj *
    x: char const *
    n: size_t

    """
    return _mupdf.ppdf_array_push_string(array, x, n)

def ppdf_array_push_text_string(array, x):
    """
    ppdf_array_push_text_string(pdf_obj * array, char const * x)

    Parameters
    ----------
    array: pdf_obj *
    x: char const *

    """
    return _mupdf.ppdf_array_push_text_string(array, x)

def ppdf_array_put(array, i, obj):
    """
    ppdf_array_put(pdf_obj * array, int i, pdf_obj * obj)

    Parameters
    ----------
    array: pdf_obj *
    i: int
    obj: pdf_obj *

    """
    return _mupdf.ppdf_array_put(array, i, obj)

def ppdf_array_put_drop(array, i, obj):
    """
    ppdf_array_put_drop(pdf_obj * array, int i, pdf_obj * obj)

    Parameters
    ----------
    array: pdf_obj *
    i: int
    obj: pdf_obj *

    """
    return _mupdf.ppdf_array_put_drop(array, i, obj)

def ppdf_authenticate_password(doc, pw):
    """
    ppdf_authenticate_password(pdf_document * doc, char const * pw) -> int

    Parameters
    ----------
    doc: pdf_document *
    pw: char const *

    """
    return _mupdf.ppdf_authenticate_password(doc, pw)

def ppdf_begin_implicit_operation(doc):
    """
    ppdf_begin_implicit_operation(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_begin_implicit_operation(doc)

def ppdf_begin_operation(doc, operation):
    """
    ppdf_begin_operation(pdf_document * doc, char const * operation)

    Parameters
    ----------
    doc: pdf_document *
    operation: char const *

    """
    return _mupdf.ppdf_begin_operation(doc, operation)

def ppdf_bound_annot(annot):
    """
    ppdf_bound_annot(pdf_annot * annot) -> fz_rect

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_bound_annot(annot)

def ppdf_bound_page(page):
    """
    ppdf_bound_page(pdf_page * page) -> fz_rect

    Parameters
    ----------
    page: pdf_page *

    """
    return _mupdf.ppdf_bound_page(page)

def ppdf_bound_widget(widget):
    """
    ppdf_bound_widget(pdf_annot * widget) -> fz_rect

    Parameters
    ----------
    widget: pdf_annot *

    """
    return _mupdf.ppdf_bound_widget(widget)

def ppdf_button_field_on_state(field):
    """
    ppdf_button_field_on_state(pdf_obj * field) -> pdf_obj *

    Parameters
    ----------
    field: pdf_obj *

    """
    return _mupdf.ppdf_button_field_on_state(field)

def ppdf_cache_object(doc, num):
    """
    ppdf_cache_object(pdf_document * doc, int num) -> pdf_xref_entry

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_cache_object(doc, num)

def ppdf_calculate_form(doc):
    """
    ppdf_calculate_form(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_calculate_form(doc)

def ppdf_can_be_saved_incrementally(doc):
    """
    ppdf_can_be_saved_incrementally(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_can_be_saved_incrementally(doc)

def ppdf_can_redo(doc):
    """
    ppdf_can_redo(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_can_redo(doc)

def ppdf_can_undo(doc):
    """
    ppdf_can_undo(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_can_undo(doc)

def ppdf_check_certificate(verifier, doc, signature):
    """
    ppdf_check_certificate(pdf_pkcs7_verifier * verifier, pdf_document * doc, pdf_obj * signature) -> pdf_signature_error

    Parameters
    ----------
    verifier: pdf_pkcs7_verifier *
    doc: pdf_document *
    signature: pdf_obj *

    """
    return _mupdf.ppdf_check_certificate(verifier, doc, signature)

def ppdf_check_digest(verifier, doc, signature):
    """
    ppdf_check_digest(pdf_pkcs7_verifier * verifier, pdf_document * doc, pdf_obj * signature) -> pdf_signature_error

    Parameters
    ----------
    verifier: pdf_pkcs7_verifier *
    doc: pdf_document *
    signature: pdf_obj *

    """
    return _mupdf.ppdf_check_digest(verifier, doc, signature)

def ppdf_check_signature(verifier, doc, signature, ebuf, ebufsize):
    """
    ppdf_check_signature(pdf_pkcs7_verifier * verifier, pdf_document * doc, pdf_obj * signature, char * ebuf, size_t ebufsize) -> int

    Parameters
    ----------
    verifier: pdf_pkcs7_verifier *
    doc: pdf_document *
    signature: pdf_obj *
    ebuf: char *
    ebufsize: size_t

    """
    return _mupdf.ppdf_check_signature(verifier, doc, signature, ebuf, ebufsize)

def ppdf_check_widget_certificate(verifier, widget):
    """
    ppdf_check_widget_certificate(pdf_pkcs7_verifier * verifier, pdf_annot * widget) -> pdf_signature_error

    Parameters
    ----------
    verifier: pdf_pkcs7_verifier *
    widget: pdf_annot *

    """
    return _mupdf.ppdf_check_widget_certificate(verifier, widget)

def ppdf_check_widget_digest(verifier, widget):
    """
    ppdf_check_widget_digest(pdf_pkcs7_verifier * verifier, pdf_annot * widget) -> pdf_signature_error

    Parameters
    ----------
    verifier: pdf_pkcs7_verifier *
    widget: pdf_annot *

    """
    return _mupdf.ppdf_check_widget_digest(verifier, widget)

def ppdf_choice_field_option(field, exportval, i):
    """
    ppdf_choice_field_option(pdf_obj * field, int exportval, int i) -> char const *

    Parameters
    ----------
    field: pdf_obj *
    exportval: int
    i: int

    """
    return _mupdf.ppdf_choice_field_option(field, exportval, i)

def ppdf_choice_field_option_count(field):
    """
    ppdf_choice_field_option_count(pdf_obj * field) -> int

    Parameters
    ----------
    field: pdf_obj *

    """
    return _mupdf.ppdf_choice_field_option_count(field)

def ppdf_choice_widget_is_multiselect(tw):
    """
    ppdf_choice_widget_is_multiselect(pdf_annot * tw) -> int

    Parameters
    ----------
    tw: pdf_annot *

    """
    return _mupdf.ppdf_choice_widget_is_multiselect(tw)

def ppdf_choice_widget_options(tw, exportval, opts):
    """
    ppdf_choice_widget_options(pdf_annot * tw, int exportval, char const *[] opts) -> int

    Parameters
    ----------
    tw: pdf_annot *
    exportval: int
    opts: char const *[]

    """
    return _mupdf.ppdf_choice_widget_options(tw, exportval, opts)

def ppdf_choice_widget_set_value(tw, n, opts):
    """
    ppdf_choice_widget_set_value(pdf_annot * tw, int n, char const *[] opts)

    Parameters
    ----------
    tw: pdf_annot *
    n: int
    opts: char const *[]

    """
    return _mupdf.ppdf_choice_widget_set_value(tw, n, opts)

def ppdf_choice_widget_value(tw, opts):
    """
    ppdf_choice_widget_value(pdf_annot * tw, char const *[] opts) -> int

    Parameters
    ----------
    tw: pdf_annot *
    opts: char const *[]

    """
    return _mupdf.ppdf_choice_widget_value(tw, opts)

def ppdf_clean_file(infile, outfile, password, opts, retainlen):
    """
    ppdf_clean_file(char * infile, char * outfile, char * password, pdf_write_options opts, int retainlen)

    Parameters
    ----------
    infile: char *
    outfile: char *
    password: char *
    opts: pdf_write_options *
    retainlen: int

    """
    return _mupdf.ppdf_clean_file(infile, outfile, password, opts, retainlen)

def ppdf_clean_font_name(fontname):
    """
    ppdf_clean_font_name(char const * fontname) -> char const *

    Parameters
    ----------
    fontname: char const *

    """
    return _mupdf.ppdf_clean_font_name(fontname)

def ppdf_clean_obj(obj):
    """
    ppdf_clean_obj(pdf_obj * obj)

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_clean_obj(obj)

def ppdf_clear_annot_ink_list(annot):
    """
    ppdf_clear_annot_ink_list(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_clear_annot_ink_list(annot)

def ppdf_clear_annot_quad_points(annot):
    """
    ppdf_clear_annot_quad_points(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_clear_annot_quad_points(annot)

def ppdf_clear_annot_vertices(annot):
    """
    ppdf_clear_annot_vertices(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_clear_annot_vertices(annot)

def ppdf_clear_signature(widget):
    """
    ppdf_clear_signature(pdf_annot * widget)

    Parameters
    ----------
    widget: pdf_annot *

    """
    return _mupdf.ppdf_clear_signature(widget)

def ppdf_clear_xref(doc):
    """
    ppdf_clear_xref(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_clear_xref(doc)

def ppdf_clear_xref_to_mark(doc):
    """
    ppdf_clear_xref_to_mark(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_clear_xref_to_mark(doc)

def ppdf_close_processor(proc):
    """
    ppdf_close_processor(pdf_processor * proc)

    Parameters
    ----------
    proc: pdf_processor *

    """
    return _mupdf.ppdf_close_processor(proc)

def ppdf_cmap_size(cmap):
    """
    ppdf_cmap_size(pdf_cmap cmap) -> size_t

    Parameters
    ----------
    cmap: pdf_cmap *

    """
    return _mupdf.ppdf_cmap_size(cmap)

def ppdf_cmap_wmode(cmap):
    """
    ppdf_cmap_wmode(pdf_cmap cmap) -> int

    Parameters
    ----------
    cmap: pdf_cmap *

    """
    return _mupdf.ppdf_cmap_wmode(cmap)

def ppdf_copy_array(array):
    """
    ppdf_copy_array(pdf_obj * array) -> pdf_obj *

    Parameters
    ----------
    array: pdf_obj *

    """
    return _mupdf.ppdf_copy_array(array)

def ppdf_copy_dict(dict):
    """
    ppdf_copy_dict(pdf_obj * dict) -> pdf_obj *

    Parameters
    ----------
    dict: pdf_obj *

    """
    return _mupdf.ppdf_copy_dict(dict)

def ppdf_count_layer_config_ui(doc):
    """
    ppdf_count_layer_config_ui(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_count_layer_config_ui(doc)

def ppdf_count_layer_configs(doc):
    """
    ppdf_count_layer_configs(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_count_layer_configs(doc)

def ppdf_count_objects(doc):
    """
    ppdf_count_objects(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_count_objects(doc)

def ppdf_count_pages(doc):
    """
    ppdf_count_pages(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_count_pages(doc)

def ppdf_count_pages_imp(doc, chapter):
    """
    ppdf_count_pages_imp(fz_document * doc, int chapter) -> int

    Parameters
    ----------
    doc: fz_document *
    chapter: int

    """
    return _mupdf.ppdf_count_pages_imp(doc, chapter)

def ppdf_count_signatures(doc):
    """
    ppdf_count_signatures(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_count_signatures(doc)

def ppdf_count_unsaved_versions(doc):
    """
    ppdf_count_unsaved_versions(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_count_unsaved_versions(doc)

def ppdf_count_versions(doc):
    """
    ppdf_count_versions(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_count_versions(doc)

def ppdf_create_annot(page, type):
    """
    ppdf_create_annot(pdf_page * page, enum pdf_annot_type type) -> pdf_annot *

    Parameters
    ----------
    page: pdf_page *
    type: enum enum pdf_annot_type

    """
    return _mupdf.ppdf_create_annot(page, type)

def ppdf_create_annot_raw(page, type):
    """
    ppdf_create_annot_raw(pdf_page * page, enum pdf_annot_type type) -> pdf_annot *

    Parameters
    ----------
    page: pdf_page *
    type: enum enum pdf_annot_type

    """
    return _mupdf.ppdf_create_annot_raw(page, type)

def ppdf_create_document():
    """ppdf_create_document() -> pdf_document *"""
    return _mupdf.ppdf_create_document()

def ppdf_create_field_name(doc, prefix, buf, len):
    """
    ppdf_create_field_name(pdf_document * doc, char const * prefix, char * buf, size_t len)

    Parameters
    ----------
    doc: pdf_document *
    prefix: char const *
    buf: char *
    len: size_t

    """
    return _mupdf.ppdf_create_field_name(doc, prefix, buf, len)

def ppdf_create_link(page, bbox, uri):
    """
    ppdf_create_link(pdf_page * page, fz_rect bbox, char const * uri) -> fz_link

    Parameters
    ----------
    page: pdf_page *
    bbox: fz_rect
    uri: char const *

    """
    return _mupdf.ppdf_create_link(page, bbox, uri)

def ppdf_create_object(doc):
    """
    ppdf_create_object(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_create_object(doc)

def ppdf_create_signature_widget(page, name):
    """
    ppdf_create_signature_widget(pdf_page * page, char * name) -> pdf_annot *

    Parameters
    ----------
    page: pdf_page *
    name: char *

    """
    return _mupdf.ppdf_create_signature_widget(page, name)

def ppdf_crypt_encrypt_metadata(crypt):
    """
    ppdf_crypt_encrypt_metadata(pdf_crypt * crypt) -> int

    Parameters
    ----------
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_crypt_encrypt_metadata(crypt)

def ppdf_crypt_key(crypt):
    """
    ppdf_crypt_key(pdf_crypt * crypt) -> unsigned char *

    Parameters
    ----------
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_crypt_key(crypt)

def ppdf_crypt_length(crypt):
    """
    ppdf_crypt_length(pdf_crypt * crypt) -> int

    Parameters
    ----------
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_crypt_length(crypt)

def ppdf_crypt_method(crypt):
    """
    ppdf_crypt_method(pdf_crypt * crypt) -> char *

    Parameters
    ----------
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_crypt_method(crypt)

def ppdf_crypt_obj(crypt, obj, num, gen):
    """
    ppdf_crypt_obj(pdf_crypt * crypt, pdf_obj * obj, int num, int gen)

    Parameters
    ----------
    crypt: pdf_crypt *
    obj: pdf_obj *
    num: int
    gen: int

    """
    return _mupdf.ppdf_crypt_obj(crypt, obj, num, gen)

def ppdf_crypt_owner_encryption(crypt):
    """
    ppdf_crypt_owner_encryption(pdf_crypt * crypt) -> unsigned char *

    Parameters
    ----------
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_crypt_owner_encryption(crypt)

def ppdf_crypt_owner_password(crypt):
    """
    ppdf_crypt_owner_password(pdf_crypt * crypt) -> unsigned char *

    Parameters
    ----------
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_crypt_owner_password(crypt)

def ppdf_crypt_permissions(crypt):
    """
    ppdf_crypt_permissions(pdf_crypt * crypt) -> int

    Parameters
    ----------
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_crypt_permissions(crypt)

def ppdf_crypt_permissions_encryption(crypt):
    """
    ppdf_crypt_permissions_encryption(pdf_crypt * crypt) -> unsigned char *

    Parameters
    ----------
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_crypt_permissions_encryption(crypt)

def ppdf_crypt_revision(crypt):
    """
    ppdf_crypt_revision(pdf_crypt * crypt) -> int

    Parameters
    ----------
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_crypt_revision(crypt)

def ppdf_crypt_user_encryption(crypt):
    """
    ppdf_crypt_user_encryption(pdf_crypt * crypt) -> unsigned char *

    Parameters
    ----------
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_crypt_user_encryption(crypt)

def ppdf_crypt_user_password(crypt):
    """
    ppdf_crypt_user_password(pdf_crypt * crypt) -> unsigned char *

    Parameters
    ----------
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_crypt_user_password(crypt)

def ppdf_crypt_version(crypt):
    """
    ppdf_crypt_version(pdf_crypt * crypt) -> int

    Parameters
    ----------
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_crypt_version(crypt)

def ppdf_debug_doc_changes(doc):
    """
    ppdf_debug_doc_changes(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_debug_doc_changes(doc)

def ppdf_debug_obj(obj):
    """
    ppdf_debug_obj(pdf_obj * obj)

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_debug_obj(obj)

def ppdf_debug_ref(obj):
    """
    ppdf_debug_ref(pdf_obj * obj)

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_debug_ref(obj)

def ppdf_decode_cmap(cmap, s, e, cpt):
    """
    ppdf_decode_cmap(pdf_cmap cmap, unsigned char * s, unsigned char * e, unsigned int * cpt) -> int

    Parameters
    ----------
    cmap: pdf_cmap *
    s: unsigned char *
    e: unsigned char *
    cpt: unsigned int *

    """
    return _mupdf.ppdf_decode_cmap(cmap, s, e, cpt)

def ppdf_deep_copy_obj(obj):
    """
    ppdf_deep_copy_obj(pdf_obj * obj) -> pdf_obj *

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_deep_copy_obj(obj)

def ppdf_delete_annot(page, annot):
    """
    ppdf_delete_annot(pdf_page * page, pdf_annot * annot)

    Parameters
    ----------
    page: pdf_page *
    annot: pdf_annot *

    """
    return _mupdf.ppdf_delete_annot(page, annot)

def ppdf_delete_object(doc, num):
    """
    ppdf_delete_object(pdf_document * doc, int num)

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_delete_object(doc, num)

def ppdf_delete_page(doc, number):
    """
    ppdf_delete_page(pdf_document * doc, int number)

    Parameters
    ----------
    doc: pdf_document *
    number: int

    """
    return _mupdf.ppdf_delete_page(doc, number)

def ppdf_delete_page_range(doc, start, end):
    """
    ppdf_delete_page_range(pdf_document * doc, int start, int end)

    Parameters
    ----------
    doc: pdf_document *
    start: int
    end: int

    """
    return _mupdf.ppdf_delete_page_range(doc, start, end)

def ppdf_deselect_layer_config_ui(doc, ui):
    """
    ppdf_deselect_layer_config_ui(pdf_document * doc, int ui)

    Parameters
    ----------
    doc: pdf_document *
    ui: int

    """
    return _mupdf.ppdf_deselect_layer_config_ui(doc, ui)

def ppdf_deserialise_journal(doc, stm):
    """
    ppdf_deserialise_journal(pdf_document * doc, fz_stream * stm)

    Parameters
    ----------
    doc: pdf_document *
    stm: fz_stream *

    """
    return _mupdf.ppdf_deserialise_journal(doc, stm)

def ppdf_dict_del(dict, key):
    """
    ppdf_dict_del(pdf_obj * dict, pdf_obj * key)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *

    """
    return _mupdf.ppdf_dict_del(dict, key)

def ppdf_dict_dels(dict, key):
    """
    ppdf_dict_dels(pdf_obj * dict, char const * key)

    Parameters
    ----------
    dict: pdf_obj *
    key: char const *

    """
    return _mupdf.ppdf_dict_dels(dict, key)

def ppdf_dict_get(dict, key):
    """
    ppdf_dict_get(pdf_obj * dict, pdf_obj * key) -> pdf_obj *

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *

    """
    return _mupdf.ppdf_dict_get(dict, key)

def ppdf_dict_get_bool(dict, key):
    """
    ppdf_dict_get_bool(pdf_obj * dict, pdf_obj * key) -> int

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *

    """
    return _mupdf.ppdf_dict_get_bool(dict, key)

def ppdf_dict_get_date(dict, key):
    """
    ppdf_dict_get_date(pdf_obj * dict, pdf_obj * key) -> int64_t

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *

    """
    return _mupdf.ppdf_dict_get_date(dict, key)

def ppdf_dict_get_inheritable(dict, key):
    """
    ppdf_dict_get_inheritable(pdf_obj * dict, pdf_obj * key) -> pdf_obj *

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *

    """
    return _mupdf.ppdf_dict_get_inheritable(dict, key)

def ppdf_dict_get_int(dict, key):
    """
    ppdf_dict_get_int(pdf_obj * dict, pdf_obj * key) -> int

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *

    """
    return _mupdf.ppdf_dict_get_int(dict, key)

def ppdf_dict_get_key(dict, idx):
    """
    ppdf_dict_get_key(pdf_obj * dict, int idx) -> pdf_obj *

    Parameters
    ----------
    dict: pdf_obj *
    idx: int

    """
    return _mupdf.ppdf_dict_get_key(dict, idx)

def ppdf_dict_get_matrix(dict, key):
    """
    ppdf_dict_get_matrix(pdf_obj * dict, pdf_obj * key) -> fz_matrix

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *

    """
    return _mupdf.ppdf_dict_get_matrix(dict, key)

def ppdf_dict_get_name(dict, key):
    """
    ppdf_dict_get_name(pdf_obj * dict, pdf_obj * key) -> char const *

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *

    """
    return _mupdf.ppdf_dict_get_name(dict, key)

def ppdf_dict_get_put_drop(dict, key, val, old_val):
    """
    ppdf_dict_get_put_drop(pdf_obj * dict, pdf_obj * key, pdf_obj * val, pdf_obj ** old_val)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    val: pdf_obj *
    old_val: pdf_obj **

    """
    return _mupdf.ppdf_dict_get_put_drop(dict, key, val, old_val)

def ppdf_dict_get_real(dict, key):
    """
    ppdf_dict_get_real(pdf_obj * dict, pdf_obj * key) -> float

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *

    """
    return _mupdf.ppdf_dict_get_real(dict, key)

def ppdf_dict_get_rect(dict, key):
    """
    ppdf_dict_get_rect(pdf_obj * dict, pdf_obj * key) -> fz_rect

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *

    """
    return _mupdf.ppdf_dict_get_rect(dict, key)

def ppdf_dict_get_string(dict, key, sizep):
    """
    ppdf_dict_get_string(pdf_obj * dict, pdf_obj * key, size_t * sizep) -> char const *

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    sizep: size_t *

    """
    return _mupdf.ppdf_dict_get_string(dict, key, sizep)

def ppdf_dict_get_text_string(dict, key):
    """
    ppdf_dict_get_text_string(pdf_obj * dict, pdf_obj * key) -> char const *

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *

    """
    return _mupdf.ppdf_dict_get_text_string(dict, key)

def ppdf_dict_get_val(dict, idx):
    """
    ppdf_dict_get_val(pdf_obj * dict, int idx) -> pdf_obj *

    Parameters
    ----------
    dict: pdf_obj *
    idx: int

    """
    return _mupdf.ppdf_dict_get_val(dict, idx)

def ppdf_dict_geta(dict, key, abbrev):
    """
    ppdf_dict_geta(pdf_obj * dict, pdf_obj * key, pdf_obj * abbrev) -> pdf_obj *

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    abbrev: pdf_obj *

    """
    return _mupdf.ppdf_dict_geta(dict, key, abbrev)

def ppdf_dict_getp(dict, path):
    """
    ppdf_dict_getp(pdf_obj * dict, char const * path) -> pdf_obj *

    Parameters
    ----------
    dict: pdf_obj *
    path: char const *

    """
    return _mupdf.ppdf_dict_getp(dict, path)

def ppdf_dict_getp_inheritable(dict, path):
    """
    ppdf_dict_getp_inheritable(pdf_obj * dict, char const * path) -> pdf_obj *

    Parameters
    ----------
    dict: pdf_obj *
    path: char const *

    """
    return _mupdf.ppdf_dict_getp_inheritable(dict, path)

def ppdf_dict_gets(dict, key):
    """
    ppdf_dict_gets(pdf_obj * dict, char const * key) -> pdf_obj *

    Parameters
    ----------
    dict: pdf_obj *
    key: char const *

    """
    return _mupdf.ppdf_dict_gets(dict, key)

def ppdf_dict_getsa(dict, key, abbrev):
    """
    ppdf_dict_getsa(pdf_obj * dict, char const * key, char const * abbrev) -> pdf_obj *

    Parameters
    ----------
    dict: pdf_obj *
    key: char const *
    abbrev: char const *

    """
    return _mupdf.ppdf_dict_getsa(dict, key, abbrev)

def ppdf_dict_len(dict):
    """
    ppdf_dict_len(pdf_obj * dict) -> int

    Parameters
    ----------
    dict: pdf_obj *

    """
    return _mupdf.ppdf_dict_len(dict)

def ppdf_dict_put(dict, key, val):
    """
    ppdf_dict_put(pdf_obj * dict, pdf_obj * key, pdf_obj * val)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    val: pdf_obj *

    """
    return _mupdf.ppdf_dict_put(dict, key, val)

def ppdf_dict_put_array(dict, key, initial):
    """
    ppdf_dict_put_array(pdf_obj * dict, pdf_obj * key, int initial) -> pdf_obj *

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    initial: int

    """
    return _mupdf.ppdf_dict_put_array(dict, key, initial)

def ppdf_dict_put_bool(dict, key, x):
    """
    ppdf_dict_put_bool(pdf_obj * dict, pdf_obj * key, int x)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    x: int

    """
    return _mupdf.ppdf_dict_put_bool(dict, key, x)

def ppdf_dict_put_date(dict, key, time):
    """
    ppdf_dict_put_date(pdf_obj * dict, pdf_obj * key, int64_t time)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    time: int64_t

    """
    return _mupdf.ppdf_dict_put_date(dict, key, time)

def ppdf_dict_put_dict(dict, key, initial):
    """
    ppdf_dict_put_dict(pdf_obj * dict, pdf_obj * key, int initial) -> pdf_obj *

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    initial: int

    """
    return _mupdf.ppdf_dict_put_dict(dict, key, initial)

def ppdf_dict_put_drop(dict, key, val):
    """
    ppdf_dict_put_drop(pdf_obj * dict, pdf_obj * key, pdf_obj * val)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    val: pdf_obj *

    """
    return _mupdf.ppdf_dict_put_drop(dict, key, val)

def ppdf_dict_put_int(dict, key, x):
    """
    ppdf_dict_put_int(pdf_obj * dict, pdf_obj * key, int64_t x)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    x: int64_t

    """
    return _mupdf.ppdf_dict_put_int(dict, key, x)

def ppdf_dict_put_matrix(dict, key, x):
    """
    ppdf_dict_put_matrix(pdf_obj * dict, pdf_obj * key, fz_matrix x)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    x: fz_matrix

    """
    return _mupdf.ppdf_dict_put_matrix(dict, key, x)

def ppdf_dict_put_name(dict, key, x):
    """
    ppdf_dict_put_name(pdf_obj * dict, pdf_obj * key, char const * x)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    x: char const *

    """
    return _mupdf.ppdf_dict_put_name(dict, key, x)

def ppdf_dict_put_real(dict, key, x):
    """
    ppdf_dict_put_real(pdf_obj * dict, pdf_obj * key, double x)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    x: double

    """
    return _mupdf.ppdf_dict_put_real(dict, key, x)

def ppdf_dict_put_rect(dict, key, x):
    """
    ppdf_dict_put_rect(pdf_obj * dict, pdf_obj * key, fz_rect x)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    x: fz_rect

    """
    return _mupdf.ppdf_dict_put_rect(dict, key, x)

def ppdf_dict_put_string(dict, key, x, n):
    """
    ppdf_dict_put_string(pdf_obj * dict, pdf_obj * key, char const * x, size_t n)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    x: char const *
    n: size_t

    """
    return _mupdf.ppdf_dict_put_string(dict, key, x, n)

def ppdf_dict_put_text_string(dict, key, x):
    """
    ppdf_dict_put_text_string(pdf_obj * dict, pdf_obj * key, char const * x)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    x: char const *

    """
    return _mupdf.ppdf_dict_put_text_string(dict, key, x)

def ppdf_dict_put_val_null(obj, idx):
    """
    ppdf_dict_put_val_null(pdf_obj * obj, int idx)

    Parameters
    ----------
    obj: pdf_obj *
    idx: int

    """
    return _mupdf.ppdf_dict_put_val_null(obj, idx)

def ppdf_dict_putp(dict, path, val):
    """
    ppdf_dict_putp(pdf_obj * dict, char const * path, pdf_obj * val)

    Parameters
    ----------
    dict: pdf_obj *
    path: char const *
    val: pdf_obj *

    """
    return _mupdf.ppdf_dict_putp(dict, path, val)

def ppdf_dict_putp_drop(dict, path, val):
    """
    ppdf_dict_putp_drop(pdf_obj * dict, char const * path, pdf_obj * val)

    Parameters
    ----------
    dict: pdf_obj *
    path: char const *
    val: pdf_obj *

    """
    return _mupdf.ppdf_dict_putp_drop(dict, path, val)

def ppdf_dict_puts(dict, key, val):
    """
    ppdf_dict_puts(pdf_obj * dict, char const * key, pdf_obj * val)

    Parameters
    ----------
    dict: pdf_obj *
    key: char const *
    val: pdf_obj *

    """
    return _mupdf.ppdf_dict_puts(dict, key, val)

def ppdf_dict_puts_dict(dict, key, initial):
    """
    ppdf_dict_puts_dict(pdf_obj * dict, char const * key, int initial) -> pdf_obj *

    Parameters
    ----------
    dict: pdf_obj *
    key: char const *
    initial: int

    """
    return _mupdf.ppdf_dict_puts_dict(dict, key, initial)

def ppdf_dict_puts_drop(dict, key, val):
    """
    ppdf_dict_puts_drop(pdf_obj * dict, char const * key, pdf_obj * val)

    Parameters
    ----------
    dict: pdf_obj *
    key: char const *
    val: pdf_obj *

    """
    return _mupdf.ppdf_dict_puts_drop(dict, key, val)

def ppdf_dirty_annot(annot):
    """
    ppdf_dirty_annot(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_dirty_annot(annot)

def ppdf_dirty_obj(obj):
    """
    ppdf_dirty_obj(pdf_obj * obj)

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_dirty_obj(obj)

def ppdf_disable_js(doc):
    """
    ppdf_disable_js(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_disable_js(doc)

def ppdf_discard_journal(journal):
    """
    ppdf_discard_journal(pdf_journal * journal)

    Parameters
    ----------
    journal: pdf_journal *

    """
    return _mupdf.ppdf_discard_journal(journal)

def ppdf_doc_was_linearized(doc):
    """
    ppdf_doc_was_linearized(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_doc_was_linearized(doc)

def ppdf_document_event_did_print(doc):
    """
    ppdf_document_event_did_print(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_document_event_did_print(doc)

def ppdf_document_event_did_save(doc):
    """
    ppdf_document_event_did_save(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_document_event_did_save(doc)

def ppdf_document_event_will_close(doc):
    """
    ppdf_document_event_will_close(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_document_event_will_close(doc)

def ppdf_document_event_will_print(doc):
    """
    ppdf_document_event_will_print(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_document_event_will_print(doc)

def ppdf_document_event_will_save(doc):
    """
    ppdf_document_event_will_save(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_document_event_will_save(doc)

def ppdf_document_from_fz_document(ptr):
    """
    ppdf_document_from_fz_document(fz_document * ptr) -> pdf_document *

    Parameters
    ----------
    ptr: fz_document *

    """
    return _mupdf.ppdf_document_from_fz_document(ptr)

def ppdf_document_language(doc):
    """
    ppdf_document_language(pdf_document * doc) -> fz_text_language

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_document_language(doc)

def ppdf_document_output_intent(doc):
    """
    ppdf_document_output_intent(pdf_document * doc) -> fz_colorspace *

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_document_output_intent(doc)

def ppdf_document_permissions(doc):
    """
    ppdf_document_permissions(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_document_permissions(doc)

def ppdf_drop_annot(annot):
    """
    ppdf_drop_annot(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_drop_annot(annot)

def ppdf_drop_cmap(cmap):
    """
    ppdf_drop_cmap(pdf_cmap cmap)

    Parameters
    ----------
    cmap: pdf_cmap *

    """
    return _mupdf.ppdf_drop_cmap(cmap)

def ppdf_drop_cmap_imp(cmap):
    """
    ppdf_drop_cmap_imp(fz_storable * cmap)

    Parameters
    ----------
    cmap: fz_storable *

    """
    return _mupdf.ppdf_drop_cmap_imp(cmap)

def ppdf_drop_crypt(crypt):
    """
    ppdf_drop_crypt(pdf_crypt * crypt)

    Parameters
    ----------
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_drop_crypt(crypt)

def ppdf_drop_document(doc):
    """
    ppdf_drop_document(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_drop_document(doc)

def ppdf_drop_font(font):
    """
    ppdf_drop_font(pdf_font_desc font)

    Parameters
    ----------
    font: pdf_font_desc *

    """
    return _mupdf.ppdf_drop_font(font)

def ppdf_drop_function(func):
    """
    ppdf_drop_function(pdf_function * func)

    Parameters
    ----------
    func: pdf_function *

    """
    return _mupdf.ppdf_drop_function(func)

def ppdf_drop_graft_map(map):
    """
    ppdf_drop_graft_map(pdf_graft_map * map)

    Parameters
    ----------
    map: pdf_graft_map *

    """
    return _mupdf.ppdf_drop_graft_map(map)

def ppdf_drop_journal(journal):
    """
    ppdf_drop_journal(pdf_journal * journal)

    Parameters
    ----------
    journal: pdf_journal *

    """
    return _mupdf.ppdf_drop_journal(journal)

def ppdf_drop_js(js):
    """
    ppdf_drop_js(pdf_js * js)

    Parameters
    ----------
    js: pdf_js *

    """
    return _mupdf.ppdf_drop_js(js)

def ppdf_drop_local_xref(xref):
    """
    ppdf_drop_local_xref(pdf_xref * xref)

    Parameters
    ----------
    xref: pdf_xref *

    """
    return _mupdf.ppdf_drop_local_xref(xref)

def ppdf_drop_local_xref_and_resources(doc):
    """
    ppdf_drop_local_xref_and_resources(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_drop_local_xref_and_resources(doc)

def ppdf_drop_locked_fields(locked):
    """
    ppdf_drop_locked_fields(pdf_locked_fields * locked)

    Parameters
    ----------
    locked: pdf_locked_fields *

    """
    return _mupdf.ppdf_drop_locked_fields(locked)

def ppdf_drop_obj(obj):
    """
    ppdf_drop_obj(pdf_obj * obj)

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_drop_obj(obj)

def ppdf_drop_ocg(doc):
    """
    ppdf_drop_ocg(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_drop_ocg(doc)

def ppdf_drop_page_tree(doc):
    """
    ppdf_drop_page_tree(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_drop_page_tree(doc)

def ppdf_drop_pattern(pat):
    """
    ppdf_drop_pattern(pdf_pattern pat)

    Parameters
    ----------
    pat: pdf_pattern *

    """
    return _mupdf.ppdf_drop_pattern(pat)

def ppdf_drop_processor(proc):
    """
    ppdf_drop_processor(pdf_processor * proc)

    Parameters
    ----------
    proc: pdf_processor *

    """
    return _mupdf.ppdf_drop_processor(proc)

def ppdf_drop_resource_tables(doc):
    """
    ppdf_drop_resource_tables(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_drop_resource_tables(doc)

def ppdf_drop_signer(signer):
    """
    ppdf_drop_signer(pdf_pkcs7_signer * signer)

    Parameters
    ----------
    signer: pdf_pkcs7_signer *

    """
    return _mupdf.ppdf_drop_signer(signer)

def ppdf_drop_verifier(verifier):
    """
    ppdf_drop_verifier(pdf_pkcs7_verifier * verifier)

    Parameters
    ----------
    verifier: pdf_pkcs7_verifier *

    """
    return _mupdf.ppdf_drop_verifier(verifier)

def ppdf_drop_widget(widget):
    """
    ppdf_drop_widget(pdf_annot * widget)

    Parameters
    ----------
    widget: pdf_annot *

    """
    return _mupdf.ppdf_drop_widget(widget)

def ppdf_edit_text_field_value(widget, value, change, selStart, selEnd, newvalue):
    """
    ppdf_edit_text_field_value(pdf_annot * widget, char const * value, char const * change, int * selStart, int * selEnd, char ** newvalue) -> int

    Parameters
    ----------
    widget: pdf_annot *
    value: char const *
    change: char const *
    selStart: int *
    selEnd: int *
    newvalue: char **

    """
    return _mupdf.ppdf_edit_text_field_value(widget, value, change, selStart, selEnd, newvalue)

def ppdf_embedded_file_name(fs):
    """
    ppdf_embedded_file_name(pdf_obj * fs) -> char const *

    Parameters
    ----------
    fs: pdf_obj *

    """
    return _mupdf.ppdf_embedded_file_name(fs)

def ppdf_embedded_file_stream(fs):
    """
    ppdf_embedded_file_stream(pdf_obj * fs) -> pdf_obj *

    Parameters
    ----------
    fs: pdf_obj *

    """
    return _mupdf.ppdf_embedded_file_stream(fs)

def ppdf_embedded_file_type(fs):
    """
    ppdf_embedded_file_type(pdf_obj * fs) -> char const *

    Parameters
    ----------
    fs: pdf_obj *

    """
    return _mupdf.ppdf_embedded_file_type(fs)

def ppdf_empty_store(doc):
    """
    ppdf_empty_store(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_empty_store(doc)

def ppdf_enable_journal(doc):
    """
    ppdf_enable_journal(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_enable_journal(doc)

def ppdf_enable_js(doc):
    """
    ppdf_enable_js(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_enable_js(doc)

def ppdf_encrypt_data(crypt, num, gen, fmt_str_out, arg, s, n):
    """
    ppdf_encrypt_data(pdf_crypt * crypt, int num, int gen, void (*)(fz_context *,void *,unsigned char const *,size_t) fmt_str_out, void * arg, unsigned char const * s, size_t n)

    Parameters
    ----------
    crypt: pdf_crypt *
    num: int
    gen: int
    fmt_str_out: void (*)(fz_context *,void *,unsigned char const *,size_t)
    arg: void *
    s: unsigned char const *
    n: size_t

    """
    return _mupdf.ppdf_encrypt_data(crypt, num, gen, fmt_str_out, arg, s, n)

def ppdf_encrypted_len(crypt, num, gen, len):
    """
    ppdf_encrypted_len(pdf_crypt * crypt, int num, int gen, size_t len) -> size_t

    Parameters
    ----------
    crypt: pdf_crypt *
    num: int
    gen: int
    len: size_t

    """
    return _mupdf.ppdf_encrypted_len(crypt, num, gen, len)

def ppdf_end_hmtx(font):
    """
    ppdf_end_hmtx(pdf_font_desc font)

    Parameters
    ----------
    font: pdf_font_desc *

    """
    return _mupdf.ppdf_end_hmtx(font)

def ppdf_end_operation(doc):
    """
    ppdf_end_operation(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_end_operation(doc)

def ppdf_end_vmtx(font):
    """
    ppdf_end_vmtx(pdf_font_desc font)

    Parameters
    ----------
    font: pdf_font_desc *

    """
    return _mupdf.ppdf_end_vmtx(font)

def ppdf_ensure_solid_xref(doc, num):
    """
    ppdf_ensure_solid_xref(pdf_document * doc, int num)

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_ensure_solid_xref(doc, num)

def ppdf_eval_function(func, arg2, inlen, out, outlen):
    """
    ppdf_eval_function(pdf_function * func, float const * arg2, int inlen, float * out, int outlen)

    Parameters
    ----------
    func: pdf_function *
    in: float const *
    inlen: int
    out: float *
    outlen: int

    """
    return _mupdf.ppdf_eval_function(func, arg2, inlen, out, outlen)

def ppdf_event_issue_alert(doc, evt):
    """
    ppdf_event_issue_alert(pdf_document * doc, pdf_alert_event evt)

    Parameters
    ----------
    doc: pdf_document *
    evt: pdf_alert_event *

    """
    return _mupdf.ppdf_event_issue_alert(doc, evt)

def ppdf_event_issue_exec_menu_item(doc, item):
    """
    ppdf_event_issue_exec_menu_item(pdf_document * doc, char const * item)

    Parameters
    ----------
    doc: pdf_document *
    item: char const *

    """
    return _mupdf.ppdf_event_issue_exec_menu_item(doc, item)

def ppdf_event_issue_launch_url(doc, url, new_frame):
    """
    ppdf_event_issue_launch_url(pdf_document * doc, char const * url, int new_frame)

    Parameters
    ----------
    doc: pdf_document *
    url: char const *
    new_frame: int

    """
    return _mupdf.ppdf_event_issue_launch_url(doc, url, new_frame)

def ppdf_event_issue_mail_doc(doc, evt):
    """
    ppdf_event_issue_mail_doc(pdf_document * doc, pdf_mail_doc_event evt)

    Parameters
    ----------
    doc: pdf_document *
    evt: pdf_mail_doc_event *

    """
    return _mupdf.ppdf_event_issue_mail_doc(doc, evt)

def ppdf_event_issue_print(doc):
    """
    ppdf_event_issue_print(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_event_issue_print(doc)

def ppdf_field_border_style(field):
    """
    ppdf_field_border_style(pdf_obj * field) -> char *

    Parameters
    ----------
    field: pdf_obj *

    """
    return _mupdf.ppdf_field_border_style(field)

def ppdf_field_display(field):
    """
    ppdf_field_display(pdf_obj * field) -> int

    Parameters
    ----------
    field: pdf_obj *

    """
    return _mupdf.ppdf_field_display(field)

def ppdf_field_event_calculate(doc, field):
    """
    ppdf_field_event_calculate(pdf_document * doc, pdf_obj * field)

    Parameters
    ----------
    doc: pdf_document *
    field: pdf_obj *

    """
    return _mupdf.ppdf_field_event_calculate(doc, field)

def ppdf_field_event_format(doc, field):
    """
    ppdf_field_event_format(pdf_document * doc, pdf_obj * field) -> char *

    Parameters
    ----------
    doc: pdf_document *
    field: pdf_obj *

    """
    return _mupdf.ppdf_field_event_format(doc, field)

def ppdf_field_event_keystroke(doc, field, evt):
    """
    ppdf_field_event_keystroke(pdf_document * doc, pdf_obj * field, pdf_keystroke_event evt) -> int

    Parameters
    ----------
    doc: pdf_document *
    field: pdf_obj *
    evt: pdf_keystroke_event *

    """
    return _mupdf.ppdf_field_event_keystroke(doc, field, evt)

def ppdf_field_event_validate(doc, field, value, newvalue):
    """
    ppdf_field_event_validate(pdf_document * doc, pdf_obj * field, char const * value, char ** newvalue) -> int

    Parameters
    ----------
    doc: pdf_document *
    field: pdf_obj *
    value: char const *
    newvalue: char **

    """
    return _mupdf.ppdf_field_event_validate(doc, field, value, newvalue)

def ppdf_field_flags(field):
    """
    ppdf_field_flags(pdf_obj * field) -> int

    Parameters
    ----------
    field: pdf_obj *

    """
    return _mupdf.ppdf_field_flags(field)

def ppdf_field_label(field):
    """
    ppdf_field_label(pdf_obj * field) -> char const *

    Parameters
    ----------
    field: pdf_obj *

    """
    return _mupdf.ppdf_field_label(field)

def ppdf_field_name(field):
    """
    ppdf_field_name(pdf_obj * field) -> char *

    Parameters
    ----------
    field: pdf_obj *

    """
    return _mupdf.ppdf_field_name(field)

def ppdf_field_reset(doc, field):
    """
    ppdf_field_reset(pdf_document * doc, pdf_obj * field)

    Parameters
    ----------
    doc: pdf_document *
    field: pdf_obj *

    """
    return _mupdf.ppdf_field_reset(doc, field)

def ppdf_field_set_border_style(field, text):
    """
    ppdf_field_set_border_style(pdf_obj * field, char const * text)

    Parameters
    ----------
    field: pdf_obj *
    text: char const *

    """
    return _mupdf.ppdf_field_set_border_style(field, text)

def ppdf_field_set_button_caption(field, text):
    """
    ppdf_field_set_button_caption(pdf_obj * field, char const * text)

    Parameters
    ----------
    field: pdf_obj *
    text: char const *

    """
    return _mupdf.ppdf_field_set_button_caption(field, text)

def ppdf_field_set_display(field, d):
    """
    ppdf_field_set_display(pdf_obj * field, int d)

    Parameters
    ----------
    field: pdf_obj *
    d: int

    """
    return _mupdf.ppdf_field_set_display(field, d)

def ppdf_field_set_fill_color(field, col):
    """
    ppdf_field_set_fill_color(pdf_obj * field, pdf_obj * col)

    Parameters
    ----------
    field: pdf_obj *
    col: pdf_obj *

    """
    return _mupdf.ppdf_field_set_fill_color(field, col)

def ppdf_field_set_text_color(field, col):
    """
    ppdf_field_set_text_color(pdf_obj * field, pdf_obj * col)

    Parameters
    ----------
    field: pdf_obj *
    col: pdf_obj *

    """
    return _mupdf.ppdf_field_set_text_color(field, col)

def ppdf_field_type(field):
    """
    ppdf_field_type(pdf_obj * field) -> int

    Parameters
    ----------
    field: pdf_obj *

    """
    return _mupdf.ppdf_field_type(field)

def ppdf_field_type_string(field):
    """
    ppdf_field_type_string(pdf_obj * field) -> char const *

    Parameters
    ----------
    field: pdf_obj *

    """
    return _mupdf.ppdf_field_type_string(field)

def ppdf_field_value(field):
    """
    ppdf_field_value(pdf_obj * field) -> char const *

    Parameters
    ----------
    field: pdf_obj *

    """
    return _mupdf.ppdf_field_value(field)

def ppdf_filter_annot_contents(doc, annot, filter):
    """
    ppdf_filter_annot_contents(pdf_document * doc, pdf_annot * annot, pdf_filter_options filter)

    Parameters
    ----------
    doc: pdf_document *
    annot: pdf_annot *
    filter: pdf_filter_options *

    """
    return _mupdf.ppdf_filter_annot_contents(doc, annot, filter)

def ppdf_filter_page_contents(doc, page, filter):
    """
    ppdf_filter_page_contents(pdf_document * doc, pdf_page * page, pdf_filter_options filter)

    Parameters
    ----------
    doc: pdf_document *
    page: pdf_page *
    filter: pdf_filter_options *

    """
    return _mupdf.ppdf_filter_page_contents(doc, page, filter)

def ppdf_filter_xobject_instance(old_xobj, page_res, ctm, filter):
    """
    ppdf_filter_xobject_instance(pdf_obj * old_xobj, pdf_obj * page_res, fz_matrix ctm, pdf_filter_options filter) -> pdf_obj *

    Parameters
    ----------
    old_xobj: pdf_obj *
    page_res: pdf_obj *
    ctm: fz_matrix
    filter: pdf_filter_options *

    """
    return _mupdf.ppdf_filter_xobject_instance(old_xobj, page_res, ctm, filter)

def ppdf_find_font_resource(doc, type, encoding, item, key):
    """
    ppdf_find_font_resource(pdf_document * doc, int type, int encoding, fz_font * item, pdf_font_resource_key key) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    type: int
    encoding: int
    item: fz_font *
    key: pdf_font_resource_key *

    """
    return _mupdf.ppdf_find_font_resource(doc, type, encoding, item, key)

def ppdf_find_item(drop, key):
    """
    ppdf_find_item(fz_store_drop_fn * drop, pdf_obj * key) -> void *

    Parameters
    ----------
    drop: fz_store_drop_fn *
    key: pdf_obj *

    """
    return _mupdf.ppdf_find_item(drop, key)

def ppdf_find_locked_fields(doc, version):
    """
    ppdf_find_locked_fields(pdf_document * doc, int version) -> pdf_locked_fields *

    Parameters
    ----------
    doc: pdf_document *
    version: int

    """
    return _mupdf.ppdf_find_locked_fields(doc, version)

def ppdf_find_locked_fields_for_sig(doc, sig):
    """
    ppdf_find_locked_fields_for_sig(pdf_document * doc, pdf_obj * sig) -> pdf_locked_fields *

    Parameters
    ----------
    doc: pdf_document *
    sig: pdf_obj *

    """
    return _mupdf.ppdf_find_locked_fields_for_sig(doc, sig)

def ppdf_find_version_for_obj(doc, obj):
    """
    ppdf_find_version_for_obj(pdf_document * doc, pdf_obj * obj) -> int

    Parameters
    ----------
    doc: pdf_document *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_find_version_for_obj(doc, obj)

def ppdf_first_annot(page):
    """
    ppdf_first_annot(pdf_page * page) -> pdf_annot *

    Parameters
    ----------
    page: pdf_page *

    """
    return _mupdf.ppdf_first_annot(page)

def ppdf_first_widget(page):
    """
    ppdf_first_widget(pdf_page * page) -> pdf_annot *

    Parameters
    ----------
    page: pdf_page *

    """
    return _mupdf.ppdf_first_widget(page)

def ppdf_flatten_inheritable_page_items(page):
    """
    ppdf_flatten_inheritable_page_items(pdf_obj * page)

    Parameters
    ----------
    page: pdf_obj *

    """
    return _mupdf.ppdf_flatten_inheritable_page_items(page)

def ppdf_font_cid_to_gid(fontdesc, cid):
    """
    ppdf_font_cid_to_gid(pdf_font_desc fontdesc, int cid) -> int

    Parameters
    ----------
    fontdesc: pdf_font_desc *
    cid: int

    """
    return _mupdf.ppdf_font_cid_to_gid(fontdesc, cid)

def ppdf_font_writing_supported(font):
    """
    ppdf_font_writing_supported(fz_font * font) -> int

    Parameters
    ----------
    font: fz_font *

    """
    return _mupdf.ppdf_font_writing_supported(font)

def ppdf_forget_xref(doc):
    """
    ppdf_forget_xref(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_forget_xref(doc)

def ppdf_format_date(time, s, n):
    """
    ppdf_format_date(int64_t time, char * s, size_t n) -> char *

    Parameters
    ----------
    time: int64_t
    s: char *
    n: size_t

    """
    return _mupdf.ppdf_format_date(time, s, n)

def ppdf_format_write_options(buffer, buffer_len, opts):
    """
    ppdf_format_write_options(char * buffer, size_t buffer_len, pdf_write_options opts) -> char *

    Parameters
    ----------
    buffer: char *
    buffer_len: size_t
    opts: pdf_write_options const *

    """
    return _mupdf.ppdf_format_write_options(buffer, buffer_len, opts)

def ppdf_function_size(func):
    """
    ppdf_function_size(pdf_function * func) -> size_t

    Parameters
    ----------
    func: pdf_function *

    """
    return _mupdf.ppdf_function_size(func)

def ppdf_get_bound_document(obj):
    """
    ppdf_get_bound_document(pdf_obj * obj) -> pdf_document *

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_get_bound_document(obj)

def ppdf_get_doc_event_callback_data(doc):
    """
    ppdf_get_doc_event_callback_data(pdf_document * doc) -> void *

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_get_doc_event_callback_data(doc)

def ppdf_get_incremental_xref_entry(doc, i):
    """
    ppdf_get_incremental_xref_entry(pdf_document * doc, int i) -> pdf_xref_entry

    Parameters
    ----------
    doc: pdf_document *
    i: int

    """
    return _mupdf.ppdf_get_incremental_xref_entry(doc, i)

def ppdf_get_indirect_document(obj):
    """
    ppdf_get_indirect_document(pdf_obj * obj) -> pdf_document *

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_get_indirect_document(obj)

def ppdf_get_populating_xref_entry(doc, i):
    """
    ppdf_get_populating_xref_entry(pdf_document * doc, int i) -> pdf_xref_entry

    Parameters
    ----------
    doc: pdf_document *
    i: int

    """
    return _mupdf.ppdf_get_populating_xref_entry(doc, i)

def ppdf_get_widget_editing_state(widget):
    """
    ppdf_get_widget_editing_state(pdf_annot * widget) -> int

    Parameters
    ----------
    widget: pdf_annot *

    """
    return _mupdf.ppdf_get_widget_editing_state(widget)

def ppdf_get_xref_entry(doc, i):
    """
    ppdf_get_xref_entry(pdf_document * doc, int i) -> pdf_xref_entry

    Parameters
    ----------
    doc: pdf_document *
    i: int

    """
    return _mupdf.ppdf_get_xref_entry(doc, i)

def ppdf_graft_mapped_object(map, obj):
    """
    ppdf_graft_mapped_object(pdf_graft_map * map, pdf_obj * obj) -> pdf_obj *

    Parameters
    ----------
    map: pdf_graft_map *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_graft_mapped_object(map, obj)

def ppdf_graft_mapped_page(map, page_to, src, page_from):
    """
    ppdf_graft_mapped_page(pdf_graft_map * map, int page_to, pdf_document * src, int page_from)

    Parameters
    ----------
    map: pdf_graft_map *
    page_to: int
    src: pdf_document *
    page_from: int

    """
    return _mupdf.ppdf_graft_mapped_page(map, page_to, src, page_from)

def ppdf_graft_object(dst, obj):
    """
    ppdf_graft_object(pdf_document * dst, pdf_obj * obj) -> pdf_obj *

    Parameters
    ----------
    dst: pdf_document *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_graft_object(dst, obj)

def ppdf_graft_page(dst, page_to, src, page_from):
    """
    ppdf_graft_page(pdf_document * dst, int page_to, pdf_document * src, int page_from)

    Parameters
    ----------
    dst: pdf_document *
    page_to: int
    src: pdf_document *
    page_from: int

    """
    return _mupdf.ppdf_graft_page(dst, page_to, src, page_from)

def ppdf_guess_mime_type_from_file_name(filename):
    """
    ppdf_guess_mime_type_from_file_name(char const * filename) -> char const *

    Parameters
    ----------
    filename: char const *

    """
    return _mupdf.ppdf_guess_mime_type_from_file_name(filename)

def ppdf_has_permission(doc, p):
    """
    ppdf_has_permission(pdf_document * doc, fz_permission p) -> int

    Parameters
    ----------
    doc: pdf_document *
    p: enum fz_permission

    """
    return _mupdf.ppdf_has_permission(doc, p)

def ppdf_has_unsaved_changes(doc):
    """
    ppdf_has_unsaved_changes(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_has_unsaved_changes(doc)

def ppdf_has_unsaved_sigs(doc):
    """
    ppdf_has_unsaved_sigs(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_has_unsaved_sigs(doc)

def ppdf_insert_font_resource(doc, key, obj):
    """
    ppdf_insert_font_resource(pdf_document * doc, pdf_font_resource_key key, pdf_obj * obj) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    key: pdf_font_resource_key *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_insert_font_resource(doc, key, obj)

def ppdf_insert_page(doc, at, page):
    """
    ppdf_insert_page(pdf_document * doc, int at, pdf_obj * page)

    Parameters
    ----------
    doc: pdf_document *
    at: int
    page: pdf_obj *

    """
    return _mupdf.ppdf_insert_page(doc, at, page)

def ppdf_invalidate_xfa(doc):
    """
    ppdf_invalidate_xfa(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_invalidate_xfa(doc)

def ppdf_is_array(obj):
    """
    ppdf_is_array(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_is_array(obj)

def ppdf_is_bool(obj):
    """
    ppdf_is_bool(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_is_bool(obj)

def ppdf_is_dict(obj):
    """
    ppdf_is_dict(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_is_dict(obj)

def ppdf_is_embedded_file(fs):
    """
    ppdf_is_embedded_file(pdf_obj * fs) -> int

    Parameters
    ----------
    fs: pdf_obj *

    """
    return _mupdf.ppdf_is_embedded_file(fs)

def ppdf_is_field_locked(locked, name):
    """
    ppdf_is_field_locked(pdf_locked_fields * locked, char const * name) -> int

    Parameters
    ----------
    locked: pdf_locked_fields *
    name: char const *

    """
    return _mupdf.ppdf_is_field_locked(locked, name)

def ppdf_is_indirect(obj):
    """
    ppdf_is_indirect(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_is_indirect(obj)

def ppdf_is_int(obj):
    """
    ppdf_is_int(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_is_int(obj)

def ppdf_is_jpx_image(dict):
    """
    ppdf_is_jpx_image(pdf_obj * dict) -> int

    Parameters
    ----------
    dict: pdf_obj *

    """
    return _mupdf.ppdf_is_jpx_image(dict)

def ppdf_is_local_object(doc, obj):
    """
    ppdf_is_local_object(pdf_document * doc, pdf_obj * obj) -> int

    Parameters
    ----------
    doc: pdf_document *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_is_local_object(doc, obj)

def ppdf_is_name(obj):
    """
    ppdf_is_name(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_is_name(obj)

def ppdf_is_null(obj):
    """
    ppdf_is_null(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_is_null(obj)

def ppdf_is_number(obj):
    """
    ppdf_is_number(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_is_number(obj)

def ppdf_is_ocg_hidden(doc, rdb, usage, ocg):
    """
    ppdf_is_ocg_hidden(pdf_document * doc, pdf_obj * rdb, char const * usage, pdf_obj * ocg) -> int

    Parameters
    ----------
    doc: pdf_document *
    rdb: pdf_obj *
    usage: char const *
    ocg: pdf_obj *

    """
    return _mupdf.ppdf_is_ocg_hidden(doc, rdb, usage, ocg)

def ppdf_is_real(obj):
    """
    ppdf_is_real(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_is_real(obj)

def ppdf_is_stream(obj):
    """
    ppdf_is_stream(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_is_stream(obj)

def ppdf_is_string(obj):
    """
    ppdf_is_string(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_is_string(obj)

def ppdf_is_tint_colorspace(cs):
    """
    ppdf_is_tint_colorspace(fz_colorspace * cs) -> int

    Parameters
    ----------
    cs: fz_colorspace *

    """
    return _mupdf.ppdf_is_tint_colorspace(cs)

def ppdf_js_event_init(js, target, value, willCommit):
    """
    ppdf_js_event_init(pdf_js * js, pdf_obj * target, char const * value, int willCommit)

    Parameters
    ----------
    js: pdf_js *
    target: pdf_obj *
    value: char const *
    willCommit: int

    """
    return _mupdf.ppdf_js_event_init(js, target, value, willCommit)

def ppdf_js_event_init_keystroke(js, target, evt):
    """
    ppdf_js_event_init_keystroke(pdf_js * js, pdf_obj * target, pdf_keystroke_event evt)

    Parameters
    ----------
    js: pdf_js *
    target: pdf_obj *
    evt: pdf_keystroke_event *

    """
    return _mupdf.ppdf_js_event_init_keystroke(js, target, evt)

def ppdf_js_event_result(js):
    """
    ppdf_js_event_result(pdf_js * js) -> int

    Parameters
    ----------
    js: pdf_js *

    """
    return _mupdf.ppdf_js_event_result(js)

def ppdf_js_event_result_keystroke(js, evt):
    """
    ppdf_js_event_result_keystroke(pdf_js * js, pdf_keystroke_event evt) -> int

    Parameters
    ----------
    js: pdf_js *
    evt: pdf_keystroke_event *

    """
    return _mupdf.ppdf_js_event_result_keystroke(js, evt)

def ppdf_js_event_result_validate(js, newvalue):
    """
    ppdf_js_event_result_validate(pdf_js * js, char ** newvalue) -> int

    Parameters
    ----------
    js: pdf_js *
    newvalue: char **

    """
    return _mupdf.ppdf_js_event_result_validate(js, newvalue)

def ppdf_js_event_value(js):
    """
    ppdf_js_event_value(pdf_js * js) -> char *

    Parameters
    ----------
    js: pdf_js *

    """
    return _mupdf.ppdf_js_event_value(js)

def ppdf_js_execute(js, name, code):
    """
    ppdf_js_execute(pdf_js * js, char const * name, char const * code)

    Parameters
    ----------
    js: pdf_js *
    name: char const *
    code: char const *

    """
    return _mupdf.ppdf_js_execute(js, name, code)

def ppdf_js_supported(doc):
    """
    ppdf_js_supported(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_js_supported(doc)

def ppdf_keep_annot(annot):
    """
    ppdf_keep_annot(pdf_annot * annot) -> pdf_annot *

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_keep_annot(annot)

def ppdf_keep_cmap(cmap):
    """
    ppdf_keep_cmap(pdf_cmap cmap) -> pdf_cmap

    Parameters
    ----------
    cmap: pdf_cmap *

    """
    return _mupdf.ppdf_keep_cmap(cmap)

def ppdf_keep_document(doc):
    """
    ppdf_keep_document(pdf_document * doc) -> pdf_document *

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_keep_document(doc)

def ppdf_keep_font(fontdesc):
    """
    ppdf_keep_font(pdf_font_desc fontdesc) -> pdf_font_desc

    Parameters
    ----------
    fontdesc: pdf_font_desc *

    """
    return _mupdf.ppdf_keep_font(fontdesc)

def ppdf_keep_function(func):
    """
    ppdf_keep_function(pdf_function * func) -> pdf_function *

    Parameters
    ----------
    func: pdf_function *

    """
    return _mupdf.ppdf_keep_function(func)

def ppdf_keep_graft_map(map):
    """
    ppdf_keep_graft_map(pdf_graft_map * map) -> pdf_graft_map *

    Parameters
    ----------
    map: pdf_graft_map *

    """
    return _mupdf.ppdf_keep_graft_map(map)

def ppdf_keep_obj(obj):
    """
    ppdf_keep_obj(pdf_obj * obj) -> pdf_obj *

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_keep_obj(obj)

def ppdf_keep_pattern(pat):
    """
    ppdf_keep_pattern(pdf_pattern pat) -> pdf_pattern

    Parameters
    ----------
    pat: pdf_pattern *

    """
    return _mupdf.ppdf_keep_pattern(pat)

def ppdf_keep_widget(widget):
    """
    ppdf_keep_widget(pdf_annot * widget) -> pdf_annot *

    Parameters
    ----------
    widget: pdf_annot *

    """
    return _mupdf.ppdf_keep_widget(widget)

def ppdf_layer_config_info(doc, config_num, info):
    """
    ppdf_layer_config_info(pdf_document * doc, int config_num, pdf_layer_config info)

    Parameters
    ----------
    doc: pdf_document *
    config_num: int
    info: pdf_layer_config *

    """
    return _mupdf.ppdf_layer_config_info(doc, config_num, info)

def ppdf_layer_config_ui_info(doc, ui, info):
    """
    ppdf_layer_config_ui_info(pdf_document * doc, int ui, pdf_layer_config_ui info)

    Parameters
    ----------
    doc: pdf_document *
    ui: int
    info: pdf_layer_config_ui *

    """
    return _mupdf.ppdf_layer_config_ui_info(doc, ui, info)

def ppdf_layout_fit_text(font, lang, str, bounds):
    """
    ppdf_layout_fit_text(fz_font * font, fz_text_language lang, char const * str, fz_rect bounds) -> fz_text

    Parameters
    ----------
    font: fz_font *
    lang: enum fz_text_language
    str: char const *
    bounds: fz_rect

    """
    return _mupdf.ppdf_layout_fit_text(font, lang, str, bounds)

def ppdf_layout_text_widget(annot):
    """
    ppdf_layout_text_widget(pdf_annot * annot) -> fz_layout_block

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_layout_text_widget(annot)

def ppdf_lex(f, lexbuf):
    """
    ppdf_lex(fz_stream * f, pdf_lexbuf lexbuf) -> pdf_token

    Parameters
    ----------
    f: fz_stream *
    lexbuf: pdf_lexbuf *

    """
    return _mupdf.ppdf_lex(f, lexbuf)

def ppdf_lex_no_string(f, lexbuf):
    """
    ppdf_lex_no_string(fz_stream * f, pdf_lexbuf lexbuf) -> pdf_token

    Parameters
    ----------
    f: fz_stream *
    lexbuf: pdf_lexbuf *

    """
    return _mupdf.ppdf_lex_no_string(f, lexbuf)

def ppdf_lexbuf_fin(lexbuf):
    """
    ppdf_lexbuf_fin(pdf_lexbuf lexbuf)

    Parameters
    ----------
    lexbuf: pdf_lexbuf *

    """
    return _mupdf.ppdf_lexbuf_fin(lexbuf)

def ppdf_lexbuf_grow(lexbuf):
    """
    ppdf_lexbuf_grow(pdf_lexbuf lexbuf) -> ptrdiff_t

    Parameters
    ----------
    lexbuf: pdf_lexbuf *

    """
    return _mupdf.ppdf_lexbuf_grow(lexbuf)

def ppdf_lexbuf_init(lexbuf, size):
    """
    ppdf_lexbuf_init(pdf_lexbuf lexbuf, int size)

    Parameters
    ----------
    lexbuf: pdf_lexbuf *
    size: int

    """
    return _mupdf.ppdf_lexbuf_init(lexbuf, size)

def ppdf_line_ending_from_name(end):
    """
    ppdf_line_ending_from_name(pdf_obj * end) -> enum pdf_line_ending

    Parameters
    ----------
    end: pdf_obj *

    """
    return _mupdf.ppdf_line_ending_from_name(end)

def ppdf_line_ending_from_string(end):
    """
    ppdf_line_ending_from_string(char const * end) -> enum pdf_line_ending

    Parameters
    ----------
    end: char const *

    """
    return _mupdf.ppdf_line_ending_from_string(end)

def ppdf_load_builtin_cmap(name):
    """
    ppdf_load_builtin_cmap(char const * name) -> pdf_cmap

    Parameters
    ----------
    name: char const *

    """
    return _mupdf.ppdf_load_builtin_cmap(name)

def ppdf_load_cmap(file):
    """
    ppdf_load_cmap(fz_stream * file) -> pdf_cmap

    Parameters
    ----------
    file: fz_stream *

    """
    return _mupdf.ppdf_load_cmap(file)

def ppdf_load_colorspace(obj):
    """
    ppdf_load_colorspace(pdf_obj * obj) -> fz_colorspace *

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_load_colorspace(obj)

def ppdf_load_compressed_inline_image(doc, dict, length, cstm, indexed, image):
    """
    ppdf_load_compressed_inline_image(pdf_document * doc, pdf_obj * dict, int length, fz_stream * cstm, int indexed, fz_compressed_image * image)

    Parameters
    ----------
    doc: pdf_document *
    dict: pdf_obj *
    length: int
    cstm: fz_stream *
    indexed: int
    image: fz_compressed_image *

    """
    return _mupdf.ppdf_load_compressed_inline_image(doc, dict, length, cstm, indexed, image)

def ppdf_load_compressed_stream(doc, num):
    """
    ppdf_load_compressed_stream(pdf_document * doc, int num) -> fz_compressed_buffer

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_load_compressed_stream(doc, num)

def ppdf_load_default_colorspaces(doc, page):
    """
    ppdf_load_default_colorspaces(pdf_document * doc, pdf_page * page) -> fz_default_colorspaces

    Parameters
    ----------
    doc: pdf_document *
    page: pdf_page *

    """
    return _mupdf.ppdf_load_default_colorspaces(doc, page)

def ppdf_load_embedded_cmap(doc, ref):
    """
    ppdf_load_embedded_cmap(pdf_document * doc, pdf_obj * ref) -> pdf_cmap

    Parameters
    ----------
    doc: pdf_document *
    ref: pdf_obj *

    """
    return _mupdf.ppdf_load_embedded_cmap(doc, ref)

def ppdf_load_embedded_file(fs):
    """
    ppdf_load_embedded_file(pdf_obj * fs) -> fz_buffer

    Parameters
    ----------
    fs: pdf_obj *

    """
    return _mupdf.ppdf_load_embedded_file(fs)

def ppdf_load_encoding(estrings, encoding):
    """
    ppdf_load_encoding(char const ** estrings, char const * encoding)

    Parameters
    ----------
    estrings: char const **
    encoding: char const *

    """
    return _mupdf.ppdf_load_encoding(estrings, encoding)

def ppdf_load_font(doc, rdb, obj):
    """
    ppdf_load_font(pdf_document * doc, pdf_obj * rdb, pdf_obj * obj) -> pdf_font_desc

    Parameters
    ----------
    doc: pdf_document *
    rdb: pdf_obj *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_load_font(doc, rdb, obj)

def ppdf_load_function(ref, arg2, out):
    """
    ppdf_load_function(pdf_obj * ref, int arg2, int out) -> pdf_function *

    Parameters
    ----------
    ref: pdf_obj *
    in: int
    out: int

    """
    return _mupdf.ppdf_load_function(ref, arg2, out)

def ppdf_load_hail_mary_font(doc):
    """
    ppdf_load_hail_mary_font(pdf_document * doc) -> pdf_font_desc

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_load_hail_mary_font(doc)

def ppdf_load_image(doc, obj):
    """
    ppdf_load_image(pdf_document * doc, pdf_obj * obj) -> fz_image *

    Parameters
    ----------
    doc: pdf_document *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_load_image(doc, obj)

def ppdf_load_inline_image(doc, rdb, dict, file):
    """
    ppdf_load_inline_image(pdf_document * doc, pdf_obj * rdb, pdf_obj * dict, fz_stream * file) -> fz_image *

    Parameters
    ----------
    doc: pdf_document *
    rdb: pdf_obj *
    dict: pdf_obj *
    file: fz_stream *

    """
    return _mupdf.ppdf_load_inline_image(doc, rdb, dict, file)

def ppdf_load_journal(doc, filename):
    """
    ppdf_load_journal(pdf_document * doc, char const * filename)

    Parameters
    ----------
    doc: pdf_document *
    filename: char const *

    """
    return _mupdf.ppdf_load_journal(doc, filename)

def ppdf_load_link_annots(arg_1, annots, pagenum, page_ctm):
    """
    ppdf_load_link_annots(pdf_document * arg_1, pdf_obj * annots, int pagenum, fz_matrix page_ctm) -> fz_link

    Parameters
    ----------
    arg_1: pdf_document *
    annots: pdf_obj *
    pagenum: int
    page_ctm: fz_matrix

    """
    return _mupdf.ppdf_load_link_annots(arg_1, annots, pagenum, page_ctm)

def ppdf_load_links(page):
    """
    ppdf_load_links(pdf_page * page) -> fz_link

    Parameters
    ----------
    page: pdf_page *

    """
    return _mupdf.ppdf_load_links(page)

def ppdf_load_name_tree(doc, which):
    """
    ppdf_load_name_tree(pdf_document * doc, pdf_obj * which) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    which: pdf_obj *

    """
    return _mupdf.ppdf_load_name_tree(doc, which)

def ppdf_load_object(doc, num):
    """
    ppdf_load_object(pdf_document * doc, int num) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_load_object(doc, num)

def ppdf_load_outline(doc):
    """
    ppdf_load_outline(pdf_document * doc) -> fz_outline

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_load_outline(doc)

def ppdf_load_page(doc, number):
    """
    ppdf_load_page(pdf_document * doc, int number) -> pdf_page *

    Parameters
    ----------
    doc: pdf_document *
    number: int

    """
    return _mupdf.ppdf_load_page(doc, number)

def ppdf_load_page_imp(doc, chapter, number):
    """
    ppdf_load_page_imp(fz_document * doc, int chapter, int number) -> fz_page *

    Parameters
    ----------
    doc: fz_document *
    chapter: int
    number: int

    """
    return _mupdf.ppdf_load_page_imp(doc, chapter, number)

def ppdf_load_page_tree(doc):
    """
    ppdf_load_page_tree(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_load_page_tree(doc)

def ppdf_load_pattern(doc, obj):
    """
    ppdf_load_pattern(pdf_document * doc, pdf_obj * obj) -> pdf_pattern

    Parameters
    ----------
    doc: pdf_document *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_load_pattern(doc, obj)

def ppdf_load_raw_stream(ref):
    """
    ppdf_load_raw_stream(pdf_obj * ref) -> fz_buffer

    Parameters
    ----------
    ref: pdf_obj *

    """
    return _mupdf.ppdf_load_raw_stream(ref)

def ppdf_load_raw_stream_number(doc, num):
    """
    ppdf_load_raw_stream_number(pdf_document * doc, int num) -> fz_buffer

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_load_raw_stream_number(doc, num)

def ppdf_load_shading(doc, obj):
    """
    ppdf_load_shading(pdf_document * doc, pdf_obj * obj) -> fz_shade

    Parameters
    ----------
    doc: pdf_document *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_load_shading(doc, obj)

def ppdf_load_stream(ref):
    """
    ppdf_load_stream(pdf_obj * ref) -> fz_buffer

    Parameters
    ----------
    ref: pdf_obj *

    """
    return _mupdf.ppdf_load_stream(ref)

def ppdf_load_stream_number(doc, num):
    """
    ppdf_load_stream_number(pdf_document * doc, int num) -> fz_buffer

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_load_stream_number(doc, num)

def ppdf_load_stream_or_string_as_utf8(src):
    """
    ppdf_load_stream_or_string_as_utf8(pdf_obj * src) -> char *

    Parameters
    ----------
    src: pdf_obj *

    """
    return _mupdf.ppdf_load_stream_or_string_as_utf8(src)

def ppdf_load_system_cmap(name):
    """
    ppdf_load_system_cmap(char const * name) -> pdf_cmap

    Parameters
    ----------
    name: char const *

    """
    return _mupdf.ppdf_load_system_cmap(name)

def ppdf_load_to_unicode(doc, font, strings, collection, cmapstm):
    """
    ppdf_load_to_unicode(pdf_document * doc, pdf_font_desc font, char const ** strings, char * collection, pdf_obj * cmapstm)

    Parameters
    ----------
    doc: pdf_document *
    font: pdf_font_desc *
    strings: char const **
    collection: char *
    cmapstm: pdf_obj *

    """
    return _mupdf.ppdf_load_to_unicode(doc, font, strings, collection, cmapstm)

def ppdf_load_type3_font(doc, rdb, obj):
    """
    ppdf_load_type3_font(pdf_document * doc, pdf_obj * rdb, pdf_obj * obj) -> pdf_font_desc

    Parameters
    ----------
    doc: pdf_document *
    rdb: pdf_obj *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_load_type3_font(doc, rdb, obj)

def ppdf_load_type3_glyphs(doc, fontdesc):
    """
    ppdf_load_type3_glyphs(pdf_document * doc, pdf_font_desc fontdesc)

    Parameters
    ----------
    doc: pdf_document *
    fontdesc: pdf_font_desc *

    """
    return _mupdf.ppdf_load_type3_glyphs(doc, fontdesc)

def ppdf_load_unencrypted_object(doc, num):
    """
    ppdf_load_unencrypted_object(pdf_document * doc, int num) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_load_unencrypted_object(doc, num)

def ppdf_lookup_anchor(doc, name, xp, yp):
    """
    ppdf_lookup_anchor(pdf_document * doc, char const * name, float * xp, float * yp) -> int

    Parameters
    ----------
    doc: pdf_document *
    name: char const *
    xp: float *
    yp: float *

    """
    return _mupdf.ppdf_lookup_anchor(doc, name, xp, yp)

def ppdf_lookup_cmap(cmap, cpt):
    """
    ppdf_lookup_cmap(pdf_cmap cmap, unsigned int cpt) -> int

    Parameters
    ----------
    cmap: pdf_cmap *
    cpt: unsigned int

    """
    return _mupdf.ppdf_lookup_cmap(cmap, cpt)

def ppdf_lookup_cmap_full(cmap, cpt, out):
    """
    ppdf_lookup_cmap_full(pdf_cmap cmap, unsigned int cpt, int * out) -> int

    Parameters
    ----------
    cmap: pdf_cmap *
    cpt: unsigned int
    out: int *

    """
    return _mupdf.ppdf_lookup_cmap_full(cmap, cpt, out)

def ppdf_lookup_dest(doc, needle):
    """
    ppdf_lookup_dest(pdf_document * doc, pdf_obj * needle) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    needle: pdf_obj *

    """
    return _mupdf.ppdf_lookup_dest(doc, needle)

def ppdf_lookup_field(form, name):
    """
    ppdf_lookup_field(pdf_obj * form, char const * name) -> pdf_obj *

    Parameters
    ----------
    form: pdf_obj *
    name: char const *

    """
    return _mupdf.ppdf_lookup_field(form, name)

def ppdf_lookup_hmtx(font, cid):
    """
    ppdf_lookup_hmtx(pdf_font_desc font, int cid) -> pdf_hmtx

    Parameters
    ----------
    font: pdf_font_desc *
    cid: int

    """
    return _mupdf.ppdf_lookup_hmtx(font, cid)

def ppdf_lookup_metadata(doc, key, ptr, size):
    """
    ppdf_lookup_metadata(pdf_document * doc, char const * key, char * ptr, int size) -> int

    Parameters
    ----------
    doc: pdf_document *
    key: char const *
    ptr: char *
    size: int

    """
    return _mupdf.ppdf_lookup_metadata(doc, key, ptr, size)

def ppdf_lookup_name(doc, which, needle):
    """
    ppdf_lookup_name(pdf_document * doc, pdf_obj * which, pdf_obj * needle) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    which: pdf_obj *
    needle: pdf_obj *

    """
    return _mupdf.ppdf_lookup_name(doc, which, needle)

def ppdf_lookup_number(root, needle):
    """
    ppdf_lookup_number(pdf_obj * root, int needle) -> pdf_obj *

    Parameters
    ----------
    root: pdf_obj *
    needle: int

    """
    return _mupdf.ppdf_lookup_number(root, needle)

def ppdf_lookup_page_number(doc, pageobj):
    """
    ppdf_lookup_page_number(pdf_document * doc, pdf_obj * pageobj) -> int

    Parameters
    ----------
    doc: pdf_document *
    pageobj: pdf_obj *

    """
    return _mupdf.ppdf_lookup_page_number(doc, pageobj)

def ppdf_lookup_page_obj(doc, needle):
    """
    ppdf_lookup_page_obj(pdf_document * doc, int needle) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    needle: int

    """
    return _mupdf.ppdf_lookup_page_obj(doc, needle)

def ppdf_lookup_substitute_font(mono, serif, bold, italic, len):
    """
    ppdf_lookup_substitute_font(int mono, int serif, int bold, int italic, int * len) -> unsigned char const *

    Parameters
    ----------
    mono: int
    serif: int
    bold: int
    italic: int
    len: int *

    """
    return _mupdf.ppdf_lookup_substitute_font(mono, serif, bold, italic, len)

def ppdf_lookup_vmtx(font, cid):
    """
    ppdf_lookup_vmtx(pdf_font_desc font, int cid) -> pdf_vmtx

    Parameters
    ----------
    font: pdf_font_desc *
    cid: int

    """
    return _mupdf.ppdf_lookup_vmtx(font, cid)

def ppdf_map_one_to_many(cmap, one, many, len):
    """
    ppdf_map_one_to_many(pdf_cmap cmap, unsigned int one, int * many, size_t len)

    Parameters
    ----------
    cmap: pdf_cmap *
    one: unsigned int
    many: int *
    len: size_t

    """
    return _mupdf.ppdf_map_one_to_many(cmap, one, many, len)

def ppdf_map_range_to_range(cmap, srclo, srchi, dstlo):
    """
    ppdf_map_range_to_range(pdf_cmap cmap, unsigned int srclo, unsigned int srchi, int dstlo)

    Parameters
    ----------
    cmap: pdf_cmap *
    srclo: unsigned int
    srchi: unsigned int
    dstlo: int

    """
    return _mupdf.ppdf_map_range_to_range(cmap, srclo, srchi, dstlo)

def ppdf_mark_obj(obj):
    """
    ppdf_mark_obj(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_mark_obj(obj)

def ppdf_mark_xref(doc):
    """
    ppdf_mark_xref(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_mark_xref(doc)

def ppdf_name_eq(a, b):
    """
    ppdf_name_eq(pdf_obj * a, pdf_obj * b) -> int

    Parameters
    ----------
    a: pdf_obj *
    b: pdf_obj *

    """
    return _mupdf.ppdf_name_eq(a, b)

def ppdf_name_from_line_ending(end):
    """
    ppdf_name_from_line_ending(enum pdf_line_ending end) -> pdf_obj *

    Parameters
    ----------
    end: enum enum pdf_line_ending

    """
    return _mupdf.ppdf_name_from_line_ending(end)

def ppdf_needs_password(doc):
    """
    ppdf_needs_password(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_needs_password(doc)

def ppdf_new_array(doc, initialcap):
    """
    ppdf_new_array(pdf_document * doc, int initialcap) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    initialcap: int

    """
    return _mupdf.ppdf_new_array(doc, initialcap)

def ppdf_new_buffer_processor(buffer, ahxencode):
    """
    ppdf_new_buffer_processor(fz_buffer buffer, int ahxencode) -> pdf_processor *

    Parameters
    ----------
    buffer: fz_buffer *
    ahxencode: int

    """
    return _mupdf.ppdf_new_buffer_processor(buffer, ahxencode)

def ppdf_new_cmap():
    """ppdf_new_cmap() -> pdf_cmap"""
    return _mupdf.ppdf_new_cmap()

def ppdf_new_crypt(enc, id):
    """
    ppdf_new_crypt(pdf_obj * enc, pdf_obj * id) -> pdf_crypt *

    Parameters
    ----------
    enc: pdf_obj *
    id: pdf_obj *

    """
    return _mupdf.ppdf_new_crypt(enc, id)

def ppdf_new_date(doc, time):
    """
    ppdf_new_date(pdf_document * doc, int64_t time) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    time: int64_t

    """
    return _mupdf.ppdf_new_date(doc, time)

def ppdf_new_dict(doc, initialcap):
    """
    ppdf_new_dict(pdf_document * doc, int initialcap) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    initialcap: int

    """
    return _mupdf.ppdf_new_dict(doc, initialcap)

def ppdf_new_display_list_from_annot(annot):
    """
    ppdf_new_display_list_from_annot(pdf_annot * annot) -> fz_display_list *

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_new_display_list_from_annot(annot)

def ppdf_new_encrypt(opwd_utf8, upwd_utf8, id, permissions, algorithm):
    """
    ppdf_new_encrypt(char const * opwd_utf8, char const * upwd_utf8, pdf_obj * id, int permissions, int algorithm) -> pdf_crypt *

    Parameters
    ----------
    opwd_utf8: char const *
    upwd_utf8: char const *
    id: pdf_obj *
    permissions: int
    algorithm: int

    """
    return _mupdf.ppdf_new_encrypt(opwd_utf8, upwd_utf8, id, permissions, algorithm)

def ppdf_new_filter_processor(doc, chain, old_res, new_res, struct_parents, transform, filter):
    """
    ppdf_new_filter_processor(pdf_document * doc, pdf_processor * chain, pdf_obj * old_res, pdf_obj * new_res, int struct_parents, fz_matrix transform, pdf_filter_options filter) -> pdf_processor *

    Parameters
    ----------
    doc: pdf_document *
    chain: pdf_processor *
    old_res: pdf_obj *
    new_res: pdf_obj *
    struct_parents: int
    transform: fz_matrix
    filter: pdf_filter_options *

    """
    return _mupdf.ppdf_new_filter_processor(doc, chain, old_res, new_res, struct_parents, transform, filter)

def ppdf_new_font_desc():
    """ppdf_new_font_desc() -> pdf_font_desc"""
    return _mupdf.ppdf_new_font_desc()

def ppdf_new_graft_map(dst):
    """
    ppdf_new_graft_map(pdf_document * dst) -> pdf_graft_map *

    Parameters
    ----------
    dst: pdf_document *

    """
    return _mupdf.ppdf_new_graft_map(dst)

def ppdf_new_identity_cmap(wmode, bytes):
    """
    ppdf_new_identity_cmap(int wmode, int bytes) -> pdf_cmap

    Parameters
    ----------
    wmode: int
    bytes: int

    """
    return _mupdf.ppdf_new_identity_cmap(wmode, bytes)

def ppdf_new_indirect(doc, num, gen):
    """
    ppdf_new_indirect(pdf_document * doc, int num, int gen) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    num: int
    gen: int

    """
    return _mupdf.ppdf_new_indirect(doc, num, gen)

def ppdf_new_int(i):
    """
    ppdf_new_int(int64_t i) -> pdf_obj *

    Parameters
    ----------
    i: int64_t

    """
    return _mupdf.ppdf_new_int(i)

def ppdf_new_local_xref(doc):
    """
    ppdf_new_local_xref(pdf_document * doc) -> pdf_xref *

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_new_local_xref(doc)

def ppdf_new_matrix(doc, mtx):
    """
    ppdf_new_matrix(pdf_document * doc, fz_matrix mtx) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    mtx: fz_matrix

    """
    return _mupdf.ppdf_new_matrix(doc, mtx)

def ppdf_new_name(str):
    """
    ppdf_new_name(char const * str) -> pdf_obj *

    Parameters
    ----------
    str: char const *

    """
    return _mupdf.ppdf_new_name(str)

def ppdf_new_output_processor(out, ahxencode):
    """
    ppdf_new_output_processor(fz_output * out, int ahxencode) -> pdf_processor *

    Parameters
    ----------
    out: fz_output *
    ahxencode: int

    """
    return _mupdf.ppdf_new_output_processor(out, ahxencode)

def ppdf_new_pdf_device(doc, topctm, resources, contents):
    """
    ppdf_new_pdf_device(pdf_document * doc, fz_matrix topctm, pdf_obj * resources, fz_buffer contents) -> fz_device *

    Parameters
    ----------
    doc: pdf_document *
    topctm: fz_matrix
    resources: pdf_obj *
    contents: fz_buffer *

    """
    return _mupdf.ppdf_new_pdf_device(doc, topctm, resources, contents)

def ppdf_new_pixmap_from_annot(annot, ctm, cs, seps, alpha):
    """
    ppdf_new_pixmap_from_annot(pdf_annot * annot, fz_matrix ctm, fz_colorspace * cs, fz_separations * seps, int alpha) -> fz_pixmap *

    Parameters
    ----------
    annot: pdf_annot *
    ctm: fz_matrix
    cs: fz_colorspace *
    seps: fz_separations *
    alpha: int

    """
    return _mupdf.ppdf_new_pixmap_from_annot(annot, ctm, cs, seps, alpha)

def ppdf_new_pixmap_from_page_contents_with_separations_and_usage(page, ctm, cs, seps, alpha, usage):
    """
    ppdf_new_pixmap_from_page_contents_with_separations_and_usage(pdf_page * page, fz_matrix ctm, fz_colorspace * cs, fz_separations * seps, int alpha, char const * usage) -> fz_pixmap *

    Parameters
    ----------
    page: pdf_page *
    ctm: fz_matrix
    cs: fz_colorspace *
    seps: fz_separations *
    alpha: int
    usage: char const *

    """
    return _mupdf.ppdf_new_pixmap_from_page_contents_with_separations_and_usage(page, ctm, cs, seps, alpha, usage)

def ppdf_new_pixmap_from_page_contents_with_usage(page, ctm, cs, alpha, usage):
    """
    ppdf_new_pixmap_from_page_contents_with_usage(pdf_page * page, fz_matrix ctm, fz_colorspace * cs, int alpha, char const * usage) -> fz_pixmap *

    Parameters
    ----------
    page: pdf_page *
    ctm: fz_matrix
    cs: fz_colorspace *
    alpha: int
    usage: char const *

    """
    return _mupdf.ppdf_new_pixmap_from_page_contents_with_usage(page, ctm, cs, alpha, usage)

def ppdf_new_pixmap_from_page_with_separations_and_usage(page, ctm, cs, seps, alpha, usage):
    """
    ppdf_new_pixmap_from_page_with_separations_and_usage(pdf_page * page, fz_matrix ctm, fz_colorspace * cs, fz_separations * seps, int alpha, char const * usage) -> fz_pixmap *

    Parameters
    ----------
    page: pdf_page *
    ctm: fz_matrix
    cs: fz_colorspace *
    seps: fz_separations *
    alpha: int
    usage: char const *

    """
    return _mupdf.ppdf_new_pixmap_from_page_with_separations_and_usage(page, ctm, cs, seps, alpha, usage)

def ppdf_new_pixmap_from_page_with_usage(page, ctm, cs, alpha, usage):
    """
    ppdf_new_pixmap_from_page_with_usage(pdf_page * page, fz_matrix ctm, fz_colorspace * cs, int alpha, char const * usage) -> fz_pixmap *

    Parameters
    ----------
    page: pdf_page *
    ctm: fz_matrix
    cs: fz_colorspace *
    alpha: int
    usage: char const *

    """
    return _mupdf.ppdf_new_pixmap_from_page_with_usage(page, ctm, cs, alpha, usage)

def ppdf_new_processor(size):
    """
    ppdf_new_processor(int size) -> void *

    Parameters
    ----------
    size: int

    """
    return _mupdf.ppdf_new_processor(size)

def ppdf_new_real(f):
    """
    ppdf_new_real(float f) -> pdf_obj *

    Parameters
    ----------
    f: float

    """
    return _mupdf.ppdf_new_real(f)

def ppdf_new_rect(doc, rect):
    """
    ppdf_new_rect(pdf_document * doc, fz_rect rect) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    rect: fz_rect

    """
    return _mupdf.ppdf_new_rect(doc, rect)

def ppdf_new_run_processor(dev, ctm, usage, gstate, default_cs, cookie):
    """
    ppdf_new_run_processor(fz_device * dev, fz_matrix ctm, char const * usage, pdf_gstate * gstate, fz_default_colorspaces default_cs, fz_cookie cookie) -> pdf_processor *

    Parameters
    ----------
    dev: fz_device *
    ctm: fz_matrix
    usage: char const *
    gstate: pdf_gstate *
    default_cs: fz_default_colorspaces *
    cookie: fz_cookie *

    """
    return _mupdf.ppdf_new_run_processor(dev, ctm, usage, gstate, default_cs, cookie)

def ppdf_new_stext_page_from_annot(annot, options):
    """
    ppdf_new_stext_page_from_annot(pdf_annot * annot, fz_stext_options options) -> fz_stext_page

    Parameters
    ----------
    annot: pdf_annot *
    options: fz_stext_options const *

    """
    return _mupdf.ppdf_new_stext_page_from_annot(annot, options)

def ppdf_new_string(str, len):
    """
    ppdf_new_string(char const * str, size_t len) -> pdf_obj *

    Parameters
    ----------
    str: char const *
    len: size_t

    """
    return _mupdf.ppdf_new_string(str, len)

def ppdf_new_text_string(s):
    """
    ppdf_new_text_string(char const * s) -> pdf_obj *

    Parameters
    ----------
    s: char const *

    """
    return _mupdf.ppdf_new_text_string(s)

def ppdf_new_utf8_from_pdf_stream_obj(src):
    """
    ppdf_new_utf8_from_pdf_stream_obj(pdf_obj * src) -> char *

    Parameters
    ----------
    src: pdf_obj *

    """
    return _mupdf.ppdf_new_utf8_from_pdf_stream_obj(src)

def ppdf_new_utf8_from_pdf_string(srcptr, srclen):
    """
    ppdf_new_utf8_from_pdf_string(char const * srcptr, size_t srclen) -> char *

    Parameters
    ----------
    srcptr: char const *
    srclen: size_t

    """
    return _mupdf.ppdf_new_utf8_from_pdf_string(srcptr, srclen)

def ppdf_new_utf8_from_pdf_string_obj(src):
    """
    ppdf_new_utf8_from_pdf_string_obj(pdf_obj * src) -> char *

    Parameters
    ----------
    src: pdf_obj *

    """
    return _mupdf.ppdf_new_utf8_from_pdf_string_obj(src)

def ppdf_new_xobject(doc, bbox, matrix, res, buffer):
    """
    ppdf_new_xobject(pdf_document * doc, fz_rect bbox, fz_matrix matrix, pdf_obj * res, fz_buffer buffer) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    bbox: fz_rect
    matrix: fz_matrix
    res: pdf_obj *
    buffer: fz_buffer *

    """
    return _mupdf.ppdf_new_xobject(doc, bbox, matrix, res, buffer)

def ppdf_next_annot(annot):
    """
    ppdf_next_annot(pdf_annot * annot) -> pdf_annot *

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_next_annot(annot)

def ppdf_next_widget(previous):
    """
    ppdf_next_widget(pdf_annot * previous) -> pdf_annot *

    Parameters
    ----------
    previous: pdf_annot *

    """
    return _mupdf.ppdf_next_widget(previous)

def ppdf_obj_is_dirty(obj):
    """
    ppdf_obj_is_dirty(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_obj_is_dirty(obj)

def ppdf_obj_marked(obj):
    """
    ppdf_obj_marked(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_obj_marked(obj)

def ppdf_obj_memo(obj, bit, memo):
    """
    ppdf_obj_memo(pdf_obj * obj, int bit, int * memo) -> int

    Parameters
    ----------
    obj: pdf_obj *
    bit: int
    memo: int *

    """
    return _mupdf.ppdf_obj_memo(obj, bit, memo)

def ppdf_obj_num_is_stream(doc, num):
    """
    ppdf_obj_num_is_stream(pdf_document * doc, int num) -> int

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_obj_num_is_stream(doc, num)

def ppdf_obj_parent_num(obj):
    """
    ppdf_obj_parent_num(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_obj_parent_num(obj)

def ppdf_obj_refs(ref):
    """
    ppdf_obj_refs(pdf_obj * ref) -> int

    Parameters
    ----------
    ref: pdf_obj *

    """
    return _mupdf.ppdf_obj_refs(ref)

def ppdf_objcmp(a, b):
    """
    ppdf_objcmp(pdf_obj * a, pdf_obj * b) -> int

    Parameters
    ----------
    a: pdf_obj *
    b: pdf_obj *

    """
    return _mupdf.ppdf_objcmp(a, b)

def ppdf_objcmp_resolve(a, b):
    """
    ppdf_objcmp_resolve(pdf_obj * a, pdf_obj * b) -> int

    Parameters
    ----------
    a: pdf_obj *
    b: pdf_obj *

    """
    return _mupdf.ppdf_objcmp_resolve(a, b)

def ppdf_open_contents_stream(doc, obj):
    """
    ppdf_open_contents_stream(pdf_document * doc, pdf_obj * obj) -> fz_stream *

    Parameters
    ----------
    doc: pdf_document *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_open_contents_stream(doc, obj)

def ppdf_open_crypt(chain, crypt, num, gen):
    """
    ppdf_open_crypt(fz_stream * chain, pdf_crypt * crypt, int num, int gen) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    crypt: pdf_crypt *
    num: int
    gen: int

    """
    return _mupdf.ppdf_open_crypt(chain, crypt, num, gen)

def ppdf_open_crypt_with_filter(chain, crypt, name, num, gen):
    """
    ppdf_open_crypt_with_filter(fz_stream * chain, pdf_crypt * crypt, pdf_obj * name, int num, int gen) -> fz_stream *

    Parameters
    ----------
    chain: fz_stream *
    crypt: pdf_crypt *
    name: pdf_obj *
    num: int
    gen: int

    """
    return _mupdf.ppdf_open_crypt_with_filter(chain, crypt, name, num, gen)

def ppdf_open_document(filename):
    """
    ppdf_open_document(char const * filename) -> pdf_document *

    Parameters
    ----------
    filename: char const *

    """
    return _mupdf.ppdf_open_document(filename)

def ppdf_open_document_with_stream(file):
    """
    ppdf_open_document_with_stream(fz_stream * file) -> pdf_document *

    Parameters
    ----------
    file: fz_stream *

    """
    return _mupdf.ppdf_open_document_with_stream(file)

def ppdf_open_inline_stream(doc, stmobj, length, chain, params):
    """
    ppdf_open_inline_stream(pdf_document * doc, pdf_obj * stmobj, int length, fz_stream * chain, fz_compression_params params) -> fz_stream *

    Parameters
    ----------
    doc: pdf_document *
    stmobj: pdf_obj *
    length: int
    chain: fz_stream *
    params: fz_compression_params *

    """
    return _mupdf.ppdf_open_inline_stream(doc, stmobj, length, chain, params)

def ppdf_open_raw_stream(ref):
    """
    ppdf_open_raw_stream(pdf_obj * ref) -> fz_stream *

    Parameters
    ----------
    ref: pdf_obj *

    """
    return _mupdf.ppdf_open_raw_stream(ref)

def ppdf_open_raw_stream_number(doc, num):
    """
    ppdf_open_raw_stream_number(pdf_document * doc, int num) -> fz_stream *

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_open_raw_stream_number(doc, num)

def ppdf_open_stream(ref):
    """
    ppdf_open_stream(pdf_obj * ref) -> fz_stream *

    Parameters
    ----------
    ref: pdf_obj *

    """
    return _mupdf.ppdf_open_stream(ref)

def ppdf_open_stream_number(doc, num):
    """
    ppdf_open_stream_number(pdf_document * doc, int num) -> fz_stream *

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_open_stream_number(doc, num)

def ppdf_open_stream_with_offset(doc, num, dict, stm_ofs):
    """
    ppdf_open_stream_with_offset(pdf_document * doc, int num, pdf_obj * dict, int64_t stm_ofs) -> fz_stream *

    Parameters
    ----------
    doc: pdf_document *
    num: int
    dict: pdf_obj *
    stm_ofs: int64_t

    """
    return _mupdf.ppdf_open_stream_with_offset(doc, num, dict, stm_ofs)

def ppdf_page_contents(page):
    """
    ppdf_page_contents(pdf_page * page) -> pdf_obj *

    Parameters
    ----------
    page: pdf_page *

    """
    return _mupdf.ppdf_page_contents(page)

def ppdf_page_event_close(page):
    """
    ppdf_page_event_close(pdf_page * page)

    Parameters
    ----------
    page: pdf_page *

    """
    return _mupdf.ppdf_page_event_close(page)

def ppdf_page_event_open(page):
    """
    ppdf_page_event_open(pdf_page * page)

    Parameters
    ----------
    page: pdf_page *

    """
    return _mupdf.ppdf_page_event_open(page)

def ppdf_page_from_fz_page(ptr):
    """
    ppdf_page_from_fz_page(fz_page * ptr) -> pdf_page *

    Parameters
    ----------
    ptr: fz_page *

    """
    return _mupdf.ppdf_page_from_fz_page(ptr)

def ppdf_page_group(page):
    """
    ppdf_page_group(pdf_page * page) -> pdf_obj *

    Parameters
    ----------
    page: pdf_page *

    """
    return _mupdf.ppdf_page_group(page)

def ppdf_page_obj_transform(pageobj, page_mediabox, page_ctm):
    """
    ppdf_page_obj_transform(pdf_obj * pageobj, fz_rect page_mediabox, fz_matrix page_ctm)

    Parameters
    ----------
    pageobj: pdf_obj *
    page_mediabox: fz_rect *
    page_ctm: fz_matrix *

    """
    return _mupdf.ppdf_page_obj_transform(pageobj, page_mediabox, page_ctm)

def ppdf_page_presentation(page, transition, duration):
    """
    ppdf_page_presentation(pdf_page * page, fz_transition transition, float * duration) -> fz_transition

    Parameters
    ----------
    page: pdf_page *
    transition: fz_transition *
    duration: float *

    """
    return _mupdf.ppdf_page_presentation(page, transition, duration)

def ppdf_page_resources(page):
    """
    ppdf_page_resources(pdf_page * page) -> pdf_obj *

    Parameters
    ----------
    page: pdf_page *

    """
    return _mupdf.ppdf_page_resources(page)

def ppdf_page_separations(page):
    """
    ppdf_page_separations(pdf_page * page) -> fz_separations *

    Parameters
    ----------
    page: pdf_page *

    """
    return _mupdf.ppdf_page_separations(page)

def ppdf_page_transform(page, mediabox, ctm):
    """
    ppdf_page_transform(pdf_page * page, fz_rect mediabox, fz_matrix ctm)

    Parameters
    ----------
    page: pdf_page *
    mediabox: fz_rect *
    ctm: fz_matrix *

    """
    return _mupdf.ppdf_page_transform(page, mediabox, ctm)

def ppdf_page_write(doc, mediabox, presources, pcontents):
    """
    ppdf_page_write(pdf_document * doc, fz_rect mediabox, pdf_obj ** presources, fz_buffer ** pcontents) -> fz_device *

    Parameters
    ----------
    doc: pdf_document *
    mediabox: fz_rect
    presources: pdf_obj **
    pcontents: fz_buffer **

    """
    return _mupdf.ppdf_page_write(doc, mediabox, presources, pcontents)

def ppdf_parse_array(doc, f, buf):
    """
    ppdf_parse_array(pdf_document * doc, fz_stream * f, pdf_lexbuf buf) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    f: fz_stream *
    buf: pdf_lexbuf *

    """
    return _mupdf.ppdf_parse_array(doc, f, buf)

def ppdf_parse_date(s):
    """
    ppdf_parse_date(char const * s) -> int64_t

    Parameters
    ----------
    s: char const *

    """
    return _mupdf.ppdf_parse_date(s)

def ppdf_parse_default_appearance(da, font, size, n, color):
    """
    ppdf_parse_default_appearance(char const * da, char const ** font, float * size, int * n, float [4] color)

    Parameters
    ----------
    da: char const *
    font: char const **
    size: float *
    n: int *
    color: float [4]

    """
    return _mupdf.ppdf_parse_default_appearance(da, font, size, n, color)

def ppdf_parse_dict(doc, f, buf):
    """
    ppdf_parse_dict(pdf_document * doc, fz_stream * f, pdf_lexbuf buf) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    f: fz_stream *
    buf: pdf_lexbuf *

    """
    return _mupdf.ppdf_parse_dict(doc, f, buf)

def ppdf_parse_ind_obj(doc, f, num, gen, stm_ofs, try_repair):
    """
    ppdf_parse_ind_obj(pdf_document * doc, fz_stream * f, int * num, int * gen, int64_t * stm_ofs, int * try_repair) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    f: fz_stream *
    num: int *
    gen: int *
    stm_ofs: int64_t *
    try_repair: int *

    """
    return _mupdf.ppdf_parse_ind_obj(doc, f, num, gen, stm_ofs, try_repair)

def ppdf_parse_journal_obj(doc, stm, onum, ostm, newobj):
    """
    ppdf_parse_journal_obj(pdf_document * doc, fz_stream * stm, int * onum, fz_buffer ** ostm, int * newobj) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    stm: fz_stream *
    onum: int *
    ostm: fz_buffer **
    newobj: int *

    """
    return _mupdf.ppdf_parse_journal_obj(doc, stm, onum, ostm, newobj)

def ppdf_parse_link_action(doc, obj, pagenum):
    """
    ppdf_parse_link_action(pdf_document * doc, pdf_obj * obj, int pagenum) -> char *

    Parameters
    ----------
    doc: pdf_document *
    obj: pdf_obj *
    pagenum: int

    """
    return _mupdf.ppdf_parse_link_action(doc, obj, pagenum)

def ppdf_parse_link_dest(doc, obj):
    """
    ppdf_parse_link_dest(pdf_document * doc, pdf_obj * obj) -> char *

    Parameters
    ----------
    doc: pdf_document *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_parse_link_dest(doc, obj)

def ppdf_parse_stm_obj(doc, f, buf):
    """
    ppdf_parse_stm_obj(pdf_document * doc, fz_stream * f, pdf_lexbuf buf) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    f: fz_stream *
    buf: pdf_lexbuf *

    """
    return _mupdf.ppdf_parse_stm_obj(doc, f, buf)

def ppdf_parse_write_options(opts, args):
    """
    ppdf_parse_write_options(pdf_write_options opts, char const * args) -> pdf_write_options

    Parameters
    ----------
    opts: pdf_write_options *
    args: char const *

    """
    return _mupdf.ppdf_parse_write_options(opts, args)

def ppdf_preview_signature_as_display_list(w, h, lang, signer, appearance_flags, graphic, reason, location):
    """
    ppdf_preview_signature_as_display_list(float w, float h, fz_text_language lang, pdf_pkcs7_signer * signer, int appearance_flags, fz_image * graphic, char const * reason, char const * location) -> fz_display_list *

    Parameters
    ----------
    w: float
    h: float
    lang: enum fz_text_language
    signer: pdf_pkcs7_signer *
    appearance_flags: int
    graphic: fz_image *
    reason: char const *
    location: char const *

    """
    return _mupdf.ppdf_preview_signature_as_display_list(w, h, lang, signer, appearance_flags, graphic, reason, location)

def ppdf_preview_signature_as_pixmap(w, h, lang, signer, appearance_flags, graphic, reason, location):
    """
    ppdf_preview_signature_as_pixmap(int w, int h, fz_text_language lang, pdf_pkcs7_signer * signer, int appearance_flags, fz_image * graphic, char const * reason, char const * location) -> fz_pixmap *

    Parameters
    ----------
    w: int
    h: int
    lang: enum fz_text_language
    signer: pdf_pkcs7_signer *
    appearance_flags: int
    graphic: fz_image *
    reason: char const *
    location: char const *

    """
    return _mupdf.ppdf_preview_signature_as_pixmap(w, h, lang, signer, appearance_flags, graphic, reason, location)

def ppdf_print_crypt(out, crypt):
    """
    ppdf_print_crypt(fz_output * out, pdf_crypt * crypt)

    Parameters
    ----------
    out: fz_output *
    crypt: pdf_crypt *

    """
    return _mupdf.ppdf_print_crypt(out, crypt)

def ppdf_print_default_appearance(buf, nbuf, font, size, n, color):
    """
    ppdf_print_default_appearance(char * buf, int nbuf, char const * font, float size, int n, float const * color)

    Parameters
    ----------
    buf: char *
    nbuf: int
    font: char const *
    size: float
    n: int
    color: float const *

    """
    return _mupdf.ppdf_print_default_appearance(buf, nbuf, font, size, n, color)

def ppdf_print_encrypted_obj(out, obj, tight, ascii, crypt, num, gen):
    """
    ppdf_print_encrypted_obj(fz_output * out, pdf_obj * obj, int tight, int ascii, pdf_crypt * crypt, int num, int gen)

    Parameters
    ----------
    out: fz_output *
    obj: pdf_obj *
    tight: int
    ascii: int
    crypt: pdf_crypt *
    num: int
    gen: int

    """
    return _mupdf.ppdf_print_encrypted_obj(out, obj, tight, ascii, crypt, num, gen)

def ppdf_print_font(out, fontdesc):
    """
    ppdf_print_font(fz_output * out, pdf_font_desc fontdesc)

    Parameters
    ----------
    out: fz_output *
    fontdesc: pdf_font_desc *

    """
    return _mupdf.ppdf_print_font(out, fontdesc)

def ppdf_print_obj(out, obj, tight, ascii):
    """
    ppdf_print_obj(fz_output * out, pdf_obj * obj, int tight, int ascii)

    Parameters
    ----------
    out: fz_output *
    obj: pdf_obj *
    tight: int
    ascii: int

    """
    return _mupdf.ppdf_print_obj(out, obj, tight, ascii)

def ppdf_process_annot(proc, annot, cookie):
    """
    ppdf_process_annot(pdf_processor * proc, pdf_annot * annot, fz_cookie cookie)

    Parameters
    ----------
    proc: pdf_processor *
    annot: pdf_annot *
    cookie: fz_cookie *

    """
    return _mupdf.ppdf_process_annot(proc, annot, cookie)

def ppdf_process_contents(proc, doc, obj, res, cookie):
    """
    ppdf_process_contents(pdf_processor * proc, pdf_document * doc, pdf_obj * obj, pdf_obj * res, fz_cookie cookie)

    Parameters
    ----------
    proc: pdf_processor *
    doc: pdf_document *
    obj: pdf_obj *
    res: pdf_obj *
    cookie: fz_cookie *

    """
    return _mupdf.ppdf_process_contents(proc, doc, obj, res, cookie)

def ppdf_process_glyph(proc, doc, resources, contents):
    """
    ppdf_process_glyph(pdf_processor * proc, pdf_document * doc, pdf_obj * resources, fz_buffer contents)

    Parameters
    ----------
    proc: pdf_processor *
    doc: pdf_document *
    resources: pdf_obj *
    contents: fz_buffer *

    """
    return _mupdf.ppdf_process_glyph(proc, doc, resources, contents)

def ppdf_progressive_advance(doc, pagenum):
    """
    ppdf_progressive_advance(pdf_document * doc, int pagenum) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    pagenum: int

    """
    return _mupdf.ppdf_progressive_advance(doc, pagenum)

def ppdf_purge_local_font_resources(doc):
    """
    ppdf_purge_local_font_resources(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_purge_local_font_resources(doc)

def ppdf_purge_locals_from_store(doc):
    """
    ppdf_purge_locals_from_store(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_purge_locals_from_store(doc)

def ppdf_read_journal(doc, stm):
    """
    ppdf_read_journal(pdf_document * doc, fz_stream * stm)

    Parameters
    ----------
    doc: pdf_document *
    stm: fz_stream *

    """
    return _mupdf.ppdf_read_journal(doc, stm)

def ppdf_read_ocg(doc):
    """
    ppdf_read_ocg(pdf_document * doc) -> pdf_ocg_descriptor *

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_read_ocg(doc)

def ppdf_redact_page(doc, page, opts):
    """
    ppdf_redact_page(pdf_document * doc, pdf_page * page, pdf_redact_options opts) -> int

    Parameters
    ----------
    doc: pdf_document *
    page: pdf_page *
    opts: pdf_redact_options *

    """
    return _mupdf.ppdf_redact_page(doc, page, opts)

def ppdf_redo(doc):
    """
    ppdf_redo(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_redo(doc)

def ppdf_remove_item(drop, key):
    """
    ppdf_remove_item(fz_store_drop_fn * drop, pdf_obj * key)

    Parameters
    ----------
    drop: fz_store_drop_fn *
    key: pdf_obj *

    """
    return _mupdf.ppdf_remove_item(drop, key)

def ppdf_repair_obj(doc, buf, stmofsp, stmlenp, encrypt, id, page, tmpofs, root):
    """
    ppdf_repair_obj(pdf_document * doc, pdf_lexbuf buf, int64_t * stmofsp, int * stmlenp, pdf_obj ** encrypt, pdf_obj ** id, pdf_obj ** page, int64_t * tmpofs, pdf_obj ** root) -> int

    Parameters
    ----------
    doc: pdf_document *
    buf: pdf_lexbuf *
    stmofsp: int64_t *
    stmlenp: int *
    encrypt: pdf_obj **
    id: pdf_obj **
    page: pdf_obj **
    tmpofs: int64_t *
    root: pdf_obj **

    """
    return _mupdf.ppdf_repair_obj(doc, buf, stmofsp, stmlenp, encrypt, id, page, tmpofs, root)

def ppdf_repair_obj_stms(doc):
    """
    ppdf_repair_obj_stms(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_repair_obj_stms(doc)

def ppdf_repair_trailer(doc):
    """
    ppdf_repair_trailer(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_repair_trailer(doc)

def ppdf_repair_xref(doc):
    """
    ppdf_repair_xref(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_repair_xref(doc)

def ppdf_replace_xref(doc, entries, n):
    """
    ppdf_replace_xref(pdf_document * doc, pdf_xref_entry entries, int n)

    Parameters
    ----------
    doc: pdf_document *
    entries: pdf_xref_entry *
    n: int

    """
    return _mupdf.ppdf_replace_xref(doc, entries, n)

def ppdf_reset_form(doc, fields, exclude):
    """
    ppdf_reset_form(pdf_document * doc, pdf_obj * fields, int exclude)

    Parameters
    ----------
    doc: pdf_document *
    fields: pdf_obj *
    exclude: int

    """
    return _mupdf.ppdf_reset_form(doc, fields, exclude)

def ppdf_resolve_indirect(ref):
    """
    ppdf_resolve_indirect(pdf_obj * ref) -> pdf_obj *

    Parameters
    ----------
    ref: pdf_obj *

    """
    return _mupdf.ppdf_resolve_indirect(ref)

def ppdf_resolve_indirect_chain(ref):
    """
    ppdf_resolve_indirect_chain(pdf_obj * ref) -> pdf_obj *

    Parameters
    ----------
    ref: pdf_obj *

    """
    return _mupdf.ppdf_resolve_indirect_chain(ref)

def ppdf_resolve_link(doc, uri, xp, yp):
    """
    ppdf_resolve_link(pdf_document * doc, char const * uri, float * xp, float * yp) -> int

    Parameters
    ----------
    doc: pdf_document *
    uri: char const *
    xp: float *
    yp: float *

    """
    return _mupdf.ppdf_resolve_link(doc, uri, xp, yp)

def ppdf_run_annot(annot, dev, ctm, cookie):
    """
    ppdf_run_annot(pdf_annot * annot, fz_device * dev, fz_matrix ctm, fz_cookie cookie)

    Parameters
    ----------
    annot: pdf_annot *
    dev: fz_device *
    ctm: fz_matrix
    cookie: fz_cookie *

    """
    return _mupdf.ppdf_run_annot(annot, dev, ctm, cookie)

def ppdf_run_glyph(doc, resources, contents, dev, ctm, gstate, default_cs):
    """
    ppdf_run_glyph(pdf_document * doc, pdf_obj * resources, fz_buffer contents, fz_device * dev, fz_matrix ctm, void * gstate, fz_default_colorspaces default_cs)

    Parameters
    ----------
    doc: pdf_document *
    resources: pdf_obj *
    contents: fz_buffer *
    dev: fz_device *
    ctm: fz_matrix
    gstate: void *
    default_cs: fz_default_colorspaces *

    """
    return _mupdf.ppdf_run_glyph(doc, resources, contents, dev, ctm, gstate, default_cs)

def ppdf_run_page(page, dev, ctm, cookie):
    """
    ppdf_run_page(pdf_page * page, fz_device * dev, fz_matrix ctm, fz_cookie cookie)

    Parameters
    ----------
    page: pdf_page *
    dev: fz_device *
    ctm: fz_matrix
    cookie: fz_cookie *

    """
    return _mupdf.ppdf_run_page(page, dev, ctm, cookie)

def ppdf_run_page_annots(page, dev, ctm, cookie):
    """
    ppdf_run_page_annots(pdf_page * page, fz_device * dev, fz_matrix ctm, fz_cookie cookie)

    Parameters
    ----------
    page: pdf_page *
    dev: fz_device *
    ctm: fz_matrix
    cookie: fz_cookie *

    """
    return _mupdf.ppdf_run_page_annots(page, dev, ctm, cookie)

def ppdf_run_page_annots_with_usage(page, dev, ctm, usage, cookie):
    """
    ppdf_run_page_annots_with_usage(pdf_page * page, fz_device * dev, fz_matrix ctm, char const * usage, fz_cookie cookie)

    Parameters
    ----------
    page: pdf_page *
    dev: fz_device *
    ctm: fz_matrix
    usage: char const *
    cookie: fz_cookie *

    """
    return _mupdf.ppdf_run_page_annots_with_usage(page, dev, ctm, usage, cookie)

def ppdf_run_page_contents(page, dev, ctm, cookie):
    """
    ppdf_run_page_contents(pdf_page * page, fz_device * dev, fz_matrix ctm, fz_cookie cookie)

    Parameters
    ----------
    page: pdf_page *
    dev: fz_device *
    ctm: fz_matrix
    cookie: fz_cookie *

    """
    return _mupdf.ppdf_run_page_contents(page, dev, ctm, cookie)

def ppdf_run_page_contents_with_usage(page, dev, ctm, usage, cookie):
    """
    ppdf_run_page_contents_with_usage(pdf_page * page, fz_device * dev, fz_matrix ctm, char const * usage, fz_cookie cookie)

    Parameters
    ----------
    page: pdf_page *
    dev: fz_device *
    ctm: fz_matrix
    usage: char const *
    cookie: fz_cookie *

    """
    return _mupdf.ppdf_run_page_contents_with_usage(page, dev, ctm, usage, cookie)

def ppdf_run_page_widgets(page, dev, ctm, cookie):
    """
    ppdf_run_page_widgets(pdf_page * page, fz_device * dev, fz_matrix ctm, fz_cookie cookie)

    Parameters
    ----------
    page: pdf_page *
    dev: fz_device *
    ctm: fz_matrix
    cookie: fz_cookie *

    """
    return _mupdf.ppdf_run_page_widgets(page, dev, ctm, cookie)

def ppdf_run_page_widgets_with_usage(page, dev, ctm, usage, cookie):
    """
    ppdf_run_page_widgets_with_usage(pdf_page * page, fz_device * dev, fz_matrix ctm, char const * usage, fz_cookie cookie)

    Parameters
    ----------
    page: pdf_page *
    dev: fz_device *
    ctm: fz_matrix
    usage: char const *
    cookie: fz_cookie *

    """
    return _mupdf.ppdf_run_page_widgets_with_usage(page, dev, ctm, usage, cookie)

def ppdf_run_page_with_usage(page, dev, ctm, usage, cookie):
    """
    ppdf_run_page_with_usage(pdf_page * page, fz_device * dev, fz_matrix ctm, char const * usage, fz_cookie cookie)

    Parameters
    ----------
    page: pdf_page *
    dev: fz_device *
    ctm: fz_matrix
    usage: char const *
    cookie: fz_cookie *

    """
    return _mupdf.ppdf_run_page_with_usage(page, dev, ctm, usage, cookie)

def ppdf_save_document(doc, filename, opts):
    """
    ppdf_save_document(pdf_document * doc, char const * filename, pdf_write_options opts)

    Parameters
    ----------
    doc: pdf_document *
    filename: char const *
    opts: pdf_write_options const *

    """
    return _mupdf.ppdf_save_document(doc, filename, opts)

def ppdf_save_journal(doc, filename):
    """
    ppdf_save_journal(pdf_document * doc, char const * filename)

    Parameters
    ----------
    doc: pdf_document *
    filename: char const *

    """
    return _mupdf.ppdf_save_journal(doc, filename)

def ppdf_save_snapshot(doc, filename):
    """
    ppdf_save_snapshot(pdf_document * doc, char const * filename)

    Parameters
    ----------
    doc: pdf_document *
    filename: char const *

    """
    return _mupdf.ppdf_save_snapshot(doc, filename)

def ppdf_select_layer_config(doc, config_num):
    """
    ppdf_select_layer_config(pdf_document * doc, int config_num)

    Parameters
    ----------
    doc: pdf_document *
    config_num: int

    """
    return _mupdf.ppdf_select_layer_config(doc, config_num)

def ppdf_select_layer_config_ui(doc, ui):
    """
    ppdf_select_layer_config_ui(pdf_document * doc, int ui)

    Parameters
    ----------
    doc: pdf_document *
    ui: int

    """
    return _mupdf.ppdf_select_layer_config_ui(doc, ui)

def ppdf_serialise_journal(doc, out):
    """
    ppdf_serialise_journal(pdf_document * doc, fz_output * out)

    Parameters
    ----------
    doc: pdf_document *
    out: fz_output *

    """
    return _mupdf.ppdf_serialise_journal(doc, out)

def ppdf_set_annot_active(annot, active):
    """
    ppdf_set_annot_active(pdf_annot * annot, int active)

    Parameters
    ----------
    annot: pdf_annot *
    active: int

    """
    return _mupdf.ppdf_set_annot_active(annot, active)

def ppdf_set_annot_appearance(annot, appearance, state, ctm, bbox, res, contents):
    """
    ppdf_set_annot_appearance(pdf_annot * annot, char const * appearance, char const * state, fz_matrix ctm, fz_rect bbox, pdf_obj * res, fz_buffer contents)

    Parameters
    ----------
    annot: pdf_annot *
    appearance: char const *
    state: char const *
    ctm: fz_matrix
    bbox: fz_rect
    res: pdf_obj *
    contents: fz_buffer *

    """
    return _mupdf.ppdf_set_annot_appearance(annot, appearance, state, ctm, bbox, res, contents)

def ppdf_set_annot_appearance_from_display_list(annot, appearance, state, ctm, list):
    """
    ppdf_set_annot_appearance_from_display_list(pdf_annot * annot, char const * appearance, char const * state, fz_matrix ctm, fz_display_list * list)

    Parameters
    ----------
    annot: pdf_annot *
    appearance: char const *
    state: char const *
    ctm: fz_matrix
    list: fz_display_list *

    """
    return _mupdf.ppdf_set_annot_appearance_from_display_list(annot, appearance, state, ctm, list)

def ppdf_set_annot_author(annot, author):
    """
    ppdf_set_annot_author(pdf_annot * annot, char const * author)

    Parameters
    ----------
    annot: pdf_annot *
    author: char const *

    """
    return _mupdf.ppdf_set_annot_author(annot, author)

def ppdf_set_annot_border(annot, width):
    """
    ppdf_set_annot_border(pdf_annot * annot, float width)

    Parameters
    ----------
    annot: pdf_annot *
    width: float

    """
    return _mupdf.ppdf_set_annot_border(annot, width)

def ppdf_set_annot_color(annot, n, color):
    """
    ppdf_set_annot_color(pdf_annot * annot, int n, float const * color)

    Parameters
    ----------
    annot: pdf_annot *
    n: int
    color: float const *

    """
    return _mupdf.ppdf_set_annot_color(annot, n, color)

def ppdf_set_annot_contents(annot, text):
    """
    ppdf_set_annot_contents(pdf_annot * annot, char const * text)

    Parameters
    ----------
    annot: pdf_annot *
    text: char const *

    """
    return _mupdf.ppdf_set_annot_contents(annot, text)

def ppdf_set_annot_creation_date(annot, time):
    """
    ppdf_set_annot_creation_date(pdf_annot * annot, int64_t time)

    Parameters
    ----------
    annot: pdf_annot *
    time: int64_t

    """
    return _mupdf.ppdf_set_annot_creation_date(annot, time)

def ppdf_set_annot_default_appearance(annot, font, size, n, color):
    """
    ppdf_set_annot_default_appearance(pdf_annot * annot, char const * font, float size, int n, float const * color)

    Parameters
    ----------
    annot: pdf_annot *
    font: char const *
    size: float
    n: int
    color: float const *

    """
    return _mupdf.ppdf_set_annot_default_appearance(annot, font, size, n, color)

def ppdf_set_annot_field_value(doc, widget, text, ignore_trigger_events):
    """
    ppdf_set_annot_field_value(pdf_document * doc, pdf_annot * widget, char const * text, int ignore_trigger_events) -> int

    Parameters
    ----------
    doc: pdf_document *
    widget: pdf_annot *
    text: char const *
    ignore_trigger_events: int

    """
    return _mupdf.ppdf_set_annot_field_value(doc, widget, text, ignore_trigger_events)

def ppdf_set_annot_flags(annot, flags):
    """
    ppdf_set_annot_flags(pdf_annot * annot, int flags)

    Parameters
    ----------
    annot: pdf_annot *
    flags: int

    """
    return _mupdf.ppdf_set_annot_flags(annot, flags)

def ppdf_set_annot_hot(annot, hot):
    """
    ppdf_set_annot_hot(pdf_annot * annot, int hot)

    Parameters
    ----------
    annot: pdf_annot *
    hot: int

    """
    return _mupdf.ppdf_set_annot_hot(annot, hot)

def ppdf_set_annot_icon_name(annot, name):
    """
    ppdf_set_annot_icon_name(pdf_annot * annot, char const * name)

    Parameters
    ----------
    annot: pdf_annot *
    name: char const *

    """
    return _mupdf.ppdf_set_annot_icon_name(annot, name)

def ppdf_set_annot_ink_list(annot, n, count, v):
    """
    ppdf_set_annot_ink_list(pdf_annot * annot, int n, int const * count, fz_point v)

    Parameters
    ----------
    annot: pdf_annot *
    n: int
    count: int const *
    v: fz_point const *

    """
    return _mupdf.ppdf_set_annot_ink_list(annot, n, count, v)

def ppdf_set_annot_interior_color(annot, n, color):
    """
    ppdf_set_annot_interior_color(pdf_annot * annot, int n, float const * color)

    Parameters
    ----------
    annot: pdf_annot *
    n: int
    color: float const *

    """
    return _mupdf.ppdf_set_annot_interior_color(annot, n, color)

def ppdf_set_annot_is_open(annot, is_open):
    """
    ppdf_set_annot_is_open(pdf_annot * annot, int is_open)

    Parameters
    ----------
    annot: pdf_annot *
    is_open: int

    """
    return _mupdf.ppdf_set_annot_is_open(annot, is_open)

def ppdf_set_annot_language(annot, lang):
    """
    ppdf_set_annot_language(pdf_annot * annot, fz_text_language lang)

    Parameters
    ----------
    annot: pdf_annot *
    lang: enum fz_text_language

    """
    return _mupdf.ppdf_set_annot_language(annot, lang)

def ppdf_set_annot_line(annot, a, b):
    """
    ppdf_set_annot_line(pdf_annot * annot, fz_point a, fz_point b)

    Parameters
    ----------
    annot: pdf_annot *
    a: fz_point
    b: fz_point

    """
    return _mupdf.ppdf_set_annot_line(annot, a, b)

def ppdf_set_annot_line_end_style(annot, e):
    """
    ppdf_set_annot_line_end_style(pdf_annot * annot, enum pdf_line_ending e)

    Parameters
    ----------
    annot: pdf_annot *
    e: enum enum pdf_line_ending

    """
    return _mupdf.ppdf_set_annot_line_end_style(annot, e)

def ppdf_set_annot_line_ending_styles(annot, start_style, end_style):
    """
    ppdf_set_annot_line_ending_styles(pdf_annot * annot, enum pdf_line_ending start_style, enum pdf_line_ending end_style)

    Parameters
    ----------
    annot: pdf_annot *
    start_style: enum enum pdf_line_ending
    end_style: enum enum pdf_line_ending

    """
    return _mupdf.ppdf_set_annot_line_ending_styles(annot, start_style, end_style)

def ppdf_set_annot_line_start_style(annot, s):
    """
    ppdf_set_annot_line_start_style(pdf_annot * annot, enum pdf_line_ending s)

    Parameters
    ----------
    annot: pdf_annot *
    s: enum enum pdf_line_ending

    """
    return _mupdf.ppdf_set_annot_line_start_style(annot, s)

def ppdf_set_annot_modification_date(annot, time):
    """
    ppdf_set_annot_modification_date(pdf_annot * annot, int64_t time)

    Parameters
    ----------
    annot: pdf_annot *
    time: int64_t

    """
    return _mupdf.ppdf_set_annot_modification_date(annot, time)

def ppdf_set_annot_opacity(annot, opacity):
    """
    ppdf_set_annot_opacity(pdf_annot * annot, float opacity)

    Parameters
    ----------
    annot: pdf_annot *
    opacity: float

    """
    return _mupdf.ppdf_set_annot_opacity(annot, opacity)

def ppdf_set_annot_popup(annot, rect):
    """
    ppdf_set_annot_popup(pdf_annot * annot, fz_rect rect)

    Parameters
    ----------
    annot: pdf_annot *
    rect: fz_rect

    """
    return _mupdf.ppdf_set_annot_popup(annot, rect)

def ppdf_set_annot_quad_points(annot, n, qv):
    """
    ppdf_set_annot_quad_points(pdf_annot * annot, int n, fz_quad qv)

    Parameters
    ----------
    annot: pdf_annot *
    n: int
    qv: fz_quad const *

    """
    return _mupdf.ppdf_set_annot_quad_points(annot, n, qv)

def ppdf_set_annot_quadding(annot, q):
    """
    ppdf_set_annot_quadding(pdf_annot * annot, int q)

    Parameters
    ----------
    annot: pdf_annot *
    q: int

    """
    return _mupdf.ppdf_set_annot_quadding(annot, q)

def ppdf_set_annot_rect(annot, rect):
    """
    ppdf_set_annot_rect(pdf_annot * annot, fz_rect rect)

    Parameters
    ----------
    annot: pdf_annot *
    rect: fz_rect

    """
    return _mupdf.ppdf_set_annot_rect(annot, rect)

def ppdf_set_annot_resynthesised(annot):
    """
    ppdf_set_annot_resynthesised(pdf_annot * annot)

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_set_annot_resynthesised(annot)

def ppdf_set_annot_vertex(annot, i, p):
    """
    ppdf_set_annot_vertex(pdf_annot * annot, int i, fz_point p)

    Parameters
    ----------
    annot: pdf_annot *
    i: int
    p: fz_point

    """
    return _mupdf.ppdf_set_annot_vertex(annot, i, p)

def ppdf_set_annot_vertices(annot, n, v):
    """
    ppdf_set_annot_vertices(pdf_annot * annot, int n, fz_point v)

    Parameters
    ----------
    annot: pdf_annot *
    n: int
    v: fz_point const *

    """
    return _mupdf.ppdf_set_annot_vertices(annot, n, v)

def ppdf_set_choice_field_value(widget, value):
    """
    ppdf_set_choice_field_value(pdf_annot * widget, char const * value) -> int

    Parameters
    ----------
    widget: pdf_annot *
    value: char const *

    """
    return _mupdf.ppdf_set_choice_field_value(widget, value)

def ppdf_set_cmap_wmode(cmap, wmode):
    """
    ppdf_set_cmap_wmode(pdf_cmap cmap, int wmode)

    Parameters
    ----------
    cmap: pdf_cmap *
    wmode: int

    """
    return _mupdf.ppdf_set_cmap_wmode(cmap, wmode)

def ppdf_set_default_hmtx(font, w):
    """
    ppdf_set_default_hmtx(pdf_font_desc font, int w)

    Parameters
    ----------
    font: pdf_font_desc *
    w: int

    """
    return _mupdf.ppdf_set_default_hmtx(font, w)

def ppdf_set_default_vmtx(font, y, w):
    """
    ppdf_set_default_vmtx(pdf_font_desc font, int y, int w)

    Parameters
    ----------
    font: pdf_font_desc *
    y: int
    w: int

    """
    return _mupdf.ppdf_set_default_vmtx(font, y, w)

def ppdf_set_doc_event_callback(doc, event_cb, free_event_data_cb, data):
    """
    ppdf_set_doc_event_callback(pdf_document * doc, pdf_doc_event_cb * event_cb, pdf_free_doc_event_data_cb * free_event_data_cb, void * data)

    Parameters
    ----------
    doc: pdf_document *
    event_cb: pdf_doc_event_cb *
    free_event_data_cb: pdf_free_doc_event_data_cb *
    data: void *

    """
    return _mupdf.ppdf_set_doc_event_callback(doc, event_cb, free_event_data_cb, data)

def ppdf_set_document_language(doc, lang):
    """
    ppdf_set_document_language(pdf_document * doc, fz_text_language lang)

    Parameters
    ----------
    doc: pdf_document *
    lang: enum fz_text_language

    """
    return _mupdf.ppdf_set_document_language(doc, lang)

def ppdf_set_field_value(doc, field, text, ignore_trigger_events):
    """
    ppdf_set_field_value(pdf_document * doc, pdf_obj * field, char const * text, int ignore_trigger_events) -> int

    Parameters
    ----------
    doc: pdf_document *
    field: pdf_obj *
    text: char const *
    ignore_trigger_events: int

    """
    return _mupdf.ppdf_set_field_value(doc, field, text, ignore_trigger_events)

def ppdf_set_font_wmode(font, wmode):
    """
    ppdf_set_font_wmode(pdf_font_desc font, int wmode)

    Parameters
    ----------
    font: pdf_font_desc *
    wmode: int

    """
    return _mupdf.ppdf_set_font_wmode(font, wmode)

def ppdf_set_int(obj, i):
    """
    ppdf_set_int(pdf_obj * obj, int64_t i)

    Parameters
    ----------
    obj: pdf_obj *
    i: int64_t

    """
    return _mupdf.ppdf_set_int(obj, i)

def ppdf_set_layer_config_as_default(doc):
    """
    ppdf_set_layer_config_as_default(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_set_layer_config_as_default(doc)

def ppdf_set_obj_memo(obj, bit, memo):
    """
    ppdf_set_obj_memo(pdf_obj * obj, int bit, int memo)

    Parameters
    ----------
    obj: pdf_obj *
    bit: int
    memo: int

    """
    return _mupdf.ppdf_set_obj_memo(obj, bit, memo)

def ppdf_set_obj_parent(obj, num):
    """
    ppdf_set_obj_parent(pdf_obj * obj, int num)

    Parameters
    ----------
    obj: pdf_obj *
    num: int

    """
    return _mupdf.ppdf_set_obj_parent(obj, num)

def ppdf_set_populating_xref_trailer(doc, trailer):
    """
    ppdf_set_populating_xref_trailer(pdf_document * doc, pdf_obj * trailer)

    Parameters
    ----------
    doc: pdf_document *
    trailer: pdf_obj *

    """
    return _mupdf.ppdf_set_populating_xref_trailer(doc, trailer)

def ppdf_set_str_len(obj, newlen):
    """
    ppdf_set_str_len(pdf_obj * obj, size_t newlen)

    Parameters
    ----------
    obj: pdf_obj *
    newlen: size_t

    """
    return _mupdf.ppdf_set_str_len(obj, newlen)

def ppdf_set_text_field_value(widget, value):
    """
    ppdf_set_text_field_value(pdf_annot * widget, char const * value) -> int

    Parameters
    ----------
    widget: pdf_annot *
    value: char const *

    """
    return _mupdf.ppdf_set_text_field_value(widget, value)

def ppdf_set_usecmap(cmap, usecmap):
    """
    ppdf_set_usecmap(pdf_cmap cmap, pdf_cmap usecmap)

    Parameters
    ----------
    cmap: pdf_cmap *
    usecmap: pdf_cmap *

    """
    return _mupdf.ppdf_set_usecmap(cmap, usecmap)

def ppdf_set_widget_editing_state(widget, editing):
    """
    ppdf_set_widget_editing_state(pdf_annot * widget, int editing)

    Parameters
    ----------
    widget: pdf_annot *
    editing: int

    """
    return _mupdf.ppdf_set_widget_editing_state(widget, editing)

def ppdf_sign_signature(widget, signer, appearance_flags, graphic, reason, location):
    """
    ppdf_sign_signature(pdf_annot * widget, pdf_pkcs7_signer * signer, int appearance_flags, fz_image * graphic, char const * reason, char const * location)

    Parameters
    ----------
    widget: pdf_annot *
    signer: pdf_pkcs7_signer *
    appearance_flags: int
    graphic: fz_image *
    reason: char const *
    location: char const *

    """
    return _mupdf.ppdf_sign_signature(widget, signer, appearance_flags, graphic, reason, location)

def ppdf_sign_signature_with_appearance(widget, signer, date, disp_list):
    """
    ppdf_sign_signature_with_appearance(pdf_annot * widget, pdf_pkcs7_signer * signer, int64_t date, fz_display_list * disp_list)

    Parameters
    ----------
    widget: pdf_annot *
    signer: pdf_pkcs7_signer *
    date: int64_t
    disp_list: fz_display_list *

    """
    return _mupdf.ppdf_sign_signature_with_appearance(widget, signer, date, disp_list)

def ppdf_signature_appearance_signed(rect, lang, img, left_text, right_text, include_logo):
    """
    ppdf_signature_appearance_signed(fz_rect rect, fz_text_language lang, fz_image * img, char const * left_text, char const * right_text, int include_logo) -> fz_display_list *

    Parameters
    ----------
    rect: fz_rect
    lang: enum fz_text_language
    img: fz_image *
    left_text: char const *
    right_text: char const *
    include_logo: int

    """
    return _mupdf.ppdf_signature_appearance_signed(rect, lang, img, left_text, right_text, include_logo)

def ppdf_signature_appearance_unsigned(rect, lang):
    """
    ppdf_signature_appearance_unsigned(fz_rect rect, fz_text_language lang) -> fz_display_list *

    Parameters
    ----------
    rect: fz_rect
    lang: enum fz_text_language

    """
    return _mupdf.ppdf_signature_appearance_unsigned(rect, lang)

def ppdf_signature_byte_range(doc, signature, byte_range):
    """
    ppdf_signature_byte_range(pdf_document * doc, pdf_obj * signature, fz_range byte_range) -> int

    Parameters
    ----------
    doc: pdf_document *
    signature: pdf_obj *
    byte_range: fz_range *

    """
    return _mupdf.ppdf_signature_byte_range(doc, signature, byte_range)

def ppdf_signature_contents(doc, signature, contents):
    """
    ppdf_signature_contents(pdf_document * doc, pdf_obj * signature, char ** contents) -> size_t

    Parameters
    ----------
    doc: pdf_document *
    signature: pdf_obj *
    contents: char **

    """
    return _mupdf.ppdf_signature_contents(doc, signature, contents)

def ppdf_signature_drop_distinguished_name(name):
    """
    ppdf_signature_drop_distinguished_name(pdf_pkcs7_distinguished_name name)

    Parameters
    ----------
    name: pdf_pkcs7_distinguished_name *

    """
    return _mupdf.ppdf_signature_drop_distinguished_name(name)

def ppdf_signature_error_description(err):
    """
    ppdf_signature_error_description(pdf_signature_error err) -> char *

    Parameters
    ----------
    err: enum pdf_signature_error

    """
    return _mupdf.ppdf_signature_error_description(err)

def ppdf_signature_format_distinguished_name(name):
    """
    ppdf_signature_format_distinguished_name(pdf_pkcs7_distinguished_name name) -> char *

    Parameters
    ----------
    name: pdf_pkcs7_distinguished_name *

    """
    return _mupdf.ppdf_signature_format_distinguished_name(name)

def ppdf_signature_get_signatory(verifier, doc, signature):
    """
    ppdf_signature_get_signatory(pdf_pkcs7_verifier * verifier, pdf_document * doc, pdf_obj * signature) -> pdf_pkcs7_distinguished_name

    Parameters
    ----------
    verifier: pdf_pkcs7_verifier *
    doc: pdf_document *
    signature: pdf_obj *

    """
    return _mupdf.ppdf_signature_get_signatory(verifier, doc, signature)

def ppdf_signature_get_widget_signatory(verifier, widget):
    """
    ppdf_signature_get_widget_signatory(pdf_pkcs7_verifier * verifier, pdf_annot * widget) -> pdf_pkcs7_distinguished_name

    Parameters
    ----------
    verifier: pdf_pkcs7_verifier *
    widget: pdf_annot *

    """
    return _mupdf.ppdf_signature_get_widget_signatory(verifier, widget)

def ppdf_signature_hash_bytes(doc, signature):
    """
    ppdf_signature_hash_bytes(pdf_document * doc, pdf_obj * signature) -> fz_stream *

    Parameters
    ----------
    doc: pdf_document *
    signature: pdf_obj *

    """
    return _mupdf.ppdf_signature_hash_bytes(doc, signature)

def ppdf_signature_incremental_change_since_signing(doc, signature):
    """
    ppdf_signature_incremental_change_since_signing(pdf_document * doc, pdf_obj * signature) -> int

    Parameters
    ----------
    doc: pdf_document *
    signature: pdf_obj *

    """
    return _mupdf.ppdf_signature_incremental_change_since_signing(doc, signature)

def ppdf_signature_info(name, dn, reason, location, date, include_labels):
    """
    ppdf_signature_info(char const * name, pdf_pkcs7_distinguished_name dn, char const * reason, char const * location, int64_t date, int include_labels) -> char *

    Parameters
    ----------
    name: char const *
    dn: pdf_pkcs7_distinguished_name *
    reason: char const *
    location: char const *
    date: int64_t
    include_labels: int

    """
    return _mupdf.ppdf_signature_info(name, dn, reason, location, date, include_labels)

def ppdf_signature_is_signed(doc, field):
    """
    ppdf_signature_is_signed(pdf_document * doc, pdf_obj * field) -> int

    Parameters
    ----------
    doc: pdf_document *
    field: pdf_obj *

    """
    return _mupdf.ppdf_signature_is_signed(doc, field)

def ppdf_signature_set_value(doc, field, signer, stime):
    """
    ppdf_signature_set_value(pdf_document * doc, pdf_obj * field, pdf_pkcs7_signer * signer, int64_t stime)

    Parameters
    ----------
    doc: pdf_document *
    field: pdf_obj *
    signer: pdf_pkcs7_signer *
    stime: int64_t

    """
    return _mupdf.ppdf_signature_set_value(doc, field, signer, stime)

def ppdf_sort_cmap(cmap):
    """
    ppdf_sort_cmap(pdf_cmap cmap)

    Parameters
    ----------
    cmap: pdf_cmap *

    """
    return _mupdf.ppdf_sort_cmap(cmap)

def ppdf_sort_dict(dict):
    """
    ppdf_sort_dict(pdf_obj * dict)

    Parameters
    ----------
    dict: pdf_obj *

    """
    return _mupdf.ppdf_sort_dict(dict)

def ppdf_specifics(doc):
    """
    ppdf_specifics(fz_document * doc) -> pdf_document *

    Parameters
    ----------
    doc: fz_document *

    """
    return _mupdf.ppdf_specifics(doc)

def ppdf_sprint_obj(buf, cap, len, obj, tight, ascii):
    """
    ppdf_sprint_obj(char * buf, size_t cap, size_t * len, pdf_obj * obj, int tight, int ascii) -> char *

    Parameters
    ----------
    buf: char *
    cap: size_t
    len: size_t *
    obj: pdf_obj *
    tight: int
    ascii: int

    """
    return _mupdf.ppdf_sprint_obj(buf, cap, len, obj, tight, ascii)

def ppdf_store_item(key, val, itemsize):
    """
    ppdf_store_item(pdf_obj * key, void * val, size_t itemsize)

    Parameters
    ----------
    key: pdf_obj *
    val: void *
    itemsize: size_t

    """
    return _mupdf.ppdf_store_item(key, val, itemsize)

def ppdf_string_from_annot_type(type):
    """
    ppdf_string_from_annot_type(enum pdf_annot_type type) -> char const *

    Parameters
    ----------
    type: enum enum pdf_annot_type

    """
    return _mupdf.ppdf_string_from_annot_type(type)

def ppdf_string_from_line_ending(end):
    """
    ppdf_string_from_line_ending(enum pdf_line_ending end) -> char const *

    Parameters
    ----------
    end: enum enum pdf_line_ending

    """
    return _mupdf.ppdf_string_from_line_ending(end)

def ppdf_text_widget_format(tw):
    """
    ppdf_text_widget_format(pdf_annot * tw) -> int

    Parameters
    ----------
    tw: pdf_annot *

    """
    return _mupdf.ppdf_text_widget_format(tw)

def ppdf_text_widget_max_len(tw):
    """
    ppdf_text_widget_max_len(pdf_annot * tw) -> int

    Parameters
    ----------
    tw: pdf_annot *

    """
    return _mupdf.ppdf_text_widget_max_len(tw)

def ppdf_to_bool(obj):
    """
    ppdf_to_bool(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_to_bool(obj)

def ppdf_to_date(time):
    """
    ppdf_to_date(pdf_obj * time) -> int64_t

    Parameters
    ----------
    time: pdf_obj *

    """
    return _mupdf.ppdf_to_date(time)

def ppdf_to_gen(obj):
    """
    ppdf_to_gen(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_to_gen(obj)

def ppdf_to_int(obj):
    """
    ppdf_to_int(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_to_int(obj)

def ppdf_to_int64(obj):
    """
    ppdf_to_int64(pdf_obj * obj) -> int64_t

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_to_int64(obj)

def ppdf_to_matrix(array):
    """
    ppdf_to_matrix(pdf_obj * array) -> fz_matrix

    Parameters
    ----------
    array: pdf_obj *

    """
    return _mupdf.ppdf_to_matrix(array)

def ppdf_to_name(obj):
    """
    ppdf_to_name(pdf_obj * obj) -> char const *

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_to_name(obj)

def ppdf_to_num(obj):
    """
    ppdf_to_num(pdf_obj * obj) -> int

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_to_num(obj)

def ppdf_to_quad(array, offset):
    """
    ppdf_to_quad(pdf_obj * array, int offset) -> fz_quad

    Parameters
    ----------
    array: pdf_obj *
    offset: int

    """
    return _mupdf.ppdf_to_quad(array, offset)

def ppdf_to_real(obj):
    """
    ppdf_to_real(pdf_obj * obj) -> float

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_to_real(obj)

def ppdf_to_rect(array):
    """
    ppdf_to_rect(pdf_obj * array) -> fz_rect

    Parameters
    ----------
    array: pdf_obj *

    """
    return _mupdf.ppdf_to_rect(array)

def ppdf_to_str_buf(obj):
    """
    ppdf_to_str_buf(pdf_obj * obj) -> char *

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_to_str_buf(obj)

def ppdf_to_str_len(obj):
    """
    ppdf_to_str_len(pdf_obj * obj) -> size_t

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_to_str_len(obj)

def ppdf_to_string(obj, sizep):
    """
    ppdf_to_string(pdf_obj * obj, size_t * sizep) -> char const *

    Parameters
    ----------
    obj: pdf_obj *
    sizep: size_t *

    """
    return _mupdf.ppdf_to_string(obj, sizep)

def ppdf_to_text_string(obj):
    """
    ppdf_to_text_string(pdf_obj * obj) -> char const *

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_to_text_string(obj)

def ppdf_toggle_layer_config_ui(doc, ui):
    """
    ppdf_toggle_layer_config_ui(pdf_document * doc, int ui)

    Parameters
    ----------
    doc: pdf_document *
    ui: int

    """
    return _mupdf.ppdf_toggle_layer_config_ui(doc, ui)

def ppdf_toggle_widget(widget):
    """
    ppdf_toggle_widget(pdf_annot * widget) -> int

    Parameters
    ----------
    widget: pdf_annot *

    """
    return _mupdf.ppdf_toggle_widget(widget)

def ppdf_tos_get_text(tos):
    """
    ppdf_tos_get_text(pdf_text_object_state tos) -> fz_text

    Parameters
    ----------
    tos: pdf_text_object_state *

    """
    return _mupdf.ppdf_tos_get_text(tos)

def ppdf_tos_make_trm(tos, text, fontdesc, cid, trm):
    """
    ppdf_tos_make_trm(pdf_text_object_state tos, pdf_text_state text, pdf_font_desc fontdesc, int cid, fz_matrix trm) -> int

    Parameters
    ----------
    tos: pdf_text_object_state *
    text: pdf_text_state *
    fontdesc: pdf_font_desc *
    cid: int
    trm: fz_matrix *

    """
    return _mupdf.ppdf_tos_make_trm(tos, text, fontdesc, cid, trm)

def ppdf_tos_move_after_char(tos):
    """
    ppdf_tos_move_after_char(pdf_text_object_state tos)

    Parameters
    ----------
    tos: pdf_text_object_state *

    """
    return _mupdf.ppdf_tos_move_after_char(tos)

def ppdf_tos_newline(tos, leading):
    """
    ppdf_tos_newline(pdf_text_object_state tos, float leading)

    Parameters
    ----------
    tos: pdf_text_object_state *
    leading: float

    """
    return _mupdf.ppdf_tos_newline(tos, leading)

def ppdf_tos_reset(tos, render):
    """
    ppdf_tos_reset(pdf_text_object_state tos, int render)

    Parameters
    ----------
    tos: pdf_text_object_state *
    render: int

    """
    return _mupdf.ppdf_tos_reset(tos, render)

def ppdf_tos_restore(tos, save):
    """
    ppdf_tos_restore(pdf_text_object_state tos, fz_matrix save)

    Parameters
    ----------
    tos: pdf_text_object_state *
    save: fz_matrix [2]

    """
    return _mupdf.ppdf_tos_restore(tos, save)

def ppdf_tos_save(tos, save):
    """
    ppdf_tos_save(pdf_text_object_state tos, fz_matrix save)

    Parameters
    ----------
    tos: pdf_text_object_state *
    save: fz_matrix [2]

    """
    return _mupdf.ppdf_tos_save(tos, save)

def ppdf_tos_set_matrix(tos, a, b, c, d, e, f):
    """
    ppdf_tos_set_matrix(pdf_text_object_state tos, float a, float b, float c, float d, float e, float f)

    Parameters
    ----------
    tos: pdf_text_object_state *
    a: float
    b: float
    c: float
    d: float
    e: float
    f: float

    """
    return _mupdf.ppdf_tos_set_matrix(tos, a, b, c, d, e, f)

def ppdf_tos_translate(tos, tx, ty):
    """
    ppdf_tos_translate(pdf_text_object_state tos, float tx, float ty)

    Parameters
    ----------
    tos: pdf_text_object_state *
    tx: float
    ty: float

    """
    return _mupdf.ppdf_tos_translate(tos, tx, ty)

def ppdf_trailer(doc):
    """
    ppdf_trailer(pdf_document * doc) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_trailer(doc)

def ppdf_undo(doc):
    """
    ppdf_undo(pdf_document * doc)

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_undo(doc)

def ppdf_undoredo_state(doc, steps):
    """
    ppdf_undoredo_state(pdf_document * doc, int * steps) -> int

    Parameters
    ----------
    doc: pdf_document *
    steps: int *

    """
    return _mupdf.ppdf_undoredo_state(doc, steps)

def ppdf_undoredo_step(doc, step):
    """
    ppdf_undoredo_step(pdf_document * doc, int step) -> char const *

    Parameters
    ----------
    doc: pdf_document *
    step: int

    """
    return _mupdf.ppdf_undoredo_step(doc, step)

def ppdf_unmark_obj(obj):
    """
    ppdf_unmark_obj(pdf_obj * obj)

    Parameters
    ----------
    obj: pdf_obj *

    """
    return _mupdf.ppdf_unmark_obj(obj)

def ppdf_update_annot(annot):
    """
    ppdf_update_annot(pdf_annot * annot) -> int

    Parameters
    ----------
    annot: pdf_annot *

    """
    return _mupdf.ppdf_update_annot(annot)

def ppdf_update_default_colorspaces(old_cs, res):
    """
    ppdf_update_default_colorspaces(fz_default_colorspaces old_cs, pdf_obj * res) -> fz_default_colorspaces

    Parameters
    ----------
    old_cs: fz_default_colorspaces *
    res: pdf_obj *

    """
    return _mupdf.ppdf_update_default_colorspaces(old_cs, res)

def ppdf_update_object(doc, num, obj):
    """
    ppdf_update_object(pdf_document * doc, int num, pdf_obj * obj)

    Parameters
    ----------
    doc: pdf_document *
    num: int
    obj: pdf_obj *

    """
    return _mupdf.ppdf_update_object(doc, num, obj)

def ppdf_update_page(page):
    """
    ppdf_update_page(pdf_page * page) -> int

    Parameters
    ----------
    page: pdf_page *

    """
    return _mupdf.ppdf_update_page(page)

def ppdf_update_stream(doc, ref, buf, compressed):
    """
    ppdf_update_stream(pdf_document * doc, pdf_obj * ref, fz_buffer buf, int compressed)

    Parameters
    ----------
    doc: pdf_document *
    ref: pdf_obj *
    buf: fz_buffer *
    compressed: int

    """
    return _mupdf.ppdf_update_stream(doc, ref, buf, compressed)

def ppdf_update_widget(widget):
    """
    ppdf_update_widget(pdf_annot * widget) -> int

    Parameters
    ----------
    widget: pdf_annot *

    """
    return _mupdf.ppdf_update_widget(widget)

def ppdf_update_xobject(doc, xobj, bbox, mat, res, buffer):
    """
    ppdf_update_xobject(pdf_document * doc, pdf_obj * xobj, fz_rect bbox, fz_matrix mat, pdf_obj * res, fz_buffer buffer)

    Parameters
    ----------
    doc: pdf_document *
    xobj: pdf_obj *
    bbox: fz_rect
    mat: fz_matrix
    res: pdf_obj *
    buffer: fz_buffer *

    """
    return _mupdf.ppdf_update_xobject(doc, xobj, bbox, mat, res, buffer)

def ppdf_validate_change_history(doc):
    """
    ppdf_validate_change_history(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_validate_change_history(doc)

def ppdf_validate_changes(doc, version):
    """
    ppdf_validate_changes(pdf_document * doc, int version) -> int

    Parameters
    ----------
    doc: pdf_document *
    version: int

    """
    return _mupdf.ppdf_validate_changes(doc, version)

def ppdf_validate_signature(widget):
    """
    ppdf_validate_signature(pdf_annot * widget) -> int

    Parameters
    ----------
    widget: pdf_annot *

    """
    return _mupdf.ppdf_validate_signature(widget)

def ppdf_version(doc):
    """
    ppdf_version(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_version(doc)

def ppdf_walk_tree(tree, kid_name, arrive, leave, arg, names, values):
    """
    ppdf_walk_tree(pdf_obj * tree, pdf_obj * kid_name, void (*)(fz_context *,pdf_obj *,void *,pdf_obj **) arrive, void (*)(fz_context *,pdf_obj *,void *) leave, void * arg, pdf_obj ** names, pdf_obj ** values)

    Parameters
    ----------
    tree: pdf_obj *
    kid_name: pdf_obj *
    arrive: void (*)(fz_context *,pdf_obj *,void *,pdf_obj **)
    leave: void (*)(fz_context *,pdf_obj *,void *)
    arg: void *
    names: pdf_obj **
    values: pdf_obj **

    """
    return _mupdf.ppdf_walk_tree(tree, kid_name, arrive, leave, arg, names, values)

def ppdf_was_pure_xfa(doc):
    """
    ppdf_was_pure_xfa(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_was_pure_xfa(doc)

def ppdf_was_repaired(doc):
    """
    ppdf_was_repaired(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_was_repaired(doc)

def ppdf_widget_is_readonly(widget):
    """
    ppdf_widget_is_readonly(pdf_annot * widget) -> int

    Parameters
    ----------
    widget: pdf_annot *

    """
    return _mupdf.ppdf_widget_is_readonly(widget)

def ppdf_widget_is_signed(widget):
    """
    ppdf_widget_is_signed(pdf_annot * widget) -> int

    Parameters
    ----------
    widget: pdf_annot *

    """
    return _mupdf.ppdf_widget_is_signed(widget)

def ppdf_widget_type(widget):
    """
    ppdf_widget_type(pdf_annot * widget) -> enum pdf_widget_type

    Parameters
    ----------
    widget: pdf_annot *

    """
    return _mupdf.ppdf_widget_type(widget)

def ppdf_write_digest(out, byte_range, field, digest_offset, digest_length, signer):
    """
    ppdf_write_digest(fz_output * out, pdf_obj * byte_range, pdf_obj * field, size_t digest_offset, size_t digest_length, pdf_pkcs7_signer * signer)

    Parameters
    ----------
    out: fz_output *
    byte_range: pdf_obj *
    field: pdf_obj *
    digest_offset: size_t
    digest_length: size_t
    signer: pdf_pkcs7_signer *

    """
    return _mupdf.ppdf_write_digest(out, byte_range, field, digest_offset, digest_length, signer)

def ppdf_write_document(doc, out, opts):
    """
    ppdf_write_document(pdf_document * doc, fz_output * out, pdf_write_options opts)

    Parameters
    ----------
    doc: pdf_document *
    out: fz_output *
    opts: pdf_write_options const *

    """
    return _mupdf.ppdf_write_document(doc, out, opts)

def ppdf_write_journal(doc, out):
    """
    ppdf_write_journal(pdf_document * doc, fz_output * out)

    Parameters
    ----------
    doc: pdf_document *
    out: fz_output *

    """
    return _mupdf.ppdf_write_journal(doc, out)

def ppdf_write_snapshot(doc, out):
    """
    ppdf_write_snapshot(pdf_document * doc, fz_output * out)

    Parameters
    ----------
    doc: pdf_document *
    out: fz_output *

    """
    return _mupdf.ppdf_write_snapshot(doc, out)

def ppdf_xobject_bbox(xobj):
    """
    ppdf_xobject_bbox(pdf_obj * xobj) -> fz_rect

    Parameters
    ----------
    xobj: pdf_obj *

    """
    return _mupdf.ppdf_xobject_bbox(xobj)

def ppdf_xobject_colorspace(xobj):
    """
    ppdf_xobject_colorspace(pdf_obj * xobj) -> fz_colorspace *

    Parameters
    ----------
    xobj: pdf_obj *

    """
    return _mupdf.ppdf_xobject_colorspace(xobj)

def ppdf_xobject_isolated(xobj):
    """
    ppdf_xobject_isolated(pdf_obj * xobj) -> int

    Parameters
    ----------
    xobj: pdf_obj *

    """
    return _mupdf.ppdf_xobject_isolated(xobj)

def ppdf_xobject_knockout(xobj):
    """
    ppdf_xobject_knockout(pdf_obj * xobj) -> int

    Parameters
    ----------
    xobj: pdf_obj *

    """
    return _mupdf.ppdf_xobject_knockout(xobj)

def ppdf_xobject_matrix(xobj):
    """
    ppdf_xobject_matrix(pdf_obj * xobj) -> fz_matrix

    Parameters
    ----------
    xobj: pdf_obj *

    """
    return _mupdf.ppdf_xobject_matrix(xobj)

def ppdf_xobject_resources(xobj):
    """
    ppdf_xobject_resources(pdf_obj * xobj) -> pdf_obj *

    Parameters
    ----------
    xobj: pdf_obj *

    """
    return _mupdf.ppdf_xobject_resources(xobj)

def ppdf_xobject_transparency(xobj):
    """
    ppdf_xobject_transparency(pdf_obj * xobj) -> int

    Parameters
    ----------
    xobj: pdf_obj *

    """
    return _mupdf.ppdf_xobject_transparency(xobj)

def ppdf_xref_ensure_incremental_object(doc, num):
    """
    ppdf_xref_ensure_incremental_object(pdf_document * doc, int num) -> int

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_xref_ensure_incremental_object(doc, num)

def ppdf_xref_ensure_local_object(doc, num):
    """
    ppdf_xref_ensure_local_object(pdf_document * doc, int num)

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_xref_ensure_local_object(doc, num)

def ppdf_xref_is_incremental(doc, num):
    """
    ppdf_xref_is_incremental(pdf_document * doc, int num) -> int

    Parameters
    ----------
    doc: pdf_document *
    num: int

    """
    return _mupdf.ppdf_xref_is_incremental(doc, num)

def ppdf_xref_len(doc):
    """
    ppdf_xref_len(pdf_document * doc) -> int

    Parameters
    ----------
    doc: pdf_document *

    """
    return _mupdf.ppdf_xref_len(doc)

def ppdf_xref_obj_is_unsaved_signature(doc, obj):
    """
    ppdf_xref_obj_is_unsaved_signature(pdf_document * doc, pdf_obj * obj) -> int

    Parameters
    ----------
    doc: pdf_document *
    obj: pdf_obj *

    """
    return _mupdf.ppdf_xref_obj_is_unsaved_signature(doc, obj)

def ppdf_xref_remove_unsaved_signature(doc, field):
    """
    ppdf_xref_remove_unsaved_signature(pdf_document * doc, pdf_obj * field)

    Parameters
    ----------
    doc: pdf_document *
    field: pdf_obj *

    """
    return _mupdf.ppdf_xref_remove_unsaved_signature(doc, field)

def ppdf_xref_store_unsaved_signature(doc, field, signer):
    """
    ppdf_xref_store_unsaved_signature(pdf_document * doc, pdf_obj * field, pdf_pkcs7_signer * signer)

    Parameters
    ----------
    doc: pdf_document *
    field: pdf_obj *
    signer: pdf_pkcs7_signer *

    """
    return _mupdf.ppdf_xref_store_unsaved_signature(doc, field, signer)

def to_string_fz_aa_context(s):
    """
    to_string_fz_aa_context(fz_aa_context s) -> std::string

    Parameters
    ----------
    s: fz_aa_context const &

    """
    return _mupdf.to_string_fz_aa_context(s)

def to_string_fz_color_params(s):
    """
    to_string_fz_color_params(fz_color_params s) -> std::string

    Parameters
    ----------
    s: fz_color_params const &

    """
    return _mupdf.to_string_fz_color_params(s)

def to_string_fz_cookie(s):
    """
    to_string_fz_cookie(fz_cookie s) -> std::string

    Parameters
    ----------
    s: fz_cookie const &

    """
    return _mupdf.to_string_fz_cookie(s)

def to_string_fz_draw_options(s):
    """
    to_string_fz_draw_options(fz_draw_options s) -> std::string

    Parameters
    ----------
    s: fz_draw_options const &

    """
    return _mupdf.to_string_fz_draw_options(s)

def to_string_fz_irect(s):
    """
    to_string_fz_irect(fz_irect s) -> std::string

    Parameters
    ----------
    s: fz_irect const &

    """
    return _mupdf.to_string_fz_irect(s)

def to_string_fz_location(s):
    """
    to_string_fz_location(fz_location s) -> std::string

    Parameters
    ----------
    s: fz_location const &

    """
    return _mupdf.to_string_fz_location(s)

def to_string_fz_matrix(s):
    """
    to_string_fz_matrix(fz_matrix s) -> std::string

    Parameters
    ----------
    s: fz_matrix const &

    """
    return _mupdf.to_string_fz_matrix(s)

def to_string_pdf_write_options(s):
    """
    to_string_pdf_write_options(pdf_write_options s) -> std::string

    Parameters
    ----------
    s: pdf_write_options const &

    """
    return _mupdf.to_string_pdf_write_options(s)

def to_string_fz_point(s):
    """
    to_string_fz_point(fz_point s) -> std::string

    Parameters
    ----------
    s: fz_point const &

    """
    return _mupdf.to_string_fz_point(s)

def to_string_fz_pwg_options(s):
    """
    to_string_fz_pwg_options(fz_pwg_options s) -> std::string

    Parameters
    ----------
    s: fz_pwg_options const &

    """
    return _mupdf.to_string_fz_pwg_options(s)

def to_string_fz_quad(s):
    """
    to_string_fz_quad(fz_quad s) -> std::string

    Parameters
    ----------
    s: fz_quad const &

    """
    return _mupdf.to_string_fz_quad(s)

def to_string_fz_rect(s):
    """
    to_string_fz_rect(fz_rect s) -> std::string

    Parameters
    ----------
    s: fz_rect const &

    """
    return _mupdf.to_string_fz_rect(s)

def to_string_fz_stext_options(s):
    """
    to_string_fz_stext_options(fz_stext_options s) -> std::string

    Parameters
    ----------
    s: fz_stext_options const &

    """
    return _mupdf.to_string_fz_stext_options(s)

def to_string_fz_transition(s):
    """
    to_string_fz_transition(fz_transition s) -> std::string

    Parameters
    ----------
    s: fz_transition const &

    """
    return _mupdf.to_string_fz_transition(s)

def to_string(*args):
    """
    to_string(fz_aa_context s) -> std::string

    Parameters
    ----------
    s: fz_aa_context const &

    to_string(fz_color_params s) -> std::string

    Parameters
    ----------
    s: fz_color_params const &

    to_string(fz_cookie s) -> std::string

    Parameters
    ----------
    s: fz_cookie const &

    to_string(fz_draw_options s) -> std::string

    Parameters
    ----------
    s: fz_draw_options const &

    to_string(fz_irect s) -> std::string

    Parameters
    ----------
    s: fz_irect const &

    to_string(fz_location s) -> std::string

    Parameters
    ----------
    s: fz_location const &

    to_string(fz_matrix s) -> std::string

    Parameters
    ----------
    s: fz_matrix const &

    to_string(pdf_write_options s) -> std::string

    Parameters
    ----------
    s: pdf_write_options const &

    to_string(fz_point s) -> std::string

    Parameters
    ----------
    s: fz_point const &

    to_string(fz_pwg_options s) -> std::string

    Parameters
    ----------
    s: fz_pwg_options const &

    to_string(fz_quad s) -> std::string

    Parameters
    ----------
    s: fz_quad const &

    to_string(fz_rect s) -> std::string

    Parameters
    ----------
    s: fz_rect const &

    to_string(fz_stext_options s) -> std::string

    Parameters
    ----------
    s: fz_stext_options const &

    to_string(fz_transition s) -> std::string

    Parameters
    ----------
    s: fz_transition const &

    """
    return _mupdf.to_string(*args)
class AaContext(_object):
    """Proxy of C++ mupdf::AaContext class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AaContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AaContext, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::AaContext self, fz_aa_context internal) -> AaContext

        Parameters
        ----------
        internal: fz_aa_context const *

        __init__(mupdf::AaContext self, fz_aa_context internal) -> AaContext

        Parameters
        ----------
        internal: fz_aa_context const

        """
        this = _mupdf.new_AaContext(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def internal(self, *args):
        """
        internal(AaContext self) -> fz_aa_context
        internal(AaContext self) -> fz_aa_context

        Parameters
        ----------
        self: mupdf::AaContext const *

        """
        return _mupdf.AaContext_internal(self, *args)

    __swig_setmethods__["hscale"] = _mupdf.AaContext_hscale_set
    __swig_getmethods__["hscale"] = _mupdf.AaContext_hscale_get
    if _newclass:
        hscale = _swig_property(_mupdf.AaContext_hscale_get, _mupdf.AaContext_hscale_set)
    __swig_setmethods__["vscale"] = _mupdf.AaContext_vscale_set
    __swig_getmethods__["vscale"] = _mupdf.AaContext_vscale_get
    if _newclass:
        vscale = _swig_property(_mupdf.AaContext_vscale_get, _mupdf.AaContext_vscale_set)
    __swig_setmethods__["scale"] = _mupdf.AaContext_scale_set
    __swig_getmethods__["scale"] = _mupdf.AaContext_scale_get
    if _newclass:
        scale = _swig_property(_mupdf.AaContext_scale_get, _mupdf.AaContext_scale_set)
    __swig_setmethods__["bits"] = _mupdf.AaContext_bits_set
    __swig_getmethods__["bits"] = _mupdf.AaContext_bits_get
    if _newclass:
        bits = _swig_property(_mupdf.AaContext_bits_get, _mupdf.AaContext_bits_set)
    __swig_setmethods__["text_bits"] = _mupdf.AaContext_text_bits_set
    __swig_getmethods__["text_bits"] = _mupdf.AaContext_text_bits_get
    if _newclass:
        text_bits = _swig_property(_mupdf.AaContext_text_bits_get, _mupdf.AaContext_text_bits_set)
    __swig_setmethods__["min_line_width"] = _mupdf.AaContext_min_line_width_set
    __swig_getmethods__["min_line_width"] = _mupdf.AaContext_min_line_width_get
    if _newclass:
        min_line_width = _swig_property(_mupdf.AaContext_min_line_width_get, _mupdf.AaContext_min_line_width_set)

    def to_string(self):
        """
        to_string(AaContext self) -> std::string

        Parameters
        ----------
        self: mupdf::AaContext *

        """
        return _mupdf.AaContext_to_string(self)

    __swig_destroy__ = _mupdf.delete_AaContext
    __del__ = lambda self: None
AaContext_swigregister = _mupdf.AaContext_swigregister
AaContext_swigregister(AaContext)
metadata_keys = cvar.metadata_keys

class Aes(_object):
    """Proxy of C++ mupdf::Aes class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Aes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Aes, name)
    __repr__ = _swig_repr

    def aes_crypt_cbc(self, mode, length, iv, input, output):
        """
        aes_crypt_cbc(Aes self, int mode, size_t length, unsigned char [16] iv, unsigned char const * input, unsigned char * output)

        Parameters
        ----------
        mode: int
        length: size_t
        iv: unsigned char [16]
        input: unsigned char const *
        output: unsigned char *

        """
        return _mupdf.Aes_aes_crypt_cbc(self, mode, length, iv, input, output)


    def aes_setkey_dec(self, key, keysize):
        """
        aes_setkey_dec(Aes self, unsigned char const * key, int keysize) -> int

        Parameters
        ----------
        key: unsigned char const *
        keysize: int

        """
        return _mupdf.Aes_aes_setkey_dec(self, key, keysize)


    def aes_setkey_enc(self, key, keysize):
        """
        aes_setkey_enc(Aes self, unsigned char const * key, int keysize) -> int

        Parameters
        ----------
        key: unsigned char const *
        keysize: int

        """
        return _mupdf.Aes_aes_setkey_enc(self, key, keysize)


    def __init__(self, internal):
        """
        __init__(mupdf::Aes self, fz_aes internal) -> Aes

        Parameters
        ----------
        internal: fz_aes *

        """
        this = _mupdf.new_Aes(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.Aes_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Aes_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Aes_m_internal_get, _mupdf.Aes_m_internal_set)
    __swig_destroy__ = _mupdf.delete_Aes
    __del__ = lambda self: None
Aes_swigregister = _mupdf.Aes_swigregister
Aes_swigregister(Aes)

class AllocContext(_object):
    """Proxy of C++ mupdf::AllocContext class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AllocContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AllocContext, name)
    __repr__ = _swig_repr

    def new_context_imp(self, locks, max_store, version):
        """
        new_context_imp(AllocContext self, LocksContext locks, size_t max_store, char const * version) -> Context

        Parameters
        ----------
        locks: mupdf::LocksContext const &
        max_store: size_t
        version: char const *

        """
        return _mupdf.AllocContext_new_context_imp(self, locks, max_store, version)


    def __init__(self, internal):
        """
        __init__(mupdf::AllocContext self, fz_alloc_context internal) -> AllocContext

        Parameters
        ----------
        internal: fz_alloc_context *

        """
        this = _mupdf.new_AllocContext(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.AllocContext_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.AllocContext_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.AllocContext_m_internal_get, _mupdf.AllocContext_m_internal_set)
    __swig_destroy__ = _mupdf.delete_AllocContext
    __del__ = lambda self: None
AllocContext_swigregister = _mupdf.AllocContext_swigregister
AllocContext_swigregister(AllocContext)

class Arc4(_object):
    """Proxy of C++ mupdf::Arc4 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Arc4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Arc4, name)
    __repr__ = _swig_repr

    def arc4_encrypt(self, dest, src, len):
        """
        arc4_encrypt(Arc4 self, unsigned char * dest, unsigned char const * src, size_t len)

        Parameters
        ----------
        dest: unsigned char *
        src: unsigned char const *
        len: size_t

        """
        return _mupdf.Arc4_arc4_encrypt(self, dest, src, len)


    def arc4_init(self, key, len):
        """
        arc4_init(Arc4 self, unsigned char const * key, size_t len)

        Parameters
        ----------
        key: unsigned char const *
        len: size_t

        """
        return _mupdf.Arc4_arc4_init(self, key, len)


    def __init__(self, internal):
        """
        __init__(mupdf::Arc4 self, fz_arc4 internal) -> Arc4

        Parameters
        ----------
        internal: fz_arc4 *

        """
        this = _mupdf.new_Arc4(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.Arc4_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Arc4_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Arc4_m_internal_get, _mupdf.Arc4_m_internal_set)
    __swig_destroy__ = _mupdf.delete_Arc4
    __del__ = lambda self: None
Arc4_swigregister = _mupdf.Arc4_swigregister
Arc4_swigregister(Arc4)

class Archive(_object):
    """Proxy of C++ mupdf::Archive class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Archive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Archive, name)
    __repr__ = _swig_repr

    def archive_format(self):
        """
        archive_format(Archive self) -> char const *

        Parameters
        ----------
        self: mupdf::Archive *

        """
        return _mupdf.Archive_archive_format(self)


    def count_archive_entries(self):
        """
        count_archive_entries(Archive self) -> int

        Parameters
        ----------
        self: mupdf::Archive *

        """
        return _mupdf.Archive_count_archive_entries(self)


    def has_archive_entry(self, name):
        """
        has_archive_entry(Archive self, char const * name) -> int

        Parameters
        ----------
        name: char const *

        """
        return _mupdf.Archive_has_archive_entry(self, name)


    def list_archive_entry(self, idx):
        """
        list_archive_entry(Archive self, int idx) -> char const *

        Parameters
        ----------
        idx: int

        """
        return _mupdf.Archive_list_archive_entry(self, idx)


    def open_archive_entry(self, name):
        """
        open_archive_entry(Archive self, char const * name) -> Stream

        Parameters
        ----------
        name: char const *

        """
        return _mupdf.Archive_open_archive_entry(self, name)


    def read_archive_entry(self, name):
        """
        read_archive_entry(Archive self, char const * name) -> Buffer

        Parameters
        ----------
        name: char const *

        """
        return _mupdf.Archive_read_archive_entry(self, name)


    def __init__(self, *args):
        """
        __init__(mupdf::Archive self, Stream file, int size) -> Archive

        Parameters
        ----------
        file: mupdf::Stream const &
        size: int

        __init__(mupdf::Archive self, fz_archive * internal) -> Archive

        Parameters
        ----------
        internal: fz_archive *

        """
        this = _mupdf.new_Archive(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Archive
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Archive_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Archive_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Archive_m_internal_get, _mupdf.Archive_m_internal_set)
Archive_swigregister = _mupdf.Archive_swigregister
Archive_swigregister(Archive)

class BandWriter(_object):
    """Proxy of C++ mupdf::BandWriter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BandWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BandWriter, name)
    __repr__ = _swig_repr
    MONO = _mupdf.BandWriter_MONO
    COLOR = _mupdf.BandWriter_COLOR
    PNG = _mupdf.BandWriter_PNG
    PNM = _mupdf.BandWriter_PNM
    PAM = _mupdf.BandWriter_PAM
    PBM = _mupdf.BandWriter_PBM
    PKM = _mupdf.BandWriter_PKM
    PS = _mupdf.BandWriter_PS
    PSD = _mupdf.BandWriter_PSD

    def close_band_writer(self):
        """
        close_band_writer(BandWriter self)

        Parameters
        ----------
        self: mupdf::BandWriter *

        """
        return _mupdf.BandWriter_close_band_writer(self)


    def pdfocr_band_writer_set_progress(self, progress_fn, progress_arg):
        """
        pdfocr_band_writer_set_progress(BandWriter self, fz_pdfocr_progress_fn * progress_fn, void * progress_arg)

        Parameters
        ----------
        progress_fn: fz_pdfocr_progress_fn *
        progress_arg: void *

        """
        return _mupdf.BandWriter_pdfocr_band_writer_set_progress(self, progress_fn, progress_arg)


    def write_band(self, stride, band_height, samples):
        """
        write_band(BandWriter self, int stride, int band_height, unsigned char const * samples)

        Parameters
        ----------
        stride: int
        band_height: int
        samples: unsigned char const *

        """
        return _mupdf.BandWriter_write_band(self, stride, band_height, samples)


    def write_header(self, w, h, n, alpha, xres, yres, pagenum, cs, seps):
        """
        write_header(BandWriter self, int w, int h, int n, int alpha, int xres, int yres, int pagenum, Colorspace cs, Separations seps)

        Parameters
        ----------
        w: int
        h: int
        n: int
        alpha: int
        xres: int
        yres: int
        pagenum: int
        cs: mupdf::Colorspace const &
        seps: mupdf::Separations const &

        """
        return _mupdf.BandWriter_write_header(self, w, h, n, alpha, xres, yres, pagenum, cs, seps)


    def __init__(self, *args):
        """
        __init__(mupdf::BandWriter self, size_t size, Output out) -> BandWriter

        Parameters
        ----------
        size: size_t
        out: mupdf::Output const &

        __init__(mupdf::BandWriter self, Output out, PclOptions options) -> BandWriter

        Parameters
        ----------
        out: mupdf::Output const &
        options: mupdf::PclOptions const &

        __init__(mupdf::BandWriter self, Output out, PwgOptions pwg) -> BandWriter

        Parameters
        ----------
        out: mupdf::Output const &
        pwg: mupdf::PwgOptions &

        __init__(mupdf::BandWriter self, Output out, PclmOptions options) -> BandWriter

        Parameters
        ----------
        out: mupdf::Output const &
        options: mupdf::PclmOptions const &

        __init__(mupdf::BandWriter self, Output out, PdfocrOptions options) -> BandWriter

        Parameters
        ----------
        out: mupdf::Output const &
        options: mupdf::PdfocrOptions const &

        __init__(mupdf::BandWriter self, Output out) -> BandWriter

        Parameters
        ----------
        out: mupdf::Output const &

        __init__(mupdf::BandWriter self, Output out, mupdf::BandWriter::Cm cm, PclOptions options) -> BandWriter

        Parameters
        ----------
        out: mupdf::Output &
        cm: enum mupdf::BandWriter::Cm
        options: mupdf::PclOptions const &

        __init__(mupdf::BandWriter self, Output out, mupdf::BandWriter::P p) -> BandWriter

        Parameters
        ----------
        out: mupdf::Output &
        p: enum mupdf::BandWriter::P

        __init__(mupdf::BandWriter self, Output out, mupdf::BandWriter::Cm cm, PwgOptions options) -> BandWriter

        Parameters
        ----------
        out: mupdf::Output &
        cm: enum mupdf::BandWriter::Cm
        options: mupdf::PwgOptions const &

        __init__(mupdf::BandWriter self, fz_band_writer * internal) -> BandWriter

        Parameters
        ----------
        internal: fz_band_writer *

        """
        this = _mupdf.new_BandWriter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_BandWriter
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.BandWriter_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.BandWriter_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.BandWriter_m_internal_get, _mupdf.BandWriter_m_internal_set)
BandWriter_swigregister = _mupdf.BandWriter_swigregister
BandWriter_swigregister(BandWriter)

class Bitmap(_object):
    """Proxy of C++ mupdf::Bitmap class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Bitmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Bitmap, name)
    __repr__ = _swig_repr

    def bitmap_details(self, w, h, n, stride):
        """
        bitmap_details(Bitmap self, int * w, int * h, int * n, int * stride)

        Parameters
        ----------
        w: int *
        h: int *
        n: int *
        stride: int *

        """
        return _mupdf.Bitmap_bitmap_details(self, w, h, n, stride)


    def clear_bitmap(self):
        """
        clear_bitmap(Bitmap self)

        Parameters
        ----------
        self: mupdf::Bitmap *

        """
        return _mupdf.Bitmap_clear_bitmap(self)


    def save_bitmap_as_pbm(self, filename):
        """
        save_bitmap_as_pbm(Bitmap self, char const * filename)

        Parameters
        ----------
        filename: char const *

        """
        return _mupdf.Bitmap_save_bitmap_as_pbm(self, filename)


    def save_bitmap_as_pcl(self, filename, append, pcl):
        """
        save_bitmap_as_pcl(Bitmap self, char * filename, int append, PclOptions pcl)

        Parameters
        ----------
        filename: char *
        append: int
        pcl: mupdf::PclOptions const &

        """
        return _mupdf.Bitmap_save_bitmap_as_pcl(self, filename, append, pcl)


    def save_bitmap_as_pkm(self, filename):
        """
        save_bitmap_as_pkm(Bitmap self, char const * filename)

        Parameters
        ----------
        filename: char const *

        """
        return _mupdf.Bitmap_save_bitmap_as_pkm(self, filename)


    def save_bitmap_as_pwg(self, filename, append, pwg):
        """
        save_bitmap_as_pwg(Bitmap self, char * filename, int append, PwgOptions pwg)

        Parameters
        ----------
        filename: char *
        append: int
        pwg: mupdf::PwgOptions &

        """
        return _mupdf.Bitmap_save_bitmap_as_pwg(self, filename, append, pwg)


    def __init__(self, *args):
        """
        __init__(mupdf::Bitmap self, int w, int h, int n, int xres, int yres) -> Bitmap

        Parameters
        ----------
        w: int
        h: int
        n: int
        xres: int
        yres: int

        __init__(mupdf::Bitmap self, Pixmap pix, Halftone ht) -> Bitmap

        Parameters
        ----------
        pix: mupdf::Pixmap const &
        ht: mupdf::Halftone const &

        __init__(mupdf::Bitmap self, Pixmap pix, Halftone ht, int band_start) -> Bitmap

        Parameters
        ----------
        pix: mupdf::Pixmap const &
        ht: mupdf::Halftone const &
        band_start: int

        __init__(mupdf::Bitmap self, Bitmap rhs) -> Bitmap

        Parameters
        ----------
        rhs: mupdf::Bitmap const &

        __init__(mupdf::Bitmap self, fz_bitmap internal) -> Bitmap

        Parameters
        ----------
        internal: fz_bitmap *

        """
        this = _mupdf.new_Bitmap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def refs(self):
        """
        refs(Bitmap self) -> int

        Parameters
        ----------
        self: mupdf::Bitmap *

        """
        return _mupdf.Bitmap_refs(self)


    def w(self):
        """
        w(Bitmap self) -> int

        Parameters
        ----------
        self: mupdf::Bitmap *

        """
        return _mupdf.Bitmap_w(self)


    def h(self):
        """
        h(Bitmap self) -> int

        Parameters
        ----------
        self: mupdf::Bitmap *

        """
        return _mupdf.Bitmap_h(self)


    def stride(self):
        """
        stride(Bitmap self) -> int

        Parameters
        ----------
        self: mupdf::Bitmap *

        """
        return _mupdf.Bitmap_stride(self)


    def n(self):
        """
        n(Bitmap self) -> int

        Parameters
        ----------
        self: mupdf::Bitmap *

        """
        return _mupdf.Bitmap_n(self)


    def xres(self):
        """
        xres(Bitmap self) -> int

        Parameters
        ----------
        self: mupdf::Bitmap *

        """
        return _mupdf.Bitmap_xres(self)


    def yres(self):
        """
        yres(Bitmap self) -> int

        Parameters
        ----------
        self: mupdf::Bitmap *

        """
        return _mupdf.Bitmap_yres(self)


    def samples(self):
        """
        samples(Bitmap self) -> unsigned char const *

        Parameters
        ----------
        self: mupdf::Bitmap *

        """
        return _mupdf.Bitmap_samples(self)

    __swig_destroy__ = _mupdf.delete_Bitmap
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Bitmap_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Bitmap_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Bitmap_m_internal_get, _mupdf.Bitmap_m_internal_set)
Bitmap_swigregister = _mupdf.Bitmap_swigregister
Bitmap_swigregister(Bitmap)

class Buffer(_object):
    """Proxy of C++ mupdf::Buffer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Buffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Buffer, name)
    __repr__ = _swig_repr

    def new_buffer_from_copied_data(data, size):
        """
        new_buffer_from_copied_data(unsigned char const * data, size_t size) -> Buffer

        Parameters
        ----------
        data: unsigned char const *
        size: size_t

        """
        return _mupdf.Buffer_new_buffer_from_copied_data(data, size)

    new_buffer_from_copied_data = staticmethod(new_buffer_from_copied_data)

    def append_bits(self, value, count):
        """
        append_bits(Buffer self, int value, int count)

        Parameters
        ----------
        value: int
        count: int

        """
        return _mupdf.Buffer_append_bits(self, value, count)


    def append_bits_pad(self):
        """
        append_bits_pad(Buffer self)

        Parameters
        ----------
        self: mupdf::Buffer *

        """
        return _mupdf.Buffer_append_bits_pad(self)


    def append_buffer(self, source):
        """
        append_buffer(Buffer self, Buffer source)

        Parameters
        ----------
        source: mupdf::Buffer const &

        """
        return _mupdf.Buffer_append_buffer(self, source)


    def append_byte(self, c):
        """
        append_byte(Buffer self, int c)

        Parameters
        ----------
        c: int

        """
        return _mupdf.Buffer_append_byte(self, c)


    def append_data(self, data, len):
        """
        append_data(Buffer self, void const * data, size_t len)

        Parameters
        ----------
        data: void const *
        len: size_t

        """
        return _mupdf.Buffer_append_data(self, data, len)


    def append_int16_be(self, x):
        """
        append_int16_be(Buffer self, int x)

        Parameters
        ----------
        x: int

        """
        return _mupdf.Buffer_append_int16_be(self, x)


    def append_int16_le(self, x):
        """
        append_int16_le(Buffer self, int x)

        Parameters
        ----------
        x: int

        """
        return _mupdf.Buffer_append_int16_le(self, x)


    def append_int32_be(self, x):
        """
        append_int32_be(Buffer self, int x)

        Parameters
        ----------
        x: int

        """
        return _mupdf.Buffer_append_int32_be(self, x)


    def append_int32_le(self, x):
        """
        append_int32_le(Buffer self, int x)

        Parameters
        ----------
        x: int

        """
        return _mupdf.Buffer_append_int32_le(self, x)


    def append_pdf_string(self, text):
        """
        append_pdf_string(Buffer self, char const * text)

        Parameters
        ----------
        text: char const *

        """
        return _mupdf.Buffer_append_pdf_string(self, text)


    def append_rune(self, c):
        """
        append_rune(Buffer self, int c)

        Parameters
        ----------
        c: int

        """
        return _mupdf.Buffer_append_rune(self, c)


    def append_string(self, data):
        """
        append_string(Buffer self, char const * data)

        Parameters
        ----------
        data: char const *

        """
        return _mupdf.Buffer_append_string(self, data)


    def buffer_extract(self, data):
        """
        buffer_extract(Buffer self, unsigned char ** data) -> size_t

        Parameters
        ----------
        data: unsigned char **

        """
        return _mupdf.Buffer_buffer_extract(self, data)


    def buffer_storage(self, datap):
        """
        buffer_storage(Buffer self, unsigned char ** datap) -> size_t

        Parameters
        ----------
        datap: unsigned char **

        """
        return _mupdf.Buffer_buffer_storage(self, datap)


    def clear_buffer(self):
        """
        clear_buffer(Buffer self)

        Parameters
        ----------
        self: mupdf::Buffer *

        """
        return _mupdf.Buffer_clear_buffer(self)


    def grow_buffer(self):
        """
        grow_buffer(Buffer self)

        Parameters
        ----------
        self: mupdf::Buffer *

        """
        return _mupdf.Buffer_grow_buffer(self)


    def load_jbig2_globals(self):
        """
        load_jbig2_globals(Buffer self) -> Jbig2Globals

        Parameters
        ----------
        self: mupdf::Buffer *

        """
        return _mupdf.Buffer_load_jbig2_globals(self)


    def md5_buffer(self, digest):
        """
        md5_buffer(Buffer self, unsigned char [16] digest)

        Parameters
        ----------
        digest: unsigned char [16]

        """
        return _mupdf.Buffer_md5_buffer(self, digest)


    def new_display_list_from_svg(self, base_uri, zip, w, h):
        """
        new_display_list_from_svg(Buffer self, char const * base_uri, Archive zip, float * w, float * h) -> DisplayList

        Parameters
        ----------
        base_uri: char const *
        zip: mupdf::Archive const &
        w: float *
        h: float *

        """
        return _mupdf.Buffer_new_display_list_from_svg(self, base_uri, zip, w, h)


    def new_image_from_buffer(self):
        """
        new_image_from_buffer(Buffer self) -> Image

        Parameters
        ----------
        self: mupdf::Buffer *

        """
        return _mupdf.Buffer_new_image_from_buffer(self)


    def new_image_from_svg(self, base_uri, zip):
        """
        new_image_from_svg(Buffer self, char const * base_uri, Archive zip) -> Image

        Parameters
        ----------
        base_uri: char const *
        zip: mupdf::Archive const &

        """
        return _mupdf.Buffer_new_image_from_svg(self, base_uri, zip)


    def open_buffer(self):
        """
        open_buffer(Buffer self) -> Stream

        Parameters
        ----------
        self: mupdf::Buffer *

        """
        return _mupdf.Buffer_open_buffer(self)


    def parse_xml(self, preserve_white):
        """
        parse_xml(Buffer self, int preserve_white) -> XmlDoc

        Parameters
        ----------
        preserve_white: int

        """
        return _mupdf.Buffer_parse_xml(self, preserve_white)


    def parse_xml_from_html5(self):
        """
        parse_xml_from_html5(Buffer self) -> XmlDoc

        Parameters
        ----------
        self: mupdf::Buffer *

        """
        return _mupdf.Buffer_parse_xml_from_html5(self)


    def resize_buffer(self, capacity):
        """
        resize_buffer(Buffer self, size_t capacity)

        Parameters
        ----------
        capacity: size_t

        """
        return _mupdf.Buffer_resize_buffer(self, capacity)


    def save_buffer(self, filename):
        """
        save_buffer(Buffer self, char const * filename)

        Parameters
        ----------
        filename: char const *

        """
        return _mupdf.Buffer_save_buffer(self, filename)


    def string_from_buffer(self):
        """
        string_from_buffer(Buffer self) -> char const *

        Parameters
        ----------
        self: mupdf::Buffer *

        """
        return _mupdf.Buffer_string_from_buffer(self)


    def terminate_buffer(self):
        """
        terminate_buffer(Buffer self)

        Parameters
        ----------
        self: mupdf::Buffer *

        """
        return _mupdf.Buffer_terminate_buffer(self)


    def trim_buffer(self):
        """
        trim_buffer(Buffer self)

        Parameters
        ----------
        self: mupdf::Buffer *

        """
        return _mupdf.Buffer_trim_buffer(self)


    def __init__(self, *args):
        """
        __init__(mupdf::Buffer self, size_t capacity) -> Buffer

        Parameters
        ----------
        capacity: size_t

        __init__(mupdf::Buffer self, char const * data, size_t size) -> Buffer

        Parameters
        ----------
        data: char const *
        size: size_t

        __init__(mupdf::Buffer self, unsigned char * data, size_t size) -> Buffer

        Parameters
        ----------
        data: unsigned char *
        size: size_t

        __init__(mupdf::Buffer self, DisplayList list, StextOptions options) -> Buffer

        Parameters
        ----------
        list: mupdf::DisplayList const &
        options: mupdf::StextOptions &

        __init__(mupdf::Buffer self, Image image, ColorParams color_params) -> Buffer

        Parameters
        ----------
        image: mupdf::Image const &
        color_params: mupdf::ColorParams &

        __init__(mupdf::Buffer self, Page page, StextOptions options) -> Buffer

        Parameters
        ----------
        page: mupdf::Page const &
        options: mupdf::StextOptions &

        __init__(mupdf::Buffer self, Document doc, int number, StextOptions options) -> Buffer

        Parameters
        ----------
        doc: mupdf::Document const &
        number: int
        options: mupdf::StextOptions &

        __init__(mupdf::Buffer self, Page page, char const * format, char const * options, Matrix transform, Cookie cookie) -> Buffer

        Parameters
        ----------
        page: mupdf::Page const &
        format: char const *
        options: char const *
        transform: mupdf::Matrix &
        cookie: mupdf::Cookie &

        __init__(mupdf::Buffer self, Pixmap pixmap, ColorParams color_params) -> Buffer

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &
        color_params: mupdf::ColorParams &

        __init__(mupdf::Buffer self, unsigned char const * data, size_t size) -> Buffer

        Parameters
        ----------
        data: unsigned char const *
        size: size_t

        __init__(mupdf::Buffer self, StextPage text) -> Buffer

        Parameters
        ----------
        text: mupdf::StextPage const &

        __init__(mupdf::Buffer self, char const * filename) -> Buffer

        Parameters
        ----------
        filename: char const *

        __init__(mupdf::Buffer self, Buffer rhs) -> Buffer

        Parameters
        ----------
        rhs: mupdf::Buffer const &

        __init__(mupdf::Buffer self, fz_buffer internal) -> Buffer

        Parameters
        ----------
        internal: fz_buffer *

        """
        this = _mupdf.new_Buffer(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Buffer
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Buffer_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Buffer_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Buffer_m_internal_get, _mupdf.Buffer_m_internal_set)
Buffer_swigregister = _mupdf.Buffer_swigregister
Buffer_swigregister(Buffer)

def Buffer_new_buffer_from_copied_data(data, size):
    """
    Buffer_new_buffer_from_copied_data(unsigned char const * data, size_t size) -> Buffer

    Parameters
    ----------
    data: unsigned char const *
    size: size_t

    """
    return _mupdf.Buffer_new_buffer_from_copied_data(data, size)

class ColorParams(_object):
    """Proxy of C++ mupdf::ColorParams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorParams, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::ColorParams self, fz_color_params internal) -> ColorParams

        Parameters
        ----------
        internal: fz_color_params const *

        __init__(mupdf::ColorParams self, fz_color_params internal) -> ColorParams

        Parameters
        ----------
        internal: fz_color_params const

        """
        this = _mupdf.new_ColorParams(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def internal(self, *args):
        """
        internal(ColorParams self) -> fz_color_params
        internal(ColorParams self) -> fz_color_params

        Parameters
        ----------
        self: mupdf::ColorParams const *

        """
        return _mupdf.ColorParams_internal(self, *args)

    __swig_setmethods__["ri"] = _mupdf.ColorParams_ri_set
    __swig_getmethods__["ri"] = _mupdf.ColorParams_ri_get
    if _newclass:
        ri = _swig_property(_mupdf.ColorParams_ri_get, _mupdf.ColorParams_ri_set)
    __swig_setmethods__["bp"] = _mupdf.ColorParams_bp_set
    __swig_getmethods__["bp"] = _mupdf.ColorParams_bp_get
    if _newclass:
        bp = _swig_property(_mupdf.ColorParams_bp_get, _mupdf.ColorParams_bp_set)
    __swig_setmethods__["op"] = _mupdf.ColorParams_op_set
    __swig_getmethods__["op"] = _mupdf.ColorParams_op_get
    if _newclass:
        op = _swig_property(_mupdf.ColorParams_op_get, _mupdf.ColorParams_op_set)
    __swig_setmethods__["opm"] = _mupdf.ColorParams_opm_set
    __swig_getmethods__["opm"] = _mupdf.ColorParams_opm_get
    if _newclass:
        opm = _swig_property(_mupdf.ColorParams_opm_get, _mupdf.ColorParams_opm_set)

    def to_string(self):
        """
        to_string(ColorParams self) -> std::string

        Parameters
        ----------
        self: mupdf::ColorParams *

        """
        return _mupdf.ColorParams_to_string(self)

    __swig_destroy__ = _mupdf.delete_ColorParams
    __del__ = lambda self: None
ColorParams_swigregister = _mupdf.ColorParams_swigregister
ColorParams_swigregister(ColorParams)

class Colorspace(_object):
    """Proxy of C++ mupdf::Colorspace class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Colorspace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Colorspace, name)
    __repr__ = _swig_repr
    Fixed_GRAY = _mupdf.Colorspace_Fixed_GRAY
    Fixed_RGB = _mupdf.Colorspace_Fixed_RGB
    Fixed_BGR = _mupdf.Colorspace_Fixed_BGR
    Fixed_CMYK = _mupdf.Colorspace_Fixed_CMYK
    Fixed_LAB = _mupdf.Colorspace_Fixed_LAB

    def clamp_color(self, arg2, out):
        """
        clamp_color(Colorspace self, float const * arg2, float * out)

        Parameters
        ----------
        in: float const *
        out: float *

        """
        return _mupdf.Colorspace_clamp_color(self, arg2, out)


    def colorspace_colorant(self, n):
        """
        colorspace_colorant(Colorspace self, int n) -> char const *

        Parameters
        ----------
        n: int

        """
        return _mupdf.Colorspace_colorspace_colorant(self, n)


    def colorspace_device_n_has_cmyk(self):
        """
        colorspace_device_n_has_cmyk(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_device_n_has_cmyk(self)


    def colorspace_device_n_has_only_cmyk(self):
        """
        colorspace_device_n_has_only_cmyk(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_device_n_has_only_cmyk(self)


    def colorspace_is_cmyk(self):
        """
        colorspace_is_cmyk(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_is_cmyk(self)


    def colorspace_is_device(self):
        """
        colorspace_is_device(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_is_device(self)


    def colorspace_is_device_cmyk(self):
        """
        colorspace_is_device_cmyk(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_is_device_cmyk(self)


    def colorspace_is_device_gray(self):
        """
        colorspace_is_device_gray(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_is_device_gray(self)


    def colorspace_is_device_n(self):
        """
        colorspace_is_device_n(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_is_device_n(self)


    def colorspace_is_gray(self):
        """
        colorspace_is_gray(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_is_gray(self)


    def colorspace_is_indexed(self):
        """
        colorspace_is_indexed(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_is_indexed(self)


    def colorspace_is_lab(self):
        """
        colorspace_is_lab(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_is_lab(self)


    def colorspace_is_lab_icc(self):
        """
        colorspace_is_lab_icc(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_is_lab_icc(self)


    def colorspace_is_rgb(self):
        """
        colorspace_is_rgb(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_is_rgb(self)


    def colorspace_is_subtractive(self):
        """
        colorspace_is_subtractive(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_is_subtractive(self)


    def colorspace_n(self):
        """
        colorspace_n(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_n(self)


    def colorspace_name(self):
        """
        colorspace_name(Colorspace self) -> char const *

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_name(self)


    def colorspace_name_colorant(self, n, name):
        """
        colorspace_name_colorant(Colorspace self, int n, char const * name)

        Parameters
        ----------
        n: int
        name: char const *

        """
        return _mupdf.Colorspace_colorspace_name_colorant(self, n, name)


    def colorspace_type(self):
        """
        colorspace_type(Colorspace self) -> enum fz_colorspace_type

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_colorspace_type(self)


    def convert_color(self, sv, ds, dv, arg5, params):
        """
        convert_color(Colorspace self, float const * sv, Colorspace ds, float * dv, Colorspace arg5, ColorParams params)

        Parameters
        ----------
        sv: float const *
        ds: mupdf::Colorspace const &
        dv: float *
        is: mupdf::Colorspace const &
        params: mupdf::ColorParams &

        """
        return _mupdf.Colorspace_convert_color(self, sv, ds, dv, arg5, params)


    def convert_separation_colors(self, src_color, dst_seps, dst_cs, dst_color, color_params):
        """
        convert_separation_colors(Colorspace self, float const * src_color, Separations dst_seps, Colorspace dst_cs, float * dst_color, ColorParams color_params)

        Parameters
        ----------
        src_color: float const *
        dst_seps: mupdf::Separations const &
        dst_cs: mupdf::Colorspace const &
        dst_color: float *
        color_params: mupdf::ColorParams &

        """
        return _mupdf.Colorspace_convert_separation_colors(self, src_color, dst_seps, dst_cs, dst_color, color_params)


    def is_valid_blend_colorspace(self):
        """
        is_valid_blend_colorspace(Colorspace self) -> int

        Parameters
        ----------
        self: mupdf::Colorspace *

        """
        return _mupdf.Colorspace_is_valid_blend_colorspace(self)


    def new_indexed_colorspace(self, high, lookup):
        """
        new_indexed_colorspace(Colorspace self, int high, unsigned char * lookup) -> Colorspace

        Parameters
        ----------
        high: int
        lookup: unsigned char *

        """
        return _mupdf.Colorspace_new_indexed_colorspace(self, high, lookup)


    def new_pixmap(self, w, h, seps, alpha):
        """
        new_pixmap(Colorspace self, int w, int h, Separations seps, int alpha) -> Pixmap

        Parameters
        ----------
        w: int
        h: int
        seps: mupdf::Separations const &
        alpha: int

        """
        return _mupdf.Colorspace_new_pixmap(self, w, h, seps, alpha)


    def new_pixmap_with_bbox(self, bbox, seps, alpha):
        """
        new_pixmap_with_bbox(Colorspace self, Irect bbox, Separations seps, int alpha) -> Pixmap

        Parameters
        ----------
        bbox: mupdf::Irect &
        seps: mupdf::Separations const &
        alpha: int

        """
        return _mupdf.Colorspace_new_pixmap_with_bbox(self, bbox, seps, alpha)


    def new_pixmap_with_bbox_and_data(self, rect, seps, alpha, samples):
        """
        new_pixmap_with_bbox_and_data(Colorspace self, Irect rect, Separations seps, int alpha, unsigned char * samples) -> Pixmap

        Parameters
        ----------
        rect: mupdf::Irect &
        seps: mupdf::Separations const &
        alpha: int
        samples: unsigned char *

        """
        return _mupdf.Colorspace_new_pixmap_with_bbox_and_data(self, rect, seps, alpha, samples)


    def new_pixmap_with_data(self, w, h, seps, alpha, stride, samples):
        """
        new_pixmap_with_data(Colorspace self, int w, int h, Separations seps, int alpha, int stride, unsigned char * samples) -> Pixmap

        Parameters
        ----------
        w: int
        h: int
        seps: mupdf::Separations const &
        alpha: int
        stride: int
        samples: unsigned char *

        """
        return _mupdf.Colorspace_new_pixmap_with_data(self, w, h, seps, alpha, stride, samples)


    def __init__(self, *args):
        """
        __init__(mupdf::Colorspace self, float [3] wp, float [3] bp, float gamma) -> Colorspace

        Parameters
        ----------
        wp: float [3]
        bp: float [3]
        gamma: float

        __init__(mupdf::Colorspace self, float [3] wp, float [3] bp, float [3] gamma, float [9] matrix) -> Colorspace

        Parameters
        ----------
        wp: float [3]
        bp: float [3]
        gamma: float [3]
        matrix: float [9]

        __init__(mupdf::Colorspace self, enum fz_colorspace_type type, int flags, int n, char const * name) -> Colorspace

        Parameters
        ----------
        type: enum enum fz_colorspace_type
        flags: int
        n: int
        name: char const *

        __init__(mupdf::Colorspace self, enum fz_colorspace_type type, int flags, char const * name, Buffer buf) -> Colorspace

        Parameters
        ----------
        type: enum enum fz_colorspace_type
        flags: int
        name: char const *
        buf: mupdf::Buffer const &

        __init__(mupdf::Colorspace self, Colorspace base, int high, unsigned char * lookup) -> Colorspace

        Parameters
        ----------
        base: mupdf::Colorspace const &
        high: int
        lookup: unsigned char *

        __init__(mupdf::Colorspace self, mupdf::Colorspace::Fixed fixed) -> Colorspace

        Parameters
        ----------
        fixed: enum mupdf::Colorspace::Fixed

        __init__(mupdf::Colorspace self) -> Colorspace
        __init__(mupdf::Colorspace self, Colorspace rhs) -> Colorspace

        Parameters
        ----------
        rhs: mupdf::Colorspace const &

        __init__(mupdf::Colorspace self, fz_colorspace * internal) -> Colorspace

        Parameters
        ----------
        internal: fz_colorspace *

        """
        this = _mupdf.new_Colorspace(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Colorspace
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Colorspace_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Colorspace_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Colorspace_m_internal_get, _mupdf.Colorspace_m_internal_set)
Colorspace_swigregister = _mupdf.Colorspace_swigregister
Colorspace_swigregister(Colorspace)

class ColorspaceContext(_object):
    """Proxy of C++ mupdf::ColorspaceContext class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorspaceContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ColorspaceContext, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::ColorspaceContext self, fz_colorspace_context * internal) -> ColorspaceContext

        Parameters
        ----------
        internal: fz_colorspace_context *

        """
        this = _mupdf.new_ColorspaceContext(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.ColorspaceContext_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.ColorspaceContext_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.ColorspaceContext_m_internal_get, _mupdf.ColorspaceContext_m_internal_set)
    __swig_destroy__ = _mupdf.delete_ColorspaceContext
    __del__ = lambda self: None
ColorspaceContext_swigregister = _mupdf.ColorspaceContext_swigregister
ColorspaceContext_swigregister(ColorspaceContext)

class CompressedBuffer(_object):
    """Proxy of C++ mupdf::CompressedBuffer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompressedBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompressedBuffer, name)
    __repr__ = _swig_repr

    def compressed_buffer_size(self):
        """
        compressed_buffer_size(CompressedBuffer self) -> size_t

        Parameters
        ----------
        self: mupdf::CompressedBuffer *

        """
        return _mupdf.CompressedBuffer_compressed_buffer_size(self)


    def open_compressed_buffer(self):
        """
        open_compressed_buffer(CompressedBuffer self) -> Stream

        Parameters
        ----------
        self: mupdf::CompressedBuffer *

        """
        return _mupdf.CompressedBuffer_open_compressed_buffer(self)


    def open_image_decomp_stream_from_buffer(self, l2factor):
        """
        open_image_decomp_stream_from_buffer(CompressedBuffer self, int * l2factor) -> Stream

        Parameters
        ----------
        l2factor: int *

        """
        return _mupdf.CompressedBuffer_open_image_decomp_stream_from_buffer(self, l2factor)


    def __init__(self, internal):
        """
        __init__(mupdf::CompressedBuffer self, fz_compressed_buffer internal) -> CompressedBuffer

        Parameters
        ----------
        internal: fz_compressed_buffer *

        """
        this = _mupdf.new_CompressedBuffer(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_CompressedBuffer
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.CompressedBuffer_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.CompressedBuffer_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.CompressedBuffer_m_internal_get, _mupdf.CompressedBuffer_m_internal_set)
CompressedBuffer_swigregister = _mupdf.CompressedBuffer_swigregister
CompressedBuffer_swigregister(CompressedBuffer)

class CompressedImage(_object):
    """Proxy of C++ mupdf::CompressedImage class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompressedImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompressedImage, name)
    __repr__ = _swig_repr

    def set_compressed_image_buffer(self, buf):
        """
        set_compressed_image_buffer(CompressedImage self, CompressedBuffer buf)

        Parameters
        ----------
        buf: mupdf::CompressedBuffer const &

        """
        return _mupdf.CompressedImage_set_compressed_image_buffer(self, buf)


    def __init__(self, internal):
        """
        __init__(mupdf::CompressedImage self, fz_compressed_image * internal) -> CompressedImage

        Parameters
        ----------
        internal: fz_compressed_image *

        """
        this = _mupdf.new_CompressedImage(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.CompressedImage_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.CompressedImage_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.CompressedImage_m_internal_get, _mupdf.CompressedImage_m_internal_set)
    __swig_destroy__ = _mupdf.delete_CompressedImage
    __del__ = lambda self: None
CompressedImage_swigregister = _mupdf.CompressedImage_swigregister
CompressedImage_swigregister(CompressedImage)

class CompressionParams(_object):
    """Proxy of C++ mupdf::CompressionParams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CompressionParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CompressionParams, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::CompressionParams self, fz_compression_params internal) -> CompressionParams

        Parameters
        ----------
        internal: fz_compression_params *

        """
        this = _mupdf.new_CompressionParams(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.CompressionParams_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.CompressionParams_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.CompressionParams_m_internal_get, _mupdf.CompressionParams_m_internal_set)
    __swig_destroy__ = _mupdf.delete_CompressionParams
    __del__ = lambda self: None
CompressionParams_swigregister = _mupdf.CompressionParams_swigregister
CompressionParams_swigregister(CompressionParams)

class Context(_object):
    """Proxy of C++ mupdf::Context class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Context, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::Context self, AllocContext alloc, LocksContext locks, size_t max_store, char const * version) -> Context

        Parameters
        ----------
        alloc: mupdf::AllocContext const &
        locks: mupdf::LocksContext const &
        max_store: size_t
        version: char const *

        __init__(mupdf::Context self, fz_context * internal) -> Context

        Parameters
        ----------
        internal: fz_context *

        """
        this = _mupdf.new_Context(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.Context_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Context_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Context_m_internal_get, _mupdf.Context_m_internal_set)
    __swig_destroy__ = _mupdf.delete_Context
    __del__ = lambda self: None
Context_swigregister = _mupdf.Context_swigregister
Context_swigregister(Context)

class Cookie(_object):
    """Proxy of C++ mupdf::Cookie class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cookie, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cookie, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(mupdf::Cookie self) -> Cookie"""
        this = _mupdf.new_Cookie()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_abort(self):
        """
        set_abort(Cookie self)

        Parameters
        ----------
        self: mupdf::Cookie *

        """
        return _mupdf.Cookie_set_abort(self)


    def increment_errors(self, delta):
        """
        increment_errors(Cookie self, int delta)

        Parameters
        ----------
        delta: int

        """
        return _mupdf.Cookie_increment_errors(self, delta)


    def progress(self):
        """
        progress(Cookie self) -> int

        Parameters
        ----------
        self: mupdf::Cookie *

        """
        return _mupdf.Cookie_progress(self)


    def progress_max(self):
        """
        progress_max(Cookie self) -> size_t

        Parameters
        ----------
        self: mupdf::Cookie *

        """
        return _mupdf.Cookie_progress_max(self)


    def errors(self):
        """
        errors(Cookie self) -> int

        Parameters
        ----------
        self: mupdf::Cookie *

        """
        return _mupdf.Cookie_errors(self)


    def incomplete(self):
        """
        incomplete(Cookie self) -> int

        Parameters
        ----------
        self: mupdf::Cookie *

        """
        return _mupdf.Cookie_incomplete(self)

    __swig_setmethods__["m_internal"] = _mupdf.Cookie_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Cookie_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Cookie_m_internal_get, _mupdf.Cookie_m_internal_set)

    def to_string(self):
        """
        to_string(Cookie self) -> std::string

        Parameters
        ----------
        self: mupdf::Cookie *

        """
        return _mupdf.Cookie_to_string(self)

    __swig_destroy__ = _mupdf.delete_Cookie
    __del__ = lambda self: None
Cookie_swigregister = _mupdf.Cookie_swigregister
Cookie_swigregister(Cookie)

class DefaultColorspaces(_object):
    """Proxy of C++ mupdf::DefaultColorspaces class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultColorspaces, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultColorspaces, name)
    __repr__ = _swig_repr

    def clone_default_colorspaces(self):
        """
        clone_default_colorspaces(DefaultColorspaces self) -> DefaultColorspaces

        Parameters
        ----------
        self: mupdf::DefaultColorspaces *

        """
        return _mupdf.DefaultColorspaces_clone_default_colorspaces(self)


    def default_cmyk(self):
        """
        default_cmyk(DefaultColorspaces self) -> Colorspace

        Parameters
        ----------
        self: mupdf::DefaultColorspaces *

        """
        return _mupdf.DefaultColorspaces_default_cmyk(self)


    def default_gray(self):
        """
        default_gray(DefaultColorspaces self) -> Colorspace

        Parameters
        ----------
        self: mupdf::DefaultColorspaces *

        """
        return _mupdf.DefaultColorspaces_default_gray(self)


    def default_output_intent(self):
        """
        default_output_intent(DefaultColorspaces self) -> Colorspace

        Parameters
        ----------
        self: mupdf::DefaultColorspaces *

        """
        return _mupdf.DefaultColorspaces_default_output_intent(self)


    def default_rgb(self):
        """
        default_rgb(DefaultColorspaces self) -> Colorspace

        Parameters
        ----------
        self: mupdf::DefaultColorspaces *

        """
        return _mupdf.DefaultColorspaces_default_rgb(self)


    def set_default_cmyk(self, cs):
        """
        set_default_cmyk(DefaultColorspaces self, Colorspace cs)

        Parameters
        ----------
        cs: mupdf::Colorspace const &

        """
        return _mupdf.DefaultColorspaces_set_default_cmyk(self, cs)


    def set_default_gray(self, cs):
        """
        set_default_gray(DefaultColorspaces self, Colorspace cs)

        Parameters
        ----------
        cs: mupdf::Colorspace const &

        """
        return _mupdf.DefaultColorspaces_set_default_gray(self, cs)


    def set_default_output_intent(self, cs):
        """
        set_default_output_intent(DefaultColorspaces self, Colorspace cs)

        Parameters
        ----------
        cs: mupdf::Colorspace const &

        """
        return _mupdf.DefaultColorspaces_set_default_output_intent(self, cs)


    def set_default_rgb(self, cs):
        """
        set_default_rgb(DefaultColorspaces self, Colorspace cs)

        Parameters
        ----------
        cs: mupdf::Colorspace const &

        """
        return _mupdf.DefaultColorspaces_set_default_rgb(self, cs)


    def __init__(self, *args):
        """
        __init__(mupdf::DefaultColorspaces self) -> DefaultColorspaces
        __init__(mupdf::DefaultColorspaces self, DefaultColorspaces rhs) -> DefaultColorspaces

        Parameters
        ----------
        rhs: mupdf::DefaultColorspaces const &

        __init__(mupdf::DefaultColorspaces self, fz_default_colorspaces internal) -> DefaultColorspaces

        Parameters
        ----------
        internal: fz_default_colorspaces *

        """
        this = _mupdf.new_DefaultColorspaces(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_DefaultColorspaces
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.DefaultColorspaces_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.DefaultColorspaces_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.DefaultColorspaces_m_internal_get, _mupdf.DefaultColorspaces_m_internal_set)
DefaultColorspaces_swigregister = _mupdf.DefaultColorspaces_swigregister
DefaultColorspaces_swigregister(DefaultColorspaces)

class Device(_object):
    """Proxy of C++ mupdf::Device class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Device, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Device, name)
    __repr__ = _swig_repr

    def new_xmltext_device(out):
        """
        new_xmltext_device(Output out) -> Device

        Parameters
        ----------
        out: mupdf::Output const &

        """
        return _mupdf.Device_new_xmltext_device(out)

    new_xmltext_device = staticmethod(new_xmltext_device)

    def new_draw_device_type3(transform, dest):
        """
        new_draw_device_type3(Matrix transform, Pixmap dest) -> Device

        Parameters
        ----------
        transform: mupdf::Matrix &
        dest: mupdf::Pixmap const &

        """
        return _mupdf.Device_new_draw_device_type3(transform, dest)

    new_draw_device_type3 = staticmethod(new_draw_device_type3)

    def begin_group(self, area, cs, isolated, knockout, blendmode, alpha):
        """
        begin_group(Device self, Rect area, Colorspace cs, int isolated, int knockout, int blendmode, float alpha)

        Parameters
        ----------
        area: mupdf::Rect &
        cs: mupdf::Colorspace const &
        isolated: int
        knockout: int
        blendmode: int
        alpha: float

        """
        return _mupdf.Device_begin_group(self, area, cs, isolated, knockout, blendmode, alpha)


    def begin_layer(self, layer_name):
        """
        begin_layer(Device self, char const * layer_name)

        Parameters
        ----------
        layer_name: char const *

        """
        return _mupdf.Device_begin_layer(self, layer_name)


    def begin_mask(self, area, luminosity, colorspace, bc, color_params):
        """
        begin_mask(Device self, Rect area, int luminosity, Colorspace colorspace, float const * bc, ColorParams color_params)

        Parameters
        ----------
        area: mupdf::Rect &
        luminosity: int
        colorspace: mupdf::Colorspace const &
        bc: float const *
        color_params: mupdf::ColorParams &

        """
        return _mupdf.Device_begin_mask(self, area, luminosity, colorspace, bc, color_params)


    def begin_tile(self, area, view, xstep, ystep, ctm):
        """
        begin_tile(Device self, Rect area, Rect view, float xstep, float ystep, Matrix ctm)

        Parameters
        ----------
        area: mupdf::Rect &
        view: mupdf::Rect &
        xstep: float
        ystep: float
        ctm: mupdf::Matrix &

        """
        return _mupdf.Device_begin_tile(self, area, view, xstep, ystep, ctm)


    def begin_tile_id(self, area, view, xstep, ystep, ctm, id):
        """
        begin_tile_id(Device self, Rect area, Rect view, float xstep, float ystep, Matrix ctm, int id) -> int

        Parameters
        ----------
        area: mupdf::Rect &
        view: mupdf::Rect &
        xstep: float
        ystep: float
        ctm: mupdf::Matrix &
        id: int

        """
        return _mupdf.Device_begin_tile_id(self, area, view, xstep, ystep, ctm, id)


    def clip_image_mask(self, image, ctm, scissor):
        """
        clip_image_mask(Device self, Image image, Matrix ctm, Rect scissor)

        Parameters
        ----------
        image: mupdf::Image const &
        ctm: mupdf::Matrix &
        scissor: mupdf::Rect &

        """
        return _mupdf.Device_clip_image_mask(self, image, ctm, scissor)


    def clip_path(self, path, even_odd, ctm, scissor):
        """
        clip_path(Device self, Path path, int even_odd, Matrix ctm, Rect scissor)

        Parameters
        ----------
        path: mupdf::Path const &
        even_odd: int
        ctm: mupdf::Matrix &
        scissor: mupdf::Rect &

        """
        return _mupdf.Device_clip_path(self, path, even_odd, ctm, scissor)


    def clip_stroke_path(self, path, stroke, ctm, scissor):
        """
        clip_stroke_path(Device self, Path path, StrokeState stroke, Matrix ctm, Rect scissor)

        Parameters
        ----------
        path: mupdf::Path const &
        stroke: mupdf::StrokeState const &
        ctm: mupdf::Matrix &
        scissor: mupdf::Rect &

        """
        return _mupdf.Device_clip_stroke_path(self, path, stroke, ctm, scissor)


    def clip_stroke_text(self, text, stroke, ctm, scissor):
        """
        clip_stroke_text(Device self, Text text, StrokeState stroke, Matrix ctm, Rect scissor)

        Parameters
        ----------
        text: mupdf::Text const &
        stroke: mupdf::StrokeState const &
        ctm: mupdf::Matrix &
        scissor: mupdf::Rect &

        """
        return _mupdf.Device_clip_stroke_text(self, text, stroke, ctm, scissor)


    def clip_text(self, text, ctm, scissor):
        """
        clip_text(Device self, Text text, Matrix ctm, Rect scissor)

        Parameters
        ----------
        text: mupdf::Text const &
        ctm: mupdf::Matrix &
        scissor: mupdf::Rect &

        """
        return _mupdf.Device_clip_text(self, text, ctm, scissor)


    def close_device(self):
        """
        close_device(Device self)

        Parameters
        ----------
        self: mupdf::Device *

        """
        return _mupdf.Device_close_device(self)


    def device_current_scissor(self):
        """
        device_current_scissor(Device self) -> Rect

        Parameters
        ----------
        self: mupdf::Device *

        """
        return _mupdf.Device_device_current_scissor(self)


    def disable_device_hints(self, hints):
        """
        disable_device_hints(Device self, int hints)

        Parameters
        ----------
        hints: int

        """
        return _mupdf.Device_disable_device_hints(self, hints)


    def enable_device_hints(self, hints):
        """
        enable_device_hints(Device self, int hints)

        Parameters
        ----------
        hints: int

        """
        return _mupdf.Device_enable_device_hints(self, hints)


    def end_group(self):
        """
        end_group(Device self)

        Parameters
        ----------
        self: mupdf::Device *

        """
        return _mupdf.Device_end_group(self)


    def end_layer(self):
        """
        end_layer(Device self)

        Parameters
        ----------
        self: mupdf::Device *

        """
        return _mupdf.Device_end_layer(self)


    def end_mask(self):
        """
        end_mask(Device self)

        Parameters
        ----------
        self: mupdf::Device *

        """
        return _mupdf.Device_end_mask(self)


    def end_tile(self):
        """
        end_tile(Device self)

        Parameters
        ----------
        self: mupdf::Device *

        """
        return _mupdf.Device_end_tile(self)


    def fill_image(self, image, ctm, alpha, color_params):
        """
        fill_image(Device self, Image image, Matrix ctm, float alpha, ColorParams color_params)

        Parameters
        ----------
        image: mupdf::Image const &
        ctm: mupdf::Matrix &
        alpha: float
        color_params: mupdf::ColorParams &

        """
        return _mupdf.Device_fill_image(self, image, ctm, alpha, color_params)


    def fill_image_mask(self, image, ctm, colorspace, color, alpha, color_params):
        """
        fill_image_mask(Device self, Image image, Matrix ctm, Colorspace colorspace, float const * color, float alpha, ColorParams color_params)

        Parameters
        ----------
        image: mupdf::Image const &
        ctm: mupdf::Matrix &
        colorspace: mupdf::Colorspace const &
        color: float const *
        alpha: float
        color_params: mupdf::ColorParams &

        """
        return _mupdf.Device_fill_image_mask(self, image, ctm, colorspace, color, alpha, color_params)


    def fill_path(self, path, even_odd, ctm, colorspace, color, alpha, color_params):
        """
        fill_path(Device self, Path path, int even_odd, Matrix ctm, Colorspace colorspace, float const * color, float alpha, ColorParams color_params)

        Parameters
        ----------
        path: mupdf::Path const &
        even_odd: int
        ctm: mupdf::Matrix &
        colorspace: mupdf::Colorspace const &
        color: float const *
        alpha: float
        color_params: mupdf::ColorParams &

        """
        return _mupdf.Device_fill_path(self, path, even_odd, ctm, colorspace, color, alpha, color_params)


    def fill_shade(self, shade, ctm, alpha, color_params):
        """
        fill_shade(Device self, Shade shade, Matrix ctm, float alpha, ColorParams color_params)

        Parameters
        ----------
        shade: mupdf::Shade const &
        ctm: mupdf::Matrix &
        alpha: float
        color_params: mupdf::ColorParams &

        """
        return _mupdf.Device_fill_shade(self, shade, ctm, alpha, color_params)


    def fill_text(self, text, ctm, colorspace, color, alpha, color_params):
        """
        fill_text(Device self, Text text, Matrix ctm, Colorspace colorspace, float const * color, float alpha, ColorParams color_params)

        Parameters
        ----------
        text: mupdf::Text const &
        ctm: mupdf::Matrix &
        colorspace: mupdf::Colorspace const &
        color: float const *
        alpha: float
        color_params: mupdf::ColorParams &

        """
        return _mupdf.Device_fill_text(self, text, ctm, colorspace, color, alpha, color_params)


    def ignore_text(self, text, ctm):
        """
        ignore_text(Device self, Text text, Matrix ctm)

        Parameters
        ----------
        text: mupdf::Text const &
        ctm: mupdf::Matrix &

        """
        return _mupdf.Device_ignore_text(self, text, ctm)


    def new_ocr_device(self, ctm, mediabox, with_list, language, datadir, progress, progress_arg):
        """
        new_ocr_device(Device self, Matrix ctm, Rect mediabox, int with_list, char const * language, char const * datadir, int (*)(fz_context *,void *,int) progress, void * progress_arg) -> Device

        Parameters
        ----------
        ctm: mupdf::Matrix &
        mediabox: mupdf::Rect &
        with_list: int
        language: char const *
        datadir: char const *
        progress: int (*)(fz_context *,void *,int)
        progress_arg: void *

        """
        return _mupdf.Device_new_ocr_device(self, ctm, mediabox, with_list, language, datadir, progress, progress_arg)


    def pop_clip(self):
        """
        pop_clip(Device self)

        Parameters
        ----------
        self: mupdf::Device *

        """
        return _mupdf.Device_pop_clip(self)


    def render_flags(self, set, clear):
        """
        render_flags(Device self, int set, int clear)

        Parameters
        ----------
        set: int
        clear: int

        """
        return _mupdf.Device_render_flags(self, set, clear)


    def render_t3_glyph_direct(self, font, gid, trm, gstate, def_cs):
        """
        render_t3_glyph_direct(Device self, Font font, int gid, Matrix trm, void * gstate, DefaultColorspaces def_cs)

        Parameters
        ----------
        font: mupdf::Font const &
        gid: int
        trm: mupdf::Matrix &
        gstate: void *
        def_cs: mupdf::DefaultColorspaces const &

        """
        return _mupdf.Device_render_t3_glyph_direct(self, font, gid, trm, gstate, def_cs)


    def set_default_colorspaces(self, default_cs):
        """
        set_default_colorspaces(Device self, DefaultColorspaces default_cs)

        Parameters
        ----------
        default_cs: mupdf::DefaultColorspaces const &

        """
        return _mupdf.Device_set_default_colorspaces(self, default_cs)


    def stroke_path(self, path, stroke, ctm, colorspace, color, alpha, color_params):
        """
        stroke_path(Device self, Path path, StrokeState stroke, Matrix ctm, Colorspace colorspace, float const * color, float alpha, ColorParams color_params)

        Parameters
        ----------
        path: mupdf::Path const &
        stroke: mupdf::StrokeState const &
        ctm: mupdf::Matrix &
        colorspace: mupdf::Colorspace const &
        color: float const *
        alpha: float
        color_params: mupdf::ColorParams &

        """
        return _mupdf.Device_stroke_path(self, path, stroke, ctm, colorspace, color, alpha, color_params)


    def stroke_text(self, text, stroke, ctm, colorspace, color, alpha, color_params):
        """
        stroke_text(Device self, Text text, StrokeState stroke, Matrix ctm, Colorspace colorspace, float const * color, float alpha, ColorParams color_params)

        Parameters
        ----------
        text: mupdf::Text const &
        stroke: mupdf::StrokeState const &
        ctm: mupdf::Matrix &
        colorspace: mupdf::Colorspace const &
        color: float const *
        alpha: float
        color_params: mupdf::ColorParams &

        """
        return _mupdf.Device_stroke_text(self, text, stroke, ctm, colorspace, color, alpha, color_params)


    def __init__(self, *args):
        """
        __init__(mupdf::Device self, Rect rectp) -> Device

        Parameters
        ----------
        rectp: mupdf::Rect &

        __init__(mupdf::Device self, int size) -> Device

        Parameters
        ----------
        size: int

        __init__(mupdf::Device self, Matrix transform, Pixmap dest) -> Device

        Parameters
        ----------
        transform: mupdf::Matrix &
        dest: mupdf::Pixmap const &

        __init__(mupdf::Device self, Matrix transform, Pixmap dest, Irect clip) -> Device

        Parameters
        ----------
        transform: mupdf::Matrix &
        dest: mupdf::Pixmap const &
        clip: mupdf::Irect &

        __init__(mupdf::Device self, Matrix transform, Pixmap dest, Irect clip, Colorspace cs) -> Device

        Parameters
        ----------
        transform: mupdf::Matrix &
        dest: mupdf::Pixmap const &
        clip: mupdf::Irect &
        cs: mupdf::Colorspace const &

        __init__(mupdf::Device self, Matrix transform, Pixmap dest, Colorspace proof_cs) -> Device

        Parameters
        ----------
        transform: mupdf::Matrix &
        dest: mupdf::Pixmap const &
        proof_cs: mupdf::Colorspace const &

        __init__(mupdf::Device self, DisplayList list) -> Device

        Parameters
        ----------
        list: mupdf::DisplayList const &

        __init__(mupdf::Device self, Device target, Matrix ctm, Rect mediabox, int with_list, char const * language, char const * datadir, int (*)(fz_context *,void *,int) progress, void * progress_arg) -> Device

        Parameters
        ----------
        target: mupdf::Device const &
        ctm: mupdf::Matrix &
        mediabox: mupdf::Rect &
        with_list: int
        language: char const *
        datadir: char const *
        progress: int (*)(fz_context *,void *,int)
        progress_arg: void *

        __init__(mupdf::Device self, StextPage page, StextOptions options) -> Device

        Parameters
        ----------
        page: mupdf::StextPage const &
        options: mupdf::StextOptions &

        __init__(mupdf::Device self, Output out, float page_width, float page_height, int text_format, int reuse_images) -> Device

        Parameters
        ----------
        out: mupdf::Output const &
        page_width: float
        page_height: float
        text_format: int
        reuse_images: int

        __init__(mupdf::Device self, Output out, float page_width, float page_height, int text_format, int reuse_images, int * id) -> Device

        Parameters
        ----------
        out: mupdf::Output const &
        page_width: float
        page_height: float
        text_format: int
        reuse_images: int
        id: int *

        __init__(mupdf::Device self, int * is_color, float threshold, int options, Device passthrough) -> Device

        Parameters
        ----------
        is_color: int *
        threshold: float
        options: int
        passthrough: mupdf::Device const &

        __init__(mupdf::Device self, Output out) -> Device

        Parameters
        ----------
        out: mupdf::Output const &

        __init__(mupdf::Device self) -> Device
        __init__(mupdf::Device self, Device rhs) -> Device

        Parameters
        ----------
        rhs: mupdf::Device const &

        __init__(mupdf::Device self, fz_device * internal) -> Device

        Parameters
        ----------
        internal: fz_device *

        """
        this = _mupdf.new_Device(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Device
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Device_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Device_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Device_m_internal_get, _mupdf.Device_m_internal_set)
Device_swigregister = _mupdf.Device_swigregister
Device_swigregister(Device)

def Device_new_xmltext_device(out):
    """
    Device_new_xmltext_device(Output out) -> Device

    Parameters
    ----------
    out: mupdf::Output const &

    """
    return _mupdf.Device_new_xmltext_device(out)

def Device_new_draw_device_type3(transform, dest):
    """
    Device_new_draw_device_type3(Matrix transform, Pixmap dest) -> Device

    Parameters
    ----------
    transform: mupdf::Matrix &
    dest: mupdf::Pixmap const &

    """
    return _mupdf.Device_new_draw_device_type3(transform, dest)

class DeviceContainerStack(_object):
    """Proxy of C++ mupdf::DeviceContainerStack class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceContainerStack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceContainerStack, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::DeviceContainerStack self, fz_device_container_stack internal) -> DeviceContainerStack

        Parameters
        ----------
        internal: fz_device_container_stack *

        """
        this = _mupdf.new_DeviceContainerStack(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.DeviceContainerStack_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.DeviceContainerStack_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.DeviceContainerStack_m_internal_get, _mupdf.DeviceContainerStack_m_internal_set)
    __swig_destroy__ = _mupdf.delete_DeviceContainerStack
    __del__ = lambda self: None
DeviceContainerStack_swigregister = _mupdf.DeviceContainerStack_swigregister
DeviceContainerStack_swigregister(DeviceContainerStack)

class DisplayList(_object):
    """Proxy of C++ mupdf::DisplayList class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisplayList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DisplayList, name)
    __repr__ = _swig_repr

    def new_display_list_from_page_contents(page):
        """
        new_display_list_from_page_contents(Page page) -> DisplayList

        Parameters
        ----------
        page: mupdf::Page const &

        """
        return _mupdf.DisplayList_new_display_list_from_page_contents(page)

    new_display_list_from_page_contents = staticmethod(new_display_list_from_page_contents)

    def bound_display_list(self):
        """
        bound_display_list(DisplayList self) -> Rect

        Parameters
        ----------
        self: mupdf::DisplayList *

        """
        return _mupdf.DisplayList_bound_display_list(self)


    def display_list_is_empty(self):
        """
        display_list_is_empty(DisplayList self) -> int

        Parameters
        ----------
        self: mupdf::DisplayList *

        """
        return _mupdf.DisplayList_display_list_is_empty(self)


    def new_buffer_from_display_list(self, options):
        """
        new_buffer_from_display_list(DisplayList self, StextOptions options) -> Buffer

        Parameters
        ----------
        options: mupdf::StextOptions &

        """
        return _mupdf.DisplayList_new_buffer_from_display_list(self, options)


    def new_list_device(self):
        """
        new_list_device(DisplayList self) -> Device

        Parameters
        ----------
        self: mupdf::DisplayList *

        """
        return _mupdf.DisplayList_new_list_device(self)


    def new_pixmap_from_display_list(self, ctm, cs, alpha):
        """
        new_pixmap_from_display_list(DisplayList self, Matrix ctm, Colorspace cs, int alpha) -> Pixmap

        Parameters
        ----------
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        alpha: int

        """
        return _mupdf.DisplayList_new_pixmap_from_display_list(self, ctm, cs, alpha)


    def new_pixmap_from_display_list_with_separations(self, ctm, cs, seps, alpha):
        """
        new_pixmap_from_display_list_with_separations(DisplayList self, Matrix ctm, Colorspace cs, Separations seps, int alpha) -> Pixmap

        Parameters
        ----------
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        seps: mupdf::Separations const &
        alpha: int

        """
        return _mupdf.DisplayList_new_pixmap_from_display_list_with_separations(self, ctm, cs, seps, alpha)


    def run_display_list(self, dev, ctm, scissor, cookie):
        """
        run_display_list(DisplayList self, Device dev, Matrix ctm, Rect scissor, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        ctm: mupdf::Matrix &
        scissor: mupdf::Rect &
        cookie: mupdf::Cookie &

        """
        return _mupdf.DisplayList_run_display_list(self, dev, ctm, scissor, cookie)


    def search_display_list(self, needle, hit_bbox, hit_max):
        """
        search_display_list(DisplayList self, char const * needle, Quad hit_bbox, int hit_max) -> int

        Parameters
        ----------
        needle: char const *
        hit_bbox: mupdf::Quad &
        hit_max: int

        """
        return _mupdf.DisplayList_search_display_list(self, needle, hit_bbox, hit_max)


    def __init__(self, *args):
        """
        __init__(mupdf::DisplayList self, Rect mediabox) -> DisplayList

        Parameters
        ----------
        mediabox: mupdf::Rect &

        __init__(mupdf::DisplayList self, Page page) -> DisplayList

        Parameters
        ----------
        page: mupdf::Page const &

        __init__(mupdf::DisplayList self, Document doc, int number) -> DisplayList

        Parameters
        ----------
        doc: mupdf::Document const &
        number: int

        __init__(mupdf::DisplayList self, Buffer buf, char const * base_uri, Archive zip, float * w, float * h) -> DisplayList

        Parameters
        ----------
        buf: mupdf::Buffer const &
        base_uri: char const *
        zip: mupdf::Archive const &
        w: float *
        h: float *

        __init__(mupdf::DisplayList self, XmlDoc xmldoc, Xml xml, char const * base_uri, Archive zip, float * w, float * h) -> DisplayList

        Parameters
        ----------
        xmldoc: mupdf::XmlDoc const &
        xml: mupdf::Xml const &
        base_uri: char const *
        zip: mupdf::Archive const &
        w: float *
        h: float *

        __init__(mupdf::DisplayList self, DisplayList rhs) -> DisplayList

        Parameters
        ----------
        rhs: mupdf::DisplayList const &

        __init__(mupdf::DisplayList self, fz_display_list * internal) -> DisplayList

        Parameters
        ----------
        internal: fz_display_list *

        """
        this = _mupdf.new_DisplayList(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_DisplayList
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.DisplayList_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.DisplayList_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.DisplayList_m_internal_get, _mupdf.DisplayList_m_internal_set)
DisplayList_swigregister = _mupdf.DisplayList_swigregister
DisplayList_swigregister(DisplayList)

def DisplayList_new_display_list_from_page_contents(page):
    """
    DisplayList_new_display_list_from_page_contents(Page page) -> DisplayList

    Parameters
    ----------
    page: mupdf::Page const &

    """
    return _mupdf.DisplayList_new_display_list_from_page_contents(page)

class Document(_object):
    """Proxy of C++ mupdf::Document class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Document, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Document, name)
    __repr__ = _swig_repr

    def authenticate_password(self, password):
        """
        authenticate_password(Document self, char const * password) -> int

        Parameters
        ----------
        password: char const *

        """
        return _mupdf.Document_authenticate_password(self, password)


    def clamp_location(self, loc):
        """
        clamp_location(Document self, Location loc) -> Location

        Parameters
        ----------
        loc: mupdf::Location &

        """
        return _mupdf.Document_clamp_location(self, loc)


    def count_chapter_pages(self, chapter):
        """
        count_chapter_pages(Document self, int chapter) -> int

        Parameters
        ----------
        chapter: int

        """
        return _mupdf.Document_count_chapter_pages(self, chapter)


    def count_chapters(self):
        """
        count_chapters(Document self) -> int

        Parameters
        ----------
        self: mupdf::Document *

        """
        return _mupdf.Document_count_chapters(self)


    def count_pages(self):
        """
        count_pages(Document self) -> int

        Parameters
        ----------
        self: mupdf::Document *

        """
        return _mupdf.Document_count_pages(self)


    def document_output_intent(self):
        """
        document_output_intent(Document self) -> Colorspace

        Parameters
        ----------
        self: mupdf::Document *

        """
        return _mupdf.Document_document_output_intent(self)


    def document_supports_accelerator(self):
        """
        document_supports_accelerator(Document self) -> int

        Parameters
        ----------
        self: mupdf::Document *

        """
        return _mupdf.Document_document_supports_accelerator(self)


    def has_permission(self, p):
        """
        has_permission(Document self, fz_permission p) -> int

        Parameters
        ----------
        p: enum fz_permission

        """
        return _mupdf.Document_has_permission(self, p)


    def is_document_reflowable(self):
        """
        is_document_reflowable(Document self) -> int

        Parameters
        ----------
        self: mupdf::Document *

        """
        return _mupdf.Document_is_document_reflowable(self)


    def last_page(self):
        """
        last_page(Document self) -> Location

        Parameters
        ----------
        self: mupdf::Document *

        """
        return _mupdf.Document_last_page(self)


    def layout_document(self, w, h, em):
        """
        layout_document(Document self, float w, float h, float em)

        Parameters
        ----------
        w: float
        h: float
        em: float

        """
        return _mupdf.Document_layout_document(self, w, h, em)


    def load_chapter_page(self, chapter, page):
        """
        load_chapter_page(Document self, int chapter, int page) -> Page

        Parameters
        ----------
        chapter: int
        page: int

        """
        return _mupdf.Document_load_chapter_page(self, chapter, page)


    def load_outline(self):
        """
        load_outline(Document self) -> Outline

        Parameters
        ----------
        self: mupdf::Document *

        """
        return _mupdf.Document_load_outline(self)


    def load_page(self, number):
        """
        load_page(Document self, int number) -> Page

        Parameters
        ----------
        number: int

        """
        return _mupdf.Document_load_page(self, number)


    def location_from_page_number(self, number):
        """
        location_from_page_number(Document self, int number) -> Location

        Parameters
        ----------
        number: int

        """
        return _mupdf.Document_location_from_page_number(self, number)


    def lookup_bookmark(self, mark):
        """
        lookup_bookmark(Document self, fz_bookmark mark) -> Location

        Parameters
        ----------
        mark: fz_bookmark

        """
        return _mupdf.Document_lookup_bookmark(self, mark)


    def make_bookmark(self, loc):
        """
        make_bookmark(Document self, Location loc) -> fz_bookmark

        Parameters
        ----------
        loc: mupdf::Location &

        """
        return _mupdf.Document_make_bookmark(self, loc)


    def needs_password(self):
        """
        needs_password(Document self) -> int

        Parameters
        ----------
        self: mupdf::Document *

        """
        return _mupdf.Document_needs_password(self)


    def new_buffer_from_page_number(self, number, options):
        """
        new_buffer_from_page_number(Document self, int number, StextOptions options) -> Buffer

        Parameters
        ----------
        number: int
        options: mupdf::StextOptions &

        """
        return _mupdf.Document_new_buffer_from_page_number(self, number, options)


    def new_display_list_from_page_number(self, number):
        """
        new_display_list_from_page_number(Document self, int number) -> DisplayList

        Parameters
        ----------
        number: int

        """
        return _mupdf.Document_new_display_list_from_page_number(self, number)


    def new_pixmap_from_page_number(self, number, ctm, cs, alpha):
        """
        new_pixmap_from_page_number(Document self, int number, Matrix ctm, Colorspace cs, int alpha) -> Pixmap

        Parameters
        ----------
        number: int
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        alpha: int

        """
        return _mupdf.Document_new_pixmap_from_page_number(self, number, ctm, cs, alpha)


    def new_pixmap_from_page_number_with_separations(self, number, ctm, cs, seps, alpha):
        """
        new_pixmap_from_page_number_with_separations(Document self, int number, Matrix ctm, Colorspace cs, Separations seps, int alpha) -> Pixmap

        Parameters
        ----------
        number: int
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        seps: mupdf::Separations const &
        alpha: int

        """
        return _mupdf.Document_new_pixmap_from_page_number_with_separations(self, number, ctm, cs, seps, alpha)


    def new_xhtml_document_from_document(self, *args):
        """
        new_xhtml_document_from_document(Document self, Document old_doc, StextOptions opts) -> Document

        Parameters
        ----------
        old_doc: mupdf::Document const &
        opts: mupdf::StextOptions &

        new_xhtml_document_from_document(Document self, StextOptions opts) -> Document

        Parameters
        ----------
        opts: mupdf::StextOptions &

        """
        return _mupdf.Document_new_xhtml_document_from_document(self, *args)


    def next_page(self, loc):
        """
        next_page(Document self, Location loc) -> Location

        Parameters
        ----------
        loc: mupdf::Location &

        """
        return _mupdf.Document_next_page(self, loc)


    def open_reflowed_document(self, opts):
        """
        open_reflowed_document(Document self, StextOptions opts) -> Document

        Parameters
        ----------
        opts: mupdf::StextOptions &

        """
        return _mupdf.Document_open_reflowed_document(self, opts)


    def output_accelerator(self, accel):
        """
        output_accelerator(Document self, Output accel)

        Parameters
        ----------
        accel: mupdf::Output const &

        """
        return _mupdf.Document_output_accelerator(self, accel)


    def page_number_from_location(self, loc):
        """
        page_number_from_location(Document self, Location loc) -> int

        Parameters
        ----------
        loc: mupdf::Location &

        """
        return _mupdf.Document_page_number_from_location(self, loc)


    def previous_page(self, loc):
        """
        previous_page(Document self, Location loc) -> Location

        Parameters
        ----------
        loc: mupdf::Location &

        """
        return _mupdf.Document_previous_page(self, loc)


    def process_opened_pages(self, process_openend_page, state):
        """
        process_opened_pages(Document self, fz_process_opened_page_fn * process_openend_page, void * state) -> void *

        Parameters
        ----------
        process_openend_page: fz_process_opened_page_fn *
        state: void *

        """
        return _mupdf.Document_process_opened_pages(self, process_openend_page, state)


    def resolve_link(self, uri, xp, yp):
        """
        resolve_link(Document self, char const * uri, float * xp, float * yp) -> Location

        Parameters
        ----------
        uri: char const *
        xp: float *
        yp: float *

        """
        return _mupdf.Document_resolve_link(self, uri, xp, yp)


    def save_accelerator(self, accel):
        """
        save_accelerator(Document self, char const * accel)

        Parameters
        ----------
        accel: char const *

        """
        return _mupdf.Document_save_accelerator(self, accel)


    def search_chapter_page_number(self, chapter, page, needle, hit_bbox, hit_max):
        """
        search_chapter_page_number(Document self, int chapter, int page, char const * needle, Quad hit_bbox, int hit_max) -> int

        Parameters
        ----------
        chapter: int
        page: int
        needle: char const *
        hit_bbox: mupdf::Quad &
        hit_max: int

        """
        return _mupdf.Document_search_chapter_page_number(self, chapter, page, needle, hit_bbox, hit_max)


    def search_page_number(self, number, needle, hit_bbox, hit_max):
        """
        search_page_number(Document self, int number, char const * needle, Quad hit_bbox, int hit_max) -> int

        Parameters
        ----------
        number: int
        needle: char const *
        hit_bbox: mupdf::Quad &
        hit_max: int

        """
        return _mupdf.Document_search_page_number(self, number, needle, hit_bbox, hit_max)


    def set_metadata(self, key, value):
        """
        set_metadata(Document self, char const * key, char const * value)

        Parameters
        ----------
        key: char const *
        value: char const *

        """
        return _mupdf.Document_set_metadata(self, key, value)


    def lookup_metadata(self, key, o_out=None):
        """
        lookup_metadata(Document self, char const * key, int * o_out=None) -> std::string

        Parameters
        ----------
        key: char const *
        o_out: int *

        lookup_metadata(Document self, char const * key) -> std::string

        Parameters
        ----------
        key: char const *

        """
        return _mupdf.Document_lookup_metadata(self, key, o_out)


    def __init__(self, *args):
        """
        __init__(mupdf::Document self, char const * filename, char const * accel) -> Document

        Parameters
        ----------
        filename: char const *
        accel: char const *

        __init__(mupdf::Document self, char const * magic, Stream stream, Stream accel) -> Document

        Parameters
        ----------
        magic: char const *
        stream: mupdf::Stream const &
        accel: mupdf::Stream const &

        __init__(mupdf::Document self, char const * filename) -> Document

        Parameters
        ----------
        filename: char const *

        __init__(mupdf::Document self, char const * magic, Stream stream) -> Document

        Parameters
        ----------
        magic: char const *
        stream: mupdf::Stream const &

        __init__(mupdf::Document self, Document rhs) -> Document

        Parameters
        ----------
        rhs: mupdf::Document const &

        __init__(mupdf::Document self, fz_document * internal) -> Document

        Parameters
        ----------
        internal: fz_document *

        """
        this = _mupdf.new_Document(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Document
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Document_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Document_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Document_m_internal_get, _mupdf.Document_m_internal_set)
Document_swigregister = _mupdf.Document_swigregister
Document_swigregister(Document)

class DocumentHandler(_object):
    """Proxy of C++ mupdf::DocumentHandler class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DocumentHandler, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DocumentHandler, name)
    __repr__ = _swig_repr

    def register_document_handler(self):
        """
        register_document_handler(DocumentHandler self)

        Parameters
        ----------
        self: mupdf::DocumentHandler *

        """
        return _mupdf.DocumentHandler_register_document_handler(self)


    def __init__(self, internal):
        """
        __init__(mupdf::DocumentHandler self, fz_document_handler * internal) -> DocumentHandler

        Parameters
        ----------
        internal: fz_document_handler *

        """
        this = _mupdf.new_DocumentHandler(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.DocumentHandler_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.DocumentHandler_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.DocumentHandler_m_internal_get, _mupdf.DocumentHandler_m_internal_set)
    __swig_destroy__ = _mupdf.delete_DocumentHandler
    __del__ = lambda self: None
DocumentHandler_swigregister = _mupdf.DocumentHandler_swigregister
DocumentHandler_swigregister(DocumentHandler)

class DocumentHandlerContext(_object):
    """Proxy of C++ mupdf::DocumentHandlerContext class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DocumentHandlerContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DocumentHandlerContext, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::DocumentHandlerContext self, fz_document_handler_context * internal) -> DocumentHandlerContext

        Parameters
        ----------
        internal: fz_document_handler_context *

        """
        this = _mupdf.new_DocumentHandlerContext(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.DocumentHandlerContext_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.DocumentHandlerContext_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.DocumentHandlerContext_m_internal_get, _mupdf.DocumentHandlerContext_m_internal_set)
    __swig_destroy__ = _mupdf.delete_DocumentHandlerContext
    __del__ = lambda self: None
DocumentHandlerContext_swigregister = _mupdf.DocumentHandlerContext_swigregister
DocumentHandlerContext_swigregister(DocumentHandlerContext)

class DocumentWriter(_object):
    """Proxy of C++ mupdf::DocumentWriter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DocumentWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DocumentWriter, name)
    __repr__ = _swig_repr
    PathType_CBZ = _mupdf.DocumentWriter_PathType_CBZ
    PathType_DOCX = _mupdf.DocumentWriter_PathType_DOCX
    PathType_ODT = _mupdf.DocumentWriter_PathType_ODT
    PathType_PAM_PIXMAP = _mupdf.DocumentWriter_PathType_PAM_PIXMAP
    PathType_PBM_PIXMAP = _mupdf.DocumentWriter_PathType_PBM_PIXMAP
    PathType_PCL = _mupdf.DocumentWriter_PathType_PCL
    PathType_PCLM = _mupdf.DocumentWriter_PathType_PCLM
    PathType_PDF = _mupdf.DocumentWriter_PathType_PDF
    PathType_PDFOCR = _mupdf.DocumentWriter_PathType_PDFOCR
    PathType_PGM_PIXMAP = _mupdf.DocumentWriter_PathType_PGM_PIXMAP
    PathType_PKM_PIXMAP = _mupdf.DocumentWriter_PathType_PKM_PIXMAP
    PathType_PNG_PIXMAP = _mupdf.DocumentWriter_PathType_PNG_PIXMAP
    PathType_PNM_PIXMAP = _mupdf.DocumentWriter_PathType_PNM_PIXMAP
    PathType_PPM_PIXMAP = _mupdf.DocumentWriter_PathType_PPM_PIXMAP
    PathType_PS = _mupdf.DocumentWriter_PathType_PS
    PathType_PWG = _mupdf.DocumentWriter_PathType_PWG
    PathType_SVG = _mupdf.DocumentWriter_PathType_SVG
    OutputType_CBZ = _mupdf.DocumentWriter_OutputType_CBZ
    OutputType_DOCX = _mupdf.DocumentWriter_OutputType_DOCX
    OutputType_ODT = _mupdf.DocumentWriter_OutputType_ODT
    OutputType_PCL = _mupdf.DocumentWriter_OutputType_PCL
    OutputType_PCLM = _mupdf.DocumentWriter_OutputType_PCLM
    OutputType_PDF = _mupdf.DocumentWriter_OutputType_PDF
    OutputType_PDFOCR = _mupdf.DocumentWriter_OutputType_PDFOCR
    OutputType_PS = _mupdf.DocumentWriter_OutputType_PS
    OutputType_PWG = _mupdf.DocumentWriter_OutputType_PWG
    FormatPathType_DOCUMENT = _mupdf.DocumentWriter_FormatPathType_DOCUMENT
    FormatPathType_TEXT = _mupdf.DocumentWriter_FormatPathType_TEXT

    def close_document_writer(self):
        """
        close_document_writer(DocumentWriter self)

        Parameters
        ----------
        self: mupdf::DocumentWriter *

        """
        return _mupdf.DocumentWriter_close_document_writer(self)


    def end_page(self):
        """
        end_page(DocumentWriter self)

        Parameters
        ----------
        self: mupdf::DocumentWriter *

        """
        return _mupdf.DocumentWriter_end_page(self)


    def pdfocr_writer_set_progress(self, progress, arg_2):
        """
        pdfocr_writer_set_progress(DocumentWriter self, fz_pdfocr_progress_fn * progress, void * arg_2)

        Parameters
        ----------
        progress: fz_pdfocr_progress_fn *
        arg_2: void *

        """
        return _mupdf.DocumentWriter_pdfocr_writer_set_progress(self, progress, arg_2)


    def write_document(self, doc):
        """
        write_document(DocumentWriter self, Document doc)

        Parameters
        ----------
        doc: mupdf::Document const &

        """
        return _mupdf.DocumentWriter_write_document(self, doc)


    def begin_page(self, mediabox):
        """
        begin_page(DocumentWriter self, Rect mediabox) -> Device

        Parameters
        ----------
        mediabox: mupdf::Rect &

        """
        return _mupdf.DocumentWriter_begin_page(self, mediabox)


    def __init__(self, *args):
        """
        __init__(mupdf::DocumentWriter self, size_t size, fz_document_writer_begin_page_fn * begin_page, fz_document_writer_end_page_fn * end_page, fz_document_writer_close_writer_fn * close, fz_document_writer_drop_writer_fn * drop) -> DocumentWriter

        Parameters
        ----------
        size: size_t
        begin_page: fz_document_writer_begin_page_fn *
        end_page: fz_document_writer_end_page_fn *
        close: fz_document_writer_close_writer_fn *
        drop: fz_document_writer_drop_writer_fn *

        __init__(mupdf::DocumentWriter self, char const * path, char const * options, char const * default_path, int n, void (*)(fz_context *,fz_pixmap *,char const *) save) -> DocumentWriter

        Parameters
        ----------
        path: char const *
        options: char const *
        default_path: char const *
        n: int
        save: void (*)(fz_context *,fz_pixmap *,char const *)

        __init__(mupdf::DocumentWriter self, char const * path, char const * options, mupdf::DocumentWriter::PathType path_type) -> DocumentWriter

        Parameters
        ----------
        path: char const *
        options: char const *
        path_type: enum mupdf::DocumentWriter::PathType

        __init__(mupdf::DocumentWriter self, Output out, char const * options, mupdf::DocumentWriter::OutputType output_type) -> DocumentWriter

        Parameters
        ----------
        out: mupdf::Output &
        options: char const *
        output_type: enum mupdf::DocumentWriter::OutputType

        __init__(mupdf::DocumentWriter self, char const * format, char const * path, char const * options, mupdf::DocumentWriter::FormatPathType format_path_type) -> DocumentWriter

        Parameters
        ----------
        format: char const *
        path: char const *
        options: char const *
        format_path_type: enum mupdf::DocumentWriter::FormatPathType

        __init__(mupdf::DocumentWriter self, Output out, char const * format, char const * options) -> DocumentWriter

        Parameters
        ----------
        out: mupdf::Output &
        format: char const *
        options: char const *

        __init__(mupdf::DocumentWriter self, char const * format, Output out, char const * options) -> DocumentWriter

        Parameters
        ----------
        format: char const *
        out: mupdf::Output &
        options: char const *

        __init__(mupdf::DocumentWriter self, fz_document_writer * internal) -> DocumentWriter

        Parameters
        ----------
        internal: fz_document_writer *

        """
        this = _mupdf.new_DocumentWriter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_DocumentWriter
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.DocumentWriter_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.DocumentWriter_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.DocumentWriter_m_internal_get, _mupdf.DocumentWriter_m_internal_set)
DocumentWriter_swigregister = _mupdf.DocumentWriter_swigregister
DocumentWriter_swigregister(DocumentWriter)

class DrawOptions(_object):
    """Proxy of C++ mupdf::DrawOptions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DrawOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DrawOptions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::DrawOptions self, DrawOptions options, char const * string) -> DrawOptions

        Parameters
        ----------
        options: mupdf::DrawOptions &
        string: char const *

        __init__(mupdf::DrawOptions self, fz_draw_options internal) -> DrawOptions

        Parameters
        ----------
        internal: fz_draw_options const *

        __init__(mupdf::DrawOptions self, fz_draw_options internal) -> DrawOptions

        Parameters
        ----------
        internal: fz_draw_options const

        """
        this = _mupdf.new_DrawOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def internal(self, *args):
        """
        internal(DrawOptions self) -> fz_draw_options
        internal(DrawOptions self) -> fz_draw_options

        Parameters
        ----------
        self: mupdf::DrawOptions const *

        """
        return _mupdf.DrawOptions_internal(self, *args)

    __swig_setmethods__["rotate"] = _mupdf.DrawOptions_rotate_set
    __swig_getmethods__["rotate"] = _mupdf.DrawOptions_rotate_get
    if _newclass:
        rotate = _swig_property(_mupdf.DrawOptions_rotate_get, _mupdf.DrawOptions_rotate_set)
    __swig_setmethods__["x_resolution"] = _mupdf.DrawOptions_x_resolution_set
    __swig_getmethods__["x_resolution"] = _mupdf.DrawOptions_x_resolution_get
    if _newclass:
        x_resolution = _swig_property(_mupdf.DrawOptions_x_resolution_get, _mupdf.DrawOptions_x_resolution_set)
    __swig_setmethods__["y_resolution"] = _mupdf.DrawOptions_y_resolution_set
    __swig_getmethods__["y_resolution"] = _mupdf.DrawOptions_y_resolution_get
    if _newclass:
        y_resolution = _swig_property(_mupdf.DrawOptions_y_resolution_get, _mupdf.DrawOptions_y_resolution_set)
    __swig_setmethods__["width"] = _mupdf.DrawOptions_width_set
    __swig_getmethods__["width"] = _mupdf.DrawOptions_width_get
    if _newclass:
        width = _swig_property(_mupdf.DrawOptions_width_get, _mupdf.DrawOptions_width_set)
    __swig_setmethods__["height"] = _mupdf.DrawOptions_height_set
    __swig_getmethods__["height"] = _mupdf.DrawOptions_height_get
    if _newclass:
        height = _swig_property(_mupdf.DrawOptions_height_get, _mupdf.DrawOptions_height_set)
    __swig_setmethods__["colorspace"] = _mupdf.DrawOptions_colorspace_set
    __swig_getmethods__["colorspace"] = _mupdf.DrawOptions_colorspace_get
    if _newclass:
        colorspace = _swig_property(_mupdf.DrawOptions_colorspace_get, _mupdf.DrawOptions_colorspace_set)
    __swig_setmethods__["alpha"] = _mupdf.DrawOptions_alpha_set
    __swig_getmethods__["alpha"] = _mupdf.DrawOptions_alpha_get
    if _newclass:
        alpha = _swig_property(_mupdf.DrawOptions_alpha_get, _mupdf.DrawOptions_alpha_set)
    __swig_setmethods__["graphics"] = _mupdf.DrawOptions_graphics_set
    __swig_getmethods__["graphics"] = _mupdf.DrawOptions_graphics_get
    if _newclass:
        graphics = _swig_property(_mupdf.DrawOptions_graphics_get, _mupdf.DrawOptions_graphics_set)
    __swig_setmethods__["text"] = _mupdf.DrawOptions_text_set
    __swig_getmethods__["text"] = _mupdf.DrawOptions_text_get
    if _newclass:
        text = _swig_property(_mupdf.DrawOptions_text_get, _mupdf.DrawOptions_text_set)

    def to_string(self):
        """
        to_string(DrawOptions self) -> std::string

        Parameters
        ----------
        self: mupdf::DrawOptions *

        """
        return _mupdf.DrawOptions_to_string(self)

    __swig_destroy__ = _mupdf.delete_DrawOptions
    __del__ = lambda self: None
DrawOptions_swigregister = _mupdf.DrawOptions_swigregister
DrawOptions_swigregister(DrawOptions)

class ErrorContext(_object):
    """Proxy of C++ mupdf::ErrorContext class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorContext, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::ErrorContext self, fz_error_context internal) -> ErrorContext

        Parameters
        ----------
        internal: fz_error_context *

        """
        this = _mupdf.new_ErrorContext(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.ErrorContext_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.ErrorContext_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.ErrorContext_m_internal_get, _mupdf.ErrorContext_m_internal_set)
    __swig_destroy__ = _mupdf.delete_ErrorContext
    __del__ = lambda self: None
ErrorContext_swigregister = _mupdf.ErrorContext_swigregister
ErrorContext_swigregister(ErrorContext)

class ErrorStackSlot(_object):
    """Proxy of C++ mupdf::ErrorStackSlot class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ErrorStackSlot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ErrorStackSlot, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::ErrorStackSlot self, fz_error_stack_slot * internal) -> ErrorStackSlot

        Parameters
        ----------
        internal: fz_error_stack_slot *

        """
        this = _mupdf.new_ErrorStackSlot(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.ErrorStackSlot_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.ErrorStackSlot_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.ErrorStackSlot_m_internal_get, _mupdf.ErrorStackSlot_m_internal_set)
    __swig_destroy__ = _mupdf.delete_ErrorStackSlot
    __del__ = lambda self: None
ErrorStackSlot_swigregister = _mupdf.ErrorStackSlot_swigregister
ErrorStackSlot_swigregister(ErrorStackSlot)

class Font(_object):
    """Proxy of C++ mupdf::Font class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Font, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Font, name)
    __repr__ = _swig_repr

    def advance_glyph(self, glyph, wmode):
        """
        advance_glyph(Font self, int glyph, int wmode) -> float

        Parameters
        ----------
        glyph: int
        wmode: int

        """
        return _mupdf.Font_advance_glyph(self, glyph, wmode)


    def bound_glyph(self, gid, trm):
        """
        bound_glyph(Font self, int gid, Matrix trm) -> Rect

        Parameters
        ----------
        gid: int
        trm: mupdf::Matrix &

        """
        return _mupdf.Font_bound_glyph(self, gid, trm)


    def decouple_type3_font(self, t3doc):
        """
        decouple_type3_font(Font self, void * t3doc)

        Parameters
        ----------
        t3doc: void *

        """
        return _mupdf.Font_decouple_type3_font(self, t3doc)


    def encode_character(self, unicode):
        """
        encode_character(Font self, int unicode) -> int

        Parameters
        ----------
        unicode: int

        """
        return _mupdf.Font_encode_character(self, unicode)


    def encode_character_by_glyph_name(self, glyphname):
        """
        encode_character_by_glyph_name(Font self, char const * glyphname) -> int

        Parameters
        ----------
        glyphname: char const *

        """
        return _mupdf.Font_encode_character_by_glyph_name(self, glyphname)


    def encode_character_sc(self, unicode):
        """
        encode_character_sc(Font self, int unicode) -> int

        Parameters
        ----------
        unicode: int

        """
        return _mupdf.Font_encode_character_sc(self, unicode)


    def font_ascender(self):
        """
        font_ascender(Font self) -> float

        Parameters
        ----------
        self: mupdf::Font *

        """
        return _mupdf.Font_font_ascender(self)


    def font_bbox(self):
        """
        font_bbox(Font self) -> Rect

        Parameters
        ----------
        self: mupdf::Font *

        """
        return _mupdf.Font_font_bbox(self)


    def font_descender(self):
        """
        font_descender(Font self) -> float

        Parameters
        ----------
        self: mupdf::Font *

        """
        return _mupdf.Font_font_descender(self)


    def font_digest(self, digest):
        """
        font_digest(Font self, unsigned char [16] digest)

        Parameters
        ----------
        digest: unsigned char [16]

        """
        return _mupdf.Font_font_digest(self, digest)


    def font_flags(self):
        """
        font_flags(Font self) -> FontFlagsT

        Parameters
        ----------
        self: mupdf::Font *

        """
        return _mupdf.Font_font_flags(self)


    def font_ft_face(self):
        """
        font_ft_face(Font self) -> void *

        Parameters
        ----------
        self: mupdf::Font *

        """
        return _mupdf.Font_font_ft_face(self)


    def font_is_bold(self):
        """
        font_is_bold(Font self) -> int

        Parameters
        ----------
        self: mupdf::Font *

        """
        return _mupdf.Font_font_is_bold(self)


    def font_is_italic(self):
        """
        font_is_italic(Font self) -> int

        Parameters
        ----------
        self: mupdf::Font *

        """
        return _mupdf.Font_font_is_italic(self)


    def font_is_monospaced(self):
        """
        font_is_monospaced(Font self) -> int

        Parameters
        ----------
        self: mupdf::Font *

        """
        return _mupdf.Font_font_is_monospaced(self)


    def font_is_serif(self):
        """
        font_is_serif(Font self) -> int

        Parameters
        ----------
        self: mupdf::Font *

        """
        return _mupdf.Font_font_is_serif(self)


    def font_name(self):
        """
        font_name(Font self) -> char const *

        Parameters
        ----------
        self: mupdf::Font *

        """
        return _mupdf.Font_font_name(self)


    def font_shaper_data(self):
        """
        font_shaper_data(Font self) -> ShaperDataT

        Parameters
        ----------
        self: mupdf::Font *

        """
        return _mupdf.Font_font_shaper_data(self)


    def font_t3_procs(self):
        """
        font_t3_procs(Font self) -> fz_buffer **

        Parameters
        ----------
        self: mupdf::Font *

        """
        return _mupdf.Font_font_t3_procs(self)


    def get_glyph_name(self, glyph, buf, size):
        """
        get_glyph_name(Font self, int glyph, char * buf, int size)

        Parameters
        ----------
        glyph: int
        buf: char *
        size: int

        """
        return _mupdf.Font_get_glyph_name(self, glyph, buf, size)


    def glyph_cacheable(self, gid):
        """
        glyph_cacheable(Font self, int gid) -> int

        Parameters
        ----------
        gid: int

        """
        return _mupdf.Font_glyph_cacheable(self, gid)


    def measure_string(self, trm, s, wmode, bidi_level, markup_dir, language):
        """
        measure_string(Font self, Matrix trm, char const * s, int wmode, int bidi_level, fz_bidi_direction markup_dir, fz_text_language language) -> Matrix

        Parameters
        ----------
        trm: mupdf::Matrix &
        s: char const *
        wmode: int
        bidi_level: int
        markup_dir: enum fz_bidi_direction
        language: enum fz_text_language

        """
        return _mupdf.Font_measure_string(self, trm, s, wmode, bidi_level, markup_dir, language)


    def outline_glyph(self, gid, ctm):
        """
        outline_glyph(Font self, int gid, Matrix ctm) -> Path

        Parameters
        ----------
        gid: int
        ctm: mupdf::Matrix &

        """
        return _mupdf.Font_outline_glyph(self, gid, ctm)


    def prepare_t3_glyph(self, gid):
        """
        prepare_t3_glyph(Font self, int gid)

        Parameters
        ----------
        gid: int

        """
        return _mupdf.Font_prepare_t3_glyph(self, gid)


    def render_glyph_pixmap(self, gid, ctm, scissor, aa):
        """
        render_glyph_pixmap(Font self, int gid, Matrix ctm, Irect scissor, int aa) -> Pixmap

        Parameters
        ----------
        gid: int
        ctm: mupdf::Matrix &
        scissor: mupdf::Irect &
        aa: int

        """
        return _mupdf.Font_render_glyph_pixmap(self, gid, ctm, scissor, aa)


    def run_t3_glyph(self, gid, trm, dev):
        """
        run_t3_glyph(Font self, int gid, Matrix trm, Device dev)

        Parameters
        ----------
        gid: int
        trm: mupdf::Matrix &
        dev: mupdf::Device const &

        """
        return _mupdf.Font_run_t3_glyph(self, gid, trm, dev)


    def set_font_bbox(self, xmin, ymin, xmax, ymax):
        """
        set_font_bbox(Font self, float xmin, float ymin, float xmax, float ymax)

        Parameters
        ----------
        xmin: float
        ymin: float
        xmax: float
        ymax: float

        """
        return _mupdf.Font_set_font_bbox(self, xmin, ymin, xmax, ymax)


    def __init__(self, *args):
        """
        __init__(mupdf::Font self, char const * name) -> Font

        Parameters
        ----------
        name: char const *

        __init__(mupdf::Font self, char const * name, int is_bold, int is_italic) -> Font

        Parameters
        ----------
        name: char const *
        is_bold: int
        is_italic: int

        __init__(mupdf::Font self, int ordering) -> Font

        Parameters
        ----------
        ordering: int

        __init__(mupdf::Font self, char const * name, Buffer buffer, int index, int use_glyph_bbox) -> Font

        Parameters
        ----------
        name: char const *
        buffer: mupdf::Buffer const &
        index: int
        use_glyph_bbox: int

        __init__(mupdf::Font self, char const * name, char const * path, int index, int use_glyph_bbox) -> Font

        Parameters
        ----------
        name: char const *
        path: char const *
        index: int
        use_glyph_bbox: int

        __init__(mupdf::Font self, char const * name, unsigned char const * data, int len, int index, int use_glyph_bbox) -> Font

        Parameters
        ----------
        name: char const *
        data: unsigned char const *
        len: int
        index: int
        use_glyph_bbox: int

        __init__(mupdf::Font self, char const * name, Matrix matrix) -> Font

        Parameters
        ----------
        name: char const *
        matrix: mupdf::Matrix &

        __init__(mupdf::Font self, Font rhs) -> Font

        Parameters
        ----------
        rhs: mupdf::Font const &

        __init__(mupdf::Font self, fz_font * internal) -> Font

        Parameters
        ----------
        internal: fz_font *

        """
        this = _mupdf.new_Font(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Font
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Font_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Font_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Font_m_internal_get, _mupdf.Font_m_internal_set)
Font_swigregister = _mupdf.Font_swigregister
Font_swigregister(Font)

class FontContext(_object):
    """Proxy of C++ mupdf::FontContext class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FontContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FontContext, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::FontContext self, fz_font_context * internal) -> FontContext

        Parameters
        ----------
        internal: fz_font_context *

        """
        this = _mupdf.new_FontContext(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.FontContext_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.FontContext_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.FontContext_m_internal_get, _mupdf.FontContext_m_internal_set)
    __swig_destroy__ = _mupdf.delete_FontContext
    __del__ = lambda self: None
FontContext_swigregister = _mupdf.FontContext_swigregister
FontContext_swigregister(FontContext)

class FontFlagsT(_object):
    """Proxy of C++ mupdf::FontFlagsT class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FontFlagsT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FontFlagsT, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::FontFlagsT self, fz_font_flags_t internal) -> FontFlagsT

        Parameters
        ----------
        internal: fz_font_flags_t *

        """
        this = _mupdf.new_FontFlagsT(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.FontFlagsT_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.FontFlagsT_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.FontFlagsT_m_internal_get, _mupdf.FontFlagsT_m_internal_set)
    __swig_destroy__ = _mupdf.delete_FontFlagsT
    __del__ = lambda self: None
FontFlagsT_swigregister = _mupdf.FontFlagsT_swigregister
FontFlagsT_swigregister(FontFlagsT)

class Glyph(_object):
    """Proxy of C++ mupdf::Glyph class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Glyph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Glyph, name)
    __repr__ = _swig_repr
    Bpp_1 = _mupdf.Glyph_Bpp_1
    Bpp_8 = _mupdf.Glyph_Bpp_8

    def glyph_bbox(self):
        """
        glyph_bbox(Glyph self) -> Irect

        Parameters
        ----------
        self: mupdf::Glyph *

        """
        return _mupdf.Glyph_glyph_bbox(self)


    def glyph_bbox_no_ctx(self):
        """
        glyph_bbox_no_ctx(Glyph self) -> Irect

        Parameters
        ----------
        self: mupdf::Glyph *

        """
        return _mupdf.Glyph_glyph_bbox_no_ctx(self)


    def glyph_height(self):
        """
        glyph_height(Glyph self) -> int

        Parameters
        ----------
        self: mupdf::Glyph *

        """
        return _mupdf.Glyph_glyph_height(self)


    def glyph_width(self):
        """
        glyph_width(Glyph self) -> int

        Parameters
        ----------
        self: mupdf::Glyph *

        """
        return _mupdf.Glyph_glyph_width(self)


    def __init__(self, *args):
        """
        __init__(mupdf::Glyph self, Glyph rhs) -> Glyph

        Parameters
        ----------
        rhs: mupdf::Glyph const &

        __init__(mupdf::Glyph self, fz_glyph * internal) -> Glyph

        Parameters
        ----------
        internal: fz_glyph *

        """
        this = _mupdf.new_Glyph(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Glyph
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Glyph_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Glyph_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Glyph_m_internal_get, _mupdf.Glyph_m_internal_set)
Glyph_swigregister = _mupdf.Glyph_swigregister
Glyph_swigregister(Glyph)

class GlyphCache(_object):
    """Proxy of C++ mupdf::GlyphCache class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlyphCache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GlyphCache, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::GlyphCache self, fz_glyph_cache * internal) -> GlyphCache

        Parameters
        ----------
        internal: fz_glyph_cache *

        """
        this = _mupdf.new_GlyphCache(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.GlyphCache_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.GlyphCache_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.GlyphCache_m_internal_get, _mupdf.GlyphCache_m_internal_set)
    __swig_destroy__ = _mupdf.delete_GlyphCache
    __del__ = lambda self: None
GlyphCache_swigregister = _mupdf.GlyphCache_swigregister
GlyphCache_swigregister(GlyphCache)

class Halftone(_object):
    """Proxy of C++ mupdf::Halftone class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Halftone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Halftone, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::Halftone self, Halftone rhs) -> Halftone

        Parameters
        ----------
        rhs: mupdf::Halftone const &

        __init__(mupdf::Halftone self, fz_halftone * internal=None) -> Halftone

        Parameters
        ----------
        internal: fz_halftone *

        __init__(mupdf::Halftone self) -> Halftone
        """
        this = _mupdf.new_Halftone(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Halftone
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Halftone_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Halftone_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Halftone_m_internal_get, _mupdf.Halftone_m_internal_set)
Halftone_swigregister = _mupdf.Halftone_swigregister
Halftone_swigregister(Halftone)

class HashTable(_object):
    """Proxy of C++ mupdf::HashTable class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HashTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HashTable, name)
    __repr__ = _swig_repr

    def hash_filter(self, state, callback):
        """
        hash_filter(HashTable self, void * state, fz_hash_table_filter_fn * callback)

        Parameters
        ----------
        state: void *
        callback: fz_hash_table_filter_fn *

        """
        return _mupdf.HashTable_hash_filter(self, state, callback)


    def hash_find(self, key):
        """
        hash_find(HashTable self, void const * key) -> void *

        Parameters
        ----------
        key: void const *

        """
        return _mupdf.HashTable_hash_find(self, key)


    def hash_for_each(self, state, callback):
        """
        hash_for_each(HashTable self, void * state, fz_hash_table_for_each_fn * callback)

        Parameters
        ----------
        state: void *
        callback: fz_hash_table_for_each_fn *

        """
        return _mupdf.HashTable_hash_for_each(self, state, callback)


    def hash_insert(self, key, val):
        """
        hash_insert(HashTable self, void const * key, void * val) -> void *

        Parameters
        ----------
        key: void const *
        val: void *

        """
        return _mupdf.HashTable_hash_insert(self, key, val)


    def hash_remove(self, key):
        """
        hash_remove(HashTable self, void const * key)

        Parameters
        ----------
        key: void const *

        """
        return _mupdf.HashTable_hash_remove(self, key)


    def __init__(self, *args):
        """
        __init__(mupdf::HashTable self, int initialsize, int keylen, int lock, fz_hash_table_drop_fn * drop_val) -> HashTable

        Parameters
        ----------
        initialsize: int
        keylen: int
        lock: int
        drop_val: fz_hash_table_drop_fn *

        __init__(mupdf::HashTable self, fz_hash_table * internal) -> HashTable

        Parameters
        ----------
        internal: fz_hash_table *

        """
        this = _mupdf.new_HashTable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_HashTable
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.HashTable_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.HashTable_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.HashTable_m_internal_get, _mupdf.HashTable_m_internal_set)
HashTable_swigregister = _mupdf.HashTable_swigregister
HashTable_swigregister(HashTable)

class IccProfile(_object):
    """Proxy of C++ mupdf::IccProfile class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IccProfile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IccProfile, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::IccProfile self, fz_icc_profile * internal) -> IccProfile

        Parameters
        ----------
        internal: fz_icc_profile *

        """
        this = _mupdf.new_IccProfile(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.IccProfile_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.IccProfile_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.IccProfile_m_internal_get, _mupdf.IccProfile_m_internal_set)
    __swig_destroy__ = _mupdf.delete_IccProfile
    __del__ = lambda self: None
IccProfile_swigregister = _mupdf.IccProfile_swigregister
IccProfile_swigregister(IccProfile)

class Image(_object):
    """Proxy of C++ mupdf::Image class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Image, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Image, name)
    __repr__ = _swig_repr

    def compressed_image_buffer(self):
        """
        compressed_image_buffer(Image self) -> CompressedBuffer

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_compressed_image_buffer(self)


    def get_pixmap_from_image(self, subarea, ctm, w, h):
        """
        get_pixmap_from_image(Image self, Irect subarea, Matrix ctm, int * w, int * h) -> Pixmap

        Parameters
        ----------
        subarea: mupdf::Irect &
        ctm: mupdf::Matrix &
        w: int *
        h: int *

        """
        return _mupdf.Image_get_pixmap_from_image(self, subarea, ctm, w, h)


    def get_unscaled_pixmap_from_image(self):
        """
        get_unscaled_pixmap_from_image(Image self) -> Pixmap

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_get_unscaled_pixmap_from_image(self)


    def image_orientation(self):
        """
        image_orientation(Image self) -> uint8_t

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_image_orientation(self)


    def image_orientation_matrix(self):
        """
        image_orientation_matrix(Image self) -> Matrix

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_image_orientation_matrix(self)


    def image_resolution(self, xres, yres):
        """
        image_resolution(Image self, int * xres, int * yres)

        Parameters
        ----------
        xres: int *
        yres: int *

        """
        return _mupdf.Image_image_resolution(self, xres, yres)


    def image_size(self):
        """
        image_size(Image self) -> size_t

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_image_size(self)


    def new_buffer_from_image_as_png(self, color_params):
        """
        new_buffer_from_image_as_png(Image self, ColorParams color_params) -> Buffer

        Parameters
        ----------
        color_params: mupdf::ColorParams &

        """
        return _mupdf.Image_new_buffer_from_image_as_png(self, color_params)


    def __init__(self, *args):
        """
        __init__(mupdf::Image self, Buffer buffer) -> Image

        Parameters
        ----------
        buffer: mupdf::Buffer const &

        __init__(mupdf::Image self, int w, int h, int bpc, Colorspace colorspace, int xres, int yres, int interpolate, int imagemask, float * decode, int * colorkey, CompressedBuffer buffer, Image mask) -> Image

        Parameters
        ----------
        w: int
        h: int
        bpc: int
        colorspace: mupdf::Colorspace const &
        xres: int
        yres: int
        interpolate: int
        imagemask: int
        decode: float *
        colorkey: int *
        buffer: mupdf::CompressedBuffer const &
        mask: mupdf::Image const &

        __init__(mupdf::Image self, float w, float h, DisplayList list) -> Image

        Parameters
        ----------
        w: float
        h: float
        list: mupdf::DisplayList const &

        __init__(mupdf::Image self, char const * path) -> Image

        Parameters
        ----------
        path: char const *

        __init__(mupdf::Image self, Pixmap pixmap, Image mask) -> Image

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &
        mask: mupdf::Image const &

        __init__(mupdf::Image self, Buffer buf, char const * base_uri, Archive zip) -> Image

        Parameters
        ----------
        buf: mupdf::Buffer const &
        base_uri: char const *
        zip: mupdf::Archive const &

        __init__(mupdf::Image self, XmlDoc xmldoc, Xml xml, char const * base_uri, Archive zip) -> Image

        Parameters
        ----------
        xmldoc: mupdf::XmlDoc const &
        xml: mupdf::Xml const &
        base_uri: char const *
        zip: mupdf::Archive const &

        __init__(mupdf::Image self, int w, int h, int bpc, Colorspace colorspace, int xres, int yres, int interpolate, int imagemask, float * decode, int * colorkey, Image mask, size_t size, fz_image_get_pixmap_fn * get_pixmap, fz_image_get_size_fn * get_size, fz_drop_image_fn * drop) -> Image

        Parameters
        ----------
        w: int
        h: int
        bpc: int
        colorspace: mupdf::Colorspace const &
        xres: int
        yres: int
        interpolate: int
        imagemask: int
        decode: float *
        colorkey: int *
        mask: mupdf::Image const &
        size: size_t
        get_pixmap: fz_image_get_pixmap_fn *
        get_size: fz_image_get_size_fn *
        drop: fz_drop_image_fn *

        __init__(mupdf::Image self, Image rhs) -> Image

        Parameters
        ----------
        rhs: mupdf::Image const &

        __init__(mupdf::Image self, fz_image * internal) -> Image

        Parameters
        ----------
        internal: fz_image *

        """
        this = _mupdf.new_Image(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def key_storable(self):
        """
        key_storable(Image self) -> fz_key_storable

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_key_storable(self)


    def w(self):
        """
        w(Image self) -> int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_w(self)


    def h(self):
        """
        h(Image self) -> int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_h(self)


    def n(self):
        """
        n(Image self) -> int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_n(self)


    def bpc(self):
        """
        bpc(Image self) -> int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_bpc(self)


    def imagemask(self):
        """
        imagemask(Image self) -> unsigned int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_imagemask(self)


    def interpolate(self):
        """
        interpolate(Image self) -> unsigned int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_interpolate(self)


    def use_colorkey(self):
        """
        use_colorkey(Image self) -> unsigned int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_use_colorkey(self)


    def use_decode(self):
        """
        use_decode(Image self) -> unsigned int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_use_decode(self)


    def invert_cmyk_jpeg(self):
        """
        invert_cmyk_jpeg(Image self) -> unsigned int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_invert_cmyk_jpeg(self)


    def decoded(self):
        """
        decoded(Image self) -> unsigned int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_decoded(self)


    def scalable(self):
        """
        scalable(Image self) -> unsigned int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_scalable(self)


    def orientation(self):
        """
        orientation(Image self) -> int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_orientation(self)


    def mask(self):
        """
        mask(Image self) -> Image

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_mask(self)


    def xres(self):
        """
        xres(Image self) -> int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_xres(self)


    def yres(self):
        """
        yres(Image self) -> int

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_yres(self)


    def colorspace(self):
        """
        colorspace(Image self) -> Colorspace

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_colorspace(self)


    def colorkey(self):
        """
        colorkey(Image self) -> int *

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_colorkey(self)


    def decode(self):
        """
        decode(Image self) -> float *

        Parameters
        ----------
        self: mupdf::Image *

        """
        return _mupdf.Image_decode(self)

    __swig_destroy__ = _mupdf.delete_Image
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Image_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Image_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Image_m_internal_get, _mupdf.Image_m_internal_set)
Image_swigregister = _mupdf.Image_swigregister
Image_swigregister(Image)

class Irect(_object):
    """Proxy of C++ mupdf::Irect class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Irect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Irect, name)
    __repr__ = _swig_repr

    def expand_irect(self, expand):
        """
        expand_irect(Irect self, int expand) -> Irect

        Parameters
        ----------
        expand: int

        """
        return _mupdf.Irect_expand_irect(self, expand)


    def intersect_irect(self, b):
        """
        intersect_irect(Irect self, Irect b) -> Irect

        Parameters
        ----------
        b: mupdf::Irect &

        """
        return _mupdf.Irect_intersect_irect(self, b)


    def irect_height(self):
        """
        irect_height(Irect self) -> int

        Parameters
        ----------
        self: mupdf::Irect *

        """
        return _mupdf.Irect_irect_height(self)


    def irect_width(self):
        """
        irect_width(Irect self) -> unsigned int

        Parameters
        ----------
        self: mupdf::Irect *

        """
        return _mupdf.Irect_irect_width(self)


    def is_empty_irect(self):
        """
        is_empty_irect(Irect self) -> int

        Parameters
        ----------
        self: mupdf::Irect *

        """
        return _mupdf.Irect_is_empty_irect(self)


    def is_infinite_irect(self):
        """
        is_infinite_irect(Irect self) -> int

        Parameters
        ----------
        self: mupdf::Irect *

        """
        return _mupdf.Irect_is_infinite_irect(self)


    def is_valid_irect(self):
        """
        is_valid_irect(Irect self) -> int

        Parameters
        ----------
        self: mupdf::Irect *

        """
        return _mupdf.Irect_is_valid_irect(self)


    def rect_from_irect(self):
        """
        rect_from_irect(Irect self) -> Rect

        Parameters
        ----------
        self: mupdf::Irect *

        """
        return _mupdf.Irect_rect_from_irect(self)


    def translate_irect(self, xoff, yoff):
        """
        translate_irect(Irect self, int xoff, int yoff) -> Irect

        Parameters
        ----------
        xoff: int
        yoff: int

        """
        return _mupdf.Irect_translate_irect(self, xoff, yoff)


    def __init__(self, *args):
        """
        __init__(mupdf::Irect self, Rect rect) -> Irect

        Parameters
        ----------
        rect: mupdf::Rect &

        __init__(mupdf::Irect self, int x0, int y0, int x1, int y1) -> Irect

        Parameters
        ----------
        x0: int
        y0: int
        x1: int
        y1: int

        __init__(mupdf::Irect self, fz_irect internal) -> Irect

        Parameters
        ----------
        internal: fz_irect const *

        __init__(mupdf::Irect self, fz_irect internal) -> Irect

        Parameters
        ----------
        internal: fz_irect const

        """
        this = _mupdf.new_Irect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def internal(self, *args):
        """
        internal(Irect self) -> fz_irect
        internal(Irect self) -> fz_irect

        Parameters
        ----------
        self: mupdf::Irect const *

        """
        return _mupdf.Irect_internal(self, *args)

    __swig_setmethods__["x0"] = _mupdf.Irect_x0_set
    __swig_getmethods__["x0"] = _mupdf.Irect_x0_get
    if _newclass:
        x0 = _swig_property(_mupdf.Irect_x0_get, _mupdf.Irect_x0_set)
    __swig_setmethods__["y0"] = _mupdf.Irect_y0_set
    __swig_getmethods__["y0"] = _mupdf.Irect_y0_get
    if _newclass:
        y0 = _swig_property(_mupdf.Irect_y0_get, _mupdf.Irect_y0_set)
    __swig_setmethods__["x1"] = _mupdf.Irect_x1_set
    __swig_getmethods__["x1"] = _mupdf.Irect_x1_get
    if _newclass:
        x1 = _swig_property(_mupdf.Irect_x1_get, _mupdf.Irect_x1_set)
    __swig_setmethods__["y1"] = _mupdf.Irect_y1_set
    __swig_getmethods__["y1"] = _mupdf.Irect_y1_get
    if _newclass:
        y1 = _swig_property(_mupdf.Irect_y1_get, _mupdf.Irect_y1_set)

    def to_string(self):
        """
        to_string(Irect self) -> std::string

        Parameters
        ----------
        self: mupdf::Irect *

        """
        return _mupdf.Irect_to_string(self)

    __swig_destroy__ = _mupdf.delete_Irect
    __del__ = lambda self: None
Irect_swigregister = _mupdf.Irect_swigregister
Irect_swigregister(Irect)

class Jbig2Globals(_object):
    """Proxy of C++ mupdf::Jbig2Globals class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Jbig2Globals, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Jbig2Globals, name)
    __repr__ = _swig_repr

    def jbig2_globals_data(self):
        """
        jbig2_globals_data(Jbig2Globals self) -> Buffer

        Parameters
        ----------
        self: mupdf::Jbig2Globals *

        """
        return _mupdf.Jbig2Globals_jbig2_globals_data(self)


    def __init__(self, *args):
        """
        __init__(mupdf::Jbig2Globals self, Jbig2Globals rhs) -> Jbig2Globals

        Parameters
        ----------
        rhs: mupdf::Jbig2Globals const &

        __init__(mupdf::Jbig2Globals self, fz_jbig2_globals * internal) -> Jbig2Globals

        Parameters
        ----------
        internal: fz_jbig2_globals *

        """
        this = _mupdf.new_Jbig2Globals(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Jbig2Globals
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Jbig2Globals_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Jbig2Globals_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Jbig2Globals_m_internal_get, _mupdf.Jbig2Globals_m_internal_set)
Jbig2Globals_swigregister = _mupdf.Jbig2Globals_swigregister
Jbig2Globals_swigregister(Jbig2Globals)

class KeyStorable(_object):
    """Proxy of C++ mupdf::KeyStorable class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyStorable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyStorable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::KeyStorable self, KeyStorable rhs) -> KeyStorable

        Parameters
        ----------
        rhs: mupdf::KeyStorable const &

        __init__(mupdf::KeyStorable self, fz_key_storable internal) -> KeyStorable

        Parameters
        ----------
        internal: fz_key_storable *

        """
        this = _mupdf.new_KeyStorable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_KeyStorable
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.KeyStorable_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.KeyStorable_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.KeyStorable_m_internal_get, _mupdf.KeyStorable_m_internal_set)
KeyStorable_swigregister = _mupdf.KeyStorable_swigregister
KeyStorable_swigregister(KeyStorable)

class LayoutBlock(_object):
    """Proxy of C++ mupdf::LayoutBlock class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutBlock, name)
    __repr__ = _swig_repr

    def add_layout_char(self, x, w, p):
        """
        add_layout_char(LayoutBlock self, float x, float w, char const * p)

        Parameters
        ----------
        x: float
        w: float
        p: char const *

        """
        return _mupdf.LayoutBlock_add_layout_char(self, x, w, p)


    def add_layout_line(self, x, y, h, p):
        """
        add_layout_line(LayoutBlock self, float x, float y, float h, char const * p)

        Parameters
        ----------
        x: float
        y: float
        h: float
        p: char const *

        """
        return _mupdf.LayoutBlock_add_layout_line(self, x, y, h, p)


    def __init__(self, *args):
        """
        __init__(mupdf::LayoutBlock self) -> LayoutBlock
        __init__(mupdf::LayoutBlock self, fz_layout_block internal) -> LayoutBlock

        Parameters
        ----------
        internal: fz_layout_block *

        """
        this = _mupdf.new_LayoutBlock(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.LayoutBlock_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.LayoutBlock_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.LayoutBlock_m_internal_get, _mupdf.LayoutBlock_m_internal_set)
    __swig_destroy__ = _mupdf.delete_LayoutBlock
    __del__ = lambda self: None
LayoutBlock_swigregister = _mupdf.LayoutBlock_swigregister
LayoutBlock_swigregister(LayoutBlock)

class LayoutChar(_object):
    """Proxy of C++ mupdf::LayoutChar class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutChar, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::LayoutChar self, fz_layout_char internal) -> LayoutChar

        Parameters
        ----------
        internal: fz_layout_char *

        """
        this = _mupdf.new_LayoutChar(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.LayoutChar_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.LayoutChar_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.LayoutChar_m_internal_get, _mupdf.LayoutChar_m_internal_set)
    __swig_destroy__ = _mupdf.delete_LayoutChar
    __del__ = lambda self: None
LayoutChar_swigregister = _mupdf.LayoutChar_swigregister
LayoutChar_swigregister(LayoutChar)

class LayoutLine(_object):
    """Proxy of C++ mupdf::LayoutLine class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayoutLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayoutLine, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::LayoutLine self, fz_layout_line internal) -> LayoutLine

        Parameters
        ----------
        internal: fz_layout_line *

        """
        this = _mupdf.new_LayoutLine(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.LayoutLine_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.LayoutLine_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.LayoutLine_m_internal_get, _mupdf.LayoutLine_m_internal_set)
    __swig_destroy__ = _mupdf.delete_LayoutLine
    __del__ = lambda self: None
LayoutLine_swigregister = _mupdf.LayoutLine_swigregister
LayoutLine_swigregister(LayoutLine)

class Link(_object):
    """Proxy of C++ mupdf::Link class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Link, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Link, name)
    __repr__ = _swig_repr

    def begin(self):
        """
        begin(Link self) -> LinkIterator

        Parameters
        ----------
        self: mupdf::Link *

        """
        return _mupdf.Link_begin(self)


    def end(self):
        """
        end(Link self) -> LinkIterator

        Parameters
        ----------
        self: mupdf::Link *

        """
        return _mupdf.Link_end(self)


    def __init__(self, *args):
        """
        __init__(mupdf::Link self, Rect bbox, char const * uri) -> Link

        Parameters
        ----------
        bbox: mupdf::Rect &
        uri: char const *

        __init__(mupdf::Link self, Link rhs) -> Link

        Parameters
        ----------
        rhs: mupdf::Link const &

        __init__(mupdf::Link self, fz_link internal) -> Link

        Parameters
        ----------
        internal: fz_link *

        """
        this = _mupdf.new_Link(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def refs(self):
        """
        refs(Link self) -> int

        Parameters
        ----------
        self: mupdf::Link *

        """
        return _mupdf.Link_refs(self)


    def next(self):
        """
        next(Link self) -> Link

        Parameters
        ----------
        self: mupdf::Link *

        """
        return _mupdf.Link_next(self)


    def rect(self):
        """
        rect(Link self) -> fz_rect

        Parameters
        ----------
        self: mupdf::Link *

        """
        return _mupdf.Link_rect(self)


    def uri(self):
        """
        uri(Link self) -> char const *

        Parameters
        ----------
        self: mupdf::Link *

        """
        return _mupdf.Link_uri(self)

    __swig_destroy__ = _mupdf.delete_Link
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Link_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Link_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Link_m_internal_get, _mupdf.Link_m_internal_set)
Link_swigregister = _mupdf.Link_swigregister
Link_swigregister(Link)

class Location(_object):
    """Proxy of C++ mupdf::Location class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Location, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Location, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::Location self, int chapter, int page) -> Location

        Parameters
        ----------
        chapter: int
        page: int

        __init__(mupdf::Location self, fz_location internal) -> Location

        Parameters
        ----------
        internal: fz_location const *

        __init__(mupdf::Location self, fz_location internal) -> Location

        Parameters
        ----------
        internal: fz_location const

        """
        this = _mupdf.new_Location(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def internal(self, *args):
        """
        internal(Location self) -> fz_location
        internal(Location self) -> fz_location

        Parameters
        ----------
        self: mupdf::Location const *

        """
        return _mupdf.Location_internal(self, *args)

    __swig_setmethods__["chapter"] = _mupdf.Location_chapter_set
    __swig_getmethods__["chapter"] = _mupdf.Location_chapter_get
    if _newclass:
        chapter = _swig_property(_mupdf.Location_chapter_get, _mupdf.Location_chapter_set)
    __swig_setmethods__["page"] = _mupdf.Location_page_set
    __swig_getmethods__["page"] = _mupdf.Location_page_get
    if _newclass:
        page = _swig_property(_mupdf.Location_page_get, _mupdf.Location_page_set)

    def to_string(self):
        """
        to_string(Location self) -> std::string

        Parameters
        ----------
        self: mupdf::Location *

        """
        return _mupdf.Location_to_string(self)

    __swig_destroy__ = _mupdf.delete_Location
    __del__ = lambda self: None
Location_swigregister = _mupdf.Location_swigregister
Location_swigregister(Location)

class LocksContext(_object):
    """Proxy of C++ mupdf::LocksContext class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocksContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LocksContext, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::LocksContext self, fz_locks_context internal) -> LocksContext

        Parameters
        ----------
        internal: fz_locks_context *

        """
        this = _mupdf.new_LocksContext(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.LocksContext_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.LocksContext_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.LocksContext_m_internal_get, _mupdf.LocksContext_m_internal_set)
    __swig_destroy__ = _mupdf.delete_LocksContext
    __del__ = lambda self: None
LocksContext_swigregister = _mupdf.LocksContext_swigregister
LocksContext_swigregister(LocksContext)

class Matrix(_object):
    """Proxy of C++ mupdf::Matrix class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr

    def scale(sx, sy):
        """
        scale(float sx, float sy) -> Matrix

        Parameters
        ----------
        sx: float
        sy: float

        """
        return _mupdf.Matrix_scale(sx, sy)

    scale = staticmethod(scale)

    def shear(sx, sy):
        """
        shear(float sx, float sy) -> Matrix

        Parameters
        ----------
        sx: float
        sy: float

        """
        return _mupdf.Matrix_shear(sx, sy)

    shear = staticmethod(shear)

    def rotate(degrees):
        """
        rotate(float degrees) -> Matrix

        Parameters
        ----------
        degrees: float

        """
        return _mupdf.Matrix_rotate(degrees)

    rotate = staticmethod(rotate)

    def translate(tx, ty):
        """
        translate(float tx, float ty) -> Matrix

        Parameters
        ----------
        tx: float
        ty: float

        """
        return _mupdf.Matrix_translate(tx, ty)

    translate = staticmethod(translate)

    def transform_page(mediabox, resolution, rotate):
        """
        transform_page(Rect mediabox, float resolution, float rotate) -> Matrix

        Parameters
        ----------
        mediabox: mupdf::Rect &
        resolution: float
        rotate: float

        """
        return _mupdf.Matrix_transform_page(mediabox, resolution, rotate)

    transform_page = staticmethod(transform_page)

    def concat(self, *args):
        """
        concat(Matrix self, Matrix left, Matrix right) -> Matrix

        Parameters
        ----------
        left: mupdf::Matrix &
        right: mupdf::Matrix &

        concat(Matrix self, Matrix right) -> Matrix

        Parameters
        ----------
        right: mupdf::Matrix &

        """
        return _mupdf.Matrix_concat(self, *args)


    def invert_matrix(self):
        """
        invert_matrix(Matrix self) -> Matrix

        Parameters
        ----------
        self: mupdf::Matrix *

        """
        return _mupdf.Matrix_invert_matrix(self)


    def is_identity(self):
        """
        is_identity(Matrix self) -> int

        Parameters
        ----------
        self: mupdf::Matrix *

        """
        return _mupdf.Matrix_is_identity(self)


    def is_rectilinear(self):
        """
        is_rectilinear(Matrix self) -> int

        Parameters
        ----------
        self: mupdf::Matrix *

        """
        return _mupdf.Matrix_is_rectilinear(self)


    def matrix_expansion(self):
        """
        matrix_expansion(Matrix self) -> float

        Parameters
        ----------
        self: mupdf::Matrix *

        """
        return _mupdf.Matrix_matrix_expansion(self)


    def matrix_max_expansion(self):
        """
        matrix_max_expansion(Matrix self) -> float

        Parameters
        ----------
        self: mupdf::Matrix *

        """
        return _mupdf.Matrix_matrix_max_expansion(self)


    def post_scale(self, sx, sy):
        """
        post_scale(Matrix self, float sx, float sy) -> Matrix

        Parameters
        ----------
        sx: float
        sy: float

        """
        return _mupdf.Matrix_post_scale(self, sx, sy)


    def pre_rotate(self, degrees):
        """
        pre_rotate(Matrix self, float degrees) -> Matrix

        Parameters
        ----------
        degrees: float

        """
        return _mupdf.Matrix_pre_rotate(self, degrees)


    def pre_scale(self, sx, sy):
        """
        pre_scale(Matrix self, float sx, float sy) -> Matrix

        Parameters
        ----------
        sx: float
        sy: float

        """
        return _mupdf.Matrix_pre_scale(self, sx, sy)


    def pre_shear(self, sx, sy):
        """
        pre_shear(Matrix self, float sx, float sy) -> Matrix

        Parameters
        ----------
        sx: float
        sy: float

        """
        return _mupdf.Matrix_pre_shear(self, sx, sy)


    def pre_translate(self, tx, ty):
        """
        pre_translate(Matrix self, float tx, float ty) -> Matrix

        Parameters
        ----------
        tx: float
        ty: float

        """
        return _mupdf.Matrix_pre_translate(self, tx, ty)


    def subpixel_adjust(self, subpix_ctm, qe, qf):
        """
        subpixel_adjust(Matrix self, Matrix subpix_ctm, unsigned char * qe, unsigned char * qf) -> float

        Parameters
        ----------
        subpix_ctm: mupdf::Matrix &
        qe: unsigned char *
        qf: unsigned char *

        """
        return _mupdf.Matrix_subpixel_adjust(self, subpix_ctm, qe, qf)


    def try_invert_matrix(self, src):
        """
        try_invert_matrix(Matrix self, Matrix src) -> int

        Parameters
        ----------
        src: mupdf::Matrix &

        """
        return _mupdf.Matrix_try_invert_matrix(self, src)


    def __init__(self, *args):
        """
        __init__(mupdf::Matrix self, float a, float b, float c, float d, float e, float f) -> Matrix

        Parameters
        ----------
        a: float
        b: float
        c: float
        d: float
        e: float
        f: float

        __init__(mupdf::Matrix self) -> Matrix
        __init__(mupdf::Matrix self, fz_matrix internal) -> Matrix

        Parameters
        ----------
        internal: fz_matrix const *

        __init__(mupdf::Matrix self, fz_matrix internal) -> Matrix

        Parameters
        ----------
        internal: fz_matrix const

        """
        this = _mupdf.new_Matrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def internal(self, *args):
        """
        internal(Matrix self) -> fz_matrix
        internal(Matrix self) -> fz_matrix

        Parameters
        ----------
        self: mupdf::Matrix const *

        """
        return _mupdf.Matrix_internal(self, *args)

    __swig_setmethods__["a"] = _mupdf.Matrix_a_set
    __swig_getmethods__["a"] = _mupdf.Matrix_a_get
    if _newclass:
        a = _swig_property(_mupdf.Matrix_a_get, _mupdf.Matrix_a_set)
    __swig_setmethods__["b"] = _mupdf.Matrix_b_set
    __swig_getmethods__["b"] = _mupdf.Matrix_b_get
    if _newclass:
        b = _swig_property(_mupdf.Matrix_b_get, _mupdf.Matrix_b_set)
    __swig_setmethods__["c"] = _mupdf.Matrix_c_set
    __swig_getmethods__["c"] = _mupdf.Matrix_c_get
    if _newclass:
        c = _swig_property(_mupdf.Matrix_c_get, _mupdf.Matrix_c_set)
    __swig_setmethods__["d"] = _mupdf.Matrix_d_set
    __swig_getmethods__["d"] = _mupdf.Matrix_d_get
    if _newclass:
        d = _swig_property(_mupdf.Matrix_d_get, _mupdf.Matrix_d_set)
    __swig_setmethods__["e"] = _mupdf.Matrix_e_set
    __swig_getmethods__["e"] = _mupdf.Matrix_e_get
    if _newclass:
        e = _swig_property(_mupdf.Matrix_e_get, _mupdf.Matrix_e_set)
    __swig_setmethods__["f"] = _mupdf.Matrix_f_set
    __swig_getmethods__["f"] = _mupdf.Matrix_f_get
    if _newclass:
        f = _swig_property(_mupdf.Matrix_f_get, _mupdf.Matrix_f_set)

    def to_string(self):
        """
        to_string(Matrix self) -> std::string

        Parameters
        ----------
        self: mupdf::Matrix *

        """
        return _mupdf.Matrix_to_string(self)

    __swig_destroy__ = _mupdf.delete_Matrix
    __del__ = lambda self: None
Matrix_swigregister = _mupdf.Matrix_swigregister
Matrix_swigregister(Matrix)

def Matrix_scale(sx, sy):
    """
    Matrix_scale(float sx, float sy) -> Matrix

    Parameters
    ----------
    sx: float
    sy: float

    """
    return _mupdf.Matrix_scale(sx, sy)

def Matrix_shear(sx, sy):
    """
    Matrix_shear(float sx, float sy) -> Matrix

    Parameters
    ----------
    sx: float
    sy: float

    """
    return _mupdf.Matrix_shear(sx, sy)

def Matrix_rotate(degrees):
    """
    Matrix_rotate(float degrees) -> Matrix

    Parameters
    ----------
    degrees: float

    """
    return _mupdf.Matrix_rotate(degrees)

def Matrix_translate(tx, ty):
    """
    Matrix_translate(float tx, float ty) -> Matrix

    Parameters
    ----------
    tx: float
    ty: float

    """
    return _mupdf.Matrix_translate(tx, ty)

def Matrix_transform_page(mediabox, resolution, rotate):
    """
    Matrix_transform_page(Rect mediabox, float resolution, float rotate) -> Matrix

    Parameters
    ----------
    mediabox: mupdf::Rect &
    resolution: float
    rotate: float

    """
    return _mupdf.Matrix_transform_page(mediabox, resolution, rotate)

class Md5(_object):
    """Proxy of C++ mupdf::Md5 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Md5, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Md5, name)
    __repr__ = _swig_repr

    def md5_final(self, digest):
        """
        md5_final(Md5 self, unsigned char [16] digest)

        Parameters
        ----------
        digest: unsigned char [16]

        """
        return _mupdf.Md5_md5_final(self, digest)


    def md5_init(self):
        """
        md5_init(Md5 self)

        Parameters
        ----------
        self: mupdf::Md5 *

        """
        return _mupdf.Md5_md5_init(self)


    def md5_update(self, input, inlen):
        """
        md5_update(Md5 self, unsigned char const * input, size_t inlen)

        Parameters
        ----------
        input: unsigned char const *
        inlen: size_t

        """
        return _mupdf.Md5_md5_update(self, input, inlen)


    def md5_update_int64(self, i):
        """
        md5_update_int64(Md5 self, int64_t i)

        Parameters
        ----------
        i: int64_t

        """
        return _mupdf.Md5_md5_update_int64(self, i)


    def __init__(self, internal):
        """
        __init__(mupdf::Md5 self, fz_md5 internal) -> Md5

        Parameters
        ----------
        internal: fz_md5 *

        """
        this = _mupdf.new_Md5(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.Md5_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Md5_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Md5_m_internal_get, _mupdf.Md5_m_internal_set)
    __swig_destroy__ = _mupdf.delete_Md5
    __del__ = lambda self: None
Md5_swigregister = _mupdf.Md5_swigregister
Md5_swigregister(Md5)

class Outline(_object):
    """Proxy of C++ mupdf::Outline class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Outline, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Outline, name)
    __repr__ = _swig_repr

    def begin(self):
        """
        begin(Outline self) -> OutlineIterator

        Parameters
        ----------
        self: mupdf::Outline *

        """
        return _mupdf.Outline_begin(self)


    def end(self):
        """
        end(Outline self) -> OutlineIterator

        Parameters
        ----------
        self: mupdf::Outline *

        """
        return _mupdf.Outline_end(self)


    def __init__(self, *args):
        """
        __init__(mupdf::Outline self, Document doc) -> Outline

        Parameters
        ----------
        doc: mupdf::Document const &

        __init__(mupdf::Outline self) -> Outline
        __init__(mupdf::Outline self, Outline rhs) -> Outline

        Parameters
        ----------
        rhs: mupdf::Outline const &

        __init__(mupdf::Outline self, fz_outline internal) -> Outline

        Parameters
        ----------
        internal: fz_outline *

        """
        this = _mupdf.new_Outline(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def refs(self):
        """
        refs(Outline self) -> int

        Parameters
        ----------
        self: mupdf::Outline *

        """
        return _mupdf.Outline_refs(self)


    def title(self):
        """
        title(Outline self) -> char const *

        Parameters
        ----------
        self: mupdf::Outline *

        """
        return _mupdf.Outline_title(self)


    def uri(self):
        """
        uri(Outline self) -> char const *

        Parameters
        ----------
        self: mupdf::Outline *

        """
        return _mupdf.Outline_uri(self)


    def page(self):
        """
        page(Outline self) -> int

        Parameters
        ----------
        self: mupdf::Outline *

        """
        return _mupdf.Outline_page(self)


    def x(self):
        """
        x(Outline self) -> float

        Parameters
        ----------
        self: mupdf::Outline *

        """
        return _mupdf.Outline_x(self)


    def y(self):
        """
        y(Outline self) -> float

        Parameters
        ----------
        self: mupdf::Outline *

        """
        return _mupdf.Outline_y(self)


    def next(self):
        """
        next(Outline self) -> Outline

        Parameters
        ----------
        self: mupdf::Outline *

        """
        return _mupdf.Outline_next(self)


    def down(self):
        """
        down(Outline self) -> Outline

        Parameters
        ----------
        self: mupdf::Outline *

        """
        return _mupdf.Outline_down(self)


    def is_open(self):
        """
        is_open(Outline self) -> int

        Parameters
        ----------
        self: mupdf::Outline *

        """
        return _mupdf.Outline_is_open(self)

    __swig_destroy__ = _mupdf.delete_Outline
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Outline_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Outline_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Outline_m_internal_get, _mupdf.Outline_m_internal_set)
Outline_swigregister = _mupdf.Outline_swigregister
Outline_swigregister(Outline)

class Output(_object):
    """Proxy of C++ mupdf::Output class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Output, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Output, name)
    __repr__ = _swig_repr
    Fixed_STDOUT = _mupdf.Output_Fixed_STDOUT
    Fixed_STDERR = _mupdf.Output_Fixed_STDERR
    Filter_HEX = _mupdf.Output_Filter_HEX
    Filter_85 = _mupdf.Output_Filter_85
    Filter_RLE = _mupdf.Output_Filter_RLE

    def close_output(self):
        """
        close_output(Output self)

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_close_output(self)


    def debug_store(self):
        """
        debug_store(Output self)

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_debug_store(self)


    def dump_glyph_cache_stats(self):
        """
        dump_glyph_cache_stats(Output self)

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_dump_glyph_cache_stats(self)


    def flush_output(self):
        """
        flush_output(Output self)

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_flush_output(self)


    def new_svg_device(self, page_width, page_height, text_format, reuse_images):
        """
        new_svg_device(Output self, float page_width, float page_height, int text_format, int reuse_images) -> Device

        Parameters
        ----------
        page_width: float
        page_height: float
        text_format: int
        reuse_images: int

        """
        return _mupdf.Output_new_svg_device(self, page_width, page_height, text_format, reuse_images)


    def new_svg_device_with_id(self, page_width, page_height, text_format, reuse_images, id):
        """
        new_svg_device_with_id(Output self, float page_width, float page_height, int text_format, int reuse_images, int * id) -> Device

        Parameters
        ----------
        page_width: float
        page_height: float
        text_format: int
        reuse_images: int
        id: int *

        """
        return _mupdf.Output_new_svg_device_with_id(self, page_width, page_height, text_format, reuse_images, id)


    def new_trace_device(self):
        """
        new_trace_device(Output self) -> Device

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_new_trace_device(self)


    def new_xmltext_device(self):
        """
        new_xmltext_device(Output self) -> Device

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_new_xmltext_device(self)


    def new_zip_writer_with_output(self):
        """
        new_zip_writer_with_output(Output self) -> ZipWriter

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_new_zip_writer_with_output(self)


    def output_supports_stream(self):
        """
        output_supports_stream(Output self) -> int

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_output_supports_stream(self)


    def print_stext_header_as_html(self):
        """
        print_stext_header_as_html(Output self)

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_print_stext_header_as_html(self)


    def print_stext_header_as_xhtml(self):
        """
        print_stext_header_as_xhtml(Output self)

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_print_stext_header_as_xhtml(self)


    def print_stext_page_as_html(self, page, id):
        """
        print_stext_page_as_html(Output self, StextPage page, int id)

        Parameters
        ----------
        page: mupdf::StextPage const &
        id: int

        """
        return _mupdf.Output_print_stext_page_as_html(self, page, id)


    def print_stext_page_as_json(self, page, scale):
        """
        print_stext_page_as_json(Output self, StextPage page, float scale)

        Parameters
        ----------
        page: mupdf::StextPage const &
        scale: float

        """
        return _mupdf.Output_print_stext_page_as_json(self, page, scale)


    def print_stext_page_as_text(self, page):
        """
        print_stext_page_as_text(Output self, StextPage page)

        Parameters
        ----------
        page: mupdf::StextPage const &

        """
        return _mupdf.Output_print_stext_page_as_text(self, page)


    def print_stext_page_as_xhtml(self, page, id):
        """
        print_stext_page_as_xhtml(Output self, StextPage page, int id)

        Parameters
        ----------
        page: mupdf::StextPage const &
        id: int

        """
        return _mupdf.Output_print_stext_page_as_xhtml(self, page, id)


    def print_stext_page_as_xml(self, page, id):
        """
        print_stext_page_as_xml(Output self, StextPage page, int id)

        Parameters
        ----------
        page: mupdf::StextPage const &
        id: int

        """
        return _mupdf.Output_print_stext_page_as_xml(self, page, id)


    def print_stext_trailer_as_html(self):
        """
        print_stext_trailer_as_html(Output self)

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_print_stext_trailer_as_html(self)


    def print_stext_trailer_as_xhtml(self):
        """
        print_stext_trailer_as_xhtml(Output self)

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_print_stext_trailer_as_xhtml(self)


    def seek_output(self, off, whence):
        """
        seek_output(Output self, int64_t off, int whence)

        Parameters
        ----------
        off: int64_t
        whence: int

        """
        return _mupdf.Output_seek_output(self, off, whence)


    def set_stddbg(self):
        """
        set_stddbg(Output self)

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_set_stddbg(self)


    def stream_from_output(self):
        """
        stream_from_output(Output self) -> Stream

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_stream_from_output(self)


    def tell_output(self):
        """
        tell_output(Output self) -> int64_t

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_tell_output(self)


    def truncate_output(self):
        """
        truncate_output(Output self)

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_truncate_output(self)


    def write_base64(self, data, size, newline):
        """
        write_base64(Output self, unsigned char const * data, size_t size, int newline)

        Parameters
        ----------
        data: unsigned char const *
        size: size_t
        newline: int

        """
        return _mupdf.Output_write_base64(self, data, size, newline)


    def write_base64_buffer(self, data, newline):
        """
        write_base64_buffer(Output self, Buffer data, int newline)

        Parameters
        ----------
        data: mupdf::Buffer const &
        newline: int

        """
        return _mupdf.Output_write_base64_buffer(self, data, newline)


    def write_bitmap_as_pbm(self, bitmap):
        """
        write_bitmap_as_pbm(Output self, Bitmap bitmap)

        Parameters
        ----------
        bitmap: mupdf::Bitmap const &

        """
        return _mupdf.Output_write_bitmap_as_pbm(self, bitmap)


    def write_bitmap_as_pcl(self, bitmap, pcl):
        """
        write_bitmap_as_pcl(Output self, Bitmap bitmap, PclOptions pcl)

        Parameters
        ----------
        bitmap: mupdf::Bitmap const &
        pcl: mupdf::PclOptions const &

        """
        return _mupdf.Output_write_bitmap_as_pcl(self, bitmap, pcl)


    def write_bitmap_as_pkm(self, bitmap):
        """
        write_bitmap_as_pkm(Output self, Bitmap bitmap)

        Parameters
        ----------
        bitmap: mupdf::Bitmap const &

        """
        return _mupdf.Output_write_bitmap_as_pkm(self, bitmap)


    def write_bitmap_as_pwg(self, bitmap, pwg):
        """
        write_bitmap_as_pwg(Output self, Bitmap bitmap, PwgOptions pwg)

        Parameters
        ----------
        bitmap: mupdf::Bitmap const &
        pwg: mupdf::PwgOptions &

        """
        return _mupdf.Output_write_bitmap_as_pwg(self, bitmap, pwg)


    def write_bitmap_as_pwg_page(self, bitmap, pwg):
        """
        write_bitmap_as_pwg_page(Output self, Bitmap bitmap, PwgOptions pwg)

        Parameters
        ----------
        bitmap: mupdf::Bitmap const &
        pwg: mupdf::PwgOptions &

        """
        return _mupdf.Output_write_bitmap_as_pwg_page(self, bitmap, pwg)


    def write_byte(self, x):
        """
        write_byte(Output self, unsigned char x)

        Parameters
        ----------
        x: unsigned char

        """
        return _mupdf.Output_write_byte(self, x)


    def write_char(self, x):
        """
        write_char(Output self, char x)

        Parameters
        ----------
        x: char

        """
        return _mupdf.Output_write_char(self, x)


    def write_data(self, data, size):
        """
        write_data(Output self, void const * data, size_t size)

        Parameters
        ----------
        data: void const *
        size: size_t

        """
        return _mupdf.Output_write_data(self, data, size)


    def write_float_be(self, f):
        """
        write_float_be(Output self, float f)

        Parameters
        ----------
        f: float

        """
        return _mupdf.Output_write_float_be(self, f)


    def write_float_le(self, f):
        """
        write_float_le(Output self, float f)

        Parameters
        ----------
        f: float

        """
        return _mupdf.Output_write_float_le(self, f)


    def write_image_as_data_uri(self, image):
        """
        write_image_as_data_uri(Output self, Image image)

        Parameters
        ----------
        image: mupdf::Image const &

        """
        return _mupdf.Output_write_image_as_data_uri(self, image)


    def write_int16_be(self, x):
        """
        write_int16_be(Output self, int x)

        Parameters
        ----------
        x: int

        """
        return _mupdf.Output_write_int16_be(self, x)


    def write_int16_le(self, x):
        """
        write_int16_le(Output self, int x)

        Parameters
        ----------
        x: int

        """
        return _mupdf.Output_write_int16_le(self, x)


    def write_int32_be(self, x):
        """
        write_int32_be(Output self, int x)

        Parameters
        ----------
        x: int

        """
        return _mupdf.Output_write_int32_be(self, x)


    def write_int32_le(self, x):
        """
        write_int32_le(Output self, int x)

        Parameters
        ----------
        x: int

        """
        return _mupdf.Output_write_int32_le(self, x)


    def write_pixmap_as_data_uri(self, pixmap):
        """
        write_pixmap_as_data_uri(Output self, Pixmap pixmap)

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &

        """
        return _mupdf.Output_write_pixmap_as_data_uri(self, pixmap)


    def write_pixmap_as_pam(self, pixmap):
        """
        write_pixmap_as_pam(Output self, Pixmap pixmap)

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &

        """
        return _mupdf.Output_write_pixmap_as_pam(self, pixmap)


    def write_pixmap_as_pcl(self, pixmap, pcl):
        """
        write_pixmap_as_pcl(Output self, Pixmap pixmap, PclOptions pcl)

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &
        pcl: mupdf::PclOptions const &

        """
        return _mupdf.Output_write_pixmap_as_pcl(self, pixmap, pcl)


    def write_pixmap_as_pclm(self, pixmap, options):
        """
        write_pixmap_as_pclm(Output self, Pixmap pixmap, PclmOptions options)

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &
        options: mupdf::PclmOptions const &

        """
        return _mupdf.Output_write_pixmap_as_pclm(self, pixmap, options)


    def write_pixmap_as_pdfocr(self, pixmap, options):
        """
        write_pixmap_as_pdfocr(Output self, Pixmap pixmap, PdfocrOptions options)

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &
        options: mupdf::PdfocrOptions const &

        """
        return _mupdf.Output_write_pixmap_as_pdfocr(self, pixmap, options)


    def write_pixmap_as_png(self, pixmap):
        """
        write_pixmap_as_png(Output self, Pixmap pixmap)

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &

        """
        return _mupdf.Output_write_pixmap_as_png(self, pixmap)


    def write_pixmap_as_pnm(self, pixmap):
        """
        write_pixmap_as_pnm(Output self, Pixmap pixmap)

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &

        """
        return _mupdf.Output_write_pixmap_as_pnm(self, pixmap)


    def write_pixmap_as_ps(self, pixmap):
        """
        write_pixmap_as_ps(Output self, Pixmap pixmap)

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &

        """
        return _mupdf.Output_write_pixmap_as_ps(self, pixmap)


    def write_pixmap_as_psd(self, pixmap):
        """
        write_pixmap_as_psd(Output self, Pixmap pixmap)

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &

        """
        return _mupdf.Output_write_pixmap_as_psd(self, pixmap)


    def write_pixmap_as_pwg(self, pixmap, pwg):
        """
        write_pixmap_as_pwg(Output self, Pixmap pixmap, PwgOptions pwg)

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &
        pwg: mupdf::PwgOptions &

        """
        return _mupdf.Output_write_pixmap_as_pwg(self, pixmap, pwg)


    def write_pixmap_as_pwg_page(self, pixmap, pwg):
        """
        write_pixmap_as_pwg_page(Output self, Pixmap pixmap, PwgOptions pwg)

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &
        pwg: mupdf::PwgOptions &

        """
        return _mupdf.Output_write_pixmap_as_pwg_page(self, pixmap, pwg)


    def write_ps_file_header(self):
        """
        write_ps_file_header(Output self)

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_write_ps_file_header(self)


    def write_ps_file_trailer(self, pages):
        """
        write_ps_file_trailer(Output self, int pages)

        Parameters
        ----------
        pages: int

        """
        return _mupdf.Output_write_ps_file_trailer(self, pages)


    def write_pwg_file_header(self):
        """
        write_pwg_file_header(Output self)

        Parameters
        ----------
        self: mupdf::Output *

        """
        return _mupdf.Output_write_pwg_file_header(self)


    def write_rune(self, rune):
        """
        write_rune(Output self, int rune)

        Parameters
        ----------
        rune: int

        """
        return _mupdf.Output_write_rune(self, rune)


    def write_string(self, s):
        """
        write_string(Output self, char const * s)

        Parameters
        ----------
        s: char const *

        """
        return _mupdf.Output_write_string(self, s)


    def write_uint16_be(self, x):
        """
        write_uint16_be(Output self, unsigned int x)

        Parameters
        ----------
        x: unsigned int

        """
        return _mupdf.Output_write_uint16_be(self, x)


    def write_uint16_le(self, x):
        """
        write_uint16_le(Output self, unsigned int x)

        Parameters
        ----------
        x: unsigned int

        """
        return _mupdf.Output_write_uint16_le(self, x)


    def write_uint32_be(self, x):
        """
        write_uint32_be(Output self, unsigned int x)

        Parameters
        ----------
        x: unsigned int

        """
        return _mupdf.Output_write_uint32_be(self, x)


    def write_uint32_le(self, x):
        """
        write_uint32_le(Output self, unsigned int x)

        Parameters
        ----------
        x: unsigned int

        """
        return _mupdf.Output_write_uint32_le(self, x)


    def __init__(self, *args):
        """
        __init__(mupdf::Output self, Output chain, unsigned char * key, size_t keylen) -> Output

        Parameters
        ----------
        chain: mupdf::Output const &
        key: unsigned char *
        keylen: size_t

        __init__(mupdf::Output self, Output chain, int effort, int raw) -> Output

        Parameters
        ----------
        chain: mupdf::Output const &
        effort: int
        raw: int

        __init__(mupdf::Output self, char const * module) -> Output

        Parameters
        ----------
        module: char const *

        __init__(mupdf::Output self, int bufsiz, void * state, fz_output_write_fn * write, fz_output_close_fn * close, fz_output_drop_fn * drop) -> Output

        Parameters
        ----------
        bufsiz: int
        state: void *
        write: fz_output_write_fn *
        close: fz_output_close_fn *
        drop: fz_output_drop_fn *

        __init__(mupdf::Output self, Buffer buf) -> Output

        Parameters
        ----------
        buf: mupdf::Buffer const &

        __init__(mupdf::Output self, char const * filename, int append) -> Output

        Parameters
        ----------
        filename: char const *
        append: int

        __init__(mupdf::Output self, mupdf::Output::Fixed out) -> Output

        Parameters
        ----------
        out: enum mupdf::Output::Fixed

        __init__(mupdf::Output self, Output chain, mupdf::Output::Filter filter) -> Output

        Parameters
        ----------
        chain: mupdf::Output const &
        filter: enum mupdf::Output::Filter

        __init__(mupdf::Output self, fz_output * internal) -> Output

        Parameters
        ----------
        internal: fz_output *

        """
        this = _mupdf.new_Output(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Output
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Output_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Output_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Output_m_internal_get, _mupdf.Output_m_internal_set)
Output_swigregister = _mupdf.Output_swigregister
Output_swigregister(Output)

class Overprint(_object):
    """Proxy of C++ mupdf::Overprint class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Overprint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Overprint, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::Overprint self, fz_overprint * internal) -> Overprint

        Parameters
        ----------
        internal: fz_overprint *

        """
        this = _mupdf.new_Overprint(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.Overprint_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Overprint_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Overprint_m_internal_get, _mupdf.Overprint_m_internal_set)
    __swig_destroy__ = _mupdf.delete_Overprint
    __del__ = lambda self: None
Overprint_swigregister = _mupdf.Overprint_swigregister
Overprint_swigregister(Overprint)

class Page(_object):
    """Proxy of C++ mupdf::Page class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Page, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Page, name)
    __repr__ = _swig_repr

    def bound_page(self):
        """
        bound_page(Page self) -> Rect

        Parameters
        ----------
        self: mupdf::Page *

        """
        return _mupdf.Page_bound_page(self)


    def create_link(self, bbox, uri):
        """
        create_link(Page self, Rect bbox, char const * uri) -> Link

        Parameters
        ----------
        bbox: mupdf::Rect &
        uri: char const *

        """
        return _mupdf.Page_create_link(self, bbox, uri)


    def load_links(self):
        """
        load_links(Page self) -> Link

        Parameters
        ----------
        self: mupdf::Page *

        """
        return _mupdf.Page_load_links(self)


    def new_buffer_from_page(self, options):
        """
        new_buffer_from_page(Page self, StextOptions options) -> Buffer

        Parameters
        ----------
        options: mupdf::StextOptions &

        """
        return _mupdf.Page_new_buffer_from_page(self, options)


    def new_buffer_from_page_with_format(self, format, options, transform, cookie):
        """
        new_buffer_from_page_with_format(Page self, char const * format, char const * options, Matrix transform, Cookie cookie) -> Buffer

        Parameters
        ----------
        format: char const *
        options: char const *
        transform: mupdf::Matrix &
        cookie: mupdf::Cookie &

        """
        return _mupdf.Page_new_buffer_from_page_with_format(self, format, options, transform, cookie)


    def new_display_list_from_page(self):
        """
        new_display_list_from_page(Page self) -> DisplayList

        Parameters
        ----------
        self: mupdf::Page *

        """
        return _mupdf.Page_new_display_list_from_page(self)


    def new_display_list_from_page_contents(self):
        """
        new_display_list_from_page_contents(Page self) -> DisplayList

        Parameters
        ----------
        self: mupdf::Page *

        """
        return _mupdf.Page_new_display_list_from_page_contents(self)


    def new_pixmap_from_page(self, ctm, cs, alpha):
        """
        new_pixmap_from_page(Page self, Matrix ctm, Colorspace cs, int alpha) -> Pixmap

        Parameters
        ----------
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        alpha: int

        """
        return _mupdf.Page_new_pixmap_from_page(self, ctm, cs, alpha)


    def new_pixmap_from_page_contents(self, ctm, cs, alpha):
        """
        new_pixmap_from_page_contents(Page self, Matrix ctm, Colorspace cs, int alpha) -> Pixmap

        Parameters
        ----------
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        alpha: int

        """
        return _mupdf.Page_new_pixmap_from_page_contents(self, ctm, cs, alpha)


    def new_pixmap_from_page_contents_with_separations(self, ctm, cs, seps, alpha):
        """
        new_pixmap_from_page_contents_with_separations(Page self, Matrix ctm, Colorspace cs, Separations seps, int alpha) -> Pixmap

        Parameters
        ----------
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        seps: mupdf::Separations const &
        alpha: int

        """
        return _mupdf.Page_new_pixmap_from_page_contents_with_separations(self, ctm, cs, seps, alpha)


    def new_pixmap_from_page_with_separations(self, ctm, cs, seps, alpha):
        """
        new_pixmap_from_page_with_separations(Page self, Matrix ctm, Colorspace cs, Separations seps, int alpha) -> Pixmap

        Parameters
        ----------
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        seps: mupdf::Separations const &
        alpha: int

        """
        return _mupdf.Page_new_pixmap_from_page_with_separations(self, ctm, cs, seps, alpha)


    def page_presentation(self, transition, duration):
        """
        page_presentation(Page self, Transition transition, float * duration) -> Transition

        Parameters
        ----------
        transition: mupdf::Transition &
        duration: float *

        """
        return _mupdf.Page_page_presentation(self, transition, duration)


    def page_separations(self):
        """
        page_separations(Page self) -> Separations

        Parameters
        ----------
        self: mupdf::Page *

        """
        return _mupdf.Page_page_separations(self)


    def page_uses_overprint(self):
        """
        page_uses_overprint(Page self) -> int

        Parameters
        ----------
        self: mupdf::Page *

        """
        return _mupdf.Page_page_uses_overprint(self)


    def run_page(self, dev, transform, cookie):
        """
        run_page(Page self, Device dev, Matrix transform, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        transform: mupdf::Matrix &
        cookie: mupdf::Cookie &

        """
        return _mupdf.Page_run_page(self, dev, transform, cookie)


    def run_page_annots(self, dev, transform, cookie):
        """
        run_page_annots(Page self, Device dev, Matrix transform, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        transform: mupdf::Matrix &
        cookie: mupdf::Cookie &

        """
        return _mupdf.Page_run_page_annots(self, dev, transform, cookie)


    def run_page_contents(self, dev, transform, cookie):
        """
        run_page_contents(Page self, Device dev, Matrix transform, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        transform: mupdf::Matrix &
        cookie: mupdf::Cookie &

        """
        return _mupdf.Page_run_page_contents(self, dev, transform, cookie)


    def run_page_widgets(self, dev, transform, cookie):
        """
        run_page_widgets(Page self, Device dev, Matrix transform, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        transform: mupdf::Matrix &
        cookie: mupdf::Cookie &

        """
        return _mupdf.Page_run_page_widgets(self, dev, transform, cookie)


    def search_page(self, needle, max):
        """
        search_page(Page self, char const * needle, int max) -> vectorq

        Parameters
        ----------
        needle: char const *
        max: int

        """
        return _mupdf.Page_search_page(self, needle, max)


    def __init__(self, *args):
        """
        __init__(mupdf::Page self, Document doc, int chapter, int page) -> Page

        Parameters
        ----------
        doc: mupdf::Document const &
        chapter: int
        page: int

        __init__(mupdf::Page self, Document doc, int number) -> Page

        Parameters
        ----------
        doc: mupdf::Document const &
        number: int

        __init__(mupdf::Page self, int size, Document doc) -> Page

        Parameters
        ----------
        size: int
        doc: mupdf::Document const &

        __init__(mupdf::Page self, Page rhs) -> Page

        Parameters
        ----------
        rhs: mupdf::Page const &

        __init__(mupdf::Page self, fz_page * internal) -> Page

        Parameters
        ----------
        internal: fz_page *

        """
        this = _mupdf.new_Page(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Page
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Page_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Page_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Page_m_internal_get, _mupdf.Page_m_internal_set)
Page_swigregister = _mupdf.Page_swigregister
Page_swigregister(Page)

class Path(_object):
    """Proxy of C++ mupdf::Path class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Path, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Path, name)
    __repr__ = _swig_repr

    def bound_path(self, stroke, ctm):
        """
        bound_path(Path self, StrokeState stroke, Matrix ctm) -> Rect

        Parameters
        ----------
        stroke: mupdf::StrokeState const &
        ctm: mupdf::Matrix &

        """
        return _mupdf.Path_bound_path(self, stroke, ctm)


    def clone_path(self):
        """
        clone_path(Path self) -> Path

        Parameters
        ----------
        self: mupdf::Path *

        """
        return _mupdf.Path_clone_path(self)


    def closepath(self):
        """
        closepath(Path self)

        Parameters
        ----------
        self: mupdf::Path *

        """
        return _mupdf.Path_closepath(self)


    def currentpoint(self):
        """
        currentpoint(Path self) -> Point

        Parameters
        ----------
        self: mupdf::Path *

        """
        return _mupdf.Path_currentpoint(self)


    def curveto(self, x0, y0, x1, y1, x2, y2):
        """
        curveto(Path self, float x0, float y0, float x1, float y1, float x2, float y2)

        Parameters
        ----------
        x0: float
        y0: float
        x1: float
        y1: float
        x2: float
        y2: float

        """
        return _mupdf.Path_curveto(self, x0, y0, x1, y1, x2, y2)


    def curvetov(self, x1, y1, x2, y2):
        """
        curvetov(Path self, float x1, float y1, float x2, float y2)

        Parameters
        ----------
        x1: float
        y1: float
        x2: float
        y2: float

        """
        return _mupdf.Path_curvetov(self, x1, y1, x2, y2)


    def curvetoy(self, x0, y0, x2, y2):
        """
        curvetoy(Path self, float x0, float y0, float x2, float y2)

        Parameters
        ----------
        x0: float
        y0: float
        x2: float
        y2: float

        """
        return _mupdf.Path_curvetoy(self, x0, y0, x2, y2)


    def lineto(self, x, y):
        """
        lineto(Path self, float x, float y)

        Parameters
        ----------
        x: float
        y: float

        """
        return _mupdf.Path_lineto(self, x, y)


    def moveto(self, x, y):
        """
        moveto(Path self, float x, float y)

        Parameters
        ----------
        x: float
        y: float

        """
        return _mupdf.Path_moveto(self, x, y)


    def packed_path_size(self):
        """
        packed_path_size(Path self) -> int

        Parameters
        ----------
        self: mupdf::Path *

        """
        return _mupdf.Path_packed_path_size(self)


    def quadto(self, x0, y0, x1, y1):
        """
        quadto(Path self, float x0, float y0, float x1, float y1)

        Parameters
        ----------
        x0: float
        y0: float
        x1: float
        y1: float

        """
        return _mupdf.Path_quadto(self, x0, y0, x1, y1)


    def rectto(self, x0, y0, x1, y1):
        """
        rectto(Path self, float x0, float y0, float x1, float y1)

        Parameters
        ----------
        x0: float
        y0: float
        x1: float
        y1: float

        """
        return _mupdf.Path_rectto(self, x0, y0, x1, y1)


    def transform_path(self, transform):
        """
        transform_path(Path self, Matrix transform)

        Parameters
        ----------
        transform: mupdf::Matrix &

        """
        return _mupdf.Path_transform_path(self, transform)


    def trim_path(self):
        """
        trim_path(Path self)

        Parameters
        ----------
        self: mupdf::Path *

        """
        return _mupdf.Path_trim_path(self)


    def walk_path(self, walker, arg):
        """
        walk_path(Path self, PathWalker walker, void * arg)

        Parameters
        ----------
        walker: mupdf::PathWalker const &
        arg: void *

        """
        return _mupdf.Path_walk_path(self, walker, arg)


    def __init__(self, *args):
        """
        __init__(mupdf::Path self) -> Path
        __init__(mupdf::Path self, Path rhs) -> Path

        Parameters
        ----------
        rhs: mupdf::Path const &

        __init__(mupdf::Path self, fz_path * internal) -> Path

        Parameters
        ----------
        internal: fz_path *

        """
        this = _mupdf.new_Path(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Path
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Path_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Path_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Path_m_internal_get, _mupdf.Path_m_internal_set)
Path_swigregister = _mupdf.Path_swigregister
Path_swigregister(Path)

class PathWalker(_object):
    """Proxy of C++ mupdf::PathWalker class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathWalker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PathWalker, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PathWalker self, fz_path_walker internal) -> PathWalker

        Parameters
        ----------
        internal: fz_path_walker *

        """
        this = _mupdf.new_PathWalker(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PathWalker_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PathWalker_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PathWalker_m_internal_get, _mupdf.PathWalker_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PathWalker
    __del__ = lambda self: None
PathWalker_swigregister = _mupdf.PathWalker_swigregister
PathWalker_swigregister(PathWalker)

class PclOptions(_object):
    """Proxy of C++ mupdf::PclOptions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PclOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PclOptions, name)
    __repr__ = _swig_repr

    def pcl_preset(self, preset):
        """
        pcl_preset(PclOptions self, char const * preset)

        Parameters
        ----------
        preset: char const *

        """
        return _mupdf.PclOptions_pcl_preset(self, preset)


    def __init__(self, *args):
        """
        __init__(mupdf::PclOptions self, PclOptions opts, char const * args) -> PclOptions

        Parameters
        ----------
        opts: mupdf::PclOptions const &
        args: char const *

        __init__(mupdf::PclOptions self, fz_pcl_options internal) -> PclOptions

        Parameters
        ----------
        internal: fz_pcl_options *

        """
        this = _mupdf.new_PclOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PclOptions_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PclOptions_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PclOptions_m_internal_get, _mupdf.PclOptions_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PclOptions
    __del__ = lambda self: None
PclOptions_swigregister = _mupdf.PclOptions_swigregister
PclOptions_swigregister(PclOptions)

class PclmOptions(_object):
    """Proxy of C++ mupdf::PclmOptions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PclmOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PclmOptions, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::PclmOptions self, PclmOptions opts, char const * args) -> PclmOptions

        Parameters
        ----------
        opts: mupdf::PclmOptions const &
        args: char const *

        __init__(mupdf::PclmOptions self, char const * args) -> PclmOptions

        Parameters
        ----------
        args: char const *

        __init__(mupdf::PclmOptions self, fz_pclm_options internal) -> PclmOptions

        Parameters
        ----------
        internal: fz_pclm_options *

        """
        this = _mupdf.new_PclmOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PclmOptions_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PclmOptions_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PclmOptions_m_internal_get, _mupdf.PclmOptions_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PclmOptions
    __del__ = lambda self: None
PclmOptions_swigregister = _mupdf.PclmOptions_swigregister
PclmOptions_swigregister(PclmOptions)

class PdfAlertEvent(_object):
    """Proxy of C++ mupdf::PdfAlertEvent class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfAlertEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfAlertEvent, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfAlertEvent self, pdf_alert_event internal) -> PdfAlertEvent

        Parameters
        ----------
        internal: pdf_alert_event *

        """
        this = _mupdf.new_PdfAlertEvent(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfAlertEvent_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfAlertEvent_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfAlertEvent_m_internal_get, _mupdf.PdfAlertEvent_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfAlertEvent
    __del__ = lambda self: None
PdfAlertEvent_swigregister = _mupdf.PdfAlertEvent_swigregister
PdfAlertEvent_swigregister(PdfAlertEvent)

class PdfAnnot(_object):
    """Proxy of C++ mupdf::PdfAnnot class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfAnnot, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfAnnot, name)
    __repr__ = _swig_repr

    def add_annot_ink_list_stroke(self):
        """
        add_annot_ink_list_stroke(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_add_annot_ink_list_stroke(self)


    def add_annot_ink_list_stroke_vertex(self, p):
        """
        add_annot_ink_list_stroke_vertex(PdfAnnot self, Point p)

        Parameters
        ----------
        p: mupdf::Point &

        """
        return _mupdf.PdfAnnot_add_annot_ink_list_stroke_vertex(self, p)


    def add_annot_quad_point(self, quad):
        """
        add_annot_quad_point(PdfAnnot self, Quad quad)

        Parameters
        ----------
        quad: mupdf::Quad &

        """
        return _mupdf.PdfAnnot_add_annot_quad_point(self, quad)


    def add_annot_vertex(self, p):
        """
        add_annot_vertex(PdfAnnot self, Point p)

        Parameters
        ----------
        p: mupdf::Point &

        """
        return _mupdf.PdfAnnot_add_annot_vertex(self, p)


    def annot_MK_BC(self, n, color):
        """
        annot_MK_BC(PdfAnnot self, int * n, float [4] color)

        Parameters
        ----------
        n: int *
        color: float [4]

        """
        return _mupdf.PdfAnnot_annot_MK_BC(self, n, color)


    def annot_MK_BC_rgb(self, rgb):
        """
        annot_MK_BC_rgb(PdfAnnot self, float [3] rgb) -> int

        Parameters
        ----------
        rgb: float [3]

        """
        return _mupdf.PdfAnnot_annot_MK_BC_rgb(self, rgb)


    def annot_MK_BG(self, n, color):
        """
        annot_MK_BG(PdfAnnot self, int * n, float [4] color)

        Parameters
        ----------
        n: int *
        color: float [4]

        """
        return _mupdf.PdfAnnot_annot_MK_BG(self, n, color)


    def annot_MK_BG_rgb(self, rgb):
        """
        annot_MK_BG_rgb(PdfAnnot self, float [3] rgb) -> int

        Parameters
        ----------
        rgb: float [3]

        """
        return _mupdf.PdfAnnot_annot_MK_BG_rgb(self, rgb)


    def annot_active(self):
        """
        annot_active(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_active(self)


    def annot_ap(self):
        """
        annot_ap(PdfAnnot self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_ap(self)


    def annot_author(self):
        """
        annot_author(PdfAnnot self) -> char const *

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_author(self)


    def annot_border(self):
        """
        annot_border(PdfAnnot self) -> float

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_border(self)


    def annot_color(self, n, color):
        """
        annot_color(PdfAnnot self, int * n, float [4] color)

        Parameters
        ----------
        n: int *
        color: float [4]

        """
        return _mupdf.PdfAnnot_annot_color(self, n, color)


    def annot_contents(self):
        """
        annot_contents(PdfAnnot self) -> char const *

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_contents(self)


    def annot_creation_date(self):
        """
        annot_creation_date(PdfAnnot self) -> int64_t

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_creation_date(self)


    def annot_default_appearance(self, font, size, n, color):
        """
        annot_default_appearance(PdfAnnot self, char const ** font, float * size, int * n, float [4] color)

        Parameters
        ----------
        font: char const **
        size: float *
        n: int *
        color: float [4]

        """
        return _mupdf.PdfAnnot_annot_default_appearance(self, font, size, n, color)


    def annot_ensure_local_xref(self):
        """
        annot_ensure_local_xref(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_ensure_local_xref(self)


    def annot_event_blur(self):
        """
        annot_event_blur(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_event_blur(self)


    def annot_event_down(self):
        """
        annot_event_down(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_event_down(self)


    def annot_event_enter(self):
        """
        annot_event_enter(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_event_enter(self)


    def annot_event_exit(self):
        """
        annot_event_exit(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_event_exit(self)


    def annot_event_focus(self):
        """
        annot_event_focus(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_event_focus(self)


    def annot_event_page_close(self):
        """
        annot_event_page_close(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_event_page_close(self)


    def annot_event_page_invisible(self):
        """
        annot_event_page_invisible(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_event_page_invisible(self)


    def annot_event_page_open(self):
        """
        annot_event_page_open(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_event_page_open(self)


    def annot_event_page_visible(self):
        """
        annot_event_page_visible(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_event_page_visible(self)


    def annot_event_up(self):
        """
        annot_event_up(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_event_up(self)


    def annot_field_flags(self):
        """
        annot_field_flags(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_field_flags(self)


    def annot_field_label(self):
        """
        annot_field_label(PdfAnnot self) -> char const *

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_field_label(self)


    def annot_field_value(self):
        """
        annot_field_value(PdfAnnot self) -> char const *

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_field_value(self)


    def annot_flags(self):
        """
        annot_flags(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_flags(self)


    def annot_has_author(self):
        """
        annot_has_author(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_has_author(self)


    def annot_has_icon_name(self):
        """
        annot_has_icon_name(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_has_icon_name(self)


    def annot_has_ink_list(self):
        """
        annot_has_ink_list(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_has_ink_list(self)


    def annot_has_interior_color(self):
        """
        annot_has_interior_color(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_has_interior_color(self)


    def annot_has_line(self):
        """
        annot_has_line(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_has_line(self)


    def annot_has_line_ending_styles(self):
        """
        annot_has_line_ending_styles(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_has_line_ending_styles(self)


    def annot_has_open(self):
        """
        annot_has_open(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_has_open(self)


    def annot_has_quad_points(self):
        """
        annot_has_quad_points(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_has_quad_points(self)


    def annot_has_vertices(self):
        """
        annot_has_vertices(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_has_vertices(self)


    def annot_hot(self):
        """
        annot_hot(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_hot(self)


    def annot_icon_name(self):
        """
        annot_icon_name(PdfAnnot self) -> char const *

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_icon_name(self)


    def annot_ink_list_count(self):
        """
        annot_ink_list_count(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_ink_list_count(self)


    def annot_ink_list_stroke_count(self, i):
        """
        annot_ink_list_stroke_count(PdfAnnot self, int i) -> int

        Parameters
        ----------
        i: int

        """
        return _mupdf.PdfAnnot_annot_ink_list_stroke_count(self, i)


    def annot_ink_list_stroke_vertex(self, i, k):
        """
        annot_ink_list_stroke_vertex(PdfAnnot self, int i, int k) -> Point

        Parameters
        ----------
        i: int
        k: int

        """
        return _mupdf.PdfAnnot_annot_ink_list_stroke_vertex(self, i, k)


    def annot_interior_color(self, n, color):
        """
        annot_interior_color(PdfAnnot self, int * n, float [4] color)

        Parameters
        ----------
        n: int *
        color: float [4]

        """
        return _mupdf.PdfAnnot_annot_interior_color(self, n, color)


    def annot_is_open(self):
        """
        annot_is_open(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_is_open(self)


    def annot_language(self):
        """
        annot_language(PdfAnnot self) -> fz_text_language

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_language(self)


    def annot_line(self, a, b):
        """
        annot_line(PdfAnnot self, Point a, Point b)

        Parameters
        ----------
        a: mupdf::Point &
        b: mupdf::Point &

        """
        return _mupdf.PdfAnnot_annot_line(self, a, b)


    def annot_line_end_style(self):
        """
        annot_line_end_style(PdfAnnot self) -> enum pdf_line_ending

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_line_end_style(self)


    def annot_line_ending_styles(self, start_style, end_style):
        """
        annot_line_ending_styles(PdfAnnot self, enum pdf_line_ending * start_style, enum pdf_line_ending * end_style)

        Parameters
        ----------
        start_style: enum pdf_line_ending *
        end_style: enum pdf_line_ending *

        """
        return _mupdf.PdfAnnot_annot_line_ending_styles(self, start_style, end_style)


    def annot_line_start_style(self):
        """
        annot_line_start_style(PdfAnnot self) -> enum pdf_line_ending

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_line_start_style(self)


    def annot_modification_date(self):
        """
        annot_modification_date(PdfAnnot self) -> int64_t

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_modification_date(self)


    def annot_needs_resynthesis(self):
        """
        annot_needs_resynthesis(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_needs_resynthesis(self)


    def annot_obj(self):
        """
        annot_obj(PdfAnnot self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_obj(self)


    def annot_opacity(self):
        """
        annot_opacity(PdfAnnot self) -> float

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_opacity(self)


    def annot_page(self):
        """
        annot_page(PdfAnnot self) -> PdfPage

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_page(self)


    def annot_pop_and_discard_local_xref(self):
        """
        annot_pop_and_discard_local_xref(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_pop_and_discard_local_xref(self)


    def annot_pop_local_xref(self):
        """
        annot_pop_local_xref(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_pop_local_xref(self)


    def annot_popup(self):
        """
        annot_popup(PdfAnnot self) -> Rect

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_popup(self)


    def annot_push_local_xref(self):
        """
        annot_push_local_xref(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_push_local_xref(self)


    def annot_quad_point(self, i):
        """
        annot_quad_point(PdfAnnot self, int i) -> Quad

        Parameters
        ----------
        i: int

        """
        return _mupdf.PdfAnnot_annot_quad_point(self, i)


    def annot_quad_point_count(self):
        """
        annot_quad_point_count(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_quad_point_count(self)


    def annot_quadding(self):
        """
        annot_quadding(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_quadding(self)


    def annot_rect(self):
        """
        annot_rect(PdfAnnot self) -> Rect

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_rect(self)


    def annot_request_resynthesis(self):
        """
        annot_request_resynthesis(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_request_resynthesis(self)


    def annot_transform(self):
        """
        annot_transform(PdfAnnot self) -> Matrix

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_transform(self)


    def annot_type(self):
        """
        annot_type(PdfAnnot self) -> enum pdf_annot_type

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_type(self)


    def annot_vertex(self, i):
        """
        annot_vertex(PdfAnnot self, int i) -> Point

        Parameters
        ----------
        i: int

        """
        return _mupdf.PdfAnnot_annot_vertex(self, i)


    def annot_vertex_count(self):
        """
        annot_vertex_count(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_annot_vertex_count(self)


    def bound_annot(self):
        """
        bound_annot(PdfAnnot self) -> Rect

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_bound_annot(self)


    def bound_widget(self):
        """
        bound_widget(PdfAnnot self) -> Rect

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_bound_widget(self)


    def choice_widget_is_multiselect(self):
        """
        choice_widget_is_multiselect(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_choice_widget_is_multiselect(self)


    def choice_widget_options(self, exportval, opts):
        """
        choice_widget_options(PdfAnnot self, int exportval, char const *[] opts) -> int

        Parameters
        ----------
        exportval: int
        opts: char const *[]

        """
        return _mupdf.PdfAnnot_choice_widget_options(self, exportval, opts)


    def choice_widget_set_value(self, n, opts):
        """
        choice_widget_set_value(PdfAnnot self, int n, char const *[] opts)

        Parameters
        ----------
        n: int
        opts: char const *[]

        """
        return _mupdf.PdfAnnot_choice_widget_set_value(self, n, opts)


    def choice_widget_value(self, opts):
        """
        choice_widget_value(PdfAnnot self, char const *[] opts) -> int

        Parameters
        ----------
        opts: char const *[]

        """
        return _mupdf.PdfAnnot_choice_widget_value(self, opts)


    def clear_annot_ink_list(self):
        """
        clear_annot_ink_list(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_clear_annot_ink_list(self)


    def clear_annot_quad_points(self):
        """
        clear_annot_quad_points(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_clear_annot_quad_points(self)


    def clear_annot_vertices(self):
        """
        clear_annot_vertices(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_clear_annot_vertices(self)


    def clear_signature(self):
        """
        clear_signature(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_clear_signature(self)


    def dirty_annot(self):
        """
        dirty_annot(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_dirty_annot(self)


    def edit_text_field_value(self, value, change, selStart, selEnd, newvalue):
        """
        edit_text_field_value(PdfAnnot self, char const * value, char const * change, int * selStart, int * selEnd, char ** newvalue) -> int

        Parameters
        ----------
        value: char const *
        change: char const *
        selStart: int *
        selEnd: int *
        newvalue: char **

        """
        return _mupdf.PdfAnnot_edit_text_field_value(self, value, change, selStart, selEnd, newvalue)


    def get_widget_editing_state(self):
        """
        get_widget_editing_state(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_get_widget_editing_state(self)


    def layout_text_widget(self):
        """
        layout_text_widget(PdfAnnot self) -> LayoutBlock

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_layout_text_widget(self)


    def new_display_list_from_annot(self):
        """
        new_display_list_from_annot(PdfAnnot self) -> DisplayList

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_new_display_list_from_annot(self)


    def new_pixmap_from_annot(self, ctm, cs, seps, alpha):
        """
        new_pixmap_from_annot(PdfAnnot self, Matrix ctm, Colorspace cs, Separations seps, int alpha) -> Pixmap

        Parameters
        ----------
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        seps: mupdf::Separations const &
        alpha: int

        """
        return _mupdf.PdfAnnot_new_pixmap_from_annot(self, ctm, cs, seps, alpha)


    def next_annot(self):
        """
        next_annot(PdfAnnot self) -> PdfAnnot

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_next_annot(self)


    def next_widget(self):
        """
        next_widget(PdfAnnot self) -> PdfAnnot

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_next_widget(self)


    def run_annot(self, dev, ctm, cookie):
        """
        run_annot(PdfAnnot self, Device dev, Matrix ctm, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        ctm: mupdf::Matrix &
        cookie: mupdf::Cookie &

        """
        return _mupdf.PdfAnnot_run_annot(self, dev, ctm, cookie)


    def set_annot_active(self, active):
        """
        set_annot_active(PdfAnnot self, int active)

        Parameters
        ----------
        active: int

        """
        return _mupdf.PdfAnnot_set_annot_active(self, active)


    def set_annot_appearance(self, appearance, state, ctm, bbox, res, contents):
        """
        set_annot_appearance(PdfAnnot self, char const * appearance, char const * state, Matrix ctm, Rect bbox, PdfObj res, Buffer contents)

        Parameters
        ----------
        appearance: char const *
        state: char const *
        ctm: mupdf::Matrix &
        bbox: mupdf::Rect &
        res: mupdf::PdfObj const &
        contents: mupdf::Buffer const &

        """
        return _mupdf.PdfAnnot_set_annot_appearance(self, appearance, state, ctm, bbox, res, contents)


    def set_annot_appearance_from_display_list(self, appearance, state, ctm, list):
        """
        set_annot_appearance_from_display_list(PdfAnnot self, char const * appearance, char const * state, Matrix ctm, DisplayList list)

        Parameters
        ----------
        appearance: char const *
        state: char const *
        ctm: mupdf::Matrix &
        list: mupdf::DisplayList const &

        """
        return _mupdf.PdfAnnot_set_annot_appearance_from_display_list(self, appearance, state, ctm, list)


    def set_annot_author(self, author):
        """
        set_annot_author(PdfAnnot self, char const * author)

        Parameters
        ----------
        author: char const *

        """
        return _mupdf.PdfAnnot_set_annot_author(self, author)


    def set_annot_border(self, width):
        """
        set_annot_border(PdfAnnot self, float width)

        Parameters
        ----------
        width: float

        """
        return _mupdf.PdfAnnot_set_annot_border(self, width)


    def set_annot_color(self, n, color):
        """
        set_annot_color(PdfAnnot self, int n, float const * color)

        Parameters
        ----------
        n: int
        color: float const *

        """
        return _mupdf.PdfAnnot_set_annot_color(self, n, color)


    def set_annot_contents(self, text):
        """
        set_annot_contents(PdfAnnot self, char const * text)

        Parameters
        ----------
        text: char const *

        """
        return _mupdf.PdfAnnot_set_annot_contents(self, text)


    def set_annot_creation_date(self, time):
        """
        set_annot_creation_date(PdfAnnot self, int64_t time)

        Parameters
        ----------
        time: int64_t

        """
        return _mupdf.PdfAnnot_set_annot_creation_date(self, time)


    def set_annot_default_appearance(self, font, size, n, color):
        """
        set_annot_default_appearance(PdfAnnot self, char const * font, float size, int n, float const * color)

        Parameters
        ----------
        font: char const *
        size: float
        n: int
        color: float const *

        """
        return _mupdf.PdfAnnot_set_annot_default_appearance(self, font, size, n, color)


    def set_annot_flags(self, flags):
        """
        set_annot_flags(PdfAnnot self, int flags)

        Parameters
        ----------
        flags: int

        """
        return _mupdf.PdfAnnot_set_annot_flags(self, flags)


    def set_annot_hot(self, hot):
        """
        set_annot_hot(PdfAnnot self, int hot)

        Parameters
        ----------
        hot: int

        """
        return _mupdf.PdfAnnot_set_annot_hot(self, hot)


    def set_annot_icon_name(self, name):
        """
        set_annot_icon_name(PdfAnnot self, char const * name)

        Parameters
        ----------
        name: char const *

        """
        return _mupdf.PdfAnnot_set_annot_icon_name(self, name)


    def set_annot_ink_list(self, n, count, v):
        """
        set_annot_ink_list(PdfAnnot self, int n, int const * count, Point v)

        Parameters
        ----------
        n: int
        count: int const *
        v: mupdf::Point &

        """
        return _mupdf.PdfAnnot_set_annot_ink_list(self, n, count, v)


    def set_annot_interior_color(self, n, color):
        """
        set_annot_interior_color(PdfAnnot self, int n, float const * color)

        Parameters
        ----------
        n: int
        color: float const *

        """
        return _mupdf.PdfAnnot_set_annot_interior_color(self, n, color)


    def set_annot_is_open(self, is_open):
        """
        set_annot_is_open(PdfAnnot self, int is_open)

        Parameters
        ----------
        is_open: int

        """
        return _mupdf.PdfAnnot_set_annot_is_open(self, is_open)


    def set_annot_language(self, lang):
        """
        set_annot_language(PdfAnnot self, fz_text_language lang)

        Parameters
        ----------
        lang: enum fz_text_language

        """
        return _mupdf.PdfAnnot_set_annot_language(self, lang)


    def set_annot_line(self, a, b):
        """
        set_annot_line(PdfAnnot self, Point a, Point b)

        Parameters
        ----------
        a: mupdf::Point &
        b: mupdf::Point &

        """
        return _mupdf.PdfAnnot_set_annot_line(self, a, b)


    def set_annot_line_end_style(self, e):
        """
        set_annot_line_end_style(PdfAnnot self, enum pdf_line_ending e)

        Parameters
        ----------
        e: enum enum pdf_line_ending

        """
        return _mupdf.PdfAnnot_set_annot_line_end_style(self, e)


    def set_annot_line_ending_styles(self, start_style, end_style):
        """
        set_annot_line_ending_styles(PdfAnnot self, enum pdf_line_ending start_style, enum pdf_line_ending end_style)

        Parameters
        ----------
        start_style: enum enum pdf_line_ending
        end_style: enum enum pdf_line_ending

        """
        return _mupdf.PdfAnnot_set_annot_line_ending_styles(self, start_style, end_style)


    def set_annot_line_start_style(self, s):
        """
        set_annot_line_start_style(PdfAnnot self, enum pdf_line_ending s)

        Parameters
        ----------
        s: enum enum pdf_line_ending

        """
        return _mupdf.PdfAnnot_set_annot_line_start_style(self, s)


    def set_annot_modification_date(self, time):
        """
        set_annot_modification_date(PdfAnnot self, int64_t time)

        Parameters
        ----------
        time: int64_t

        """
        return _mupdf.PdfAnnot_set_annot_modification_date(self, time)


    def set_annot_opacity(self, opacity):
        """
        set_annot_opacity(PdfAnnot self, float opacity)

        Parameters
        ----------
        opacity: float

        """
        return _mupdf.PdfAnnot_set_annot_opacity(self, opacity)


    def set_annot_popup(self, rect):
        """
        set_annot_popup(PdfAnnot self, Rect rect)

        Parameters
        ----------
        rect: mupdf::Rect &

        """
        return _mupdf.PdfAnnot_set_annot_popup(self, rect)


    def set_annot_quad_points(self, n, qv):
        """
        set_annot_quad_points(PdfAnnot self, int n, Quad qv)

        Parameters
        ----------
        n: int
        qv: mupdf::Quad &

        """
        return _mupdf.PdfAnnot_set_annot_quad_points(self, n, qv)


    def set_annot_quadding(self, q):
        """
        set_annot_quadding(PdfAnnot self, int q)

        Parameters
        ----------
        q: int

        """
        return _mupdf.PdfAnnot_set_annot_quadding(self, q)


    def set_annot_rect(self, rect):
        """
        set_annot_rect(PdfAnnot self, Rect rect)

        Parameters
        ----------
        rect: mupdf::Rect &

        """
        return _mupdf.PdfAnnot_set_annot_rect(self, rect)


    def set_annot_resynthesised(self):
        """
        set_annot_resynthesised(PdfAnnot self)

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_set_annot_resynthesised(self)


    def set_annot_vertex(self, i, p):
        """
        set_annot_vertex(PdfAnnot self, int i, Point p)

        Parameters
        ----------
        i: int
        p: mupdf::Point &

        """
        return _mupdf.PdfAnnot_set_annot_vertex(self, i, p)


    def set_annot_vertices(self, n, v):
        """
        set_annot_vertices(PdfAnnot self, int n, Point v)

        Parameters
        ----------
        n: int
        v: mupdf::Point &

        """
        return _mupdf.PdfAnnot_set_annot_vertices(self, n, v)


    def set_choice_field_value(self, value):
        """
        set_choice_field_value(PdfAnnot self, char const * value) -> int

        Parameters
        ----------
        value: char const *

        """
        return _mupdf.PdfAnnot_set_choice_field_value(self, value)


    def set_text_field_value(self, value):
        """
        set_text_field_value(PdfAnnot self, char const * value) -> int

        Parameters
        ----------
        value: char const *

        """
        return _mupdf.PdfAnnot_set_text_field_value(self, value)


    def set_widget_editing_state(self, editing):
        """
        set_widget_editing_state(PdfAnnot self, int editing)

        Parameters
        ----------
        editing: int

        """
        return _mupdf.PdfAnnot_set_widget_editing_state(self, editing)


    def sign_signature(self, signer, appearance_flags, graphic, reason, location):
        """
        sign_signature(PdfAnnot self, PdfPkcs7Signer signer, int appearance_flags, Image graphic, char const * reason, char const * location)

        Parameters
        ----------
        signer: mupdf::PdfPkcs7Signer const &
        appearance_flags: int
        graphic: mupdf::Image const &
        reason: char const *
        location: char const *

        """
        return _mupdf.PdfAnnot_sign_signature(self, signer, appearance_flags, graphic, reason, location)


    def sign_signature_with_appearance(self, signer, date, disp_list):
        """
        sign_signature_with_appearance(PdfAnnot self, PdfPkcs7Signer signer, int64_t date, DisplayList disp_list)

        Parameters
        ----------
        signer: mupdf::PdfPkcs7Signer const &
        date: int64_t
        disp_list: mupdf::DisplayList const &

        """
        return _mupdf.PdfAnnot_sign_signature_with_appearance(self, signer, date, disp_list)


    def text_widget_format(self):
        """
        text_widget_format(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_text_widget_format(self)


    def text_widget_max_len(self):
        """
        text_widget_max_len(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_text_widget_max_len(self)


    def toggle_widget(self):
        """
        toggle_widget(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_toggle_widget(self)


    def update_annot(self):
        """
        update_annot(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_update_annot(self)


    def update_widget(self):
        """
        update_widget(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_update_widget(self)


    def validate_signature(self):
        """
        validate_signature(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_validate_signature(self)


    def widget_is_readonly(self):
        """
        widget_is_readonly(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_widget_is_readonly(self)


    def widget_is_signed(self):
        """
        widget_is_signed(PdfAnnot self) -> int

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_widget_is_signed(self)


    def widget_type(self):
        """
        widget_type(PdfAnnot self) -> enum pdf_widget_type

        Parameters
        ----------
        self: mupdf::PdfAnnot *

        """
        return _mupdf.PdfAnnot_widget_type(self)


    def __init__(self, *args):
        """
        __init__(mupdf::PdfAnnot self, PdfAnnot rhs) -> PdfAnnot

        Parameters
        ----------
        rhs: mupdf::PdfAnnot const &

        __init__(mupdf::PdfAnnot self, pdf_annot * internal) -> PdfAnnot

        Parameters
        ----------
        internal: pdf_annot *

        """
        this = _mupdf.new_PdfAnnot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_PdfAnnot
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.PdfAnnot_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfAnnot_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfAnnot_m_internal_get, _mupdf.PdfAnnot_m_internal_set)
PdfAnnot_swigregister = _mupdf.PdfAnnot_swigregister
PdfAnnot_swigregister(PdfAnnot)

class PdfCmap(_object):
    """Proxy of C++ mupdf::PdfCmap class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfCmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfCmap, name)
    __repr__ = _swig_repr

    def add_codespace(self, low, high, n):
        """
        add_codespace(PdfCmap self, unsigned int low, unsigned int high, size_t n)

        Parameters
        ----------
        low: unsigned int
        high: unsigned int
        n: size_t

        """
        return _mupdf.PdfCmap_add_codespace(self, low, high, n)


    def cmap_size(self):
        """
        cmap_size(PdfCmap self) -> size_t

        Parameters
        ----------
        self: mupdf::PdfCmap *

        """
        return _mupdf.PdfCmap_cmap_size(self)


    def cmap_wmode(self):
        """
        cmap_wmode(PdfCmap self) -> int

        Parameters
        ----------
        self: mupdf::PdfCmap *

        """
        return _mupdf.PdfCmap_cmap_wmode(self)


    def decode_cmap(self, s, e, cpt):
        """
        decode_cmap(PdfCmap self, unsigned char * s, unsigned char * e, unsigned int * cpt) -> int

        Parameters
        ----------
        s: unsigned char *
        e: unsigned char *
        cpt: unsigned int *

        """
        return _mupdf.PdfCmap_decode_cmap(self, s, e, cpt)


    def lookup_cmap(self, cpt):
        """
        lookup_cmap(PdfCmap self, unsigned int cpt) -> int

        Parameters
        ----------
        cpt: unsigned int

        """
        return _mupdf.PdfCmap_lookup_cmap(self, cpt)


    def lookup_cmap_full(self, cpt, out):
        """
        lookup_cmap_full(PdfCmap self, unsigned int cpt, int * out) -> int

        Parameters
        ----------
        cpt: unsigned int
        out: int *

        """
        return _mupdf.PdfCmap_lookup_cmap_full(self, cpt, out)


    def map_one_to_many(self, one, many, len):
        """
        map_one_to_many(PdfCmap self, unsigned int one, int * many, size_t len)

        Parameters
        ----------
        one: unsigned int
        many: int *
        len: size_t

        """
        return _mupdf.PdfCmap_map_one_to_many(self, one, many, len)


    def map_range_to_range(self, srclo, srchi, dstlo):
        """
        map_range_to_range(PdfCmap self, unsigned int srclo, unsigned int srchi, int dstlo)

        Parameters
        ----------
        srclo: unsigned int
        srchi: unsigned int
        dstlo: int

        """
        return _mupdf.PdfCmap_map_range_to_range(self, srclo, srchi, dstlo)


    def set_cmap_wmode(self, wmode):
        """
        set_cmap_wmode(PdfCmap self, int wmode)

        Parameters
        ----------
        wmode: int

        """
        return _mupdf.PdfCmap_set_cmap_wmode(self, wmode)


    def set_usecmap(self, usecmap):
        """
        set_usecmap(PdfCmap self, PdfCmap usecmap)

        Parameters
        ----------
        usecmap: mupdf::PdfCmap const &

        """
        return _mupdf.PdfCmap_set_usecmap(self, usecmap)


    def sort_cmap(self):
        """
        sort_cmap(PdfCmap self)

        Parameters
        ----------
        self: mupdf::PdfCmap *

        """
        return _mupdf.PdfCmap_sort_cmap(self)


    def __init__(self, *args):
        """
        __init__(mupdf::PdfCmap self) -> PdfCmap
        __init__(mupdf::PdfCmap self, int wmode, int bytes) -> PdfCmap

        Parameters
        ----------
        wmode: int
        bytes: int

        __init__(mupdf::PdfCmap self, PdfCmap rhs) -> PdfCmap

        Parameters
        ----------
        rhs: mupdf::PdfCmap const &

        __init__(mupdf::PdfCmap self, pdf_cmap internal) -> PdfCmap

        Parameters
        ----------
        internal: pdf_cmap *

        """
        this = _mupdf.new_PdfCmap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_PdfCmap
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.PdfCmap_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfCmap_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfCmap_m_internal_get, _mupdf.PdfCmap_m_internal_set)
PdfCmap_swigregister = _mupdf.PdfCmap_swigregister
PdfCmap_swigregister(PdfCmap)

class PdfCrypt(_object):
    """Proxy of C++ mupdf::PdfCrypt class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfCrypt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfCrypt, name)
    __repr__ = _swig_repr

    def crypt_encrypt_metadata(self):
        """
        crypt_encrypt_metadata(PdfCrypt self) -> int

        Parameters
        ----------
        self: mupdf::PdfCrypt *

        """
        return _mupdf.PdfCrypt_crypt_encrypt_metadata(self)


    def crypt_key(self):
        """
        crypt_key(PdfCrypt self) -> unsigned char *

        Parameters
        ----------
        self: mupdf::PdfCrypt *

        """
        return _mupdf.PdfCrypt_crypt_key(self)


    def crypt_length(self):
        """
        crypt_length(PdfCrypt self) -> int

        Parameters
        ----------
        self: mupdf::PdfCrypt *

        """
        return _mupdf.PdfCrypt_crypt_length(self)


    def crypt_method(self):
        """
        crypt_method(PdfCrypt self) -> char *

        Parameters
        ----------
        self: mupdf::PdfCrypt *

        """
        return _mupdf.PdfCrypt_crypt_method(self)


    def crypt_obj(self, obj, num, gen):
        """
        crypt_obj(PdfCrypt self, PdfObj obj, int num, int gen)

        Parameters
        ----------
        obj: mupdf::PdfObj const &
        num: int
        gen: int

        """
        return _mupdf.PdfCrypt_crypt_obj(self, obj, num, gen)


    def crypt_owner_encryption(self):
        """
        crypt_owner_encryption(PdfCrypt self) -> unsigned char *

        Parameters
        ----------
        self: mupdf::PdfCrypt *

        """
        return _mupdf.PdfCrypt_crypt_owner_encryption(self)


    def crypt_owner_password(self):
        """
        crypt_owner_password(PdfCrypt self) -> unsigned char *

        Parameters
        ----------
        self: mupdf::PdfCrypt *

        """
        return _mupdf.PdfCrypt_crypt_owner_password(self)


    def crypt_permissions(self):
        """
        crypt_permissions(PdfCrypt self) -> int

        Parameters
        ----------
        self: mupdf::PdfCrypt *

        """
        return _mupdf.PdfCrypt_crypt_permissions(self)


    def crypt_permissions_encryption(self):
        """
        crypt_permissions_encryption(PdfCrypt self) -> unsigned char *

        Parameters
        ----------
        self: mupdf::PdfCrypt *

        """
        return _mupdf.PdfCrypt_crypt_permissions_encryption(self)


    def crypt_revision(self):
        """
        crypt_revision(PdfCrypt self) -> int

        Parameters
        ----------
        self: mupdf::PdfCrypt *

        """
        return _mupdf.PdfCrypt_crypt_revision(self)


    def crypt_user_encryption(self):
        """
        crypt_user_encryption(PdfCrypt self) -> unsigned char *

        Parameters
        ----------
        self: mupdf::PdfCrypt *

        """
        return _mupdf.PdfCrypt_crypt_user_encryption(self)


    def crypt_user_password(self):
        """
        crypt_user_password(PdfCrypt self) -> unsigned char *

        Parameters
        ----------
        self: mupdf::PdfCrypt *

        """
        return _mupdf.PdfCrypt_crypt_user_password(self)


    def crypt_version(self):
        """
        crypt_version(PdfCrypt self) -> int

        Parameters
        ----------
        self: mupdf::PdfCrypt *

        """
        return _mupdf.PdfCrypt_crypt_version(self)


    def encrypt_data(self, num, gen, fmt_str_out, arg, s, n):
        """
        encrypt_data(PdfCrypt self, int num, int gen, void (*)(fz_context *,void *,unsigned char const *,size_t) fmt_str_out, void * arg, unsigned char const * s, size_t n)

        Parameters
        ----------
        num: int
        gen: int
        fmt_str_out: void (*)(fz_context *,void *,unsigned char const *,size_t)
        arg: void *
        s: unsigned char const *
        n: size_t

        """
        return _mupdf.PdfCrypt_encrypt_data(self, num, gen, fmt_str_out, arg, s, n)


    def encrypted_len(self, num, gen, len):
        """
        encrypted_len(PdfCrypt self, int num, int gen, size_t len) -> size_t

        Parameters
        ----------
        num: int
        gen: int
        len: size_t

        """
        return _mupdf.PdfCrypt_encrypted_len(self, num, gen, len)


    def __init__(self, *args):
        """
        __init__(mupdf::PdfCrypt self, PdfObj enc, PdfObj id) -> PdfCrypt

        Parameters
        ----------
        enc: mupdf::PdfObj const &
        id: mupdf::PdfObj const &

        __init__(mupdf::PdfCrypt self, char const * opwd_utf8, char const * upwd_utf8, PdfObj id, int permissions, int algorithm) -> PdfCrypt

        Parameters
        ----------
        opwd_utf8: char const *
        upwd_utf8: char const *
        id: mupdf::PdfObj const &
        permissions: int
        algorithm: int

        __init__(mupdf::PdfCrypt self, pdf_crypt * internal) -> PdfCrypt

        Parameters
        ----------
        internal: pdf_crypt *

        """
        this = _mupdf.new_PdfCrypt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_PdfCrypt
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.PdfCrypt_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfCrypt_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfCrypt_m_internal_get, _mupdf.PdfCrypt_m_internal_set)
PdfCrypt_swigregister = _mupdf.PdfCrypt_swigregister
PdfCrypt_swigregister(PdfCrypt)

class PdfCsi(_object):
    """Proxy of C++ mupdf::PdfCsi class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfCsi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfCsi, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfCsi self, pdf_csi internal) -> PdfCsi

        Parameters
        ----------
        internal: pdf_csi *

        """
        this = _mupdf.new_PdfCsi(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfCsi_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfCsi_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfCsi_m_internal_get, _mupdf.PdfCsi_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfCsi
    __del__ = lambda self: None
PdfCsi_swigregister = _mupdf.PdfCsi_swigregister
PdfCsi_swigregister(PdfCsi)

class PdfDocEvent(_object):
    """Proxy of C++ mupdf::PdfDocEvent class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfDocEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfDocEvent, name)
    __repr__ = _swig_repr

    def access_alert_event(self):
        """
        access_alert_event(PdfDocEvent self) -> PdfAlertEvent

        Parameters
        ----------
        self: mupdf::PdfDocEvent *

        """
        return _mupdf.PdfDocEvent_access_alert_event(self)


    def access_exec_menu_item_event(self):
        """
        access_exec_menu_item_event(PdfDocEvent self) -> char const *

        Parameters
        ----------
        self: mupdf::PdfDocEvent *

        """
        return _mupdf.PdfDocEvent_access_exec_menu_item_event(self)


    def access_launch_url_event(self):
        """
        access_launch_url_event(PdfDocEvent self) -> PdfLaunchUrlEvent

        Parameters
        ----------
        self: mupdf::PdfDocEvent *

        """
        return _mupdf.PdfDocEvent_access_launch_url_event(self)


    def access_mail_doc_event(self):
        """
        access_mail_doc_event(PdfDocEvent self) -> PdfMailDocEvent

        Parameters
        ----------
        self: mupdf::PdfDocEvent *

        """
        return _mupdf.PdfDocEvent_access_mail_doc_event(self)


    def __init__(self, internal):
        """
        __init__(mupdf::PdfDocEvent self, pdf_doc_event * internal) -> PdfDocEvent

        Parameters
        ----------
        internal: pdf_doc_event *

        """
        this = _mupdf.new_PdfDocEvent(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfDocEvent_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfDocEvent_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfDocEvent_m_internal_get, _mupdf.PdfDocEvent_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfDocEvent
    __del__ = lambda self: None
PdfDocEvent_swigregister = _mupdf.PdfDocEvent_swigregister
PdfDocEvent_swigregister(PdfDocEvent)

class PdfDocument(_object):
    """Proxy of C++ mupdf::PdfDocument class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfDocument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfDocument, name)
    __repr__ = _swig_repr

    def add_cid_font(self, font):
        """
        add_cid_font(PdfDocument self, Font font) -> PdfObj

        Parameters
        ----------
        font: mupdf::Font const &

        """
        return _mupdf.PdfDocument_add_cid_font(self, font)


    def add_cjk_font(self, font, script, wmode, serif):
        """
        add_cjk_font(PdfDocument self, Font font, int script, int wmode, int serif) -> PdfObj

        Parameters
        ----------
        font: mupdf::Font const &
        script: int
        wmode: int
        serif: int

        """
        return _mupdf.PdfDocument_add_cjk_font(self, font, script, wmode, serif)


    def add_embedded_file(self, filename, mimetype, contents):
        """
        add_embedded_file(PdfDocument self, char const * filename, char const * mimetype, Buffer contents) -> PdfObj

        Parameters
        ----------
        filename: char const *
        mimetype: char const *
        contents: mupdf::Buffer const &

        """
        return _mupdf.PdfDocument_add_embedded_file(self, filename, mimetype, contents)


    def add_image(self, image):
        """
        add_image(PdfDocument self, Image image) -> PdfObj

        Parameters
        ----------
        image: mupdf::Image const &

        """
        return _mupdf.PdfDocument_add_image(self, image)


    def add_journal_fragment(self, parent, copy, copy_stream, newobj):
        """
        add_journal_fragment(PdfDocument self, int parent, PdfObj copy, Buffer copy_stream, int newobj)

        Parameters
        ----------
        parent: int
        copy: mupdf::PdfObj const &
        copy_stream: mupdf::Buffer const &
        newobj: int

        """
        return _mupdf.PdfDocument_add_journal_fragment(self, parent, copy, copy_stream, newobj)


    def add_new_array(self, initial):
        """
        add_new_array(PdfDocument self, int initial) -> PdfObj

        Parameters
        ----------
        initial: int

        """
        return _mupdf.PdfDocument_add_new_array(self, initial)


    def add_new_dict(self, initial):
        """
        add_new_dict(PdfDocument self, int initial) -> PdfObj

        Parameters
        ----------
        initial: int

        """
        return _mupdf.PdfDocument_add_new_dict(self, initial)


    def add_object(self, obj):
        """
        add_object(PdfDocument self, PdfObj obj) -> PdfObj

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_add_object(self, obj)


    def add_object_drop(self, obj):
        """
        add_object_drop(PdfDocument self, PdfObj obj) -> PdfObj

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_add_object_drop(self, obj)


    def add_page(self, mediabox, rotate, resources, contents):
        """
        add_page(PdfDocument self, Rect mediabox, int rotate, PdfObj resources, Buffer contents) -> PdfObj

        Parameters
        ----------
        mediabox: mupdf::Rect &
        rotate: int
        resources: mupdf::PdfObj const &
        contents: mupdf::Buffer const &

        """
        return _mupdf.PdfDocument_add_page(self, mediabox, rotate, resources, contents)


    def add_simple_font(self, font, encoding):
        """
        add_simple_font(PdfDocument self, Font font, int encoding) -> PdfObj

        Parameters
        ----------
        font: mupdf::Font const &
        encoding: int

        """
        return _mupdf.PdfDocument_add_simple_font(self, font, encoding)


    def add_stream(self, buf, obj, compressed):
        """
        add_stream(PdfDocument self, Buffer buf, PdfObj obj, int compressed) -> PdfObj

        Parameters
        ----------
        buf: mupdf::Buffer const &
        obj: mupdf::PdfObj const &
        compressed: int

        """
        return _mupdf.PdfDocument_add_stream(self, buf, obj, compressed)


    def add_substitute_font(self, font):
        """
        add_substitute_font(PdfDocument self, Font font) -> PdfObj

        Parameters
        ----------
        font: mupdf::Font const &

        """
        return _mupdf.PdfDocument_add_substitute_font(self, font)


    def annot_field_event_keystroke(self, annot, evt):
        """
        annot_field_event_keystroke(PdfDocument self, PdfAnnot annot, PdfKeystrokeEvent evt) -> int

        Parameters
        ----------
        annot: mupdf::PdfAnnot const &
        evt: mupdf::PdfKeystrokeEvent const &

        """
        return _mupdf.PdfDocument_annot_field_event_keystroke(self, annot, evt)


    def authenticate_password(self, pw):
        """
        authenticate_password(PdfDocument self, char const * pw) -> int

        Parameters
        ----------
        pw: char const *

        """
        return _mupdf.PdfDocument_authenticate_password(self, pw)


    def begin_implicit_operation(self):
        """
        begin_implicit_operation(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_begin_implicit_operation(self)


    def begin_operation(self, operation):
        """
        begin_operation(PdfDocument self, char const * operation)

        Parameters
        ----------
        operation: char const *

        """
        return _mupdf.PdfDocument_begin_operation(self, operation)


    def cache_object(self, num):
        """
        cache_object(PdfDocument self, int num) -> PdfXrefEntry

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_cache_object(self, num)


    def calculate_form(self):
        """
        calculate_form(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_calculate_form(self)


    def can_be_saved_incrementally(self):
        """
        can_be_saved_incrementally(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_can_be_saved_incrementally(self)


    def can_redo(self):
        """
        can_redo(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_can_redo(self)


    def can_undo(self):
        """
        can_undo(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_can_undo(self)


    def clear_xref(self):
        """
        clear_xref(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_clear_xref(self)


    def clear_xref_to_mark(self):
        """
        clear_xref_to_mark(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_clear_xref_to_mark(self)


    def count_layer_config_ui(self):
        """
        count_layer_config_ui(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_count_layer_config_ui(self)


    def count_layer_configs(self):
        """
        count_layer_configs(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_count_layer_configs(self)


    def count_objects(self):
        """
        count_objects(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_count_objects(self)


    def count_pages(self):
        """
        count_pages(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_count_pages(self)


    def count_signatures(self):
        """
        count_signatures(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_count_signatures(self)


    def count_unsaved_versions(self):
        """
        count_unsaved_versions(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_count_unsaved_versions(self)


    def count_versions(self):
        """
        count_versions(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_count_versions(self)


    def create_field_name(self, prefix, buf, len):
        """
        create_field_name(PdfDocument self, char const * prefix, char * buf, size_t len)

        Parameters
        ----------
        prefix: char const *
        buf: char *
        len: size_t

        """
        return _mupdf.PdfDocument_create_field_name(self, prefix, buf, len)


    def create_object(self):
        """
        create_object(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_create_object(self)


    def debug_doc_changes(self):
        """
        debug_doc_changes(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_debug_doc_changes(self)


    def delete_object(self, num):
        """
        delete_object(PdfDocument self, int num)

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_delete_object(self, num)


    def delete_page(self, number):
        """
        delete_page(PdfDocument self, int number)

        Parameters
        ----------
        number: int

        """
        return _mupdf.PdfDocument_delete_page(self, number)


    def delete_page_range(self, start, end):
        """
        delete_page_range(PdfDocument self, int start, int end)

        Parameters
        ----------
        start: int
        end: int

        """
        return _mupdf.PdfDocument_delete_page_range(self, start, end)


    def deselect_layer_config_ui(self, ui):
        """
        deselect_layer_config_ui(PdfDocument self, int ui)

        Parameters
        ----------
        ui: int

        """
        return _mupdf.PdfDocument_deselect_layer_config_ui(self, ui)


    def deserialise_journal(self, stm):
        """
        deserialise_journal(PdfDocument self, Stream stm)

        Parameters
        ----------
        stm: mupdf::Stream const &

        """
        return _mupdf.PdfDocument_deserialise_journal(self, stm)


    def disable_js(self):
        """
        disable_js(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_disable_js(self)


    def doc_was_linearized(self):
        """
        doc_was_linearized(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_doc_was_linearized(self)


    def document_event_did_print(self):
        """
        document_event_did_print(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_document_event_did_print(self)


    def document_event_did_save(self):
        """
        document_event_did_save(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_document_event_did_save(self)


    def document_event_will_close(self):
        """
        document_event_will_close(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_document_event_will_close(self)


    def document_event_will_print(self):
        """
        document_event_will_print(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_document_event_will_print(self)


    def document_event_will_save(self):
        """
        document_event_will_save(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_document_event_will_save(self)


    def document_language(self):
        """
        document_language(PdfDocument self) -> fz_text_language

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_document_language(self)


    def document_output_intent(self):
        """
        document_output_intent(PdfDocument self) -> Colorspace

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_document_output_intent(self)


    def document_permissions(self):
        """
        document_permissions(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_document_permissions(self)


    def empty_store(self):
        """
        empty_store(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_empty_store(self)


    def enable_journal(self):
        """
        enable_journal(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_enable_journal(self)


    def enable_js(self):
        """
        enable_js(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_enable_js(self)


    def end_operation(self):
        """
        end_operation(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_end_operation(self)


    def ensure_solid_xref(self, num):
        """
        ensure_solid_xref(PdfDocument self, int num)

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_ensure_solid_xref(self, num)


    def event_issue_alert(self, evt):
        """
        event_issue_alert(PdfDocument self, PdfAlertEvent evt)

        Parameters
        ----------
        evt: mupdf::PdfAlertEvent const &

        """
        return _mupdf.PdfDocument_event_issue_alert(self, evt)


    def event_issue_exec_menu_item(self, item):
        """
        event_issue_exec_menu_item(PdfDocument self, char const * item)

        Parameters
        ----------
        item: char const *

        """
        return _mupdf.PdfDocument_event_issue_exec_menu_item(self, item)


    def event_issue_launch_url(self, url, new_frame):
        """
        event_issue_launch_url(PdfDocument self, char const * url, int new_frame)

        Parameters
        ----------
        url: char const *
        new_frame: int

        """
        return _mupdf.PdfDocument_event_issue_launch_url(self, url, new_frame)


    def event_issue_mail_doc(self, evt):
        """
        event_issue_mail_doc(PdfDocument self, PdfMailDocEvent evt)

        Parameters
        ----------
        evt: mupdf::PdfMailDocEvent const &

        """
        return _mupdf.PdfDocument_event_issue_mail_doc(self, evt)


    def event_issue_print(self):
        """
        event_issue_print(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_event_issue_print(self)


    def field_event_calculate(self, field):
        """
        field_event_calculate(PdfDocument self, PdfObj field)

        Parameters
        ----------
        field: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_field_event_calculate(self, field)


    def field_event_format(self, field):
        """
        field_event_format(PdfDocument self, PdfObj field) -> char *

        Parameters
        ----------
        field: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_field_event_format(self, field)


    def field_event_keystroke(self, field, evt):
        """
        field_event_keystroke(PdfDocument self, PdfObj field, PdfKeystrokeEvent evt) -> int

        Parameters
        ----------
        field: mupdf::PdfObj const &
        evt: mupdf::PdfKeystrokeEvent const &

        """
        return _mupdf.PdfDocument_field_event_keystroke(self, field, evt)


    def field_event_validate(self, field, value, newvalue):
        """
        field_event_validate(PdfDocument self, PdfObj field, char const * value, char ** newvalue) -> int

        Parameters
        ----------
        field: mupdf::PdfObj const &
        value: char const *
        newvalue: char **

        """
        return _mupdf.PdfDocument_field_event_validate(self, field, value, newvalue)


    def field_reset(self, field):
        """
        field_reset(PdfDocument self, PdfObj field)

        Parameters
        ----------
        field: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_field_reset(self, field)


    def filter_annot_contents(self, annot, filter):
        """
        filter_annot_contents(PdfDocument self, PdfAnnot annot, PdfFilterOptions filter)

        Parameters
        ----------
        annot: mupdf::PdfAnnot const &
        filter: mupdf::PdfFilterOptions const &

        """
        return _mupdf.PdfDocument_filter_annot_contents(self, annot, filter)


    def filter_page_contents(self, page, filter):
        """
        filter_page_contents(PdfDocument self, PdfPage page, PdfFilterOptions filter)

        Parameters
        ----------
        page: mupdf::PdfPage const &
        filter: mupdf::PdfFilterOptions const &

        """
        return _mupdf.PdfDocument_filter_page_contents(self, page, filter)


    def find_font_resource(self, type, encoding, item, key):
        """
        find_font_resource(PdfDocument self, int type, int encoding, Font item, PdfFontResourceKey key) -> PdfObj

        Parameters
        ----------
        type: int
        encoding: int
        item: mupdf::Font const &
        key: mupdf::PdfFontResourceKey const &

        """
        return _mupdf.PdfDocument_find_font_resource(self, type, encoding, item, key)


    def find_locked_fields(self, version):
        """
        find_locked_fields(PdfDocument self, int version) -> PdfLockedFields

        Parameters
        ----------
        version: int

        """
        return _mupdf.PdfDocument_find_locked_fields(self, version)


    def find_locked_fields_for_sig(self, sig):
        """
        find_locked_fields_for_sig(PdfDocument self, PdfObj sig) -> PdfLockedFields

        Parameters
        ----------
        sig: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_find_locked_fields_for_sig(self, sig)


    def find_version_for_obj(self, obj):
        """
        find_version_for_obj(PdfDocument self, PdfObj obj) -> int

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_find_version_for_obj(self, obj)


    def forget_xref(self):
        """
        forget_xref(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_forget_xref(self)


    def get_doc_event_callback_data(self):
        """
        get_doc_event_callback_data(PdfDocument self) -> void *

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_get_doc_event_callback_data(self)


    def get_incremental_xref_entry(self, i):
        """
        get_incremental_xref_entry(PdfDocument self, int i) -> PdfXrefEntry

        Parameters
        ----------
        i: int

        """
        return _mupdf.PdfDocument_get_incremental_xref_entry(self, i)


    def get_populating_xref_entry(self, i):
        """
        get_populating_xref_entry(PdfDocument self, int i) -> PdfXrefEntry

        Parameters
        ----------
        i: int

        """
        return _mupdf.PdfDocument_get_populating_xref_entry(self, i)


    def get_xref_entry(self, i):
        """
        get_xref_entry(PdfDocument self, int i) -> PdfXrefEntry

        Parameters
        ----------
        i: int

        """
        return _mupdf.PdfDocument_get_xref_entry(self, i)


    def graft_object(self, obj):
        """
        graft_object(PdfDocument self, PdfObj obj) -> PdfObj

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_graft_object(self, obj)


    def graft_page(self, page_to, src, page_from):
        """
        graft_page(PdfDocument self, int page_to, PdfDocument src, int page_from)

        Parameters
        ----------
        page_to: int
        src: mupdf::PdfDocument const &
        page_from: int

        """
        return _mupdf.PdfDocument_graft_page(self, page_to, src, page_from)


    def has_permission(self, p):
        """
        has_permission(PdfDocument self, fz_permission p) -> int

        Parameters
        ----------
        p: enum fz_permission

        """
        return _mupdf.PdfDocument_has_permission(self, p)


    def has_unsaved_changes(self):
        """
        has_unsaved_changes(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_has_unsaved_changes(self)


    def has_unsaved_sigs(self):
        """
        has_unsaved_sigs(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_has_unsaved_sigs(self)


    def insert_font_resource(self, key, obj):
        """
        insert_font_resource(PdfDocument self, PdfFontResourceKey key, PdfObj obj) -> PdfObj

        Parameters
        ----------
        key: mupdf::PdfFontResourceKey const &
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_insert_font_resource(self, key, obj)


    def insert_page(self, at, page):
        """
        insert_page(PdfDocument self, int at, PdfObj page)

        Parameters
        ----------
        at: int
        page: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_insert_page(self, at, page)


    def invalidate_xfa(self):
        """
        invalidate_xfa(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_invalidate_xfa(self)


    def is_local_object(self, obj):
        """
        is_local_object(PdfDocument self, PdfObj obj) -> int

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_is_local_object(self, obj)


    def is_ocg_hidden(self, rdb, usage, ocg):
        """
        is_ocg_hidden(PdfDocument self, PdfObj rdb, char const * usage, PdfObj ocg) -> int

        Parameters
        ----------
        rdb: mupdf::PdfObj const &
        usage: char const *
        ocg: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_is_ocg_hidden(self, rdb, usage, ocg)


    def js_supported(self):
        """
        js_supported(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_js_supported(self)


    def layer_config_info(self, config_num, info):
        """
        layer_config_info(PdfDocument self, int config_num, PdfLayerConfig info)

        Parameters
        ----------
        config_num: int
        info: mupdf::PdfLayerConfig const &

        """
        return _mupdf.PdfDocument_layer_config_info(self, config_num, info)


    def layer_config_ui_info(self, ui, info):
        """
        layer_config_ui_info(PdfDocument self, int ui, PdfLayerConfigUi info)

        Parameters
        ----------
        ui: int
        info: mupdf::PdfLayerConfigUi const &

        """
        return _mupdf.PdfDocument_layer_config_ui_info(self, ui, info)


    def load_compressed_inline_image(self, dict, length, cstm, indexed, image):
        """
        load_compressed_inline_image(PdfDocument self, PdfObj dict, int length, Stream cstm, int indexed, CompressedImage image)

        Parameters
        ----------
        dict: mupdf::PdfObj const &
        length: int
        cstm: mupdf::Stream const &
        indexed: int
        image: mupdf::CompressedImage const &

        """
        return _mupdf.PdfDocument_load_compressed_inline_image(self, dict, length, cstm, indexed, image)


    def load_compressed_stream(self, num):
        """
        load_compressed_stream(PdfDocument self, int num) -> CompressedBuffer

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_load_compressed_stream(self, num)


    def load_default_colorspaces(self, page):
        """
        load_default_colorspaces(PdfDocument self, PdfPage page) -> DefaultColorspaces

        Parameters
        ----------
        page: mupdf::PdfPage const &

        """
        return _mupdf.PdfDocument_load_default_colorspaces(self, page)


    def load_embedded_cmap(self, ref):
        """
        load_embedded_cmap(PdfDocument self, PdfObj ref) -> PdfCmap

        Parameters
        ----------
        ref: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_load_embedded_cmap(self, ref)


    def load_font(self, rdb, obj):
        """
        load_font(PdfDocument self, PdfObj rdb, PdfObj obj) -> PdfFontDesc

        Parameters
        ----------
        rdb: mupdf::PdfObj const &
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_load_font(self, rdb, obj)


    def load_hail_mary_font(self):
        """
        load_hail_mary_font(PdfDocument self) -> PdfFontDesc

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_load_hail_mary_font(self)


    def load_image(self, obj):
        """
        load_image(PdfDocument self, PdfObj obj) -> Image

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_load_image(self, obj)


    def load_inline_image(self, rdb, dict, file):
        """
        load_inline_image(PdfDocument self, PdfObj rdb, PdfObj dict, Stream file) -> Image

        Parameters
        ----------
        rdb: mupdf::PdfObj const &
        dict: mupdf::PdfObj const &
        file: mupdf::Stream const &

        """
        return _mupdf.PdfDocument_load_inline_image(self, rdb, dict, file)


    def load_journal(self, filename):
        """
        load_journal(PdfDocument self, char const * filename)

        Parameters
        ----------
        filename: char const *

        """
        return _mupdf.PdfDocument_load_journal(self, filename)


    def load_link_annots(self, annots, pagenum, page_ctm):
        """
        load_link_annots(PdfDocument self, PdfObj annots, int pagenum, Matrix page_ctm) -> Link

        Parameters
        ----------
        annots: mupdf::PdfObj const &
        pagenum: int
        page_ctm: mupdf::Matrix &

        """
        return _mupdf.PdfDocument_load_link_annots(self, annots, pagenum, page_ctm)


    def load_name_tree(self, which):
        """
        load_name_tree(PdfDocument self, PdfObj which) -> PdfObj

        Parameters
        ----------
        which: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_load_name_tree(self, which)


    def load_object(self, num):
        """
        load_object(PdfDocument self, int num) -> PdfObj

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_load_object(self, num)


    def load_outline(self):
        """
        load_outline(PdfDocument self) -> Outline

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_load_outline(self)


    def load_page(self, number):
        """
        load_page(PdfDocument self, int number) -> PdfPage

        Parameters
        ----------
        number: int

        """
        return _mupdf.PdfDocument_load_page(self, number)


    def load_page_tree(self):
        """
        load_page_tree(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_load_page_tree(self)


    def load_pattern(self, obj):
        """
        load_pattern(PdfDocument self, PdfObj obj) -> PdfPattern

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_load_pattern(self, obj)


    def load_raw_stream_number(self, num):
        """
        load_raw_stream_number(PdfDocument self, int num) -> Buffer

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_load_raw_stream_number(self, num)


    def load_shading(self, obj):
        """
        load_shading(PdfDocument self, PdfObj obj) -> Shade

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_load_shading(self, obj)


    def load_stream_number(self, num):
        """
        load_stream_number(PdfDocument self, int num) -> Buffer

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_load_stream_number(self, num)


    def load_to_unicode(self, font, strings, collection, cmapstm):
        """
        load_to_unicode(PdfDocument self, PdfFontDesc font, char const ** strings, char * collection, PdfObj cmapstm)

        Parameters
        ----------
        font: mupdf::PdfFontDesc const &
        strings: char const **
        collection: char *
        cmapstm: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_load_to_unicode(self, font, strings, collection, cmapstm)


    def load_type3_font(self, rdb, obj):
        """
        load_type3_font(PdfDocument self, PdfObj rdb, PdfObj obj) -> PdfFontDesc

        Parameters
        ----------
        rdb: mupdf::PdfObj const &
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_load_type3_font(self, rdb, obj)


    def load_type3_glyphs(self, fontdesc):
        """
        load_type3_glyphs(PdfDocument self, PdfFontDesc fontdesc)

        Parameters
        ----------
        fontdesc: mupdf::PdfFontDesc const &

        """
        return _mupdf.PdfDocument_load_type3_glyphs(self, fontdesc)


    def load_unencrypted_object(self, num):
        """
        load_unencrypted_object(PdfDocument self, int num) -> PdfObj

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_load_unencrypted_object(self, num)


    def lookup_anchor(self, name, xp, yp):
        """
        lookup_anchor(PdfDocument self, char const * name, float * xp, float * yp) -> int

        Parameters
        ----------
        name: char const *
        xp: float *
        yp: float *

        """
        return _mupdf.PdfDocument_lookup_anchor(self, name, xp, yp)


    def lookup_dest(self, needle):
        """
        lookup_dest(PdfDocument self, PdfObj needle) -> PdfObj

        Parameters
        ----------
        needle: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_lookup_dest(self, needle)


    def lookup_metadata(self, key, ptr, size):
        """
        lookup_metadata(PdfDocument self, char const * key, char * ptr, int size) -> int

        Parameters
        ----------
        key: char const *
        ptr: char *
        size: int

        """
        return _mupdf.PdfDocument_lookup_metadata(self, key, ptr, size)


    def lookup_name(self, which, needle):
        """
        lookup_name(PdfDocument self, PdfObj which, PdfObj needle) -> PdfObj

        Parameters
        ----------
        which: mupdf::PdfObj const &
        needle: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_lookup_name(self, which, needle)


    def lookup_page_number(self, pageobj):
        """
        lookup_page_number(PdfDocument self, PdfObj pageobj) -> int

        Parameters
        ----------
        pageobj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_lookup_page_number(self, pageobj)


    def lookup_page_obj(self, needle):
        """
        lookup_page_obj(PdfDocument self, int needle) -> PdfObj

        Parameters
        ----------
        needle: int

        """
        return _mupdf.PdfDocument_lookup_page_obj(self, needle)


    def mark_xref(self):
        """
        mark_xref(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_mark_xref(self)


    def needs_password(self):
        """
        needs_password(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_needs_password(self)


    def new_array(self, initialcap):
        """
        new_array(PdfDocument self, int initialcap) -> PdfObj

        Parameters
        ----------
        initialcap: int

        """
        return _mupdf.PdfDocument_new_array(self, initialcap)


    def new_date(self, time):
        """
        new_date(PdfDocument self, int64_t time) -> PdfObj

        Parameters
        ----------
        time: int64_t

        """
        return _mupdf.PdfDocument_new_date(self, time)


    def new_dict(self, initialcap):
        """
        new_dict(PdfDocument self, int initialcap) -> PdfObj

        Parameters
        ----------
        initialcap: int

        """
        return _mupdf.PdfDocument_new_dict(self, initialcap)


    def new_filter_processor(self, chain, old_res, new_res, struct_parents, transform, filter):
        """
        new_filter_processor(PdfDocument self, PdfProcessor chain, PdfObj old_res, PdfObj new_res, int struct_parents, Matrix transform, PdfFilterOptions filter) -> PdfProcessor

        Parameters
        ----------
        chain: mupdf::PdfProcessor const &
        old_res: mupdf::PdfObj const &
        new_res: mupdf::PdfObj const &
        struct_parents: int
        transform: mupdf::Matrix &
        filter: mupdf::PdfFilterOptions const &

        """
        return _mupdf.PdfDocument_new_filter_processor(self, chain, old_res, new_res, struct_parents, transform, filter)


    def new_graft_map(self):
        """
        new_graft_map(PdfDocument self) -> PdfGraftMap

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_new_graft_map(self)


    def new_indirect(self, num, gen):
        """
        new_indirect(PdfDocument self, int num, int gen) -> PdfObj

        Parameters
        ----------
        num: int
        gen: int

        """
        return _mupdf.PdfDocument_new_indirect(self, num, gen)


    def new_local_xref(self):
        """
        new_local_xref(PdfDocument self) -> PdfXref

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_new_local_xref(self)


    def new_matrix(self, mtx):
        """
        new_matrix(PdfDocument self, Matrix mtx) -> PdfObj

        Parameters
        ----------
        mtx: mupdf::Matrix &

        """
        return _mupdf.PdfDocument_new_matrix(self, mtx)


    def new_pdf_device(self, topctm, resources, contents):
        """
        new_pdf_device(PdfDocument self, Matrix topctm, PdfObj resources, Buffer contents) -> Device

        Parameters
        ----------
        topctm: mupdf::Matrix &
        resources: mupdf::PdfObj const &
        contents: mupdf::Buffer const &

        """
        return _mupdf.PdfDocument_new_pdf_device(self, topctm, resources, contents)


    def new_rect(self, rect):
        """
        new_rect(PdfDocument self, Rect rect) -> PdfObj

        Parameters
        ----------
        rect: mupdf::Rect &

        """
        return _mupdf.PdfDocument_new_rect(self, rect)


    def new_xobject(self, bbox, matrix, res, buffer):
        """
        new_xobject(PdfDocument self, Rect bbox, Matrix matrix, PdfObj res, Buffer buffer) -> PdfObj

        Parameters
        ----------
        bbox: mupdf::Rect &
        matrix: mupdf::Matrix &
        res: mupdf::PdfObj const &
        buffer: mupdf::Buffer const &

        """
        return _mupdf.PdfDocument_new_xobject(self, bbox, matrix, res, buffer)


    def obj_num_is_stream(self, num):
        """
        obj_num_is_stream(PdfDocument self, int num) -> int

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_obj_num_is_stream(self, num)


    def open_contents_stream(self, obj):
        """
        open_contents_stream(PdfDocument self, PdfObj obj) -> Stream

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_open_contents_stream(self, obj)


    def open_inline_stream(self, stmobj, length, chain, params):
        """
        open_inline_stream(PdfDocument self, PdfObj stmobj, int length, Stream chain, CompressionParams params) -> Stream

        Parameters
        ----------
        stmobj: mupdf::PdfObj const &
        length: int
        chain: mupdf::Stream const &
        params: mupdf::CompressionParams const &

        """
        return _mupdf.PdfDocument_open_inline_stream(self, stmobj, length, chain, params)


    def open_raw_stream_number(self, num):
        """
        open_raw_stream_number(PdfDocument self, int num) -> Stream

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_open_raw_stream_number(self, num)


    def open_stream_number(self, num):
        """
        open_stream_number(PdfDocument self, int num) -> Stream

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_open_stream_number(self, num)


    def open_stream_with_offset(self, num, dict, stm_ofs):
        """
        open_stream_with_offset(PdfDocument self, int num, PdfObj dict, int64_t stm_ofs) -> Stream

        Parameters
        ----------
        num: int
        dict: mupdf::PdfObj const &
        stm_ofs: int64_t

        """
        return _mupdf.PdfDocument_open_stream_with_offset(self, num, dict, stm_ofs)


    def page_write(self, mediabox, presources, pcontents):
        """
        page_write(PdfDocument self, Rect mediabox, PdfObj presources, Buffer pcontents) -> Device

        Parameters
        ----------
        mediabox: mupdf::Rect &
        presources: mupdf::PdfObj &
        pcontents: mupdf::Buffer &

        """
        return _mupdf.PdfDocument_page_write(self, mediabox, presources, pcontents)


    def parse_array(self, f, buf):
        """
        parse_array(PdfDocument self, Stream f, PdfLexbuf buf) -> PdfObj

        Parameters
        ----------
        f: mupdf::Stream const &
        buf: mupdf::PdfLexbuf const &

        """
        return _mupdf.PdfDocument_parse_array(self, f, buf)


    def parse_dict(self, f, buf):
        """
        parse_dict(PdfDocument self, Stream f, PdfLexbuf buf) -> PdfObj

        Parameters
        ----------
        f: mupdf::Stream const &
        buf: mupdf::PdfLexbuf const &

        """
        return _mupdf.PdfDocument_parse_dict(self, f, buf)


    def parse_ind_obj(self, f, num, gen, stm_ofs, try_repair):
        """
        parse_ind_obj(PdfDocument self, Stream f, int * num, int * gen, int64_t * stm_ofs, int * try_repair) -> PdfObj

        Parameters
        ----------
        f: mupdf::Stream const &
        num: int *
        gen: int *
        stm_ofs: int64_t *
        try_repair: int *

        """
        return _mupdf.PdfDocument_parse_ind_obj(self, f, num, gen, stm_ofs, try_repair)


    def parse_journal_obj(self, stm, onum, ostm, newobj):
        """
        parse_journal_obj(PdfDocument self, Stream stm, int * onum, Buffer ostm, int * newobj) -> PdfObj

        Parameters
        ----------
        stm: mupdf::Stream const &
        onum: int *
        ostm: mupdf::Buffer &
        newobj: int *

        """
        return _mupdf.PdfDocument_parse_journal_obj(self, stm, onum, ostm, newobj)


    def parse_link_action(self, obj, pagenum):
        """
        parse_link_action(PdfDocument self, PdfObj obj, int pagenum) -> char *

        Parameters
        ----------
        obj: mupdf::PdfObj const &
        pagenum: int

        """
        return _mupdf.PdfDocument_parse_link_action(self, obj, pagenum)


    def parse_link_dest(self, obj):
        """
        parse_link_dest(PdfDocument self, PdfObj obj) -> char *

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_parse_link_dest(self, obj)


    def parse_stm_obj(self, f, buf):
        """
        parse_stm_obj(PdfDocument self, Stream f, PdfLexbuf buf) -> PdfObj

        Parameters
        ----------
        f: mupdf::Stream const &
        buf: mupdf::PdfLexbuf const &

        """
        return _mupdf.PdfDocument_parse_stm_obj(self, f, buf)


    def progressive_advance(self, pagenum):
        """
        progressive_advance(PdfDocument self, int pagenum) -> PdfObj

        Parameters
        ----------
        pagenum: int

        """
        return _mupdf.PdfDocument_progressive_advance(self, pagenum)


    def purge_local_font_resources(self):
        """
        purge_local_font_resources(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_purge_local_font_resources(self)


    def purge_locals_from_store(self):
        """
        purge_locals_from_store(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_purge_locals_from_store(self)


    def read_journal(self, stm):
        """
        read_journal(PdfDocument self, Stream stm)

        Parameters
        ----------
        stm: mupdf::Stream const &

        """
        return _mupdf.PdfDocument_read_journal(self, stm)


    def read_ocg(self):
        """
        read_ocg(PdfDocument self) -> PdfOcgDescriptor

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_read_ocg(self)


    def redact_page(self, page, opts):
        """
        redact_page(PdfDocument self, PdfPage page, PdfRedactOptions opts) -> int

        Parameters
        ----------
        page: mupdf::PdfPage const &
        opts: mupdf::PdfRedactOptions const &

        """
        return _mupdf.PdfDocument_redact_page(self, page, opts)


    def redo(self):
        """
        redo(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_redo(self)


    def repair_obj(self, buf, stmofsp, stmlenp, encrypt, id, page, tmpofs, root):
        """
        repair_obj(PdfDocument self, PdfLexbuf buf, int64_t * stmofsp, int * stmlenp, PdfObj encrypt, PdfObj id, PdfObj page, int64_t * tmpofs, PdfObj root) -> int

        Parameters
        ----------
        buf: mupdf::PdfLexbuf const &
        stmofsp: int64_t *
        stmlenp: int *
        encrypt: mupdf::PdfObj &
        id: mupdf::PdfObj &
        page: mupdf::PdfObj &
        tmpofs: int64_t *
        root: mupdf::PdfObj &

        """
        return _mupdf.PdfDocument_repair_obj(self, buf, stmofsp, stmlenp, encrypt, id, page, tmpofs, root)


    def repair_obj_stms(self):
        """
        repair_obj_stms(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_repair_obj_stms(self)


    def repair_trailer(self):
        """
        repair_trailer(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_repair_trailer(self)


    def repair_xref(self):
        """
        repair_xref(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_repair_xref(self)


    def replace_xref(self, entries, n):
        """
        replace_xref(PdfDocument self, PdfXrefEntry entries, int n)

        Parameters
        ----------
        entries: mupdf::PdfXrefEntry const &
        n: int

        """
        return _mupdf.PdfDocument_replace_xref(self, entries, n)


    def reset_form(self, fields, exclude):
        """
        reset_form(PdfDocument self, PdfObj fields, int exclude)

        Parameters
        ----------
        fields: mupdf::PdfObj const &
        exclude: int

        """
        return _mupdf.PdfDocument_reset_form(self, fields, exclude)


    def resolve_link(self, uri, xp, yp):
        """
        resolve_link(PdfDocument self, char const * uri, float * xp, float * yp) -> int

        Parameters
        ----------
        uri: char const *
        xp: float *
        yp: float *

        """
        return _mupdf.PdfDocument_resolve_link(self, uri, xp, yp)


    def run_glyph(self, resources, contents, dev, ctm, gstate, default_cs):
        """
        run_glyph(PdfDocument self, PdfObj resources, Buffer contents, Device dev, Matrix ctm, void * gstate, DefaultColorspaces default_cs)

        Parameters
        ----------
        resources: mupdf::PdfObj const &
        contents: mupdf::Buffer const &
        dev: mupdf::Device const &
        ctm: mupdf::Matrix &
        gstate: void *
        default_cs: mupdf::DefaultColorspaces const &

        """
        return _mupdf.PdfDocument_run_glyph(self, resources, contents, dev, ctm, gstate, default_cs)


    def save_document(self, filename, opts):
        """
        save_document(PdfDocument self, char const * filename, PdfWriteOptions opts)

        Parameters
        ----------
        filename: char const *
        opts: mupdf::PdfWriteOptions &

        """
        return _mupdf.PdfDocument_save_document(self, filename, opts)


    def save_journal(self, filename):
        """
        save_journal(PdfDocument self, char const * filename)

        Parameters
        ----------
        filename: char const *

        """
        return _mupdf.PdfDocument_save_journal(self, filename)


    def save_snapshot(self, filename):
        """
        save_snapshot(PdfDocument self, char const * filename)

        Parameters
        ----------
        filename: char const *

        """
        return _mupdf.PdfDocument_save_snapshot(self, filename)


    def select_layer_config(self, config_num):
        """
        select_layer_config(PdfDocument self, int config_num)

        Parameters
        ----------
        config_num: int

        """
        return _mupdf.PdfDocument_select_layer_config(self, config_num)


    def select_layer_config_ui(self, ui):
        """
        select_layer_config_ui(PdfDocument self, int ui)

        Parameters
        ----------
        ui: int

        """
        return _mupdf.PdfDocument_select_layer_config_ui(self, ui)


    def serialise_journal(self, out):
        """
        serialise_journal(PdfDocument self, Output out)

        Parameters
        ----------
        out: mupdf::Output const &

        """
        return _mupdf.PdfDocument_serialise_journal(self, out)


    def set_annot_field_value(self, widget, text, ignore_trigger_events):
        """
        set_annot_field_value(PdfDocument self, PdfAnnot widget, char const * text, int ignore_trigger_events) -> int

        Parameters
        ----------
        widget: mupdf::PdfAnnot const &
        text: char const *
        ignore_trigger_events: int

        """
        return _mupdf.PdfDocument_set_annot_field_value(self, widget, text, ignore_trigger_events)


    def set_doc_event_callback(self, event_cb, free_event_data_cb, data):
        """
        set_doc_event_callback(PdfDocument self, pdf_doc_event_cb * event_cb, pdf_free_doc_event_data_cb * free_event_data_cb, void * data)

        Parameters
        ----------
        event_cb: pdf_doc_event_cb *
        free_event_data_cb: pdf_free_doc_event_data_cb *
        data: void *

        """
        return _mupdf.PdfDocument_set_doc_event_callback(self, event_cb, free_event_data_cb, data)


    def set_document_language(self, lang):
        """
        set_document_language(PdfDocument self, fz_text_language lang)

        Parameters
        ----------
        lang: enum fz_text_language

        """
        return _mupdf.PdfDocument_set_document_language(self, lang)


    def set_field_value(self, field, text, ignore_trigger_events):
        """
        set_field_value(PdfDocument self, PdfObj field, char const * text, int ignore_trigger_events) -> int

        Parameters
        ----------
        field: mupdf::PdfObj const &
        text: char const *
        ignore_trigger_events: int

        """
        return _mupdf.PdfDocument_set_field_value(self, field, text, ignore_trigger_events)


    def set_layer_config_as_default(self):
        """
        set_layer_config_as_default(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_set_layer_config_as_default(self)


    def set_populating_xref_trailer(self, trailer):
        """
        set_populating_xref_trailer(PdfDocument self, PdfObj trailer)

        Parameters
        ----------
        trailer: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_set_populating_xref_trailer(self, trailer)


    def signature_byte_range(self, signature, byte_range):
        """
        signature_byte_range(PdfDocument self, PdfObj signature, Range byte_range) -> int

        Parameters
        ----------
        signature: mupdf::PdfObj const &
        byte_range: mupdf::Range const &

        """
        return _mupdf.PdfDocument_signature_byte_range(self, signature, byte_range)


    def signature_contents(self, signature, contents):
        """
        signature_contents(PdfDocument self, PdfObj signature, char ** contents) -> size_t

        Parameters
        ----------
        signature: mupdf::PdfObj const &
        contents: char **

        """
        return _mupdf.PdfDocument_signature_contents(self, signature, contents)


    def signature_hash_bytes(self, signature):
        """
        signature_hash_bytes(PdfDocument self, PdfObj signature) -> Stream

        Parameters
        ----------
        signature: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_signature_hash_bytes(self, signature)


    def signature_incremental_change_since_signing(self, signature):
        """
        signature_incremental_change_since_signing(PdfDocument self, PdfObj signature) -> int

        Parameters
        ----------
        signature: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_signature_incremental_change_since_signing(self, signature)


    def signature_is_signed(self, field):
        """
        signature_is_signed(PdfDocument self, PdfObj field) -> int

        Parameters
        ----------
        field: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_signature_is_signed(self, field)


    def signature_set_value(self, field, signer, stime):
        """
        signature_set_value(PdfDocument self, PdfObj field, PdfPkcs7Signer signer, int64_t stime)

        Parameters
        ----------
        field: mupdf::PdfObj const &
        signer: mupdf::PdfPkcs7Signer const &
        stime: int64_t

        """
        return _mupdf.PdfDocument_signature_set_value(self, field, signer, stime)


    def toggle_layer_config_ui(self, ui):
        """
        toggle_layer_config_ui(PdfDocument self, int ui)

        Parameters
        ----------
        ui: int

        """
        return _mupdf.PdfDocument_toggle_layer_config_ui(self, ui)


    def trailer(self):
        """
        trailer(PdfDocument self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_trailer(self)


    def undo(self):
        """
        undo(PdfDocument self)

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_undo(self)


    def undoredo_state(self, steps):
        """
        undoredo_state(PdfDocument self, int * steps) -> int

        Parameters
        ----------
        steps: int *

        """
        return _mupdf.PdfDocument_undoredo_state(self, steps)


    def undoredo_step(self, step):
        """
        undoredo_step(PdfDocument self, int step) -> char const *

        Parameters
        ----------
        step: int

        """
        return _mupdf.PdfDocument_undoredo_step(self, step)


    def update_object(self, num, obj):
        """
        update_object(PdfDocument self, int num, PdfObj obj)

        Parameters
        ----------
        num: int
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_update_object(self, num, obj)


    def update_stream(self, ref, buf, compressed):
        """
        update_stream(PdfDocument self, PdfObj ref, Buffer buf, int compressed)

        Parameters
        ----------
        ref: mupdf::PdfObj const &
        buf: mupdf::Buffer const &
        compressed: int

        """
        return _mupdf.PdfDocument_update_stream(self, ref, buf, compressed)


    def update_xobject(self, xobj, bbox, mat, res, buffer):
        """
        update_xobject(PdfDocument self, PdfObj xobj, Rect bbox, Matrix mat, PdfObj res, Buffer buffer)

        Parameters
        ----------
        xobj: mupdf::PdfObj const &
        bbox: mupdf::Rect &
        mat: mupdf::Matrix &
        res: mupdf::PdfObj const &
        buffer: mupdf::Buffer const &

        """
        return _mupdf.PdfDocument_update_xobject(self, xobj, bbox, mat, res, buffer)


    def validate_change_history(self):
        """
        validate_change_history(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_validate_change_history(self)


    def validate_changes(self, version):
        """
        validate_changes(PdfDocument self, int version) -> int

        Parameters
        ----------
        version: int

        """
        return _mupdf.PdfDocument_validate_changes(self, version)


    def version(self):
        """
        version(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_version(self)


    def was_pure_xfa(self):
        """
        was_pure_xfa(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_was_pure_xfa(self)


    def was_repaired(self):
        """
        was_repaired(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_was_repaired(self)


    def write_document(self, out, opts):
        """
        write_document(PdfDocument self, Output out, PdfWriteOptions opts)

        Parameters
        ----------
        out: mupdf::Output const &
        opts: mupdf::PdfWriteOptions &

        """
        return _mupdf.PdfDocument_write_document(self, out, opts)


    def write_journal(self, out):
        """
        write_journal(PdfDocument self, Output out)

        Parameters
        ----------
        out: mupdf::Output const &

        """
        return _mupdf.PdfDocument_write_journal(self, out)


    def write_snapshot(self, out):
        """
        write_snapshot(PdfDocument self, Output out)

        Parameters
        ----------
        out: mupdf::Output const &

        """
        return _mupdf.PdfDocument_write_snapshot(self, out)


    def xref_ensure_incremental_object(self, num):
        """
        xref_ensure_incremental_object(PdfDocument self, int num) -> int

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_xref_ensure_incremental_object(self, num)


    def xref_ensure_local_object(self, num):
        """
        xref_ensure_local_object(PdfDocument self, int num)

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_xref_ensure_local_object(self, num)


    def xref_is_incremental(self, num):
        """
        xref_is_incremental(PdfDocument self, int num) -> int

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfDocument_xref_is_incremental(self, num)


    def xref_len(self):
        """
        xref_len(PdfDocument self) -> int

        Parameters
        ----------
        self: mupdf::PdfDocument *

        """
        return _mupdf.PdfDocument_xref_len(self)


    def xref_obj_is_unsaved_signature(self, obj):
        """
        xref_obj_is_unsaved_signature(PdfDocument self, PdfObj obj) -> int

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_xref_obj_is_unsaved_signature(self, obj)


    def xref_remove_unsaved_signature(self, field):
        """
        xref_remove_unsaved_signature(PdfDocument self, PdfObj field)

        Parameters
        ----------
        field: mupdf::PdfObj const &

        """
        return _mupdf.PdfDocument_xref_remove_unsaved_signature(self, field)


    def xref_store_unsaved_signature(self, field, signer):
        """
        xref_store_unsaved_signature(PdfDocument self, PdfObj field, PdfPkcs7Signer signer)

        Parameters
        ----------
        field: mupdf::PdfObj const &
        signer: mupdf::PdfPkcs7Signer const &

        """
        return _mupdf.PdfDocument_xref_store_unsaved_signature(self, field, signer)


    def __init__(self, *args):
        """
        __init__(mupdf::PdfDocument self) -> PdfDocument
        __init__(mupdf::PdfDocument self, char const * filename) -> PdfDocument

        Parameters
        ----------
        filename: char const *

        __init__(mupdf::PdfDocument self, Stream file) -> PdfDocument

        Parameters
        ----------
        file: mupdf::Stream const &

        __init__(mupdf::PdfDocument self, PdfDocument rhs) -> PdfDocument

        Parameters
        ----------
        rhs: mupdf::PdfDocument const &

        __init__(mupdf::PdfDocument self, pdf_document * internal) -> PdfDocument

        Parameters
        ----------
        internal: pdf_document *

        """
        this = _mupdf.new_PdfDocument(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_PdfDocument
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.PdfDocument_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfDocument_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfDocument_m_internal_get, _mupdf.PdfDocument_m_internal_set)
PdfDocument_swigregister = _mupdf.PdfDocument_swigregister
PdfDocument_swigregister(PdfDocument)

class PdfFilterOptions(_object):
    """Proxy of C++ mupdf::PdfFilterOptions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfFilterOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfFilterOptions, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfFilterOptions self, pdf_filter_options internal) -> PdfFilterOptions

        Parameters
        ----------
        internal: pdf_filter_options *

        """
        this = _mupdf.new_PdfFilterOptions(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfFilterOptions_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfFilterOptions_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfFilterOptions_m_internal_get, _mupdf.PdfFilterOptions_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfFilterOptions
    __del__ = lambda self: None
PdfFilterOptions_swigregister = _mupdf.PdfFilterOptions_swigregister
PdfFilterOptions_swigregister(PdfFilterOptions)

class PdfFontDesc(_object):
    """Proxy of C++ mupdf::PdfFontDesc class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfFontDesc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfFontDesc, name)
    __repr__ = _swig_repr

    def add_hmtx(self, lo, hi, w):
        """
        add_hmtx(PdfFontDesc self, int lo, int hi, int w)

        Parameters
        ----------
        lo: int
        hi: int
        w: int

        """
        return _mupdf.PdfFontDesc_add_hmtx(self, lo, hi, w)


    def add_vmtx(self, lo, hi, x, y, w):
        """
        add_vmtx(PdfFontDesc self, int lo, int hi, int x, int y, int w)

        Parameters
        ----------
        lo: int
        hi: int
        x: int
        y: int
        w: int

        """
        return _mupdf.PdfFontDesc_add_vmtx(self, lo, hi, x, y, w)


    def end_hmtx(self):
        """
        end_hmtx(PdfFontDesc self)

        Parameters
        ----------
        self: mupdf::PdfFontDesc *

        """
        return _mupdf.PdfFontDesc_end_hmtx(self)


    def end_vmtx(self):
        """
        end_vmtx(PdfFontDesc self)

        Parameters
        ----------
        self: mupdf::PdfFontDesc *

        """
        return _mupdf.PdfFontDesc_end_vmtx(self)


    def font_cid_to_gid(self, cid):
        """
        font_cid_to_gid(PdfFontDesc self, int cid) -> int

        Parameters
        ----------
        cid: int

        """
        return _mupdf.PdfFontDesc_font_cid_to_gid(self, cid)


    def lookup_hmtx(self, cid):
        """
        lookup_hmtx(PdfFontDesc self, int cid) -> PdfHmtx

        Parameters
        ----------
        cid: int

        """
        return _mupdf.PdfFontDesc_lookup_hmtx(self, cid)


    def lookup_vmtx(self, cid):
        """
        lookup_vmtx(PdfFontDesc self, int cid) -> PdfVmtx

        Parameters
        ----------
        cid: int

        """
        return _mupdf.PdfFontDesc_lookup_vmtx(self, cid)


    def set_default_hmtx(self, w):
        """
        set_default_hmtx(PdfFontDesc self, int w)

        Parameters
        ----------
        w: int

        """
        return _mupdf.PdfFontDesc_set_default_hmtx(self, w)


    def set_default_vmtx(self, y, w):
        """
        set_default_vmtx(PdfFontDesc self, int y, int w)

        Parameters
        ----------
        y: int
        w: int

        """
        return _mupdf.PdfFontDesc_set_default_vmtx(self, y, w)


    def set_font_wmode(self, wmode):
        """
        set_font_wmode(PdfFontDesc self, int wmode)

        Parameters
        ----------
        wmode: int

        """
        return _mupdf.PdfFontDesc_set_font_wmode(self, wmode)


    def __init__(self, *args):
        """
        __init__(mupdf::PdfFontDesc self) -> PdfFontDesc
        __init__(mupdf::PdfFontDesc self, pdf_font_desc internal) -> PdfFontDesc

        Parameters
        ----------
        internal: pdf_font_desc *

        """
        this = _mupdf.new_PdfFontDesc(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfFontDesc_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfFontDesc_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfFontDesc_m_internal_get, _mupdf.PdfFontDesc_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfFontDesc
    __del__ = lambda self: None
PdfFontDesc_swigregister = _mupdf.PdfFontDesc_swigregister
PdfFontDesc_swigregister(PdfFontDesc)

class PdfFontResourceKey(_object):
    """Proxy of C++ mupdf::PdfFontResourceKey class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfFontResourceKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfFontResourceKey, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfFontResourceKey self, pdf_font_resource_key internal) -> PdfFontResourceKey

        Parameters
        ----------
        internal: pdf_font_resource_key *

        """
        this = _mupdf.new_PdfFontResourceKey(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfFontResourceKey_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfFontResourceKey_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfFontResourceKey_m_internal_get, _mupdf.PdfFontResourceKey_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfFontResourceKey
    __del__ = lambda self: None
PdfFontResourceKey_swigregister = _mupdf.PdfFontResourceKey_swigregister
PdfFontResourceKey_swigregister(PdfFontResourceKey)

class PdfFunction(_object):
    """Proxy of C++ mupdf::PdfFunction class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfFunction, name)
    __repr__ = _swig_repr

    def eval_function(self, arg2, inlen, out, outlen):
        """
        eval_function(PdfFunction self, float const * arg2, int inlen, float * out, int outlen)

        Parameters
        ----------
        in: float const *
        inlen: int
        out: float *
        outlen: int

        """
        return _mupdf.PdfFunction_eval_function(self, arg2, inlen, out, outlen)


    def function_size(self):
        """
        function_size(PdfFunction self) -> size_t

        Parameters
        ----------
        self: mupdf::PdfFunction *

        """
        return _mupdf.PdfFunction_function_size(self)


    def __init__(self, *args):
        """
        __init__(mupdf::PdfFunction self, PdfFunction rhs) -> PdfFunction

        Parameters
        ----------
        rhs: mupdf::PdfFunction const &

        __init__(mupdf::PdfFunction self, pdf_function * internal) -> PdfFunction

        Parameters
        ----------
        internal: pdf_function *

        """
        this = _mupdf.new_PdfFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_PdfFunction
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.PdfFunction_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfFunction_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfFunction_m_internal_get, _mupdf.PdfFunction_m_internal_set)
PdfFunction_swigregister = _mupdf.PdfFunction_swigregister
PdfFunction_swigregister(PdfFunction)

class PdfGraftMap(_object):
    """Proxy of C++ mupdf::PdfGraftMap class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfGraftMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfGraftMap, name)
    __repr__ = _swig_repr

    def graft_mapped_object(self, obj):
        """
        graft_mapped_object(PdfGraftMap self, PdfObj obj) -> PdfObj

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfGraftMap_graft_mapped_object(self, obj)


    def graft_mapped_page(self, page_to, src, page_from):
        """
        graft_mapped_page(PdfGraftMap self, int page_to, PdfDocument src, int page_from)

        Parameters
        ----------
        page_to: int
        src: mupdf::PdfDocument const &
        page_from: int

        """
        return _mupdf.PdfGraftMap_graft_mapped_page(self, page_to, src, page_from)


    def __init__(self, *args):
        """
        __init__(mupdf::PdfGraftMap self, PdfDocument dst) -> PdfGraftMap

        Parameters
        ----------
        dst: mupdf::PdfDocument const &

        __init__(mupdf::PdfGraftMap self, PdfGraftMap rhs) -> PdfGraftMap

        Parameters
        ----------
        rhs: mupdf::PdfGraftMap const &

        __init__(mupdf::PdfGraftMap self, pdf_graft_map * internal) -> PdfGraftMap

        Parameters
        ----------
        internal: pdf_graft_map *

        """
        this = _mupdf.new_PdfGraftMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_PdfGraftMap
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.PdfGraftMap_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfGraftMap_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfGraftMap_m_internal_get, _mupdf.PdfGraftMap_m_internal_set)
PdfGraftMap_swigregister = _mupdf.PdfGraftMap_swigregister
PdfGraftMap_swigregister(PdfGraftMap)

class PdfGstate(_object):
    """Proxy of C++ mupdf::PdfGstate class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfGstate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfGstate, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfGstate self, pdf_gstate * internal) -> PdfGstate

        Parameters
        ----------
        internal: pdf_gstate *

        """
        this = _mupdf.new_PdfGstate(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfGstate_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfGstate_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfGstate_m_internal_get, _mupdf.PdfGstate_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfGstate
    __del__ = lambda self: None
PdfGstate_swigregister = _mupdf.PdfGstate_swigregister
PdfGstate_swigregister(PdfGstate)

class PdfHintPage(_object):
    """Proxy of C++ mupdf::PdfHintPage class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfHintPage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfHintPage, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfHintPage self, pdf_hint_page internal) -> PdfHintPage

        Parameters
        ----------
        internal: pdf_hint_page *

        """
        this = _mupdf.new_PdfHintPage(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfHintPage_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfHintPage_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfHintPage_m_internal_get, _mupdf.PdfHintPage_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfHintPage
    __del__ = lambda self: None
PdfHintPage_swigregister = _mupdf.PdfHintPage_swigregister
PdfHintPage_swigregister(PdfHintPage)

class PdfHintShared(_object):
    """Proxy of C++ mupdf::PdfHintShared class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfHintShared, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfHintShared, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfHintShared self, pdf_hint_shared internal) -> PdfHintShared

        Parameters
        ----------
        internal: pdf_hint_shared *

        """
        this = _mupdf.new_PdfHintShared(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfHintShared_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfHintShared_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfHintShared_m_internal_get, _mupdf.PdfHintShared_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfHintShared
    __del__ = lambda self: None
PdfHintShared_swigregister = _mupdf.PdfHintShared_swigregister
PdfHintShared_swigregister(PdfHintShared)

class PdfHmtx(_object):
    """Proxy of C++ mupdf::PdfHmtx class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfHmtx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfHmtx, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfHmtx self, pdf_hmtx internal) -> PdfHmtx

        Parameters
        ----------
        internal: pdf_hmtx *

        """
        this = _mupdf.new_PdfHmtx(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfHmtx_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfHmtx_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfHmtx_m_internal_get, _mupdf.PdfHmtx_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfHmtx
    __del__ = lambda self: None
PdfHmtx_swigregister = _mupdf.PdfHmtx_swigregister
PdfHmtx_swigregister(PdfHmtx)

class PdfJournal(_object):
    """Proxy of C++ mupdf::PdfJournal class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfJournal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfJournal, name)
    __repr__ = _swig_repr

    def discard_journal(self):
        """
        discard_journal(PdfJournal self)

        Parameters
        ----------
        self: mupdf::PdfJournal *

        """
        return _mupdf.PdfJournal_discard_journal(self)


    def __init__(self, internal):
        """
        __init__(mupdf::PdfJournal self, pdf_journal * internal) -> PdfJournal

        Parameters
        ----------
        internal: pdf_journal *

        """
        this = _mupdf.new_PdfJournal(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_PdfJournal
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.PdfJournal_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfJournal_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfJournal_m_internal_get, _mupdf.PdfJournal_m_internal_set)
PdfJournal_swigregister = _mupdf.PdfJournal_swigregister
PdfJournal_swigregister(PdfJournal)

class PdfJs(_object):
    """Proxy of C++ mupdf::PdfJs class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfJs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfJs, name)
    __repr__ = _swig_repr

    def js_event_init(self, target, value, willCommit):
        """
        js_event_init(PdfJs self, PdfObj target, char const * value, int willCommit)

        Parameters
        ----------
        target: mupdf::PdfObj const &
        value: char const *
        willCommit: int

        """
        return _mupdf.PdfJs_js_event_init(self, target, value, willCommit)


    def js_event_init_keystroke(self, target, evt):
        """
        js_event_init_keystroke(PdfJs self, PdfObj target, PdfKeystrokeEvent evt)

        Parameters
        ----------
        target: mupdf::PdfObj const &
        evt: mupdf::PdfKeystrokeEvent const &

        """
        return _mupdf.PdfJs_js_event_init_keystroke(self, target, evt)


    def js_event_result(self):
        """
        js_event_result(PdfJs self) -> int

        Parameters
        ----------
        self: mupdf::PdfJs *

        """
        return _mupdf.PdfJs_js_event_result(self)


    def js_event_result_keystroke(self, evt):
        """
        js_event_result_keystroke(PdfJs self, PdfKeystrokeEvent evt) -> int

        Parameters
        ----------
        evt: mupdf::PdfKeystrokeEvent const &

        """
        return _mupdf.PdfJs_js_event_result_keystroke(self, evt)


    def js_event_result_validate(self, newvalue):
        """
        js_event_result_validate(PdfJs self, char ** newvalue) -> int

        Parameters
        ----------
        newvalue: char **

        """
        return _mupdf.PdfJs_js_event_result_validate(self, newvalue)


    def js_event_value(self):
        """
        js_event_value(PdfJs self) -> char *

        Parameters
        ----------
        self: mupdf::PdfJs *

        """
        return _mupdf.PdfJs_js_event_value(self)


    def js_execute(self, name, code):
        """
        js_execute(PdfJs self, char const * name, char const * code)

        Parameters
        ----------
        name: char const *
        code: char const *

        """
        return _mupdf.PdfJs_js_execute(self, name, code)


    def __init__(self, internal):
        """
        __init__(mupdf::PdfJs self, pdf_js * internal) -> PdfJs

        Parameters
        ----------
        internal: pdf_js *

        """
        this = _mupdf.new_PdfJs(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_PdfJs
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.PdfJs_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfJs_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfJs_m_internal_get, _mupdf.PdfJs_m_internal_set)
PdfJs_swigregister = _mupdf.PdfJs_swigregister
PdfJs_swigregister(PdfJs)

class PdfKeystrokeEvent(_object):
    """Proxy of C++ mupdf::PdfKeystrokeEvent class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfKeystrokeEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfKeystrokeEvent, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfKeystrokeEvent self, pdf_keystroke_event internal) -> PdfKeystrokeEvent

        Parameters
        ----------
        internal: pdf_keystroke_event *

        """
        this = _mupdf.new_PdfKeystrokeEvent(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfKeystrokeEvent_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfKeystrokeEvent_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfKeystrokeEvent_m_internal_get, _mupdf.PdfKeystrokeEvent_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfKeystrokeEvent
    __del__ = lambda self: None
PdfKeystrokeEvent_swigregister = _mupdf.PdfKeystrokeEvent_swigregister
PdfKeystrokeEvent_swigregister(PdfKeystrokeEvent)

class PdfLaunchUrlEvent(_object):
    """Proxy of C++ mupdf::PdfLaunchUrlEvent class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfLaunchUrlEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfLaunchUrlEvent, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfLaunchUrlEvent self, pdf_launch_url_event internal) -> PdfLaunchUrlEvent

        Parameters
        ----------
        internal: pdf_launch_url_event *

        """
        this = _mupdf.new_PdfLaunchUrlEvent(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfLaunchUrlEvent_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfLaunchUrlEvent_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfLaunchUrlEvent_m_internal_get, _mupdf.PdfLaunchUrlEvent_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfLaunchUrlEvent
    __del__ = lambda self: None
PdfLaunchUrlEvent_swigregister = _mupdf.PdfLaunchUrlEvent_swigregister
PdfLaunchUrlEvent_swigregister(PdfLaunchUrlEvent)

class PdfLayerConfig(_object):
    """Proxy of C++ mupdf::PdfLayerConfig class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfLayerConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfLayerConfig, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfLayerConfig self, pdf_layer_config internal) -> PdfLayerConfig

        Parameters
        ----------
        internal: pdf_layer_config *

        """
        this = _mupdf.new_PdfLayerConfig(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfLayerConfig_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfLayerConfig_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfLayerConfig_m_internal_get, _mupdf.PdfLayerConfig_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfLayerConfig
    __del__ = lambda self: None
PdfLayerConfig_swigregister = _mupdf.PdfLayerConfig_swigregister
PdfLayerConfig_swigregister(PdfLayerConfig)

class PdfLayerConfigUi(_object):
    """Proxy of C++ mupdf::PdfLayerConfigUi class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfLayerConfigUi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfLayerConfigUi, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfLayerConfigUi self, pdf_layer_config_ui internal) -> PdfLayerConfigUi

        Parameters
        ----------
        internal: pdf_layer_config_ui *

        """
        this = _mupdf.new_PdfLayerConfigUi(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfLayerConfigUi_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfLayerConfigUi_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfLayerConfigUi_m_internal_get, _mupdf.PdfLayerConfigUi_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfLayerConfigUi
    __del__ = lambda self: None
PdfLayerConfigUi_swigregister = _mupdf.PdfLayerConfigUi_swigregister
PdfLayerConfigUi_swigregister(PdfLayerConfigUi)

class PdfLexbuf(_object):
    """Proxy of C++ mupdf::PdfLexbuf class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfLexbuf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfLexbuf, name)
    __repr__ = _swig_repr

    def lexbuf_fin(self):
        """
        lexbuf_fin(PdfLexbuf self)

        Parameters
        ----------
        self: mupdf::PdfLexbuf *

        """
        return _mupdf.PdfLexbuf_lexbuf_fin(self)


    def lexbuf_grow(self):
        """
        lexbuf_grow(PdfLexbuf self) -> ptrdiff_t

        Parameters
        ----------
        self: mupdf::PdfLexbuf *

        """
        return _mupdf.PdfLexbuf_lexbuf_grow(self)


    def lexbuf_init(self, size):
        """
        lexbuf_init(PdfLexbuf self, int size)

        Parameters
        ----------
        size: int

        """
        return _mupdf.PdfLexbuf_lexbuf_init(self, size)


    def __init__(self, internal):
        """
        __init__(mupdf::PdfLexbuf self, pdf_lexbuf internal) -> PdfLexbuf

        Parameters
        ----------
        internal: pdf_lexbuf *

        """
        this = _mupdf.new_PdfLexbuf(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfLexbuf_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfLexbuf_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfLexbuf_m_internal_get, _mupdf.PdfLexbuf_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfLexbuf
    __del__ = lambda self: None
PdfLexbuf_swigregister = _mupdf.PdfLexbuf_swigregister
PdfLexbuf_swigregister(PdfLexbuf)

class PdfLexbufLarge(_object):
    """Proxy of C++ mupdf::PdfLexbufLarge class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfLexbufLarge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfLexbufLarge, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfLexbufLarge self, pdf_lexbuf_large internal) -> PdfLexbufLarge

        Parameters
        ----------
        internal: pdf_lexbuf_large *

        """
        this = _mupdf.new_PdfLexbufLarge(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfLexbufLarge_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfLexbufLarge_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfLexbufLarge_m_internal_get, _mupdf.PdfLexbufLarge_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfLexbufLarge
    __del__ = lambda self: None
PdfLexbufLarge_swigregister = _mupdf.PdfLexbufLarge_swigregister
PdfLexbufLarge_swigregister(PdfLexbufLarge)

class PdfLockedFields(_object):
    """Proxy of C++ mupdf::PdfLockedFields class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfLockedFields, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfLockedFields, name)
    __repr__ = _swig_repr

    def is_field_locked(self, name):
        """
        is_field_locked(PdfLockedFields self, char const * name) -> int

        Parameters
        ----------
        name: char const *

        """
        return _mupdf.PdfLockedFields_is_field_locked(self, name)


    def __init__(self, internal):
        """
        __init__(mupdf::PdfLockedFields self, pdf_locked_fields * internal) -> PdfLockedFields

        Parameters
        ----------
        internal: pdf_locked_fields *

        """
        this = _mupdf.new_PdfLockedFields(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_PdfLockedFields
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.PdfLockedFields_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfLockedFields_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfLockedFields_m_internal_get, _mupdf.PdfLockedFields_m_internal_set)
PdfLockedFields_swigregister = _mupdf.PdfLockedFields_swigregister
PdfLockedFields_swigregister(PdfLockedFields)

class PdfMailDocEvent(_object):
    """Proxy of C++ mupdf::PdfMailDocEvent class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfMailDocEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfMailDocEvent, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfMailDocEvent self, pdf_mail_doc_event internal) -> PdfMailDocEvent

        Parameters
        ----------
        internal: pdf_mail_doc_event *

        """
        this = _mupdf.new_PdfMailDocEvent(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfMailDocEvent_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfMailDocEvent_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfMailDocEvent_m_internal_get, _mupdf.PdfMailDocEvent_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfMailDocEvent
    __del__ = lambda self: None
PdfMailDocEvent_swigregister = _mupdf.PdfMailDocEvent_swigregister
PdfMailDocEvent_swigregister(PdfMailDocEvent)

class PdfMrange(_object):
    """Proxy of C++ mupdf::PdfMrange class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfMrange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfMrange, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfMrange self, pdf_mrange internal) -> PdfMrange

        Parameters
        ----------
        internal: pdf_mrange *

        """
        this = _mupdf.new_PdfMrange(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfMrange_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfMrange_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfMrange_m_internal_get, _mupdf.PdfMrange_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfMrange
    __del__ = lambda self: None
PdfMrange_swigregister = _mupdf.PdfMrange_swigregister
PdfMrange_swigregister(PdfMrange)

class PdfObj(_object):
    """Proxy of C++ mupdf::PdfObj class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfObj, name)
    __repr__ = _swig_repr

    def new_text_string(s):
        """
        new_text_string(char const * s) -> PdfObj

        Parameters
        ----------
        s: char const *

        """
        return _mupdf.PdfObj_new_text_string(s)

    new_text_string = staticmethod(new_text_string)

    def new_dict(doc, initialcap):
        """
        new_dict(PdfDocument doc, int initialcap) -> PdfObj

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        initialcap: int

        """
        return _mupdf.PdfObj_new_dict(doc, initialcap)

    new_dict = staticmethod(new_dict)

    def array_contains(self, obj):
        """
        array_contains(PdfObj self, PdfObj obj) -> int

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_array_contains(self, obj)


    def array_delete(self, index):
        """
        array_delete(PdfObj self, int index)

        Parameters
        ----------
        index: int

        """
        return _mupdf.PdfObj_array_delete(self, index)


    def array_find(self, obj):
        """
        array_find(PdfObj self, PdfObj obj) -> int

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_array_find(self, obj)


    def array_get(self, i):
        """
        array_get(PdfObj self, int i) -> PdfObj

        Parameters
        ----------
        i: int

        """
        return _mupdf.PdfObj_array_get(self, i)


    def array_get_bool(self, index):
        """
        array_get_bool(PdfObj self, int index) -> int

        Parameters
        ----------
        index: int

        """
        return _mupdf.PdfObj_array_get_bool(self, index)


    def array_get_int(self, index):
        """
        array_get_int(PdfObj self, int index) -> int

        Parameters
        ----------
        index: int

        """
        return _mupdf.PdfObj_array_get_int(self, index)


    def array_get_matrix(self, index):
        """
        array_get_matrix(PdfObj self, int index) -> Matrix

        Parameters
        ----------
        index: int

        """
        return _mupdf.PdfObj_array_get_matrix(self, index)


    def array_get_name(self, index):
        """
        array_get_name(PdfObj self, int index) -> char const *

        Parameters
        ----------
        index: int

        """
        return _mupdf.PdfObj_array_get_name(self, index)


    def array_get_real(self, index):
        """
        array_get_real(PdfObj self, int index) -> float

        Parameters
        ----------
        index: int

        """
        return _mupdf.PdfObj_array_get_real(self, index)


    def array_get_rect(self, index):
        """
        array_get_rect(PdfObj self, int index) -> Rect

        Parameters
        ----------
        index: int

        """
        return _mupdf.PdfObj_array_get_rect(self, index)


    def array_get_string(self, index, sizep):
        """
        array_get_string(PdfObj self, int index, size_t * sizep) -> char const *

        Parameters
        ----------
        index: int
        sizep: size_t *

        """
        return _mupdf.PdfObj_array_get_string(self, index, sizep)


    def array_get_text_string(self, index):
        """
        array_get_text_string(PdfObj self, int index) -> char const *

        Parameters
        ----------
        index: int

        """
        return _mupdf.PdfObj_array_get_text_string(self, index)


    def array_insert(self, obj, index):
        """
        array_insert(PdfObj self, PdfObj obj, int index)

        Parameters
        ----------
        obj: mupdf::PdfObj const &
        index: int

        """
        return _mupdf.PdfObj_array_insert(self, obj, index)


    def array_insert_drop(self, obj, index):
        """
        array_insert_drop(PdfObj self, PdfObj obj, int index)

        Parameters
        ----------
        obj: mupdf::PdfObj const &
        index: int

        """
        return _mupdf.PdfObj_array_insert_drop(self, obj, index)


    def array_len(self):
        """
        array_len(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_array_len(self)


    def array_push(self, obj):
        """
        array_push(PdfObj self, PdfObj obj)

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_array_push(self, obj)


    def array_push_array(self, initial):
        """
        array_push_array(PdfObj self, int initial) -> PdfObj

        Parameters
        ----------
        initial: int

        """
        return _mupdf.PdfObj_array_push_array(self, initial)


    def array_push_bool(self, x):
        """
        array_push_bool(PdfObj self, int x)

        Parameters
        ----------
        x: int

        """
        return _mupdf.PdfObj_array_push_bool(self, x)


    def array_push_dict(self, initial):
        """
        array_push_dict(PdfObj self, int initial) -> PdfObj

        Parameters
        ----------
        initial: int

        """
        return _mupdf.PdfObj_array_push_dict(self, initial)


    def array_push_drop(self, obj):
        """
        array_push_drop(PdfObj self, PdfObj obj)

        Parameters
        ----------
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_array_push_drop(self, obj)


    def array_push_int(self, x):
        """
        array_push_int(PdfObj self, int64_t x)

        Parameters
        ----------
        x: int64_t

        """
        return _mupdf.PdfObj_array_push_int(self, x)


    def array_push_name(self, x):
        """
        array_push_name(PdfObj self, char const * x)

        Parameters
        ----------
        x: char const *

        """
        return _mupdf.PdfObj_array_push_name(self, x)


    def array_push_real(self, x):
        """
        array_push_real(PdfObj self, double x)

        Parameters
        ----------
        x: double

        """
        return _mupdf.PdfObj_array_push_real(self, x)


    def array_push_string(self, x, n):
        """
        array_push_string(PdfObj self, char const * x, size_t n)

        Parameters
        ----------
        x: char const *
        n: size_t

        """
        return _mupdf.PdfObj_array_push_string(self, x, n)


    def array_push_text_string(self, x):
        """
        array_push_text_string(PdfObj self, char const * x)

        Parameters
        ----------
        x: char const *

        """
        return _mupdf.PdfObj_array_push_text_string(self, x)


    def array_put(self, i, obj):
        """
        array_put(PdfObj self, int i, PdfObj obj)

        Parameters
        ----------
        i: int
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_array_put(self, i, obj)


    def array_put_drop(self, i, obj):
        """
        array_put_drop(PdfObj self, int i, PdfObj obj)

        Parameters
        ----------
        i: int
        obj: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_array_put_drop(self, i, obj)


    def button_field_on_state(self):
        """
        button_field_on_state(PdfObj self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_button_field_on_state(self)


    def choice_field_option(self, exportval, i):
        """
        choice_field_option(PdfObj self, int exportval, int i) -> char const *

        Parameters
        ----------
        exportval: int
        i: int

        """
        return _mupdf.PdfObj_choice_field_option(self, exportval, i)


    def choice_field_option_count(self):
        """
        choice_field_option_count(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_choice_field_option_count(self)


    def clean_obj(self):
        """
        clean_obj(PdfObj self)

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_clean_obj(self)


    def copy_array(self):
        """
        copy_array(PdfObj self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_copy_array(self)


    def copy_dict(self):
        """
        copy_dict(PdfObj self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_copy_dict(self)


    def debug_obj(self):
        """
        debug_obj(PdfObj self)

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_debug_obj(self)


    def debug_ref(self):
        """
        debug_ref(PdfObj self)

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_debug_ref(self)


    def deep_copy_obj(self):
        """
        deep_copy_obj(PdfObj self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_deep_copy_obj(self)


    def dict_del(self, key):
        """
        dict_del(PdfObj self, PdfObj key)

        Parameters
        ----------
        key: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_del(self, key)


    def dict_dels(self, key):
        """
        dict_dels(PdfObj self, char const * key)

        Parameters
        ----------
        key: char const *

        """
        return _mupdf.PdfObj_dict_dels(self, key)


    def dict_get(self, key):
        """
        dict_get(PdfObj self, PdfObj key) -> PdfObj

        Parameters
        ----------
        key: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_get(self, key)


    def dict_get_bool(self, key):
        """
        dict_get_bool(PdfObj self, PdfObj key) -> int

        Parameters
        ----------
        key: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_get_bool(self, key)


    def dict_get_date(self, key):
        """
        dict_get_date(PdfObj self, PdfObj key) -> int64_t

        Parameters
        ----------
        key: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_get_date(self, key)


    def dict_get_inheritable(self, key):
        """
        dict_get_inheritable(PdfObj self, PdfObj key) -> PdfObj

        Parameters
        ----------
        key: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_get_inheritable(self, key)


    def dict_get_int(self, key):
        """
        dict_get_int(PdfObj self, PdfObj key) -> int

        Parameters
        ----------
        key: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_get_int(self, key)


    def dict_get_key(self, idx):
        """
        dict_get_key(PdfObj self, int idx) -> PdfObj

        Parameters
        ----------
        idx: int

        """
        return _mupdf.PdfObj_dict_get_key(self, idx)


    def dict_get_matrix(self, key):
        """
        dict_get_matrix(PdfObj self, PdfObj key) -> Matrix

        Parameters
        ----------
        key: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_get_matrix(self, key)


    def dict_get_name(self, key):
        """
        dict_get_name(PdfObj self, PdfObj key) -> char const *

        Parameters
        ----------
        key: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_get_name(self, key)


    def dict_get_put_drop(self, key, val, old_val):
        """
        dict_get_put_drop(PdfObj self, PdfObj key, PdfObj val, PdfObj old_val)

        Parameters
        ----------
        key: mupdf::PdfObj const &
        val: mupdf::PdfObj const &
        old_val: mupdf::PdfObj &

        """
        return _mupdf.PdfObj_dict_get_put_drop(self, key, val, old_val)


    def dict_get_real(self, key):
        """
        dict_get_real(PdfObj self, PdfObj key) -> float

        Parameters
        ----------
        key: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_get_real(self, key)


    def dict_get_rect(self, key):
        """
        dict_get_rect(PdfObj self, PdfObj key) -> Rect

        Parameters
        ----------
        key: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_get_rect(self, key)


    def dict_get_string(self, key, sizep):
        """
        dict_get_string(PdfObj self, PdfObj key, size_t * sizep) -> char const *

        Parameters
        ----------
        key: mupdf::PdfObj const &
        sizep: size_t *

        """
        return _mupdf.PdfObj_dict_get_string(self, key, sizep)


    def dict_get_text_string(self, key):
        """
        dict_get_text_string(PdfObj self, PdfObj key) -> char const *

        Parameters
        ----------
        key: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_get_text_string(self, key)


    def dict_get_val(self, idx):
        """
        dict_get_val(PdfObj self, int idx) -> PdfObj

        Parameters
        ----------
        idx: int

        """
        return _mupdf.PdfObj_dict_get_val(self, idx)


    def dict_geta(self, key, abbrev):
        """
        dict_geta(PdfObj self, PdfObj key, PdfObj abbrev) -> PdfObj

        Parameters
        ----------
        key: mupdf::PdfObj const &
        abbrev: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_geta(self, key, abbrev)


    def dict_getp(self, path):
        """
        dict_getp(PdfObj self, char const * path) -> PdfObj

        Parameters
        ----------
        path: char const *

        """
        return _mupdf.PdfObj_dict_getp(self, path)


    def dict_getp_inheritable(self, path):
        """
        dict_getp_inheritable(PdfObj self, char const * path) -> PdfObj

        Parameters
        ----------
        path: char const *

        """
        return _mupdf.PdfObj_dict_getp_inheritable(self, path)


    def dict_gets(self, key):
        """
        dict_gets(PdfObj self, char const * key) -> PdfObj

        Parameters
        ----------
        key: char const *

        """
        return _mupdf.PdfObj_dict_gets(self, key)


    def dict_getsa(self, key, abbrev):
        """
        dict_getsa(PdfObj self, char const * key, char const * abbrev) -> PdfObj

        Parameters
        ----------
        key: char const *
        abbrev: char const *

        """
        return _mupdf.PdfObj_dict_getsa(self, key, abbrev)


    def dict_len(self):
        """
        dict_len(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_dict_len(self)


    def dict_put(self, key, val):
        """
        dict_put(PdfObj self, PdfObj key, PdfObj val)

        Parameters
        ----------
        key: mupdf::PdfObj const &
        val: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_put(self, key, val)


    def dict_put_array(self, key, initial):
        """
        dict_put_array(PdfObj self, PdfObj key, int initial) -> PdfObj

        Parameters
        ----------
        key: mupdf::PdfObj const &
        initial: int

        """
        return _mupdf.PdfObj_dict_put_array(self, key, initial)


    def dict_put_bool(self, key, x):
        """
        dict_put_bool(PdfObj self, PdfObj key, int x)

        Parameters
        ----------
        key: mupdf::PdfObj const &
        x: int

        """
        return _mupdf.PdfObj_dict_put_bool(self, key, x)


    def dict_put_date(self, key, time):
        """
        dict_put_date(PdfObj self, PdfObj key, int64_t time)

        Parameters
        ----------
        key: mupdf::PdfObj const &
        time: int64_t

        """
        return _mupdf.PdfObj_dict_put_date(self, key, time)


    def dict_put_dict(self, key, initial):
        """
        dict_put_dict(PdfObj self, PdfObj key, int initial) -> PdfObj

        Parameters
        ----------
        key: mupdf::PdfObj const &
        initial: int

        """
        return _mupdf.PdfObj_dict_put_dict(self, key, initial)


    def dict_put_drop(self, key, val):
        """
        dict_put_drop(PdfObj self, PdfObj key, PdfObj val)

        Parameters
        ----------
        key: mupdf::PdfObj const &
        val: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_put_drop(self, key, val)


    def dict_put_int(self, key, x):
        """
        dict_put_int(PdfObj self, PdfObj key, int64_t x)

        Parameters
        ----------
        key: mupdf::PdfObj const &
        x: int64_t

        """
        return _mupdf.PdfObj_dict_put_int(self, key, x)


    def dict_put_matrix(self, key, x):
        """
        dict_put_matrix(PdfObj self, PdfObj key, Matrix x)

        Parameters
        ----------
        key: mupdf::PdfObj const &
        x: mupdf::Matrix &

        """
        return _mupdf.PdfObj_dict_put_matrix(self, key, x)


    def dict_put_name(self, key, x):
        """
        dict_put_name(PdfObj self, PdfObj key, char const * x)

        Parameters
        ----------
        key: mupdf::PdfObj const &
        x: char const *

        """
        return _mupdf.PdfObj_dict_put_name(self, key, x)


    def dict_put_real(self, key, x):
        """
        dict_put_real(PdfObj self, PdfObj key, double x)

        Parameters
        ----------
        key: mupdf::PdfObj const &
        x: double

        """
        return _mupdf.PdfObj_dict_put_real(self, key, x)


    def dict_put_rect(self, key, x):
        """
        dict_put_rect(PdfObj self, PdfObj key, Rect x)

        Parameters
        ----------
        key: mupdf::PdfObj const &
        x: mupdf::Rect &

        """
        return _mupdf.PdfObj_dict_put_rect(self, key, x)


    def dict_put_string(self, key, x, n):
        """
        dict_put_string(PdfObj self, PdfObj key, char const * x, size_t n)

        Parameters
        ----------
        key: mupdf::PdfObj const &
        x: char const *
        n: size_t

        """
        return _mupdf.PdfObj_dict_put_string(self, key, x, n)


    def dict_put_text_string(self, key, x):
        """
        dict_put_text_string(PdfObj self, PdfObj key, char const * x)

        Parameters
        ----------
        key: mupdf::PdfObj const &
        x: char const *

        """
        return _mupdf.PdfObj_dict_put_text_string(self, key, x)


    def dict_put_val_null(self, idx):
        """
        dict_put_val_null(PdfObj self, int idx)

        Parameters
        ----------
        idx: int

        """
        return _mupdf.PdfObj_dict_put_val_null(self, idx)


    def dict_putp(self, path, val):
        """
        dict_putp(PdfObj self, char const * path, PdfObj val)

        Parameters
        ----------
        path: char const *
        val: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_putp(self, path, val)


    def dict_putp_drop(self, path, val):
        """
        dict_putp_drop(PdfObj self, char const * path, PdfObj val)

        Parameters
        ----------
        path: char const *
        val: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_putp_drop(self, path, val)


    def dict_puts(self, key, val):
        """
        dict_puts(PdfObj self, char const * key, PdfObj val)

        Parameters
        ----------
        key: char const *
        val: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_puts(self, key, val)


    def dict_puts_dict(self, key, initial):
        """
        dict_puts_dict(PdfObj self, char const * key, int initial) -> PdfObj

        Parameters
        ----------
        key: char const *
        initial: int

        """
        return _mupdf.PdfObj_dict_puts_dict(self, key, initial)


    def dict_puts_drop(self, key, val):
        """
        dict_puts_drop(PdfObj self, char const * key, PdfObj val)

        Parameters
        ----------
        key: char const *
        val: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_dict_puts_drop(self, key, val)


    def dirty_obj(self):
        """
        dirty_obj(PdfObj self)

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_dirty_obj(self)


    def embedded_file_name(self):
        """
        embedded_file_name(PdfObj self) -> char const *

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_embedded_file_name(self)


    def embedded_file_stream(self):
        """
        embedded_file_stream(PdfObj self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_embedded_file_stream(self)


    def embedded_file_type(self):
        """
        embedded_file_type(PdfObj self) -> char const *

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_embedded_file_type(self)


    def field_border_style(self):
        """
        field_border_style(PdfObj self) -> char *

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_field_border_style(self)


    def field_display(self):
        """
        field_display(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_field_display(self)


    def field_flags(self):
        """
        field_flags(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_field_flags(self)


    def field_label(self):
        """
        field_label(PdfObj self) -> char const *

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_field_label(self)


    def field_name(self):
        """
        field_name(PdfObj self) -> char *

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_field_name(self)


    def field_set_border_style(self, text):
        """
        field_set_border_style(PdfObj self, char const * text)

        Parameters
        ----------
        text: char const *

        """
        return _mupdf.PdfObj_field_set_border_style(self, text)


    def field_set_button_caption(self, text):
        """
        field_set_button_caption(PdfObj self, char const * text)

        Parameters
        ----------
        text: char const *

        """
        return _mupdf.PdfObj_field_set_button_caption(self, text)


    def field_set_display(self, d):
        """
        field_set_display(PdfObj self, int d)

        Parameters
        ----------
        d: int

        """
        return _mupdf.PdfObj_field_set_display(self, d)


    def field_set_fill_color(self, col):
        """
        field_set_fill_color(PdfObj self, PdfObj col)

        Parameters
        ----------
        col: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_field_set_fill_color(self, col)


    def field_set_text_color(self, col):
        """
        field_set_text_color(PdfObj self, PdfObj col)

        Parameters
        ----------
        col: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_field_set_text_color(self, col)


    def field_type(self):
        """
        field_type(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_field_type(self)


    def field_type_string(self):
        """
        field_type_string(PdfObj self) -> char const *

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_field_type_string(self)


    def field_value(self):
        """
        field_value(PdfObj self) -> char const *

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_field_value(self)


    def filter_xobject_instance(self, page_res, ctm, filter):
        """
        filter_xobject_instance(PdfObj self, PdfObj page_res, Matrix ctm, PdfFilterOptions filter) -> PdfObj

        Parameters
        ----------
        page_res: mupdf::PdfObj const &
        ctm: mupdf::Matrix &
        filter: mupdf::PdfFilterOptions const &

        """
        return _mupdf.PdfObj_filter_xobject_instance(self, page_res, ctm, filter)


    def flatten_inheritable_page_items(self):
        """
        flatten_inheritable_page_items(PdfObj self)

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_flatten_inheritable_page_items(self)


    def get_bound_document(self):
        """
        get_bound_document(PdfObj self) -> PdfDocument

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_get_bound_document(self)


    def get_indirect_document(self):
        """
        get_indirect_document(PdfObj self) -> PdfDocument

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_get_indirect_document(self)


    def is_array(self):
        """
        is_array(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_is_array(self)


    def is_bool(self):
        """
        is_bool(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_is_bool(self)


    def is_dict(self):
        """
        is_dict(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_is_dict(self)


    def is_embedded_file(self):
        """
        is_embedded_file(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_is_embedded_file(self)


    def is_indirect(self):
        """
        is_indirect(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_is_indirect(self)


    def is_int(self):
        """
        is_int(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_is_int(self)


    def is_jpx_image(self):
        """
        is_jpx_image(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_is_jpx_image(self)


    def is_name(self):
        """
        is_name(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_is_name(self)


    def is_null(self):
        """
        is_null(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_is_null(self)


    def is_number(self):
        """
        is_number(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_is_number(self)


    def is_real(self):
        """
        is_real(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_is_real(self)


    def is_stream(self):
        """
        is_stream(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_is_stream(self)


    def is_string(self):
        """
        is_string(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_is_string(self)


    def line_ending_from_name(self):
        """
        line_ending_from_name(PdfObj self) -> enum pdf_line_ending

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_line_ending_from_name(self)


    def load_colorspace(self):
        """
        load_colorspace(PdfObj self) -> Colorspace

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_load_colorspace(self)


    def load_embedded_file(self):
        """
        load_embedded_file(PdfObj self) -> Buffer

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_load_embedded_file(self)


    def load_function(self, arg2, out):
        """
        load_function(PdfObj self, int arg2, int out) -> PdfFunction

        Parameters
        ----------
        in: int
        out: int

        """
        return _mupdf.PdfObj_load_function(self, arg2, out)


    def load_raw_stream(self):
        """
        load_raw_stream(PdfObj self) -> Buffer

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_load_raw_stream(self)


    def load_stream(self):
        """
        load_stream(PdfObj self) -> Buffer

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_load_stream(self)


    def load_stream_or_string_as_utf8(self):
        """
        load_stream_or_string_as_utf8(PdfObj self) -> char *

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_load_stream_or_string_as_utf8(self)


    def lookup_field(self, name):
        """
        lookup_field(PdfObj self, char const * name) -> PdfObj

        Parameters
        ----------
        name: char const *

        """
        return _mupdf.PdfObj_lookup_field(self, name)


    def lookup_number(self, needle):
        """
        lookup_number(PdfObj self, int needle) -> PdfObj

        Parameters
        ----------
        needle: int

        """
        return _mupdf.PdfObj_lookup_number(self, needle)


    def mark_obj(self):
        """
        mark_obj(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_mark_obj(self)


    def name_eq(self, b):
        """
        name_eq(PdfObj self, PdfObj b) -> int

        Parameters
        ----------
        b: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_name_eq(self, b)


    def new_crypt(self, id):
        """
        new_crypt(PdfObj self, PdfObj id) -> PdfCrypt

        Parameters
        ----------
        id: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_new_crypt(self, id)


    def new_utf8_from_pdf_stream_obj(self):
        """
        new_utf8_from_pdf_stream_obj(PdfObj self) -> char *

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_new_utf8_from_pdf_stream_obj(self)


    def new_utf8_from_pdf_string_obj(self):
        """
        new_utf8_from_pdf_string_obj(PdfObj self) -> char *

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_new_utf8_from_pdf_string_obj(self)


    def obj_is_dirty(self):
        """
        obj_is_dirty(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_obj_is_dirty(self)


    def obj_marked(self):
        """
        obj_marked(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_obj_marked(self)


    def obj_memo(self, bit, memo):
        """
        obj_memo(PdfObj self, int bit, int * memo) -> int

        Parameters
        ----------
        bit: int
        memo: int *

        """
        return _mupdf.PdfObj_obj_memo(self, bit, memo)


    def obj_parent_num(self):
        """
        obj_parent_num(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_obj_parent_num(self)


    def obj_refs(self):
        """
        obj_refs(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_obj_refs(self)


    def objcmp(self, b):
        """
        objcmp(PdfObj self, PdfObj b) -> int

        Parameters
        ----------
        b: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_objcmp(self, b)


    def objcmp_resolve(self, b):
        """
        objcmp_resolve(PdfObj self, PdfObj b) -> int

        Parameters
        ----------
        b: mupdf::PdfObj const &

        """
        return _mupdf.PdfObj_objcmp_resolve(self, b)


    def open_raw_stream(self):
        """
        open_raw_stream(PdfObj self) -> Stream

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_open_raw_stream(self)


    def open_stream(self):
        """
        open_stream(PdfObj self) -> Stream

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_open_stream(self)


    def page_obj_transform(self, page_mediabox, page_ctm):
        """
        page_obj_transform(PdfObj self, Rect page_mediabox, Matrix page_ctm)

        Parameters
        ----------
        page_mediabox: mupdf::Rect &
        page_ctm: mupdf::Matrix &

        """
        return _mupdf.PdfObj_page_obj_transform(self, page_mediabox, page_ctm)


    def resolve_indirect(self):
        """
        resolve_indirect(PdfObj self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_resolve_indirect(self)


    def resolve_indirect_chain(self):
        """
        resolve_indirect_chain(PdfObj self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_resolve_indirect_chain(self)


    def set_int(self, i):
        """
        set_int(PdfObj self, int64_t i)

        Parameters
        ----------
        i: int64_t

        """
        return _mupdf.PdfObj_set_int(self, i)


    def set_obj_memo(self, bit, memo):
        """
        set_obj_memo(PdfObj self, int bit, int memo)

        Parameters
        ----------
        bit: int
        memo: int

        """
        return _mupdf.PdfObj_set_obj_memo(self, bit, memo)


    def set_obj_parent(self, num):
        """
        set_obj_parent(PdfObj self, int num)

        Parameters
        ----------
        num: int

        """
        return _mupdf.PdfObj_set_obj_parent(self, num)


    def set_str_len(self, newlen):
        """
        set_str_len(PdfObj self, size_t newlen)

        Parameters
        ----------
        newlen: size_t

        """
        return _mupdf.PdfObj_set_str_len(self, newlen)


    def sort_dict(self):
        """
        sort_dict(PdfObj self)

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_sort_dict(self)


    def store_item(self, val, itemsize):
        """
        store_item(PdfObj self, void * val, size_t itemsize)

        Parameters
        ----------
        val: void *
        itemsize: size_t

        """
        return _mupdf.PdfObj_store_item(self, val, itemsize)


    def to_bool(self):
        """
        to_bool(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_to_bool(self)


    def to_date(self):
        """
        to_date(PdfObj self) -> int64_t

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_to_date(self)


    def to_gen(self):
        """
        to_gen(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_to_gen(self)


    def to_int(self):
        """
        to_int(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_to_int(self)


    def to_int64(self):
        """
        to_int64(PdfObj self) -> int64_t

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_to_int64(self)


    def to_matrix(self):
        """
        to_matrix(PdfObj self) -> Matrix

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_to_matrix(self)


    def to_name(self):
        """
        to_name(PdfObj self) -> char const *

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_to_name(self)


    def to_num(self):
        """
        to_num(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_to_num(self)


    def to_quad(self, offset):
        """
        to_quad(PdfObj self, int offset) -> Quad

        Parameters
        ----------
        offset: int

        """
        return _mupdf.PdfObj_to_quad(self, offset)


    def to_real(self):
        """
        to_real(PdfObj self) -> float

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_to_real(self)


    def to_rect(self):
        """
        to_rect(PdfObj self) -> Rect

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_to_rect(self)


    def to_str_buf(self):
        """
        to_str_buf(PdfObj self) -> char *

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_to_str_buf(self)


    def to_str_len(self):
        """
        to_str_len(PdfObj self) -> size_t

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_to_str_len(self)


    def to_string(self, sizep):
        """
        to_string(PdfObj self, size_t * sizep) -> char const *

        Parameters
        ----------
        sizep: size_t *

        """
        return _mupdf.PdfObj_to_string(self, sizep)


    def to_text_string(self):
        """
        to_text_string(PdfObj self) -> char const *

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_to_text_string(self)


    def unmark_obj(self):
        """
        unmark_obj(PdfObj self)

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_unmark_obj(self)


    def walk_tree(self, kid_name, arrive, leave, arg, names, values):
        """
        walk_tree(PdfObj self, PdfObj kid_name, void (*)(fz_context *,pdf_obj *,void *,pdf_obj **) arrive, void (*)(fz_context *,pdf_obj *,void *) leave, void * arg, PdfObj names, PdfObj values)

        Parameters
        ----------
        kid_name: mupdf::PdfObj const &
        arrive: void (*)(fz_context *,pdf_obj *,void *,pdf_obj **)
        leave: void (*)(fz_context *,pdf_obj *,void *)
        arg: void *
        names: mupdf::PdfObj &
        values: mupdf::PdfObj &

        """
        return _mupdf.PdfObj_walk_tree(self, kid_name, arrive, leave, arg, names, values)


    def xobject_bbox(self):
        """
        xobject_bbox(PdfObj self) -> Rect

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_xobject_bbox(self)


    def xobject_colorspace(self):
        """
        xobject_colorspace(PdfObj self) -> Colorspace

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_xobject_colorspace(self)


    def xobject_isolated(self):
        """
        xobject_isolated(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_xobject_isolated(self)


    def xobject_knockout(self):
        """
        xobject_knockout(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_xobject_knockout(self)


    def xobject_matrix(self):
        """
        xobject_matrix(PdfObj self) -> Matrix

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_xobject_matrix(self)


    def xobject_resources(self):
        """
        xobject_resources(PdfObj self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_xobject_resources(self)


    def xobject_transparency(self):
        """
        xobject_transparency(PdfObj self) -> int

        Parameters
        ----------
        self: mupdf::PdfObj *

        """
        return _mupdf.PdfObj_xobject_transparency(self)


    def __init__(self, *args):
        """
        __init__(mupdf::PdfObj self, PdfDocument doc, int initialcap) -> PdfObj

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        initialcap: int

        __init__(mupdf::PdfObj self, PdfDocument doc, int64_t time) -> PdfObj

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        time: int64_t

        __init__(mupdf::PdfObj self, PdfDocument doc, int num, int gen) -> PdfObj

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        num: int
        gen: int

        __init__(mupdf::PdfObj self, int64_t i) -> PdfObj

        Parameters
        ----------
        i: int64_t

        __init__(mupdf::PdfObj self, PdfDocument doc, Matrix mtx) -> PdfObj

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        mtx: mupdf::Matrix &

        __init__(mupdf::PdfObj self, char const * str) -> PdfObj

        Parameters
        ----------
        str: char const *

        __init__(mupdf::PdfObj self, float f) -> PdfObj

        Parameters
        ----------
        f: float

        __init__(mupdf::PdfObj self, PdfDocument doc, Rect rect) -> PdfObj

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        rect: mupdf::Rect &

        __init__(mupdf::PdfObj self, char const * str, size_t len) -> PdfObj

        Parameters
        ----------
        str: char const *
        len: size_t

        __init__(mupdf::PdfObj self, PdfDocument doc, Rect bbox, Matrix matrix, PdfObj res, Buffer buffer) -> PdfObj

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        bbox: mupdf::Rect &
        matrix: mupdf::Matrix &
        res: mupdf::PdfObj const &
        buffer: mupdf::Buffer const &

        __init__(mupdf::PdfObj self, PdfObj rhs) -> PdfObj

        Parameters
        ----------
        rhs: mupdf::PdfObj const &

        __init__(mupdf::PdfObj self, pdf_obj * internal) -> PdfObj

        Parameters
        ----------
        internal: pdf_obj *

        """
        this = _mupdf.new_PdfObj(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_PdfObj
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.PdfObj_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfObj_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfObj_m_internal_get, _mupdf.PdfObj_m_internal_set)
PdfObj_swigregister = _mupdf.PdfObj_swigregister
PdfObj_swigregister(PdfObj)

def PdfObj_new_text_string(s):
    """
    PdfObj_new_text_string(char const * s) -> PdfObj

    Parameters
    ----------
    s: char const *

    """
    return _mupdf.PdfObj_new_text_string(s)

def PdfObj_new_dict(doc, initialcap):
    """
    PdfObj_new_dict(PdfDocument doc, int initialcap) -> PdfObj

    Parameters
    ----------
    doc: mupdf::PdfDocument const &
    initialcap: int

    """
    return _mupdf.PdfObj_new_dict(doc, initialcap)

class PdfOcgDescriptor(_object):
    """Proxy of C++ mupdf::PdfOcgDescriptor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfOcgDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfOcgDescriptor, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfOcgDescriptor self, pdf_ocg_descriptor * internal) -> PdfOcgDescriptor

        Parameters
        ----------
        internal: pdf_ocg_descriptor *

        """
        this = _mupdf.new_PdfOcgDescriptor(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfOcgDescriptor_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfOcgDescriptor_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfOcgDescriptor_m_internal_get, _mupdf.PdfOcgDescriptor_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfOcgDescriptor
    __del__ = lambda self: None
PdfOcgDescriptor_swigregister = _mupdf.PdfOcgDescriptor_swigregister
PdfOcgDescriptor_swigregister(PdfOcgDescriptor)

class PdfPage(_object):
    """Proxy of C++ mupdf::PdfPage class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfPage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfPage, name)
    __repr__ = _swig_repr

    def bound_page(self):
        """
        bound_page(PdfPage self) -> Rect

        Parameters
        ----------
        self: mupdf::PdfPage *

        """
        return _mupdf.PdfPage_bound_page(self)


    def create_annot(self, type):
        """
        create_annot(PdfPage self, enum pdf_annot_type type) -> PdfAnnot

        Parameters
        ----------
        type: enum enum pdf_annot_type

        """
        return _mupdf.PdfPage_create_annot(self, type)


    def create_annot_raw(self, type):
        """
        create_annot_raw(PdfPage self, enum pdf_annot_type type) -> PdfAnnot

        Parameters
        ----------
        type: enum enum pdf_annot_type

        """
        return _mupdf.PdfPage_create_annot_raw(self, type)


    def create_link(self, bbox, uri):
        """
        create_link(PdfPage self, Rect bbox, char const * uri) -> Link

        Parameters
        ----------
        bbox: mupdf::Rect &
        uri: char const *

        """
        return _mupdf.PdfPage_create_link(self, bbox, uri)


    def create_signature_widget(self, name):
        """
        create_signature_widget(PdfPage self, char * name) -> PdfAnnot

        Parameters
        ----------
        name: char *

        """
        return _mupdf.PdfPage_create_signature_widget(self, name)


    def delete_annot(self, annot):
        """
        delete_annot(PdfPage self, PdfAnnot annot)

        Parameters
        ----------
        annot: mupdf::PdfAnnot const &

        """
        return _mupdf.PdfPage_delete_annot(self, annot)


    def first_annot(self):
        """
        first_annot(PdfPage self) -> PdfAnnot

        Parameters
        ----------
        self: mupdf::PdfPage *

        """
        return _mupdf.PdfPage_first_annot(self)


    def first_widget(self):
        """
        first_widget(PdfPage self) -> PdfAnnot

        Parameters
        ----------
        self: mupdf::PdfPage *

        """
        return _mupdf.PdfPage_first_widget(self)


    def load_links(self):
        """
        load_links(PdfPage self) -> Link

        Parameters
        ----------
        self: mupdf::PdfPage *

        """
        return _mupdf.PdfPage_load_links(self)


    def new_pixmap_from_page_contents_with_separations_and_usage(self, ctm, cs, seps, alpha, usage):
        """
        new_pixmap_from_page_contents_with_separations_and_usage(PdfPage self, Matrix ctm, Colorspace cs, Separations seps, int alpha, char const * usage) -> Pixmap

        Parameters
        ----------
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        seps: mupdf::Separations const &
        alpha: int
        usage: char const *

        """
        return _mupdf.PdfPage_new_pixmap_from_page_contents_with_separations_and_usage(self, ctm, cs, seps, alpha, usage)


    def new_pixmap_from_page_contents_with_usage(self, ctm, cs, alpha, usage):
        """
        new_pixmap_from_page_contents_with_usage(PdfPage self, Matrix ctm, Colorspace cs, int alpha, char const * usage) -> Pixmap

        Parameters
        ----------
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        alpha: int
        usage: char const *

        """
        return _mupdf.PdfPage_new_pixmap_from_page_contents_with_usage(self, ctm, cs, alpha, usage)


    def new_pixmap_from_page_with_separations_and_usage(self, ctm, cs, seps, alpha, usage):
        """
        new_pixmap_from_page_with_separations_and_usage(PdfPage self, Matrix ctm, Colorspace cs, Separations seps, int alpha, char const * usage) -> Pixmap

        Parameters
        ----------
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        seps: mupdf::Separations const &
        alpha: int
        usage: char const *

        """
        return _mupdf.PdfPage_new_pixmap_from_page_with_separations_and_usage(self, ctm, cs, seps, alpha, usage)


    def new_pixmap_from_page_with_usage(self, ctm, cs, alpha, usage):
        """
        new_pixmap_from_page_with_usage(PdfPage self, Matrix ctm, Colorspace cs, int alpha, char const * usage) -> Pixmap

        Parameters
        ----------
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        alpha: int
        usage: char const *

        """
        return _mupdf.PdfPage_new_pixmap_from_page_with_usage(self, ctm, cs, alpha, usage)


    def page_contents(self):
        """
        page_contents(PdfPage self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfPage *

        """
        return _mupdf.PdfPage_page_contents(self)


    def page_event_close(self):
        """
        page_event_close(PdfPage self)

        Parameters
        ----------
        self: mupdf::PdfPage *

        """
        return _mupdf.PdfPage_page_event_close(self)


    def page_event_open(self):
        """
        page_event_open(PdfPage self)

        Parameters
        ----------
        self: mupdf::PdfPage *

        """
        return _mupdf.PdfPage_page_event_open(self)


    def page_group(self):
        """
        page_group(PdfPage self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfPage *

        """
        return _mupdf.PdfPage_page_group(self)


    def page_presentation(self, transition, duration):
        """
        page_presentation(PdfPage self, Transition transition, float * duration) -> Transition

        Parameters
        ----------
        transition: mupdf::Transition &
        duration: float *

        """
        return _mupdf.PdfPage_page_presentation(self, transition, duration)


    def page_resources(self):
        """
        page_resources(PdfPage self) -> PdfObj

        Parameters
        ----------
        self: mupdf::PdfPage *

        """
        return _mupdf.PdfPage_page_resources(self)


    def page_separations(self):
        """
        page_separations(PdfPage self) -> Separations

        Parameters
        ----------
        self: mupdf::PdfPage *

        """
        return _mupdf.PdfPage_page_separations(self)


    def page_transform(self, mediabox, ctm):
        """
        page_transform(PdfPage self, Rect mediabox, Matrix ctm)

        Parameters
        ----------
        mediabox: mupdf::Rect &
        ctm: mupdf::Matrix &

        """
        return _mupdf.PdfPage_page_transform(self, mediabox, ctm)


    def run_page(self, dev, ctm, cookie):
        """
        run_page(PdfPage self, Device dev, Matrix ctm, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        ctm: mupdf::Matrix &
        cookie: mupdf::Cookie &

        """
        return _mupdf.PdfPage_run_page(self, dev, ctm, cookie)


    def run_page_annots(self, dev, ctm, cookie):
        """
        run_page_annots(PdfPage self, Device dev, Matrix ctm, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        ctm: mupdf::Matrix &
        cookie: mupdf::Cookie &

        """
        return _mupdf.PdfPage_run_page_annots(self, dev, ctm, cookie)


    def run_page_annots_with_usage(self, dev, ctm, usage, cookie):
        """
        run_page_annots_with_usage(PdfPage self, Device dev, Matrix ctm, char const * usage, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        ctm: mupdf::Matrix &
        usage: char const *
        cookie: mupdf::Cookie &

        """
        return _mupdf.PdfPage_run_page_annots_with_usage(self, dev, ctm, usage, cookie)


    def run_page_contents(self, dev, ctm, cookie):
        """
        run_page_contents(PdfPage self, Device dev, Matrix ctm, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        ctm: mupdf::Matrix &
        cookie: mupdf::Cookie &

        """
        return _mupdf.PdfPage_run_page_contents(self, dev, ctm, cookie)


    def run_page_contents_with_usage(self, dev, ctm, usage, cookie):
        """
        run_page_contents_with_usage(PdfPage self, Device dev, Matrix ctm, char const * usage, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        ctm: mupdf::Matrix &
        usage: char const *
        cookie: mupdf::Cookie &

        """
        return _mupdf.PdfPage_run_page_contents_with_usage(self, dev, ctm, usage, cookie)


    def run_page_widgets(self, dev, ctm, cookie):
        """
        run_page_widgets(PdfPage self, Device dev, Matrix ctm, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        ctm: mupdf::Matrix &
        cookie: mupdf::Cookie &

        """
        return _mupdf.PdfPage_run_page_widgets(self, dev, ctm, cookie)


    def run_page_widgets_with_usage(self, dev, ctm, usage, cookie):
        """
        run_page_widgets_with_usage(PdfPage self, Device dev, Matrix ctm, char const * usage, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        ctm: mupdf::Matrix &
        usage: char const *
        cookie: mupdf::Cookie &

        """
        return _mupdf.PdfPage_run_page_widgets_with_usage(self, dev, ctm, usage, cookie)


    def run_page_with_usage(self, dev, ctm, usage, cookie):
        """
        run_page_with_usage(PdfPage self, Device dev, Matrix ctm, char const * usage, Cookie cookie)

        Parameters
        ----------
        dev: mupdf::Device const &
        ctm: mupdf::Matrix &
        usage: char const *
        cookie: mupdf::Cookie &

        """
        return _mupdf.PdfPage_run_page_with_usage(self, dev, ctm, usage, cookie)


    def update_page(self):
        """
        update_page(PdfPage self) -> int

        Parameters
        ----------
        self: mupdf::PdfPage *

        """
        return _mupdf.PdfPage_update_page(self)


    def __init__(self, internal):
        """
        __init__(mupdf::PdfPage self, pdf_page * internal) -> PdfPage

        Parameters
        ----------
        internal: pdf_page *

        """
        this = _mupdf.new_PdfPage(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfPage_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfPage_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfPage_m_internal_get, _mupdf.PdfPage_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfPage
    __del__ = lambda self: None
PdfPage_swigregister = _mupdf.PdfPage_swigregister
PdfPage_swigregister(PdfPage)

class PdfPattern(_object):
    """Proxy of C++ mupdf::PdfPattern class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfPattern, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfPattern, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::PdfPattern self, PdfPattern rhs) -> PdfPattern

        Parameters
        ----------
        rhs: mupdf::PdfPattern const &

        __init__(mupdf::PdfPattern self, pdf_pattern internal) -> PdfPattern

        Parameters
        ----------
        internal: pdf_pattern *

        """
        this = _mupdf.new_PdfPattern(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_PdfPattern
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.PdfPattern_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfPattern_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfPattern_m_internal_get, _mupdf.PdfPattern_m_internal_set)
PdfPattern_swigregister = _mupdf.PdfPattern_swigregister
PdfPattern_swigregister(PdfPattern)

class PdfPkcs7DistinguishedName(_object):
    """Proxy of C++ mupdf::PdfPkcs7DistinguishedName class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfPkcs7DistinguishedName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfPkcs7DistinguishedName, name)
    __repr__ = _swig_repr

    def signature_drop_distinguished_name(self):
        """
        signature_drop_distinguished_name(PdfPkcs7DistinguishedName self)

        Parameters
        ----------
        self: mupdf::PdfPkcs7DistinguishedName *

        """
        return _mupdf.PdfPkcs7DistinguishedName_signature_drop_distinguished_name(self)


    def signature_format_distinguished_name(self):
        """
        signature_format_distinguished_name(PdfPkcs7DistinguishedName self) -> char *

        Parameters
        ----------
        self: mupdf::PdfPkcs7DistinguishedName *

        """
        return _mupdf.PdfPkcs7DistinguishedName_signature_format_distinguished_name(self)


    def __init__(self, internal):
        """
        __init__(mupdf::PdfPkcs7DistinguishedName self, pdf_pkcs7_distinguished_name internal) -> PdfPkcs7DistinguishedName

        Parameters
        ----------
        internal: pdf_pkcs7_distinguished_name *

        """
        this = _mupdf.new_PdfPkcs7DistinguishedName(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfPkcs7DistinguishedName_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfPkcs7DistinguishedName_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfPkcs7DistinguishedName_m_internal_get, _mupdf.PdfPkcs7DistinguishedName_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfPkcs7DistinguishedName
    __del__ = lambda self: None
PdfPkcs7DistinguishedName_swigregister = _mupdf.PdfPkcs7DistinguishedName_swigregister
PdfPkcs7DistinguishedName_swigregister(PdfPkcs7DistinguishedName)

class PdfPkcs7Signer(_object):
    """Proxy of C++ mupdf::PdfPkcs7Signer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfPkcs7Signer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfPkcs7Signer, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfPkcs7Signer self, pdf_pkcs7_signer * internal) -> PdfPkcs7Signer

        Parameters
        ----------
        internal: pdf_pkcs7_signer *

        """
        this = _mupdf.new_PdfPkcs7Signer(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfPkcs7Signer_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfPkcs7Signer_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfPkcs7Signer_m_internal_get, _mupdf.PdfPkcs7Signer_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfPkcs7Signer
    __del__ = lambda self: None
PdfPkcs7Signer_swigregister = _mupdf.PdfPkcs7Signer_swigregister
PdfPkcs7Signer_swigregister(PdfPkcs7Signer)

class PdfPkcs7Verifier(_object):
    """Proxy of C++ mupdf::PdfPkcs7Verifier class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfPkcs7Verifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfPkcs7Verifier, name)
    __repr__ = _swig_repr

    def check_certificate(self, doc, signature):
        """
        check_certificate(PdfPkcs7Verifier self, PdfDocument doc, PdfObj signature) -> pdf_signature_error

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        signature: mupdf::PdfObj const &

        """
        return _mupdf.PdfPkcs7Verifier_check_certificate(self, doc, signature)


    def check_digest(self, doc, signature):
        """
        check_digest(PdfPkcs7Verifier self, PdfDocument doc, PdfObj signature) -> pdf_signature_error

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        signature: mupdf::PdfObj const &

        """
        return _mupdf.PdfPkcs7Verifier_check_digest(self, doc, signature)


    def check_signature(self, doc, signature, ebuf, ebufsize):
        """
        check_signature(PdfPkcs7Verifier self, PdfDocument doc, PdfObj signature, char * ebuf, size_t ebufsize) -> int

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        signature: mupdf::PdfObj const &
        ebuf: char *
        ebufsize: size_t

        """
        return _mupdf.PdfPkcs7Verifier_check_signature(self, doc, signature, ebuf, ebufsize)


    def check_widget_certificate(self, widget):
        """
        check_widget_certificate(PdfPkcs7Verifier self, PdfAnnot widget) -> pdf_signature_error

        Parameters
        ----------
        widget: mupdf::PdfAnnot const &

        """
        return _mupdf.PdfPkcs7Verifier_check_widget_certificate(self, widget)


    def check_widget_digest(self, widget):
        """
        check_widget_digest(PdfPkcs7Verifier self, PdfAnnot widget) -> pdf_signature_error

        Parameters
        ----------
        widget: mupdf::PdfAnnot const &

        """
        return _mupdf.PdfPkcs7Verifier_check_widget_digest(self, widget)


    def signature_get_signatory(self, doc, signature):
        """
        signature_get_signatory(PdfPkcs7Verifier self, PdfDocument doc, PdfObj signature) -> PdfPkcs7DistinguishedName

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        signature: mupdf::PdfObj const &

        """
        return _mupdf.PdfPkcs7Verifier_signature_get_signatory(self, doc, signature)


    def signature_get_widget_signatory(self, widget):
        """
        signature_get_widget_signatory(PdfPkcs7Verifier self, PdfAnnot widget) -> PdfPkcs7DistinguishedName

        Parameters
        ----------
        widget: mupdf::PdfAnnot const &

        """
        return _mupdf.PdfPkcs7Verifier_signature_get_widget_signatory(self, widget)


    def __init__(self, internal):
        """
        __init__(mupdf::PdfPkcs7Verifier self, pdf_pkcs7_verifier * internal) -> PdfPkcs7Verifier

        Parameters
        ----------
        internal: pdf_pkcs7_verifier *

        """
        this = _mupdf.new_PdfPkcs7Verifier(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfPkcs7Verifier_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfPkcs7Verifier_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfPkcs7Verifier_m_internal_get, _mupdf.PdfPkcs7Verifier_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfPkcs7Verifier
    __del__ = lambda self: None
PdfPkcs7Verifier_swigregister = _mupdf.PdfPkcs7Verifier_swigregister
PdfPkcs7Verifier_swigregister(PdfPkcs7Verifier)

class PdfProcessor(_object):
    """Proxy of C++ mupdf::PdfProcessor class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfProcessor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfProcessor, name)
    __repr__ = _swig_repr

    def close_processor(self):
        """
        close_processor(PdfProcessor self)

        Parameters
        ----------
        self: mupdf::PdfProcessor *

        """
        return _mupdf.PdfProcessor_close_processor(self)


    def process_annot(self, annot, cookie):
        """
        process_annot(PdfProcessor self, PdfAnnot annot, Cookie cookie)

        Parameters
        ----------
        annot: mupdf::PdfAnnot const &
        cookie: mupdf::Cookie &

        """
        return _mupdf.PdfProcessor_process_annot(self, annot, cookie)


    def process_contents(self, doc, obj, res, cookie):
        """
        process_contents(PdfProcessor self, PdfDocument doc, PdfObj obj, PdfObj res, Cookie cookie)

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        obj: mupdf::PdfObj const &
        res: mupdf::PdfObj const &
        cookie: mupdf::Cookie &

        """
        return _mupdf.PdfProcessor_process_contents(self, doc, obj, res, cookie)


    def process_glyph(self, doc, resources, contents):
        """
        process_glyph(PdfProcessor self, PdfDocument doc, PdfObj resources, Buffer contents)

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        resources: mupdf::PdfObj const &
        contents: mupdf::Buffer const &

        """
        return _mupdf.PdfProcessor_process_glyph(self, doc, resources, contents)


    def __init__(self, *args):
        """
        __init__(mupdf::PdfProcessor self, Buffer buffer, int ahxencode) -> PdfProcessor

        Parameters
        ----------
        buffer: mupdf::Buffer const &
        ahxencode: int

        __init__(mupdf::PdfProcessor self, PdfDocument doc, PdfProcessor chain, PdfObj old_res, PdfObj new_res, int struct_parents, Matrix transform, PdfFilterOptions filter) -> PdfProcessor

        Parameters
        ----------
        doc: mupdf::PdfDocument const &
        chain: mupdf::PdfProcessor const &
        old_res: mupdf::PdfObj const &
        new_res: mupdf::PdfObj const &
        struct_parents: int
        transform: mupdf::Matrix &
        filter: mupdf::PdfFilterOptions const &

        __init__(mupdf::PdfProcessor self, Output out, int ahxencode) -> PdfProcessor

        Parameters
        ----------
        out: mupdf::Output const &
        ahxencode: int

        __init__(mupdf::PdfProcessor self, Device dev, Matrix ctm, char const * usage, PdfGstate gstate, DefaultColorspaces default_cs, Cookie cookie) -> PdfProcessor

        Parameters
        ----------
        dev: mupdf::Device const &
        ctm: mupdf::Matrix &
        usage: char const *
        gstate: mupdf::PdfGstate const &
        default_cs: mupdf::DefaultColorspaces const &
        cookie: mupdf::Cookie &

        __init__(mupdf::PdfProcessor self, pdf_processor * internal) -> PdfProcessor

        Parameters
        ----------
        internal: pdf_processor *

        """
        this = _mupdf.new_PdfProcessor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_PdfProcessor
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.PdfProcessor_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfProcessor_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfProcessor_m_internal_get, _mupdf.PdfProcessor_m_internal_set)
PdfProcessor_swigregister = _mupdf.PdfProcessor_swigregister
PdfProcessor_swigregister(PdfProcessor)

class PdfRange(_object):
    """Proxy of C++ mupdf::PdfRange class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfRange, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfRange self, pdf_range internal) -> PdfRange

        Parameters
        ----------
        internal: pdf_range *

        """
        this = _mupdf.new_PdfRange(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfRange_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfRange_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfRange_m_internal_get, _mupdf.PdfRange_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfRange
    __del__ = lambda self: None
PdfRange_swigregister = _mupdf.PdfRange_swigregister
PdfRange_swigregister(PdfRange)

class PdfRedactOptions(_object):
    """Proxy of C++ mupdf::PdfRedactOptions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfRedactOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfRedactOptions, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfRedactOptions self, pdf_redact_options internal) -> PdfRedactOptions

        Parameters
        ----------
        internal: pdf_redact_options *

        """
        this = _mupdf.new_PdfRedactOptions(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfRedactOptions_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfRedactOptions_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfRedactOptions_m_internal_get, _mupdf.PdfRedactOptions_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfRedactOptions
    __del__ = lambda self: None
PdfRedactOptions_swigregister = _mupdf.PdfRedactOptions_swigregister
PdfRedactOptions_swigregister(PdfRedactOptions)

class PdfRevPageMap(_object):
    """Proxy of C++ mupdf::PdfRevPageMap class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfRevPageMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfRevPageMap, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfRevPageMap self, pdf_rev_page_map internal) -> PdfRevPageMap

        Parameters
        ----------
        internal: pdf_rev_page_map *

        """
        this = _mupdf.new_PdfRevPageMap(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfRevPageMap_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfRevPageMap_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfRevPageMap_m_internal_get, _mupdf.PdfRevPageMap_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfRevPageMap
    __del__ = lambda self: None
PdfRevPageMap_swigregister = _mupdf.PdfRevPageMap_swigregister
PdfRevPageMap_swigregister(PdfRevPageMap)

class PdfTextObjectState(_object):
    """Proxy of C++ mupdf::PdfTextObjectState class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfTextObjectState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfTextObjectState, name)
    __repr__ = _swig_repr

    def tos_get_text(self):
        """
        tos_get_text(PdfTextObjectState self) -> Text

        Parameters
        ----------
        self: mupdf::PdfTextObjectState *

        """
        return _mupdf.PdfTextObjectState_tos_get_text(self)


    def tos_make_trm(self, text, fontdesc, cid, trm):
        """
        tos_make_trm(PdfTextObjectState self, PdfTextState text, PdfFontDesc fontdesc, int cid, Matrix trm) -> int

        Parameters
        ----------
        text: mupdf::PdfTextState const &
        fontdesc: mupdf::PdfFontDesc const &
        cid: int
        trm: mupdf::Matrix &

        """
        return _mupdf.PdfTextObjectState_tos_make_trm(self, text, fontdesc, cid, trm)


    def tos_move_after_char(self):
        """
        tos_move_after_char(PdfTextObjectState self)

        Parameters
        ----------
        self: mupdf::PdfTextObjectState *

        """
        return _mupdf.PdfTextObjectState_tos_move_after_char(self)


    def tos_newline(self, leading):
        """
        tos_newline(PdfTextObjectState self, float leading)

        Parameters
        ----------
        leading: float

        """
        return _mupdf.PdfTextObjectState_tos_newline(self, leading)


    def tos_reset(self, render):
        """
        tos_reset(PdfTextObjectState self, int render)

        Parameters
        ----------
        render: int

        """
        return _mupdf.PdfTextObjectState_tos_reset(self, render)


    def tos_set_matrix(self, a, b, c, d, e, f):
        """
        tos_set_matrix(PdfTextObjectState self, float a, float b, float c, float d, float e, float f)

        Parameters
        ----------
        a: float
        b: float
        c: float
        d: float
        e: float
        f: float

        """
        return _mupdf.PdfTextObjectState_tos_set_matrix(self, a, b, c, d, e, f)


    def tos_translate(self, tx, ty):
        """
        tos_translate(PdfTextObjectState self, float tx, float ty)

        Parameters
        ----------
        tx: float
        ty: float

        """
        return _mupdf.PdfTextObjectState_tos_translate(self, tx, ty)


    def __init__(self, internal):
        """
        __init__(mupdf::PdfTextObjectState self, pdf_text_object_state internal) -> PdfTextObjectState

        Parameters
        ----------
        internal: pdf_text_object_state *

        """
        this = _mupdf.new_PdfTextObjectState(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfTextObjectState_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfTextObjectState_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfTextObjectState_m_internal_get, _mupdf.PdfTextObjectState_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfTextObjectState
    __del__ = lambda self: None
PdfTextObjectState_swigregister = _mupdf.PdfTextObjectState_swigregister
PdfTextObjectState_swigregister(PdfTextObjectState)

class PdfTextState(_object):
    """Proxy of C++ mupdf::PdfTextState class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfTextState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfTextState, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfTextState self, pdf_text_state internal) -> PdfTextState

        Parameters
        ----------
        internal: pdf_text_state *

        """
        this = _mupdf.new_PdfTextState(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfTextState_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfTextState_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfTextState_m_internal_get, _mupdf.PdfTextState_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfTextState
    __del__ = lambda self: None
PdfTextState_swigregister = _mupdf.PdfTextState_swigregister
PdfTextState_swigregister(PdfTextState)

class PdfUnsavedSig(_object):
    """Proxy of C++ mupdf::PdfUnsavedSig class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfUnsavedSig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfUnsavedSig, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfUnsavedSig self, pdf_unsaved_sig internal) -> PdfUnsavedSig

        Parameters
        ----------
        internal: pdf_unsaved_sig *

        """
        this = _mupdf.new_PdfUnsavedSig(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfUnsavedSig_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfUnsavedSig_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfUnsavedSig_m_internal_get, _mupdf.PdfUnsavedSig_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfUnsavedSig
    __del__ = lambda self: None
PdfUnsavedSig_swigregister = _mupdf.PdfUnsavedSig_swigregister
PdfUnsavedSig_swigregister(PdfUnsavedSig)

class PdfVmtx(_object):
    """Proxy of C++ mupdf::PdfVmtx class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfVmtx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfVmtx, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfVmtx self, pdf_vmtx internal) -> PdfVmtx

        Parameters
        ----------
        internal: pdf_vmtx *

        """
        this = _mupdf.new_PdfVmtx(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfVmtx_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfVmtx_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfVmtx_m_internal_get, _mupdf.PdfVmtx_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfVmtx
    __del__ = lambda self: None
PdfVmtx_swigregister = _mupdf.PdfVmtx_swigregister
PdfVmtx_swigregister(PdfVmtx)

class PdfWriteOptions(_object):
    """Proxy of C++ mupdf::PdfWriteOptions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfWriteOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfWriteOptions, name)
    __repr__ = _swig_repr

    def parse_write_options(self, args):
        """
        parse_write_options(PdfWriteOptions self, char const * args) -> PdfWriteOptions

        Parameters
        ----------
        args: char const *

        """
        return _mupdf.PdfWriteOptions_parse_write_options(self, args)


    def __init__(self, *args):
        """
        __init__(mupdf::PdfWriteOptions self) -> PdfWriteOptions
        __init__(mupdf::PdfWriteOptions self, PdfWriteOptions rhs) -> PdfWriteOptions

        Parameters
        ----------
        rhs: mupdf::PdfWriteOptions const &

        __init__(mupdf::PdfWriteOptions self, pdf_write_options internal) -> PdfWriteOptions

        Parameters
        ----------
        internal: pdf_write_options const *

        __init__(mupdf::PdfWriteOptions self, pdf_write_options internal) -> PdfWriteOptions

        Parameters
        ----------
        internal: pdf_write_options const

        """
        this = _mupdf.new_PdfWriteOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def internal(self, *args):
        """
        internal(PdfWriteOptions self) -> pdf_write_options
        internal(PdfWriteOptions self) -> pdf_write_options

        Parameters
        ----------
        self: mupdf::PdfWriteOptions const *

        """
        return _mupdf.PdfWriteOptions_internal(self, *args)

    __swig_setmethods__["do_incremental"] = _mupdf.PdfWriteOptions_do_incremental_set
    __swig_getmethods__["do_incremental"] = _mupdf.PdfWriteOptions_do_incremental_get
    if _newclass:
        do_incremental = _swig_property(_mupdf.PdfWriteOptions_do_incremental_get, _mupdf.PdfWriteOptions_do_incremental_set)
    __swig_setmethods__["do_pretty"] = _mupdf.PdfWriteOptions_do_pretty_set
    __swig_getmethods__["do_pretty"] = _mupdf.PdfWriteOptions_do_pretty_get
    if _newclass:
        do_pretty = _swig_property(_mupdf.PdfWriteOptions_do_pretty_get, _mupdf.PdfWriteOptions_do_pretty_set)
    __swig_setmethods__["do_ascii"] = _mupdf.PdfWriteOptions_do_ascii_set
    __swig_getmethods__["do_ascii"] = _mupdf.PdfWriteOptions_do_ascii_get
    if _newclass:
        do_ascii = _swig_property(_mupdf.PdfWriteOptions_do_ascii_get, _mupdf.PdfWriteOptions_do_ascii_set)
    __swig_setmethods__["do_compress"] = _mupdf.PdfWriteOptions_do_compress_set
    __swig_getmethods__["do_compress"] = _mupdf.PdfWriteOptions_do_compress_get
    if _newclass:
        do_compress = _swig_property(_mupdf.PdfWriteOptions_do_compress_get, _mupdf.PdfWriteOptions_do_compress_set)
    __swig_setmethods__["do_compress_images"] = _mupdf.PdfWriteOptions_do_compress_images_set
    __swig_getmethods__["do_compress_images"] = _mupdf.PdfWriteOptions_do_compress_images_get
    if _newclass:
        do_compress_images = _swig_property(_mupdf.PdfWriteOptions_do_compress_images_get, _mupdf.PdfWriteOptions_do_compress_images_set)
    __swig_setmethods__["do_compress_fonts"] = _mupdf.PdfWriteOptions_do_compress_fonts_set
    __swig_getmethods__["do_compress_fonts"] = _mupdf.PdfWriteOptions_do_compress_fonts_get
    if _newclass:
        do_compress_fonts = _swig_property(_mupdf.PdfWriteOptions_do_compress_fonts_get, _mupdf.PdfWriteOptions_do_compress_fonts_set)
    __swig_setmethods__["do_decompress"] = _mupdf.PdfWriteOptions_do_decompress_set
    __swig_getmethods__["do_decompress"] = _mupdf.PdfWriteOptions_do_decompress_get
    if _newclass:
        do_decompress = _swig_property(_mupdf.PdfWriteOptions_do_decompress_get, _mupdf.PdfWriteOptions_do_decompress_set)
    __swig_setmethods__["do_garbage"] = _mupdf.PdfWriteOptions_do_garbage_set
    __swig_getmethods__["do_garbage"] = _mupdf.PdfWriteOptions_do_garbage_get
    if _newclass:
        do_garbage = _swig_property(_mupdf.PdfWriteOptions_do_garbage_get, _mupdf.PdfWriteOptions_do_garbage_set)
    __swig_setmethods__["do_linear"] = _mupdf.PdfWriteOptions_do_linear_set
    __swig_getmethods__["do_linear"] = _mupdf.PdfWriteOptions_do_linear_get
    if _newclass:
        do_linear = _swig_property(_mupdf.PdfWriteOptions_do_linear_get, _mupdf.PdfWriteOptions_do_linear_set)
    __swig_setmethods__["do_clean"] = _mupdf.PdfWriteOptions_do_clean_set
    __swig_getmethods__["do_clean"] = _mupdf.PdfWriteOptions_do_clean_get
    if _newclass:
        do_clean = _swig_property(_mupdf.PdfWriteOptions_do_clean_get, _mupdf.PdfWriteOptions_do_clean_set)
    __swig_setmethods__["do_sanitize"] = _mupdf.PdfWriteOptions_do_sanitize_set
    __swig_getmethods__["do_sanitize"] = _mupdf.PdfWriteOptions_do_sanitize_get
    if _newclass:
        do_sanitize = _swig_property(_mupdf.PdfWriteOptions_do_sanitize_get, _mupdf.PdfWriteOptions_do_sanitize_set)
    __swig_setmethods__["do_appearance"] = _mupdf.PdfWriteOptions_do_appearance_set
    __swig_getmethods__["do_appearance"] = _mupdf.PdfWriteOptions_do_appearance_get
    if _newclass:
        do_appearance = _swig_property(_mupdf.PdfWriteOptions_do_appearance_get, _mupdf.PdfWriteOptions_do_appearance_set)
    __swig_setmethods__["do_encrypt"] = _mupdf.PdfWriteOptions_do_encrypt_set
    __swig_getmethods__["do_encrypt"] = _mupdf.PdfWriteOptions_do_encrypt_get
    if _newclass:
        do_encrypt = _swig_property(_mupdf.PdfWriteOptions_do_encrypt_get, _mupdf.PdfWriteOptions_do_encrypt_set)
    __swig_setmethods__["dont_regenerate_id"] = _mupdf.PdfWriteOptions_dont_regenerate_id_set
    __swig_getmethods__["dont_regenerate_id"] = _mupdf.PdfWriteOptions_dont_regenerate_id_get
    if _newclass:
        dont_regenerate_id = _swig_property(_mupdf.PdfWriteOptions_dont_regenerate_id_get, _mupdf.PdfWriteOptions_dont_regenerate_id_set)
    __swig_setmethods__["permissions"] = _mupdf.PdfWriteOptions_permissions_set
    __swig_getmethods__["permissions"] = _mupdf.PdfWriteOptions_permissions_get
    if _newclass:
        permissions = _swig_property(_mupdf.PdfWriteOptions_permissions_get, _mupdf.PdfWriteOptions_permissions_set)
    __swig_setmethods__["opwd_utf8"] = _mupdf.PdfWriteOptions_opwd_utf8_set
    __swig_getmethods__["opwd_utf8"] = _mupdf.PdfWriteOptions_opwd_utf8_get
    if _newclass:
        opwd_utf8 = _swig_property(_mupdf.PdfWriteOptions_opwd_utf8_get, _mupdf.PdfWriteOptions_opwd_utf8_set)
    __swig_setmethods__["upwd_utf8"] = _mupdf.PdfWriteOptions_upwd_utf8_set
    __swig_getmethods__["upwd_utf8"] = _mupdf.PdfWriteOptions_upwd_utf8_get
    if _newclass:
        upwd_utf8 = _swig_property(_mupdf.PdfWriteOptions_upwd_utf8_get, _mupdf.PdfWriteOptions_upwd_utf8_set)
    __swig_setmethods__["do_snapshot"] = _mupdf.PdfWriteOptions_do_snapshot_set
    __swig_getmethods__["do_snapshot"] = _mupdf.PdfWriteOptions_do_snapshot_get
    if _newclass:
        do_snapshot = _swig_property(_mupdf.PdfWriteOptions_do_snapshot_get, _mupdf.PdfWriteOptions_do_snapshot_set)

    def to_string(self):
        """
        to_string(PdfWriteOptions self) -> std::string

        Parameters
        ----------
        self: mupdf::PdfWriteOptions *

        """
        return _mupdf.PdfWriteOptions_to_string(self)

    __swig_destroy__ = _mupdf.delete_PdfWriteOptions
    __del__ = lambda self: None
PdfWriteOptions_swigregister = _mupdf.PdfWriteOptions_swigregister
PdfWriteOptions_swigregister(PdfWriteOptions)

class PdfXrange(_object):
    """Proxy of C++ mupdf::PdfXrange class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfXrange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfXrange, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfXrange self, pdf_xrange internal) -> PdfXrange

        Parameters
        ----------
        internal: pdf_xrange *

        """
        this = _mupdf.new_PdfXrange(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfXrange_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfXrange_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfXrange_m_internal_get, _mupdf.PdfXrange_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfXrange
    __del__ = lambda self: None
PdfXrange_swigregister = _mupdf.PdfXrange_swigregister
PdfXrange_swigregister(PdfXrange)

class PdfXref(_object):
    """Proxy of C++ mupdf::PdfXref class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfXref, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfXref, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::PdfXref self, PdfDocument doc) -> PdfXref

        Parameters
        ----------
        doc: mupdf::PdfDocument const &

        __init__(mupdf::PdfXref self, pdf_xref * internal) -> PdfXref

        Parameters
        ----------
        internal: pdf_xref *

        """
        this = _mupdf.new_PdfXref(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfXref_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfXref_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfXref_m_internal_get, _mupdf.PdfXref_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfXref
    __del__ = lambda self: None
PdfXref_swigregister = _mupdf.PdfXref_swigregister
PdfXref_swigregister(PdfXref)

class PdfXrefEntry(_object):
    """Proxy of C++ mupdf::PdfXrefEntry class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfXrefEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfXrefEntry, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfXrefEntry self, pdf_xref_entry internal) -> PdfXrefEntry

        Parameters
        ----------
        internal: pdf_xref_entry *

        """
        this = _mupdf.new_PdfXrefEntry(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfXrefEntry_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfXrefEntry_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfXrefEntry_m_internal_get, _mupdf.PdfXrefEntry_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfXrefEntry
    __del__ = lambda self: None
PdfXrefEntry_swigregister = _mupdf.PdfXrefEntry_swigregister
PdfXrefEntry_swigregister(PdfXrefEntry)

class PdfXrefSubsec(_object):
    """Proxy of C++ mupdf::PdfXrefSubsec class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfXrefSubsec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfXrefSubsec, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PdfXrefSubsec self, pdf_xref_subsec internal) -> PdfXrefSubsec

        Parameters
        ----------
        internal: pdf_xref_subsec *

        """
        this = _mupdf.new_PdfXrefSubsec(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfXrefSubsec_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfXrefSubsec_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfXrefSubsec_m_internal_get, _mupdf.PdfXrefSubsec_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfXrefSubsec
    __del__ = lambda self: None
PdfXrefSubsec_swigregister = _mupdf.PdfXrefSubsec_swigregister
PdfXrefSubsec_swigregister(PdfXrefSubsec)

class PdfocrOptions(_object):
    """Proxy of C++ mupdf::PdfocrOptions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PdfocrOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PdfocrOptions, name)
    __repr__ = _swig_repr

    def parse_pdfocr_options(self, args):
        """
        parse_pdfocr_options(PdfocrOptions self, char const * args) -> PdfocrOptions

        Parameters
        ----------
        args: char const *

        """
        return _mupdf.PdfocrOptions_parse_pdfocr_options(self, args)


    def __init__(self, internal):
        """
        __init__(mupdf::PdfocrOptions self, fz_pdfocr_options internal) -> PdfocrOptions

        Parameters
        ----------
        internal: fz_pdfocr_options *

        """
        this = _mupdf.new_PdfocrOptions(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PdfocrOptions_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PdfocrOptions_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PdfocrOptions_m_internal_get, _mupdf.PdfocrOptions_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PdfocrOptions
    __del__ = lambda self: None
PdfocrOptions_swigregister = _mupdf.PdfocrOptions_swigregister
PdfocrOptions_swigregister(PdfocrOptions)

class Pixmap(_object):
    """Proxy of C++ mupdf::Pixmap class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pixmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pixmap, name)
    __repr__ = _swig_repr

    def new_pixmap_from_page_contents(page, ctm, cs, alpha):
        """
        new_pixmap_from_page_contents(Page page, Matrix ctm, Colorspace cs, int alpha) -> Pixmap

        Parameters
        ----------
        page: mupdf::Page const &
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        alpha: int

        """
        return _mupdf.Pixmap_new_pixmap_from_page_contents(page, ctm, cs, alpha)

    new_pixmap_from_page_contents = staticmethod(new_pixmap_from_page_contents)

    def new_pixmap_from_page_contents_with_separations(page, ctm, cs, seps, alpha):
        """
        new_pixmap_from_page_contents_with_separations(Page page, Matrix ctm, Colorspace cs, Separations seps, int alpha) -> Pixmap

        Parameters
        ----------
        page: mupdf::Page const &
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        seps: mupdf::Separations const &
        alpha: int

        """
        return _mupdf.Pixmap_new_pixmap_from_page_contents_with_separations(page, ctm, cs, seps, alpha)

    new_pixmap_from_page_contents_with_separations = staticmethod(new_pixmap_from_page_contents_with_separations)

    def alpha_from_gray(self):
        """
        alpha_from_gray(Pixmap self) -> Pixmap

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_alpha_from_gray(self)


    def clear_pixmap(self):
        """
        clear_pixmap(Pixmap self)

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_clear_pixmap(self)


    def clear_pixmap_rect_with_value(self, value, r):
        """
        clear_pixmap_rect_with_value(Pixmap self, int value, Irect r)

        Parameters
        ----------
        value: int
        r: mupdf::Irect &

        """
        return _mupdf.Pixmap_clear_pixmap_rect_with_value(self, value, r)


    def clear_pixmap_with_value(self, value):
        """
        clear_pixmap_with_value(Pixmap self, int value)

        Parameters
        ----------
        value: int

        """
        return _mupdf.Pixmap_clear_pixmap_with_value(self, value)


    def clone_pixmap(self):
        """
        clone_pixmap(Pixmap self) -> Pixmap

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_clone_pixmap(self)


    def clone_pixmap_area_with_different_seps(self, bbox, dcs, seps, color_params, default_cs):
        """
        clone_pixmap_area_with_different_seps(Pixmap self, Irect bbox, Colorspace dcs, Separations seps, ColorParams color_params, DefaultColorspaces default_cs) -> Pixmap

        Parameters
        ----------
        bbox: mupdf::Irect &
        dcs: mupdf::Colorspace const &
        seps: mupdf::Separations const &
        color_params: mupdf::ColorParams &
        default_cs: mupdf::DefaultColorspaces const &

        """
        return _mupdf.Pixmap_clone_pixmap_area_with_different_seps(self, bbox, dcs, seps, color_params, default_cs)


    def convert_indexed_pixmap_to_base(self):
        """
        convert_indexed_pixmap_to_base(Pixmap self) -> Pixmap

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_convert_indexed_pixmap_to_base(self)


    def convert_pixmap(self, cs_des, prf, default_cs, color_params, keep_alpha):
        """
        convert_pixmap(Pixmap self, Colorspace cs_des, Colorspace prf, DefaultColorspaces default_cs, ColorParams color_params, int keep_alpha) -> Pixmap

        Parameters
        ----------
        cs_des: mupdf::Colorspace const &
        prf: mupdf::Colorspace const &
        default_cs: mupdf::DefaultColorspaces const &
        color_params: mupdf::ColorParams &
        keep_alpha: int

        """
        return _mupdf.Pixmap_convert_pixmap(self, cs_des, prf, default_cs, color_params, keep_alpha)


    def convert_separation_pixmap_to_base(self):
        """
        convert_separation_pixmap_to_base(Pixmap self) -> Pixmap

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_convert_separation_pixmap_to_base(self)


    def decode_tile(self, decode):
        """
        decode_tile(Pixmap self, float const * decode)

        Parameters
        ----------
        decode: float const *

        """
        return _mupdf.Pixmap_decode_tile(self, decode)


    def fill_pixmap_with_color(self, colorspace, color, color_params):
        """
        fill_pixmap_with_color(Pixmap self, Colorspace colorspace, float * color, ColorParams color_params)

        Parameters
        ----------
        colorspace: mupdf::Colorspace const &
        color: float *
        color_params: mupdf::ColorParams &

        """
        return _mupdf.Pixmap_fill_pixmap_with_color(self, colorspace, color, color_params)


    def gamma_pixmap(self, gamma):
        """
        gamma_pixmap(Pixmap self, float gamma)

        Parameters
        ----------
        gamma: float

        """
        return _mupdf.Pixmap_gamma_pixmap(self, gamma)


    def generate_transition(self, opix, npix, time, trans):
        """
        generate_transition(Pixmap self, Pixmap opix, Pixmap npix, int time, Transition trans) -> int

        Parameters
        ----------
        opix: mupdf::Pixmap const &
        npix: mupdf::Pixmap const &
        time: int
        trans: mupdf::Transition &

        """
        return _mupdf.Pixmap_generate_transition(self, opix, npix, time, trans)


    def invert_pixmap(self):
        """
        invert_pixmap(Pixmap self)

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_invert_pixmap(self)


    def invert_pixmap_alpha(self):
        """
        invert_pixmap_alpha(Pixmap self)

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_invert_pixmap_alpha(self)


    def invert_pixmap_luminance(self):
        """
        invert_pixmap_luminance(Pixmap self)

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_invert_pixmap_luminance(self)


    def invert_pixmap_rect(self, rect):
        """
        invert_pixmap_rect(Pixmap self, Irect rect)

        Parameters
        ----------
        rect: mupdf::Irect &

        """
        return _mupdf.Pixmap_invert_pixmap_rect(self, rect)


    def is_pixmap_monochrome(self):
        """
        is_pixmap_monochrome(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_is_pixmap_monochrome(self)


    def new_bitmap_from_pixmap(self, ht):
        """
        new_bitmap_from_pixmap(Pixmap self, Halftone ht) -> Bitmap

        Parameters
        ----------
        ht: mupdf::Halftone const &

        """
        return _mupdf.Pixmap_new_bitmap_from_pixmap(self, ht)


    def new_bitmap_from_pixmap_band(self, ht, band_start):
        """
        new_bitmap_from_pixmap_band(Pixmap self, Halftone ht, int band_start) -> Bitmap

        Parameters
        ----------
        ht: mupdf::Halftone const &
        band_start: int

        """
        return _mupdf.Pixmap_new_bitmap_from_pixmap_band(self, ht, band_start)


    def new_buffer_from_pixmap_as_png(self, color_params):
        """
        new_buffer_from_pixmap_as_png(Pixmap self, ColorParams color_params) -> Buffer

        Parameters
        ----------
        color_params: mupdf::ColorParams &

        """
        return _mupdf.Pixmap_new_buffer_from_pixmap_as_png(self, color_params)


    def new_image_from_pixmap(self, mask):
        """
        new_image_from_pixmap(Pixmap self, Image mask) -> Image

        Parameters
        ----------
        mask: mupdf::Image const &

        """
        return _mupdf.Pixmap_new_image_from_pixmap(self, mask)


    def new_pixmap_from_alpha_channel(self):
        """
        new_pixmap_from_alpha_channel(Pixmap self) -> Pixmap

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_new_pixmap_from_alpha_channel(self)


    def new_pixmap_from_color_and_mask(self, mask):
        """
        new_pixmap_from_color_and_mask(Pixmap self, Pixmap mask) -> Pixmap

        Parameters
        ----------
        mask: mupdf::Pixmap const &

        """
        return _mupdf.Pixmap_new_pixmap_from_color_and_mask(self, mask)


    def new_pixmap_from_pixmap(self, rect):
        """
        new_pixmap_from_pixmap(Pixmap self, Irect rect) -> Pixmap

        Parameters
        ----------
        rect: mupdf::Irect &

        """
        return _mupdf.Pixmap_new_pixmap_from_pixmap(self, rect)


    def pixmap_alpha(self):
        """
        pixmap_alpha(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_pixmap_alpha(self)


    def pixmap_bbox(self):
        """
        pixmap_bbox(Pixmap self) -> Irect

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_pixmap_bbox(self)


    def pixmap_colorants(self):
        """
        pixmap_colorants(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_pixmap_colorants(self)


    def pixmap_colorspace(self):
        """
        pixmap_colorspace(Pixmap self) -> Colorspace

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_pixmap_colorspace(self)


    def pixmap_components(self):
        """
        pixmap_components(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_pixmap_components(self)


    def pixmap_height(self):
        """
        pixmap_height(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_pixmap_height(self)


    def pixmap_samples(self):
        """
        pixmap_samples(Pixmap self) -> unsigned char *

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_pixmap_samples(self)


    def pixmap_spots(self):
        """
        pixmap_spots(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_pixmap_spots(self)


    def pixmap_stride(self):
        """
        pixmap_stride(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_pixmap_stride(self)


    def pixmap_width(self):
        """
        pixmap_width(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_pixmap_width(self)


    def pixmap_x(self):
        """
        pixmap_x(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_pixmap_x(self)


    def pixmap_y(self):
        """
        pixmap_y(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_pixmap_y(self)


    def save_pixmap_as_pam(self, filename):
        """
        save_pixmap_as_pam(Pixmap self, char const * filename)

        Parameters
        ----------
        filename: char const *

        """
        return _mupdf.Pixmap_save_pixmap_as_pam(self, filename)


    def save_pixmap_as_pbm(self, filename):
        """
        save_pixmap_as_pbm(Pixmap self, char const * filename)

        Parameters
        ----------
        filename: char const *

        """
        return _mupdf.Pixmap_save_pixmap_as_pbm(self, filename)


    def save_pixmap_as_pcl(self, filename, append, pcl):
        """
        save_pixmap_as_pcl(Pixmap self, char * filename, int append, PclOptions pcl)

        Parameters
        ----------
        filename: char *
        append: int
        pcl: mupdf::PclOptions const &

        """
        return _mupdf.Pixmap_save_pixmap_as_pcl(self, filename, append, pcl)


    def save_pixmap_as_pclm(self, filename, append, options):
        """
        save_pixmap_as_pclm(Pixmap self, char * filename, int append, PclmOptions options)

        Parameters
        ----------
        filename: char *
        append: int
        options: mupdf::PclmOptions const &

        """
        return _mupdf.Pixmap_save_pixmap_as_pclm(self, filename, append, options)


    def save_pixmap_as_pdfocr(self, filename, append, options):
        """
        save_pixmap_as_pdfocr(Pixmap self, char * filename, int append, PdfocrOptions options)

        Parameters
        ----------
        filename: char *
        append: int
        options: mupdf::PdfocrOptions const &

        """
        return _mupdf.Pixmap_save_pixmap_as_pdfocr(self, filename, append, options)


    def save_pixmap_as_pkm(self, filename):
        """
        save_pixmap_as_pkm(Pixmap self, char const * filename)

        Parameters
        ----------
        filename: char const *

        """
        return _mupdf.Pixmap_save_pixmap_as_pkm(self, filename)


    def save_pixmap_as_png(self, filename):
        """
        save_pixmap_as_png(Pixmap self, char const * filename)

        Parameters
        ----------
        filename: char const *

        """
        return _mupdf.Pixmap_save_pixmap_as_png(self, filename)


    def save_pixmap_as_pnm(self, filename):
        """
        save_pixmap_as_pnm(Pixmap self, char const * filename)

        Parameters
        ----------
        filename: char const *

        """
        return _mupdf.Pixmap_save_pixmap_as_pnm(self, filename)


    def save_pixmap_as_ps(self, filename, append):
        """
        save_pixmap_as_ps(Pixmap self, char * filename, int append)

        Parameters
        ----------
        filename: char *
        append: int

        """
        return _mupdf.Pixmap_save_pixmap_as_ps(self, filename, append)


    def save_pixmap_as_psd(self, filename):
        """
        save_pixmap_as_psd(Pixmap self, char const * filename)

        Parameters
        ----------
        filename: char const *

        """
        return _mupdf.Pixmap_save_pixmap_as_psd(self, filename)


    def save_pixmap_as_pwg(self, filename, append, pwg):
        """
        save_pixmap_as_pwg(Pixmap self, char * filename, int append, PwgOptions pwg)

        Parameters
        ----------
        filename: char *
        append: int
        pwg: mupdf::PwgOptions &

        """
        return _mupdf.Pixmap_save_pixmap_as_pwg(self, filename, append, pwg)


    def set_pixmap_resolution(self, xres, yres):
        """
        set_pixmap_resolution(Pixmap self, int xres, int yres)

        Parameters
        ----------
        xres: int
        yres: int

        """
        return _mupdf.Pixmap_set_pixmap_resolution(self, xres, yres)


    def tint_pixmap(self, black, white):
        """
        tint_pixmap(Pixmap self, int black, int white)

        Parameters
        ----------
        black: int
        white: int

        """
        return _mupdf.Pixmap_tint_pixmap(self, black, white)


    def md5_pixmap(self):
        """
        md5_pixmap(Pixmap self) -> std::string

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_md5_pixmap(self)


    def pixmap_samples_int(self):
        """
        pixmap_samples_int(Pixmap self) -> long long

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_pixmap_samples_int(self)


    def __init__(self, *args):
        """
        __init__(mupdf::Pixmap self, Colorspace cs, int w, int h, Separations seps, int alpha) -> Pixmap

        Parameters
        ----------
        cs: mupdf::Colorspace const &
        w: int
        h: int
        seps: mupdf::Separations const &
        alpha: int

        __init__(mupdf::Pixmap self, Pixmap color, Pixmap mask) -> Pixmap

        Parameters
        ----------
        color: mupdf::Pixmap const &
        mask: mupdf::Pixmap const &

        __init__(mupdf::Pixmap self, DisplayList list, Matrix ctm, Colorspace cs, int alpha) -> Pixmap

        Parameters
        ----------
        list: mupdf::DisplayList const &
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        alpha: int

        __init__(mupdf::Pixmap self, DisplayList list, Matrix ctm, Colorspace cs, Separations seps, int alpha) -> Pixmap

        Parameters
        ----------
        list: mupdf::DisplayList const &
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        seps: mupdf::Separations const &
        alpha: int

        __init__(mupdf::Pixmap self, Page page, Matrix ctm, Colorspace cs, int alpha) -> Pixmap

        Parameters
        ----------
        page: mupdf::Page const &
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        alpha: int

        __init__(mupdf::Pixmap self, Document doc, int number, Matrix ctm, Colorspace cs, int alpha) -> Pixmap

        Parameters
        ----------
        doc: mupdf::Document const &
        number: int
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        alpha: int

        __init__(mupdf::Pixmap self, Document doc, int number, Matrix ctm, Colorspace cs, Separations seps, int alpha) -> Pixmap

        Parameters
        ----------
        doc: mupdf::Document const &
        number: int
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        seps: mupdf::Separations const &
        alpha: int

        __init__(mupdf::Pixmap self, Page page, Matrix ctm, Colorspace cs, Separations seps, int alpha) -> Pixmap

        Parameters
        ----------
        page: mupdf::Page const &
        ctm: mupdf::Matrix &
        cs: mupdf::Colorspace const &
        seps: mupdf::Separations const &
        alpha: int

        __init__(mupdf::Pixmap self, Pixmap pixmap, Irect rect) -> Pixmap

        Parameters
        ----------
        pixmap: mupdf::Pixmap const &
        rect: mupdf::Irect &

        __init__(mupdf::Pixmap self, Colorspace colorspace, Irect bbox, Separations seps, int alpha) -> Pixmap

        Parameters
        ----------
        colorspace: mupdf::Colorspace const &
        bbox: mupdf::Irect &
        seps: mupdf::Separations const &
        alpha: int

        __init__(mupdf::Pixmap self, Colorspace colorspace, Irect rect, Separations seps, int alpha, unsigned char * samples) -> Pixmap

        Parameters
        ----------
        colorspace: mupdf::Colorspace const &
        rect: mupdf::Irect &
        seps: mupdf::Separations const &
        alpha: int
        samples: unsigned char *

        __init__(mupdf::Pixmap self, Colorspace colorspace, int w, int h, Separations seps, int alpha, int stride, unsigned char * samples) -> Pixmap

        Parameters
        ----------
        colorspace: mupdf::Colorspace const &
        w: int
        h: int
        seps: mupdf::Separations const &
        alpha: int
        stride: int
        samples: unsigned char *

        __init__(mupdf::Pixmap self, Pixmap rhs) -> Pixmap

        Parameters
        ----------
        rhs: mupdf::Pixmap const &

        __init__(mupdf::Pixmap self, fz_pixmap * internal) -> Pixmap

        Parameters
        ----------
        internal: fz_pixmap *

        """
        this = _mupdf.new_Pixmap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def storable(self):
        """
        storable(Pixmap self) -> fz_storable

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_storable(self)


    def x(self):
        """
        x(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_x(self)


    def y(self):
        """
        y(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_y(self)


    def w(self):
        """
        w(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_w(self)


    def h(self):
        """
        h(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_h(self)


    def n(self):
        """
        n(Pixmap self) -> unsigned char

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_n(self)


    def s(self):
        """
        s(Pixmap self) -> unsigned char

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_s(self)


    def alpha(self):
        """
        alpha(Pixmap self) -> unsigned char

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_alpha(self)


    def flags(self):
        """
        flags(Pixmap self) -> unsigned char

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_flags(self)


    def stride(self):
        """
        stride(Pixmap self) -> ptrdiff_t

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_stride(self)


    def seps(self):
        """
        seps(Pixmap self) -> Separations

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_seps(self)


    def xres(self):
        """
        xres(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_xres(self)


    def yres(self):
        """
        yres(Pixmap self) -> int

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_yres(self)


    def colorspace(self):
        """
        colorspace(Pixmap self) -> Colorspace

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_colorspace(self)


    def samples(self):
        """
        samples(Pixmap self) -> unsigned char const *

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_samples(self)


    def underlying(self):
        """
        underlying(Pixmap self) -> Pixmap

        Parameters
        ----------
        self: mupdf::Pixmap *

        """
        return _mupdf.Pixmap_underlying(self)

    __swig_destroy__ = _mupdf.delete_Pixmap
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Pixmap_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Pixmap_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Pixmap_m_internal_get, _mupdf.Pixmap_m_internal_set)
Pixmap_swigregister = _mupdf.Pixmap_swigregister
Pixmap_swigregister(Pixmap)

def Pixmap_new_pixmap_from_page_contents(page, ctm, cs, alpha):
    """
    Pixmap_new_pixmap_from_page_contents(Page page, Matrix ctm, Colorspace cs, int alpha) -> Pixmap

    Parameters
    ----------
    page: mupdf::Page const &
    ctm: mupdf::Matrix &
    cs: mupdf::Colorspace const &
    alpha: int

    """
    return _mupdf.Pixmap_new_pixmap_from_page_contents(page, ctm, cs, alpha)

def Pixmap_new_pixmap_from_page_contents_with_separations(page, ctm, cs, seps, alpha):
    """
    Pixmap_new_pixmap_from_page_contents_with_separations(Page page, Matrix ctm, Colorspace cs, Separations seps, int alpha) -> Pixmap

    Parameters
    ----------
    page: mupdf::Page const &
    ctm: mupdf::Matrix &
    cs: mupdf::Colorspace const &
    seps: mupdf::Separations const &
    alpha: int

    """
    return _mupdf.Pixmap_new_pixmap_from_page_contents_with_separations(page, ctm, cs, seps, alpha)

class PixmapImage(_object):
    """Proxy of C++ mupdf::PixmapImage class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixmapImage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PixmapImage, name)
    __repr__ = _swig_repr

    def pixmap_image_tile(self):
        """
        pixmap_image_tile(PixmapImage self) -> Pixmap

        Parameters
        ----------
        self: mupdf::PixmapImage *

        """
        return _mupdf.PixmapImage_pixmap_image_tile(self)


    def set_pixmap_image_tile(self, pix):
        """
        set_pixmap_image_tile(PixmapImage self, Pixmap pix)

        Parameters
        ----------
        pix: mupdf::Pixmap const &

        """
        return _mupdf.PixmapImage_set_pixmap_image_tile(self, pix)


    def __init__(self, internal):
        """
        __init__(mupdf::PixmapImage self, fz_pixmap_image * internal) -> PixmapImage

        Parameters
        ----------
        internal: fz_pixmap_image *

        """
        this = _mupdf.new_PixmapImage(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.PixmapImage_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PixmapImage_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PixmapImage_m_internal_get, _mupdf.PixmapImage_m_internal_set)
    __swig_destroy__ = _mupdf.delete_PixmapImage
    __del__ = lambda self: None
PixmapImage_swigregister = _mupdf.PixmapImage_swigregister
PixmapImage_swigregister(PixmapImage)

class Point(_object):
    """Proxy of C++ mupdf::Point class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr

    def transform_point_xy(x, y, m):
        """
        transform_point_xy(float x, float y, Matrix m) -> Point

        Parameters
        ----------
        x: float
        y: float
        m: mupdf::Matrix &

        """
        return _mupdf.Point_transform_point_xy(x, y, m)

    transform_point_xy = staticmethod(transform_point_xy)

    def is_point_inside_quad(self, q):
        """
        is_point_inside_quad(Point self, Quad q) -> int

        Parameters
        ----------
        q: mupdf::Quad &

        """
        return _mupdf.Point_is_point_inside_quad(self, q)


    def is_point_inside_rect(self, r):
        """
        is_point_inside_rect(Point self, Rect r) -> int

        Parameters
        ----------
        r: mupdf::Rect &

        """
        return _mupdf.Point_is_point_inside_rect(self, r)


    def normalize_vector(self):
        """
        normalize_vector(Point self) -> Point

        Parameters
        ----------
        self: mupdf::Point *

        """
        return _mupdf.Point_normalize_vector(self)


    def transform_point(self, *args):
        """
        transform_point(Point self, Point point, Matrix m) -> Point

        Parameters
        ----------
        point: mupdf::Point &
        m: mupdf::Matrix &

        transform_point(Point self, Matrix m) -> Point

        Parameters
        ----------
        m: mupdf::Matrix &

        """
        return _mupdf.Point_transform_point(self, *args)


    def transform_vector(self, *args):
        """
        transform_vector(Point self, Point vector, Matrix m) -> Point

        Parameters
        ----------
        vector: mupdf::Point &
        m: mupdf::Matrix &

        transform_vector(Point self, Matrix m) -> Point

        Parameters
        ----------
        m: mupdf::Matrix &

        """
        return _mupdf.Point_transform_vector(self, *args)


    def transform(self, m):
        """
        transform(Point self, Matrix m) -> Point

        Parameters
        ----------
        m: mupdf::Matrix const &

        """
        return _mupdf.Point_transform(self, m)


    def __init__(self, *args):
        """
        __init__(mupdf::Point self, float x, float y) -> Point

        Parameters
        ----------
        x: float
        y: float

        __init__(mupdf::Point self, fz_point internal) -> Point

        Parameters
        ----------
        internal: fz_point const *

        __init__(mupdf::Point self, fz_point internal) -> Point

        Parameters
        ----------
        internal: fz_point const

        """
        this = _mupdf.new_Point(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def internal(self, *args):
        """
        internal(Point self) -> fz_point
        internal(Point self) -> fz_point

        Parameters
        ----------
        self: mupdf::Point const *

        """
        return _mupdf.Point_internal(self, *args)

    __swig_setmethods__["x"] = _mupdf.Point_x_set
    __swig_getmethods__["x"] = _mupdf.Point_x_get
    if _newclass:
        x = _swig_property(_mupdf.Point_x_get, _mupdf.Point_x_set)
    __swig_setmethods__["y"] = _mupdf.Point_y_set
    __swig_getmethods__["y"] = _mupdf.Point_y_get
    if _newclass:
        y = _swig_property(_mupdf.Point_y_get, _mupdf.Point_y_set)

    def to_string(self):
        """
        to_string(Point self) -> std::string

        Parameters
        ----------
        self: mupdf::Point *

        """
        return _mupdf.Point_to_string(self)

    __swig_destroy__ = _mupdf.delete_Point
    __del__ = lambda self: None
Point_swigregister = _mupdf.Point_swigregister
Point_swigregister(Point)

def Point_transform_point_xy(x, y, m):
    """
    Point_transform_point_xy(float x, float y, Matrix m) -> Point

    Parameters
    ----------
    x: float
    y: float
    m: mupdf::Matrix &

    """
    return _mupdf.Point_transform_point_xy(x, y, m)

class Pool(_object):
    """Proxy of C++ mupdf::Pool class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pool, name)
    __repr__ = _swig_repr

    def pool_alloc(self, size):
        """
        pool_alloc(Pool self, size_t size) -> void *

        Parameters
        ----------
        size: size_t

        """
        return _mupdf.Pool_pool_alloc(self, size)


    def pool_size(self):
        """
        pool_size(Pool self) -> size_t

        Parameters
        ----------
        self: mupdf::Pool *

        """
        return _mupdf.Pool_pool_size(self)


    def pool_strdup(self, s):
        """
        pool_strdup(Pool self, char const * s) -> char *

        Parameters
        ----------
        s: char const *

        """
        return _mupdf.Pool_pool_strdup(self, s)


    def __init__(self, *args):
        """
        __init__(mupdf::Pool self) -> Pool
        __init__(mupdf::Pool self, fz_pool * internal) -> Pool

        Parameters
        ----------
        internal: fz_pool *

        """
        this = _mupdf.new_Pool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Pool
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Pool_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Pool_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Pool_m_internal_get, _mupdf.Pool_m_internal_set)
Pool_swigregister = _mupdf.Pool_swigregister
Pool_swigregister(Pool)

class PwgOptions(_object):
    """Proxy of C++ mupdf::PwgOptions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PwgOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PwgOptions, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::PwgOptions self, fz_pwg_options internal) -> PwgOptions

        Parameters
        ----------
        internal: fz_pwg_options const *

        """
        this = _mupdf.new_PwgOptions(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def media_class(self):
        """
        media_class(PwgOptions self) -> char *

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_media_class(self)


    def media_color(self):
        """
        media_color(PwgOptions self) -> char *

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_media_color(self)


    def media_type(self):
        """
        media_type(PwgOptions self) -> char *

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_media_type(self)


    def output_type(self):
        """
        output_type(PwgOptions self) -> char *

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_output_type(self)


    def advance_distance(self):
        """
        advance_distance(PwgOptions self) -> unsigned int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_advance_distance(self)


    def advance_media(self):
        """
        advance_media(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_advance_media(self)


    def collate(self):
        """
        collate(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_collate(self)


    def cut_media(self):
        """
        cut_media(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_cut_media(self)


    def duplex(self):
        """
        duplex(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_duplex(self)


    def insert_sheet(self):
        """
        insert_sheet(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_insert_sheet(self)


    def jog(self):
        """
        jog(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_jog(self)


    def leading_edge(self):
        """
        leading_edge(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_leading_edge(self)


    def manual_feed(self):
        """
        manual_feed(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_manual_feed(self)


    def media_position(self):
        """
        media_position(PwgOptions self) -> unsigned int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_media_position(self)


    def media_weight(self):
        """
        media_weight(PwgOptions self) -> unsigned int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_media_weight(self)


    def mirror_print(self):
        """
        mirror_print(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_mirror_print(self)


    def negative_print(self):
        """
        negative_print(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_negative_print(self)


    def num_copies(self):
        """
        num_copies(PwgOptions self) -> unsigned int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_num_copies(self)


    def orientation(self):
        """
        orientation(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_orientation(self)


    def output_face_up(self):
        """
        output_face_up(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_output_face_up(self)


    def PageSize(self):
        """
        PageSize(PwgOptions self) -> unsigned int *

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_PageSize(self)


    def separations(self):
        """
        separations(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_separations(self)


    def tray_switch(self):
        """
        tray_switch(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_tray_switch(self)


    def tumble(self):
        """
        tumble(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_tumble(self)


    def media_type_num(self):
        """
        media_type_num(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_media_type_num(self)


    def compression(self):
        """
        compression(PwgOptions self) -> int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_compression(self)


    def row_count(self):
        """
        row_count(PwgOptions self) -> unsigned int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_row_count(self)


    def row_feed(self):
        """
        row_feed(PwgOptions self) -> unsigned int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_row_feed(self)


    def row_step(self):
        """
        row_step(PwgOptions self) -> unsigned int

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_row_step(self)


    def rendering_intent(self):
        """
        rendering_intent(PwgOptions self) -> char *

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_rendering_intent(self)


    def page_size_name(self):
        """
        page_size_name(PwgOptions self) -> char *

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_page_size_name(self)

    __swig_setmethods__["m_internal"] = _mupdf.PwgOptions_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.PwgOptions_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.PwgOptions_m_internal_get, _mupdf.PwgOptions_m_internal_set)

    def to_string(self):
        """
        to_string(PwgOptions self) -> std::string

        Parameters
        ----------
        self: mupdf::PwgOptions *

        """
        return _mupdf.PwgOptions_to_string(self)

    __swig_destroy__ = _mupdf.delete_PwgOptions
    __del__ = lambda self: None
PwgOptions_swigregister = _mupdf.PwgOptions_swigregister
PwgOptions_swigregister(PwgOptions)

class Quad(_object):
    """Proxy of C++ mupdf::Quad class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quad, name)
    __repr__ = _swig_repr

    def is_quad_inside_quad(self, haystack):
        """
        is_quad_inside_quad(Quad self, Quad haystack) -> int

        Parameters
        ----------
        haystack: mupdf::Quad &

        """
        return _mupdf.Quad_is_quad_inside_quad(self, haystack)


    def is_quad_intersecting_quad(self, b):
        """
        is_quad_intersecting_quad(Quad self, Quad b) -> int

        Parameters
        ----------
        b: mupdf::Quad &

        """
        return _mupdf.Quad_is_quad_intersecting_quad(self, b)


    def rect_from_quad(self):
        """
        rect_from_quad(Quad self) -> Rect

        Parameters
        ----------
        self: mupdf::Quad *

        """
        return _mupdf.Quad_rect_from_quad(self)


    def transform_quad(self, m):
        """
        transform_quad(Quad self, Matrix m) -> Quad

        Parameters
        ----------
        m: mupdf::Matrix &

        """
        return _mupdf.Quad_transform_quad(self, m)


    def __init__(self, *args):
        """
        __init__(mupdf::Quad self, Rect r) -> Quad

        Parameters
        ----------
        r: mupdf::Rect &

        __init__(mupdf::Quad self, Quad q, Matrix m) -> Quad

        Parameters
        ----------
        q: mupdf::Quad &
        m: mupdf::Matrix &

        __init__(mupdf::Quad self) -> Quad
        __init__(mupdf::Quad self, fz_quad internal) -> Quad

        Parameters
        ----------
        internal: fz_quad const *

        __init__(mupdf::Quad self, fz_quad internal) -> Quad

        Parameters
        ----------
        internal: fz_quad const

        """
        this = _mupdf.new_Quad(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def internal(self, *args):
        """
        internal(Quad self) -> fz_quad
        internal(Quad self) -> fz_quad

        Parameters
        ----------
        self: mupdf::Quad const *

        """
        return _mupdf.Quad_internal(self, *args)

    __swig_setmethods__["ul"] = _mupdf.Quad_ul_set
    __swig_getmethods__["ul"] = _mupdf.Quad_ul_get
    if _newclass:
        ul = _swig_property(_mupdf.Quad_ul_get, _mupdf.Quad_ul_set)
    __swig_setmethods__["ur"] = _mupdf.Quad_ur_set
    __swig_getmethods__["ur"] = _mupdf.Quad_ur_get
    if _newclass:
        ur = _swig_property(_mupdf.Quad_ur_get, _mupdf.Quad_ur_set)
    __swig_setmethods__["ll"] = _mupdf.Quad_ll_set
    __swig_getmethods__["ll"] = _mupdf.Quad_ll_get
    if _newclass:
        ll = _swig_property(_mupdf.Quad_ll_get, _mupdf.Quad_ll_set)
    __swig_setmethods__["lr"] = _mupdf.Quad_lr_set
    __swig_getmethods__["lr"] = _mupdf.Quad_lr_get
    if _newclass:
        lr = _swig_property(_mupdf.Quad_lr_get, _mupdf.Quad_lr_set)

    def to_string(self):
        """
        to_string(Quad self) -> std::string

        Parameters
        ----------
        self: mupdf::Quad *

        """
        return _mupdf.Quad_to_string(self)

    __swig_destroy__ = _mupdf.delete_Quad
    __del__ = lambda self: None
Quad_swigregister = _mupdf.Quad_swigregister
Quad_swigregister(Quad)

class Range(_object):
    """Proxy of C++ mupdf::Range class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::Range self, fz_range internal) -> Range

        Parameters
        ----------
        internal: fz_range *

        """
        this = _mupdf.new_Range(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.Range_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Range_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Range_m_internal_get, _mupdf.Range_m_internal_set)
    __swig_destroy__ = _mupdf.delete_Range
    __del__ = lambda self: None
Range_swigregister = _mupdf.Range_swigregister
Range_swigregister(Range)

class Rect(_object):
    """Proxy of C++ mupdf::Rect class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rect, name)
    __repr__ = _swig_repr
    Fixed_UNIT = _mupdf.Rect_Fixed_UNIT
    Fixed_EMPTY = _mupdf.Rect_Fixed_EMPTY
    Fixed_INFINITE = _mupdf.Rect_Fixed_INFINITE

    def adjust_rect_for_stroke(self, stroke, ctm):
        """
        adjust_rect_for_stroke(Rect self, StrokeState stroke, Matrix ctm) -> Rect

        Parameters
        ----------
        stroke: mupdf::StrokeState const &
        ctm: mupdf::Matrix &

        """
        return _mupdf.Rect_adjust_rect_for_stroke(self, stroke, ctm)


    def contains_rect(self, b):
        """
        contains_rect(Rect self, Rect b) -> int

        Parameters
        ----------
        b: mupdf::Rect &

        """
        return _mupdf.Rect_contains_rect(self, b)


    def expand_rect(self, expand):
        """
        expand_rect(Rect self, float expand) -> Rect

        Parameters
        ----------
        expand: float

        """
        return _mupdf.Rect_expand_rect(self, expand)


    def include_point_in_rect(self, p):
        """
        include_point_in_rect(Rect self, Point p) -> Rect

        Parameters
        ----------
        p: mupdf::Point &

        """
        return _mupdf.Rect_include_point_in_rect(self, p)


    def intersect_rect(self, *args):
        """
        intersect_rect(Rect self, Rect a, Rect b) -> Rect

        Parameters
        ----------
        a: mupdf::Rect &
        b: mupdf::Rect &

        intersect_rect(Rect self, Rect b) -> Rect

        Parameters
        ----------
        b: mupdf::Rect &

        """
        return _mupdf.Rect_intersect_rect(self, *args)


    def irect_from_rect(self):
        """
        irect_from_rect(Rect self) -> Irect

        Parameters
        ----------
        self: mupdf::Rect *

        """
        return _mupdf.Rect_irect_from_rect(self)


    def is_empty_rect(self):
        """
        is_empty_rect(Rect self) -> int

        Parameters
        ----------
        self: mupdf::Rect *

        """
        return _mupdf.Rect_is_empty_rect(self)


    def is_infinite_rect(self):
        """
        is_infinite_rect(Rect self) -> int

        Parameters
        ----------
        self: mupdf::Rect *

        """
        return _mupdf.Rect_is_infinite_rect(self)


    def is_valid_rect(self):
        """
        is_valid_rect(Rect self) -> int

        Parameters
        ----------
        self: mupdf::Rect *

        """
        return _mupdf.Rect_is_valid_rect(self)


    def new_bbox_device(self):
        """
        new_bbox_device(Rect self) -> Device

        Parameters
        ----------
        self: mupdf::Rect *

        """
        return _mupdf.Rect_new_bbox_device(self)


    def new_display_list(self):
        """
        new_display_list(Rect self) -> DisplayList

        Parameters
        ----------
        self: mupdf::Rect *

        """
        return _mupdf.Rect_new_display_list(self)


    def new_link(self, uri):
        """
        new_link(Rect self, char const * uri) -> Link

        Parameters
        ----------
        uri: char const *

        """
        return _mupdf.Rect_new_link(self, uri)


    def quad_from_rect(self):
        """
        quad_from_rect(Rect self) -> Quad

        Parameters
        ----------
        self: mupdf::Rect *

        """
        return _mupdf.Rect_quad_from_rect(self)


    def round_rect(self):
        """
        round_rect(Rect self) -> Irect

        Parameters
        ----------
        self: mupdf::Rect *

        """
        return _mupdf.Rect_round_rect(self)


    def transform_page(self, resolution, rotate):
        """
        transform_page(Rect self, float resolution, float rotate) -> Matrix

        Parameters
        ----------
        resolution: float
        rotate: float

        """
        return _mupdf.Rect_transform_page(self, resolution, rotate)


    def transform_rect(self, m):
        """
        transform_rect(Rect self, Matrix m) -> Rect

        Parameters
        ----------
        m: mupdf::Matrix &

        """
        return _mupdf.Rect_transform_rect(self, m)


    def translate_rect(self, xoff, yoff):
        """
        translate_rect(Rect self, float xoff, float yoff) -> Rect

        Parameters
        ----------
        xoff: float
        yoff: float

        """
        return _mupdf.Rect_translate_rect(self, xoff, yoff)


    def union_rect(self, *args):
        """
        union_rect(Rect self, Rect a, Rect b) -> Rect

        Parameters
        ----------
        a: mupdf::Rect &
        b: mupdf::Rect &

        union_rect(Rect self, Rect b) -> Rect

        Parameters
        ----------
        b: mupdf::Rect &

        """
        return _mupdf.Rect_union_rect(self, *args)


    def transform(self, m):
        """
        transform(Rect self, Matrix m)

        Parameters
        ----------
        m: mupdf::Matrix const &

        """
        return _mupdf.Rect_transform(self, m)


    def contains(self, *args):
        """
        contains(Rect self, double x, double y) -> bool

        Parameters
        ----------
        x: double
        y: double

        contains(Rect self, Rect rhs) -> bool

        Parameters
        ----------
        rhs: mupdf::Rect &

        """
        return _mupdf.Rect_contains(self, *args)


    def is_empty(self):
        """
        is_empty(Rect self) -> bool

        Parameters
        ----------
        self: mupdf::Rect *

        """
        return _mupdf.Rect_is_empty(self)


    def union_(self, rhs):
        """
        union_(Rect self, Rect rhs)

        Parameters
        ----------
        rhs: mupdf::Rect &

        """
        return _mupdf.Rect_union_(self, rhs)


    def __init__(self, *args):
        """
        __init__(mupdf::Rect self, DisplayList list) -> Rect

        Parameters
        ----------
        list: mupdf::DisplayList const &

        __init__(mupdf::Rect self, Irect bbox) -> Rect

        Parameters
        ----------
        bbox: mupdf::Irect &

        __init__(mupdf::Rect self, Quad q) -> Rect

        Parameters
        ----------
        q: mupdf::Quad &

        __init__(mupdf::Rect self, Rect rect, Matrix m) -> Rect

        Parameters
        ----------
        rect: mupdf::Rect &
        m: mupdf::Matrix &

        __init__(mupdf::Rect self, double x0, double y0, double x1, double y1) -> Rect

        Parameters
        ----------
        x0: double
        y0: double
        x1: double
        y1: double

        __init__(mupdf::Rect self, Rect rhs) -> Rect

        Parameters
        ----------
        rhs: mupdf::Rect const &

        __init__(mupdf::Rect self, mupdf::Rect::Fixed fixed) -> Rect

        Parameters
        ----------
        fixed: enum mupdf::Rect::Fixed

        __init__(mupdf::Rect self, fz_rect internal) -> Rect

        Parameters
        ----------
        internal: fz_rect const *

        __init__(mupdf::Rect self, fz_rect internal) -> Rect

        Parameters
        ----------
        internal: fz_rect const

        """
        this = _mupdf.new_Rect(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def internal(self, *args):
        """
        internal(Rect self) -> fz_rect
        internal(Rect self) -> fz_rect

        Parameters
        ----------
        self: mupdf::Rect const *

        """
        return _mupdf.Rect_internal(self, *args)

    __swig_setmethods__["x0"] = _mupdf.Rect_x0_set
    __swig_getmethods__["x0"] = _mupdf.Rect_x0_get
    if _newclass:
        x0 = _swig_property(_mupdf.Rect_x0_get, _mupdf.Rect_x0_set)
    __swig_setmethods__["y0"] = _mupdf.Rect_y0_set
    __swig_getmethods__["y0"] = _mupdf.Rect_y0_get
    if _newclass:
        y0 = _swig_property(_mupdf.Rect_y0_get, _mupdf.Rect_y0_set)
    __swig_setmethods__["x1"] = _mupdf.Rect_x1_set
    __swig_getmethods__["x1"] = _mupdf.Rect_x1_get
    if _newclass:
        x1 = _swig_property(_mupdf.Rect_x1_get, _mupdf.Rect_x1_set)
    __swig_setmethods__["y1"] = _mupdf.Rect_y1_set
    __swig_getmethods__["y1"] = _mupdf.Rect_y1_get
    if _newclass:
        y1 = _swig_property(_mupdf.Rect_y1_get, _mupdf.Rect_y1_set)

    def to_string(self):
        """
        to_string(Rect self) -> std::string

        Parameters
        ----------
        self: mupdf::Rect *

        """
        return _mupdf.Rect_to_string(self)

    __swig_destroy__ = _mupdf.delete_Rect
    __del__ = lambda self: None
Rect_swigregister = _mupdf.Rect_swigregister
Rect_swigregister(Rect)

class Separations(_object):
    """Proxy of C++ mupdf::Separations class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Separations, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Separations, name)
    __repr__ = _swig_repr

    def add_separation(self, name, cs, cs_channel):
        """
        add_separation(Separations self, char const * name, Colorspace cs, int cs_channel)

        Parameters
        ----------
        name: char const *
        cs: mupdf::Colorspace const &
        cs_channel: int

        """
        return _mupdf.Separations_add_separation(self, name, cs, cs_channel)


    def add_separation_equivalents(self, rgba, cmyk, name):
        """
        add_separation_equivalents(Separations self, uint32_t rgba, uint32_t cmyk, char const * name)

        Parameters
        ----------
        rgba: uint32_t
        cmyk: uint32_t
        name: char const *

        """
        return _mupdf.Separations_add_separation_equivalents(self, rgba, cmyk, name)


    def clone_separations_for_overprint(self):
        """
        clone_separations_for_overprint(Separations self) -> Separations

        Parameters
        ----------
        self: mupdf::Separations *

        """
        return _mupdf.Separations_clone_separations_for_overprint(self)


    def count_active_separations(self):
        """
        count_active_separations(Separations self) -> int

        Parameters
        ----------
        self: mupdf::Separations *

        """
        return _mupdf.Separations_count_active_separations(self)


    def count_separations(self):
        """
        count_separations(Separations self) -> int

        Parameters
        ----------
        self: mupdf::Separations *

        """
        return _mupdf.Separations_count_separations(self)


    def separation_current_behavior(self, separation):
        """
        separation_current_behavior(Separations self, int separation) -> fz_separation_behavior

        Parameters
        ----------
        separation: int

        """
        return _mupdf.Separations_separation_current_behavior(self, separation)


    def separation_equivalent(self, idx, dst_cs, dst_color, prf, color_params):
        """
        separation_equivalent(Separations self, int idx, Colorspace dst_cs, float * dst_color, Colorspace prf, ColorParams color_params)

        Parameters
        ----------
        idx: int
        dst_cs: mupdf::Colorspace const &
        dst_color: float *
        prf: mupdf::Colorspace const &
        color_params: mupdf::ColorParams &

        """
        return _mupdf.Separations_separation_equivalent(self, idx, dst_cs, dst_color, prf, color_params)


    def separation_name(self, separation):
        """
        separation_name(Separations self, int separation) -> char const *

        Parameters
        ----------
        separation: int

        """
        return _mupdf.Separations_separation_name(self, separation)


    def set_separation_behavior(self, separation, behavior):
        """
        set_separation_behavior(Separations self, int separation, fz_separation_behavior behavior)

        Parameters
        ----------
        separation: int
        behavior: enum fz_separation_behavior

        """
        return _mupdf.Separations_set_separation_behavior(self, separation, behavior)


    def __init__(self, *args):
        """
        __init__(mupdf::Separations self, int controllable) -> Separations

        Parameters
        ----------
        controllable: int

        __init__(mupdf::Separations self, Separations rhs) -> Separations

        Parameters
        ----------
        rhs: mupdf::Separations const &

        __init__(mupdf::Separations self, fz_separations * internal) -> Separations

        Parameters
        ----------
        internal: fz_separations *

        """
        this = _mupdf.new_Separations(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Separations
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Separations_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Separations_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Separations_m_internal_get, _mupdf.Separations_m_internal_set)
Separations_swigregister = _mupdf.Separations_swigregister
Separations_swigregister(Separations)

class Sha256(_object):
    """Proxy of C++ mupdf::Sha256 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sha256, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sha256, name)
    __repr__ = _swig_repr

    def sha256_final(self, digest):
        """
        sha256_final(Sha256 self, unsigned char [32] digest)

        Parameters
        ----------
        digest: unsigned char [32]

        """
        return _mupdf.Sha256_sha256_final(self, digest)


    def sha256_init(self):
        """
        sha256_init(Sha256 self)

        Parameters
        ----------
        self: mupdf::Sha256 *

        """
        return _mupdf.Sha256_sha256_init(self)


    def sha256_update(self, input, inlen):
        """
        sha256_update(Sha256 self, unsigned char const * input, size_t inlen)

        Parameters
        ----------
        input: unsigned char const *
        inlen: size_t

        """
        return _mupdf.Sha256_sha256_update(self, input, inlen)


    def __init__(self, internal):
        """
        __init__(mupdf::Sha256 self, fz_sha256 internal) -> Sha256

        Parameters
        ----------
        internal: fz_sha256 *

        """
        this = _mupdf.new_Sha256(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.Sha256_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Sha256_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Sha256_m_internal_get, _mupdf.Sha256_m_internal_set)
    __swig_destroy__ = _mupdf.delete_Sha256
    __del__ = lambda self: None
Sha256_swigregister = _mupdf.Sha256_swigregister
Sha256_swigregister(Sha256)

class Sha512(_object):
    """Proxy of C++ mupdf::Sha512 class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sha512, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sha512, name)
    __repr__ = _swig_repr

    def sha384_final(self, digest):
        """
        sha384_final(Sha512 self, unsigned char [64] digest)

        Parameters
        ----------
        digest: unsigned char [64]

        """
        return _mupdf.Sha512_sha384_final(self, digest)


    def sha384_init(self):
        """
        sha384_init(Sha512 self)

        Parameters
        ----------
        self: mupdf::Sha512 *

        """
        return _mupdf.Sha512_sha384_init(self)


    def sha384_update(self, input, inlen):
        """
        sha384_update(Sha512 self, unsigned char const * input, size_t inlen)

        Parameters
        ----------
        input: unsigned char const *
        inlen: size_t

        """
        return _mupdf.Sha512_sha384_update(self, input, inlen)


    def sha512_final(self, digest):
        """
        sha512_final(Sha512 self, unsigned char [64] digest)

        Parameters
        ----------
        digest: unsigned char [64]

        """
        return _mupdf.Sha512_sha512_final(self, digest)


    def sha512_init(self):
        """
        sha512_init(Sha512 self)

        Parameters
        ----------
        self: mupdf::Sha512 *

        """
        return _mupdf.Sha512_sha512_init(self)


    def sha512_update(self, input, inlen):
        """
        sha512_update(Sha512 self, unsigned char const * input, size_t inlen)

        Parameters
        ----------
        input: unsigned char const *
        inlen: size_t

        """
        return _mupdf.Sha512_sha512_update(self, input, inlen)


    def __init__(self, internal):
        """
        __init__(mupdf::Sha512 self, fz_sha512 internal) -> Sha512

        Parameters
        ----------
        internal: fz_sha512 *

        """
        this = _mupdf.new_Sha512(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.Sha512_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Sha512_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Sha512_m_internal_get, _mupdf.Sha512_m_internal_set)
    __swig_destroy__ = _mupdf.delete_Sha512
    __del__ = lambda self: None
Sha512_swigregister = _mupdf.Sha512_swigregister
Sha512_swigregister(Sha512)

class Shade(_object):
    """Proxy of C++ mupdf::Shade class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Shade, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Shade, name)
    __repr__ = _swig_repr

    def bound_shade(self, ctm):
        """
        bound_shade(Shade self, Matrix ctm) -> Rect

        Parameters
        ----------
        ctm: mupdf::Matrix &

        """
        return _mupdf.Shade_bound_shade(self, ctm)


    def paint_shade(self, override_cs, ctm, dest, color_params, bbox, eop, cache):
        """
        paint_shade(Shade self, Colorspace override_cs, Matrix ctm, Pixmap dest, ColorParams color_params, Irect bbox, Overprint eop, ShadeColorCache cache)

        Parameters
        ----------
        override_cs: mupdf::Colorspace const &
        ctm: mupdf::Matrix &
        dest: mupdf::Pixmap const &
        color_params: mupdf::ColorParams &
        bbox: mupdf::Irect &
        eop: mupdf::Overprint const &
        cache: mupdf::ShadeColorCache &

        """
        return _mupdf.Shade_paint_shade(self, override_cs, ctm, dest, color_params, bbox, eop, cache)


    def process_shade(self, ctm, scissor, prepare, process, process_arg):
        """
        process_shade(Shade self, Matrix ctm, Rect scissor, fz_shade_prepare_fn * prepare, fz_shade_process_fn * process, void * process_arg)

        Parameters
        ----------
        ctm: mupdf::Matrix &
        scissor: mupdf::Rect &
        prepare: fz_shade_prepare_fn *
        process: fz_shade_process_fn *
        process_arg: void *

        """
        return _mupdf.Shade_process_shade(self, ctm, scissor, prepare, process, process_arg)


    def paint_shade_no_cache(self, override_cs, ctm, dest, color_params, bbox, eop):
        """
        paint_shade_no_cache(Shade self, Colorspace override_cs, Matrix ctm, Pixmap dest, ColorParams color_params, Irect bbox, Overprint eop)

        Parameters
        ----------
        override_cs: mupdf::Colorspace const &
        ctm: mupdf::Matrix &
        dest: mupdf::Pixmap const &
        color_params: mupdf::ColorParams &
        bbox: mupdf::Irect &
        eop: mupdf::Overprint const &

        """
        return _mupdf.Shade_paint_shade_no_cache(self, override_cs, ctm, dest, color_params, bbox, eop)


    def __init__(self, *args):
        """
        __init__(mupdf::Shade self, Shade rhs) -> Shade

        Parameters
        ----------
        rhs: mupdf::Shade const &

        __init__(mupdf::Shade self, fz_shade internal) -> Shade

        Parameters
        ----------
        internal: fz_shade *

        """
        this = _mupdf.new_Shade(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Shade
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Shade_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Shade_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Shade_m_internal_get, _mupdf.Shade_m_internal_set)
Shade_swigregister = _mupdf.Shade_swigregister
Shade_swigregister(Shade)

class ShadeColorCache(_object):
    """Proxy of C++ mupdf::ShadeColorCache class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadeColorCache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadeColorCache, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::ShadeColorCache self) -> ShadeColorCache
        __init__(mupdf::ShadeColorCache self, fz_shade_color_cache * internal) -> ShadeColorCache

        Parameters
        ----------
        internal: fz_shade_color_cache *

        """
        this = _mupdf.new_ShadeColorCache(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ShadeColorCache
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.ShadeColorCache_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.ShadeColorCache_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.ShadeColorCache_m_internal_get, _mupdf.ShadeColorCache_m_internal_set)
ShadeColorCache_swigregister = _mupdf.ShadeColorCache_swigregister
ShadeColorCache_swigregister(ShadeColorCache)

class ShaperDataT(_object):
    """Proxy of C++ mupdf::ShaperDataT class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShaperDataT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShaperDataT, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::ShaperDataT self, fz_shaper_data_t internal) -> ShaperDataT

        Parameters
        ----------
        internal: fz_shaper_data_t *

        """
        this = _mupdf.new_ShaperDataT(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.ShaperDataT_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.ShaperDataT_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.ShaperDataT_m_internal_get, _mupdf.ShaperDataT_m_internal_set)
    __swig_destroy__ = _mupdf.delete_ShaperDataT
    __del__ = lambda self: None
ShaperDataT_swigregister = _mupdf.ShaperDataT_swigregister
ShaperDataT_swigregister(ShaperDataT)

class StextBlock(_object):
    """Proxy of C++ mupdf::StextBlock class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StextBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StextBlock, name)
    __repr__ = _swig_repr

    def i_transform(self):
        """
        i_transform(StextBlock self) -> Matrix

        Parameters
        ----------
        self: mupdf::StextBlock *

        """
        return _mupdf.StextBlock_i_transform(self)


    def i_image(self):
        """
        i_image(StextBlock self) -> Image

        Parameters
        ----------
        self: mupdf::StextBlock *

        """
        return _mupdf.StextBlock_i_image(self)


    def begin(self):
        """
        begin(StextBlock self) -> StextBlockIterator

        Parameters
        ----------
        self: mupdf::StextBlock *

        """
        return _mupdf.StextBlock_begin(self)


    def end(self):
        """
        end(StextBlock self) -> StextBlockIterator

        Parameters
        ----------
        self: mupdf::StextBlock *

        """
        return _mupdf.StextBlock_end(self)


    def __init__(self, internal):
        """
        __init__(mupdf::StextBlock self, fz_stext_block * internal) -> StextBlock

        Parameters
        ----------
        internal: fz_stext_block *

        """
        this = _mupdf.new_StextBlock(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.StextBlock_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.StextBlock_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.StextBlock_m_internal_get, _mupdf.StextBlock_m_internal_set)
    __swig_destroy__ = _mupdf.delete_StextBlock
    __del__ = lambda self: None
StextBlock_swigregister = _mupdf.StextBlock_swigregister
StextBlock_swigregister(StextBlock)

class StextChar(_object):
    """Proxy of C++ mupdf::StextChar class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StextChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StextChar, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::StextChar self, fz_stext_char * internal) -> StextChar

        Parameters
        ----------
        internal: fz_stext_char *

        """
        this = _mupdf.new_StextChar(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.StextChar_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.StextChar_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.StextChar_m_internal_get, _mupdf.StextChar_m_internal_set)
    __swig_destroy__ = _mupdf.delete_StextChar
    __del__ = lambda self: None
StextChar_swigregister = _mupdf.StextChar_swigregister
StextChar_swigregister(StextChar)

class StextLine(_object):
    """Proxy of C++ mupdf::StextLine class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StextLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StextLine, name)
    __repr__ = _swig_repr

    def begin(self):
        """
        begin(StextLine self) -> StextLineIterator

        Parameters
        ----------
        self: mupdf::StextLine *

        """
        return _mupdf.StextLine_begin(self)


    def end(self):
        """
        end(StextLine self) -> StextLineIterator

        Parameters
        ----------
        self: mupdf::StextLine *

        """
        return _mupdf.StextLine_end(self)


    def __init__(self, internal):
        """
        __init__(mupdf::StextLine self, fz_stext_line * internal) -> StextLine

        Parameters
        ----------
        internal: fz_stext_line *

        """
        this = _mupdf.new_StextLine(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.StextLine_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.StextLine_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.StextLine_m_internal_get, _mupdf.StextLine_m_internal_set)
    __swig_destroy__ = _mupdf.delete_StextLine
    __del__ = lambda self: None
StextLine_swigregister = _mupdf.StextLine_swigregister
StextLine_swigregister(StextLine)

class StextOptions(_object):
    """Proxy of C++ mupdf::StextOptions class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StextOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StextOptions, name)
    __repr__ = _swig_repr

    def parse_stext_options(self, string):
        """
        parse_stext_options(StextOptions self, char const * string) -> StextOptions

        Parameters
        ----------
        string: char const *

        """
        return _mupdf.StextOptions_parse_stext_options(self, string)


    def __init__(self, *args):
        """
        __init__(mupdf::StextOptions self) -> StextOptions
        __init__(mupdf::StextOptions self, int flags) -> StextOptions

        Parameters
        ----------
        flags: int

        __init__(mupdf::StextOptions self, fz_stext_options internal) -> StextOptions

        Parameters
        ----------
        internal: fz_stext_options const *

        __init__(mupdf::StextOptions self, fz_stext_options internal) -> StextOptions

        Parameters
        ----------
        internal: fz_stext_options const

        """
        this = _mupdf.new_StextOptions(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def internal(self, *args):
        """
        internal(StextOptions self) -> fz_stext_options
        internal(StextOptions self) -> fz_stext_options

        Parameters
        ----------
        self: mupdf::StextOptions const *

        """
        return _mupdf.StextOptions_internal(self, *args)

    __swig_setmethods__["flags"] = _mupdf.StextOptions_flags_set
    __swig_getmethods__["flags"] = _mupdf.StextOptions_flags_get
    if _newclass:
        flags = _swig_property(_mupdf.StextOptions_flags_get, _mupdf.StextOptions_flags_set)

    def to_string(self):
        """
        to_string(StextOptions self) -> std::string

        Parameters
        ----------
        self: mupdf::StextOptions *

        """
        return _mupdf.StextOptions_to_string(self)

    __swig_destroy__ = _mupdf.delete_StextOptions
    __del__ = lambda self: None
StextOptions_swigregister = _mupdf.StextOptions_swigregister
StextOptions_swigregister(StextOptions)

class StextPage(_object):
    """Proxy of C++ mupdf::StextPage class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StextPage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StextPage, name)
    __repr__ = _swig_repr

    def highlight_selection(self, a, b, quads, max_quads):
        """
        highlight_selection(StextPage self, Point a, Point b, Quad quads, int max_quads) -> int

        Parameters
        ----------
        a: mupdf::Point &
        b: mupdf::Point &
        quads: mupdf::Quad &
        max_quads: int

        """
        return _mupdf.StextPage_highlight_selection(self, a, b, quads, max_quads)


    def new_buffer_from_stext_page(self):
        """
        new_buffer_from_stext_page(StextPage self) -> Buffer

        Parameters
        ----------
        self: mupdf::StextPage *

        """
        return _mupdf.StextPage_new_buffer_from_stext_page(self)


    def new_stext_device(self, options):
        """
        new_stext_device(StextPage self, StextOptions options) -> Device

        Parameters
        ----------
        options: mupdf::StextOptions &

        """
        return _mupdf.StextPage_new_stext_device(self, options)


    def search_stext_page(self, needle, quads, max_quads):
        """
        search_stext_page(StextPage self, char const * needle, Quad quads, int max_quads) -> int

        Parameters
        ----------
        needle: char const *
        quads: mupdf::Quad &
        max_quads: int

        """
        return _mupdf.StextPage_search_stext_page(self, needle, quads, max_quads)


    def snap_selection(self, ap, bp, mode):
        """
        snap_selection(StextPage self, Point ap, Point bp, int mode) -> Quad

        Parameters
        ----------
        ap: mupdf::Point &
        bp: mupdf::Point &
        mode: int

        """
        return _mupdf.StextPage_snap_selection(self, ap, bp, mode)


    def copy_selection(self, a, b, crlf):
        """
        copy_selection(StextPage self, Point a, Point b, int crlf) -> std::string

        Parameters
        ----------
        a: mupdf::Point &
        b: mupdf::Point &
        crlf: int

        """
        return _mupdf.StextPage_copy_selection(self, a, b, crlf)


    def copy_rectangle(self, area, crlf):
        """
        copy_rectangle(StextPage self, Rect area, int crlf) -> std::string

        Parameters
        ----------
        area: mupdf::Rect &
        crlf: int

        """
        return _mupdf.StextPage_copy_rectangle(self, area, crlf)


    def begin(self):
        """
        begin(StextPage self) -> StextPageIterator

        Parameters
        ----------
        self: mupdf::StextPage *

        """
        return _mupdf.StextPage_begin(self)


    def end(self):
        """
        end(StextPage self) -> StextPageIterator

        Parameters
        ----------
        self: mupdf::StextPage *

        """
        return _mupdf.StextPage_end(self)


    def __init__(self, *args):
        """
        __init__(mupdf::StextPage self, Rect mediabox) -> StextPage

        Parameters
        ----------
        mediabox: mupdf::Rect &

        __init__(mupdf::StextPage self, Document doc, int chapter, int number, StextOptions options) -> StextPage

        Parameters
        ----------
        doc: mupdf::Document const &
        chapter: int
        number: int
        options: mupdf::StextOptions &

        __init__(mupdf::StextPage self, DisplayList list, StextOptions options) -> StextPage

        Parameters
        ----------
        list: mupdf::DisplayList const &
        options: mupdf::StextOptions &

        __init__(mupdf::StextPage self, Page page, StextOptions options) -> StextPage

        Parameters
        ----------
        page: mupdf::Page const &
        options: mupdf::StextOptions &

        __init__(mupdf::StextPage self, Document doc, int number, StextOptions options) -> StextPage

        Parameters
        ----------
        doc: mupdf::Document const &
        number: int
        options: mupdf::StextOptions &

        __init__(mupdf::StextPage self, fz_stext_page internal) -> StextPage

        Parameters
        ----------
        internal: fz_stext_page *

        """
        this = _mupdf.new_StextPage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_StextPage
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.StextPage_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.StextPage_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.StextPage_m_internal_get, _mupdf.StextPage_m_internal_set)
StextPage_swigregister = _mupdf.StextPage_swigregister
StextPage_swigregister(StextPage)

class Storable(_object):
    """Proxy of C++ mupdf::Storable class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Storable, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::Storable self, Storable rhs) -> Storable

        Parameters
        ----------
        rhs: mupdf::Storable const &

        __init__(mupdf::Storable self, fz_storable * internal) -> Storable

        Parameters
        ----------
        internal: fz_storable *

        """
        this = _mupdf.new_Storable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Storable
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Storable_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Storable_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Storable_m_internal_get, _mupdf.Storable_m_internal_set)
Storable_swigregister = _mupdf.Storable_swigregister
Storable_swigregister(Storable)

class Store(_object):
    """Proxy of C++ mupdf::Store class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Store, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Store, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::Store self, fz_store * internal) -> Store

        Parameters
        ----------
        internal: fz_store *

        """
        this = _mupdf.new_Store(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.Store_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Store_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Store_m_internal_get, _mupdf.Store_m_internal_set)
    __swig_destroy__ = _mupdf.delete_Store
    __del__ = lambda self: None
Store_swigregister = _mupdf.Store_swigregister
Store_swigregister(Store)

class StoreHash(_object):
    """Proxy of C++ mupdf::StoreHash class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StoreHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StoreHash, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::StoreHash self, fz_store_hash internal) -> StoreHash

        Parameters
        ----------
        internal: fz_store_hash *

        """
        this = _mupdf.new_StoreHash(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.StoreHash_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.StoreHash_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.StoreHash_m_internal_get, _mupdf.StoreHash_m_internal_set)
    __swig_destroy__ = _mupdf.delete_StoreHash
    __del__ = lambda self: None
StoreHash_swigregister = _mupdf.StoreHash_swigregister
StoreHash_swigregister(StoreHash)

class StoreType(_object):
    """Proxy of C++ mupdf::StoreType class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StoreType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StoreType, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::StoreType self, fz_store_type internal) -> StoreType

        Parameters
        ----------
        internal: fz_store_type *

        """
        this = _mupdf.new_StoreType(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.StoreType_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.StoreType_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.StoreType_m_internal_get, _mupdf.StoreType_m_internal_set)
    __swig_destroy__ = _mupdf.delete_StoreType
    __del__ = lambda self: None
StoreType_swigregister = _mupdf.StoreType_swigregister
StoreType_swigregister(StoreType)

class Stream(_object):
    """Proxy of C++ mupdf::Stream class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stream, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Stream, name)
    __repr__ = _swig_repr

    def available(self, max):
        """
        available(Stream self, size_t max) -> size_t

        Parameters
        ----------
        max: size_t

        """
        return _mupdf.Stream_available(self, max)


    def concat_push_drop(self, chain):
        """
        concat_push_drop(Stream self, Stream chain)

        Parameters
        ----------
        chain: mupdf::Stream const &

        """
        return _mupdf.Stream_concat_push_drop(self, chain)


    def decomp_image_from_stream(self, image, subarea, indexed, l2factor, l2extra):
        """
        decomp_image_from_stream(Stream self, CompressedImage image, Irect subarea, int indexed, int l2factor, int * l2extra) -> Pixmap

        Parameters
        ----------
        image: mupdf::CompressedImage const &
        subarea: mupdf::Irect &
        indexed: int
        l2factor: int
        l2extra: int *

        """
        return _mupdf.Stream_decomp_image_from_stream(self, image, subarea, indexed, l2factor, l2extra)


    def is_eof(self):
        """
        is_eof(Stream self) -> int

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_is_eof(self)


    def is_eof_bits(self):
        """
        is_eof_bits(Stream self) -> int

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_is_eof_bits(self)


    def is_tar_archive(self):
        """
        is_tar_archive(Stream self) -> int

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_is_tar_archive(self)


    def is_zip_archive(self):
        """
        is_zip_archive(Stream self) -> int

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_is_zip_archive(self)


    def new_archive_of_size(self, size):
        """
        new_archive_of_size(Stream self, int size) -> Archive

        Parameters
        ----------
        size: int

        """
        return _mupdf.Stream_new_archive_of_size(self, size)


    def open_a85d(self):
        """
        open_a85d(Stream self) -> Stream

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_open_a85d(self)


    def open_aesd(self, key, keylen):
        """
        open_aesd(Stream self, unsigned char * key, unsigned int keylen) -> Stream

        Parameters
        ----------
        key: unsigned char *
        keylen: unsigned int

        """
        return _mupdf.Stream_open_aesd(self, key, keylen)


    def open_ahxd(self):
        """
        open_ahxd(Stream self) -> Stream

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_open_ahxd(self)


    def open_arc4(self, key, keylen):
        """
        open_arc4(Stream self, unsigned char * key, unsigned int keylen) -> Stream

        Parameters
        ----------
        key: unsigned char *
        keylen: unsigned int

        """
        return _mupdf.Stream_open_arc4(self, key, keylen)


    def open_archive_with_stream(self):
        """
        open_archive_with_stream(Stream self) -> Archive

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_open_archive_with_stream(self)


    def open_dctd(self, color_transform, l2factor, jpegtables):
        """
        open_dctd(Stream self, int color_transform, int l2factor, Stream jpegtables) -> Stream

        Parameters
        ----------
        color_transform: int
        l2factor: int
        jpegtables: mupdf::Stream const &

        """
        return _mupdf.Stream_open_dctd(self, color_transform, l2factor, jpegtables)


    def open_endstream_filter(self, len, offset):
        """
        open_endstream_filter(Stream self, int len, int64_t offset) -> Stream

        Parameters
        ----------
        len: int
        offset: int64_t

        """
        return _mupdf.Stream_open_endstream_filter(self, len, offset)


    def open_faxd(self, k, end_of_line, encoded_byte_align, columns, rows, end_of_block, black_is_1):
        """
        open_faxd(Stream self, int k, int end_of_line, int encoded_byte_align, int columns, int rows, int end_of_block, int black_is_1) -> Stream

        Parameters
        ----------
        k: int
        end_of_line: int
        encoded_byte_align: int
        columns: int
        rows: int
        end_of_block: int
        black_is_1: int

        """
        return _mupdf.Stream_open_faxd(self, k, end_of_line, encoded_byte_align, columns, rows, end_of_block, black_is_1)


    def open_flated(self, window_bits):
        """
        open_flated(Stream self, int window_bits) -> Stream

        Parameters
        ----------
        window_bits: int

        """
        return _mupdf.Stream_open_flated(self, window_bits)


    def open_image_decomp_stream(self, arg_1, l2factor):
        """
        open_image_decomp_stream(Stream self, CompressionParams arg_1, int * l2factor) -> Stream

        Parameters
        ----------
        arg_1: mupdf::CompressionParams const &
        l2factor: int *

        """
        return _mupdf.Stream_open_image_decomp_stream(self, arg_1, l2factor)


    def open_jbig2d(self, globals, embedded):
        """
        open_jbig2d(Stream self, Jbig2Globals globals, int embedded) -> Stream

        Parameters
        ----------
        globals: mupdf::Jbig2Globals const &
        embedded: int

        """
        return _mupdf.Stream_open_jbig2d(self, globals, embedded)


    def open_leecher(self, buf):
        """
        open_leecher(Stream self, Buffer buf) -> Stream

        Parameters
        ----------
        buf: mupdf::Buffer const &

        """
        return _mupdf.Stream_open_leecher(self, buf)


    def open_lzwd(self, early_change, min_bits, reverse_bits, old_tiff):
        """
        open_lzwd(Stream self, int early_change, int min_bits, int reverse_bits, int old_tiff) -> Stream

        Parameters
        ----------
        early_change: int
        min_bits: int
        reverse_bits: int
        old_tiff: int

        """
        return _mupdf.Stream_open_lzwd(self, early_change, min_bits, reverse_bits, old_tiff)


    def open_null_filter(self, len, offset):
        """
        open_null_filter(Stream self, int len, int64_t offset) -> Stream

        Parameters
        ----------
        len: int
        offset: int64_t

        """
        return _mupdf.Stream_open_null_filter(self, len, offset)


    def open_predict(self, predictor, columns, colors, bpc):
        """
        open_predict(Stream self, int predictor, int columns, int colors, int bpc) -> Stream

        Parameters
        ----------
        predictor: int
        columns: int
        colors: int
        bpc: int

        """
        return _mupdf.Stream_open_predict(self, predictor, columns, colors, bpc)


    def open_range_filter(self, ranges, nranges):
        """
        open_range_filter(Stream self, Range ranges, int nranges) -> Stream

        Parameters
        ----------
        ranges: mupdf::Range const &
        nranges: int

        """
        return _mupdf.Stream_open_range_filter(self, ranges, nranges)


    def open_rld(self):
        """
        open_rld(Stream self) -> Stream

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_open_rld(self)


    def open_sgilog16(self, w):
        """
        open_sgilog16(Stream self, int w) -> Stream

        Parameters
        ----------
        w: int

        """
        return _mupdf.Stream_open_sgilog16(self, w)


    def open_sgilog24(self, w):
        """
        open_sgilog24(Stream self, int w) -> Stream

        Parameters
        ----------
        w: int

        """
        return _mupdf.Stream_open_sgilog24(self, w)


    def open_sgilog32(self, w):
        """
        open_sgilog32(Stream self, int w) -> Stream

        Parameters
        ----------
        w: int

        """
        return _mupdf.Stream_open_sgilog32(self, w)


    def open_tar_archive_with_stream(self):
        """
        open_tar_archive_with_stream(Stream self) -> Archive

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_open_tar_archive_with_stream(self)


    def open_thunder(self, w):
        """
        open_thunder(Stream self, int w) -> Stream

        Parameters
        ----------
        w: int

        """
        return _mupdf.Stream_open_thunder(self, w)


    def open_zip_archive_with_stream(self):
        """
        open_zip_archive_with_stream(Stream self) -> Archive

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_open_zip_archive_with_stream(self)


    def peek_byte(self):
        """
        peek_byte(Stream self) -> int

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_peek_byte(self)


    def read(self, data, len):
        """
        read(Stream self, unsigned char * data, size_t len) -> size_t

        Parameters
        ----------
        data: unsigned char *
        len: size_t

        """
        return _mupdf.Stream_read(self, data, len)


    def read_all(self, initial):
        """
        read_all(Stream self, size_t initial) -> Buffer

        Parameters
        ----------
        initial: size_t

        """
        return _mupdf.Stream_read_all(self, initial)


    def read_best(self, initial, truncated):
        """
        read_best(Stream self, size_t initial, int * truncated) -> Buffer

        Parameters
        ----------
        initial: size_t
        truncated: int *

        """
        return _mupdf.Stream_read_best(self, initial, truncated)


    def read_bits(self, n):
        """
        read_bits(Stream self, int n) -> unsigned int

        Parameters
        ----------
        n: int

        """
        return _mupdf.Stream_read_bits(self, n)


    def read_byte(self):
        """
        read_byte(Stream self) -> int

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_byte(self)


    def read_float(self):
        """
        read_float(Stream self) -> float

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_float(self)


    def read_float_le(self):
        """
        read_float_le(Stream self) -> float

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_float_le(self)


    def read_int16(self):
        """
        read_int16(Stream self) -> int16_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_int16(self)


    def read_int16_le(self):
        """
        read_int16_le(Stream self) -> int16_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_int16_le(self)


    def read_int32(self):
        """
        read_int32(Stream self) -> int32_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_int32(self)


    def read_int32_le(self):
        """
        read_int32_le(Stream self) -> int32_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_int32_le(self)


    def read_int64(self):
        """
        read_int64(Stream self) -> int64_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_int64(self)


    def read_int64_le(self):
        """
        read_int64_le(Stream self) -> int64_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_int64_le(self)


    def read_line(self, buf, max):
        """
        read_line(Stream self, char * buf, size_t max) -> char *

        Parameters
        ----------
        buf: char *
        max: size_t

        """
        return _mupdf.Stream_read_line(self, buf, max)


    def read_rbits(self, n):
        """
        read_rbits(Stream self, int n) -> unsigned int

        Parameters
        ----------
        n: int

        """
        return _mupdf.Stream_read_rbits(self, n)


    def read_string(self, buffer, len):
        """
        read_string(Stream self, char * buffer, int len)

        Parameters
        ----------
        buffer: char *
        len: int

        """
        return _mupdf.Stream_read_string(self, buffer, len)


    def read_uint16(self):
        """
        read_uint16(Stream self) -> uint16_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_uint16(self)


    def read_uint16_le(self):
        """
        read_uint16_le(Stream self) -> uint16_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_uint16_le(self)


    def read_uint24(self):
        """
        read_uint24(Stream self) -> uint32_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_uint24(self)


    def read_uint24_le(self):
        """
        read_uint24_le(Stream self) -> uint32_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_uint24_le(self)


    def read_uint32(self):
        """
        read_uint32(Stream self) -> uint32_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_uint32(self)


    def read_uint32_le(self):
        """
        read_uint32_le(Stream self) -> uint32_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_uint32_le(self)


    def read_uint64(self):
        """
        read_uint64(Stream self) -> uint64_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_uint64(self)


    def read_uint64_le(self):
        """
        read_uint64_le(Stream self) -> uint64_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_read_uint64_le(self)


    def seek(self, offset, whence):
        """
        seek(Stream self, int64_t offset, int whence)

        Parameters
        ----------
        offset: int64_t
        whence: int

        """
        return _mupdf.Stream_seek(self, offset, whence)


    def skip(self, len):
        """
        skip(Stream self, size_t len) -> size_t

        Parameters
        ----------
        len: size_t

        """
        return _mupdf.Stream_skip(self, len)


    def skip_space(self):
        """
        skip_space(Stream self)

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_skip_space(self)


    def skip_string(self, str):
        """
        skip_string(Stream self, char const * str) -> int

        Parameters
        ----------
        str: char const *

        """
        return _mupdf.Stream_skip_string(self, str)


    def sync_bits(self):
        """
        sync_bits(Stream self)

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_sync_bits(self)


    def tell(self):
        """
        tell(Stream self) -> int64_t

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_tell(self)


    def unpack_stream(self, depth, w, h, n, indexed, pad, skip):
        """
        unpack_stream(Stream self, int depth, int w, int h, int n, int indexed, int pad, int skip) -> Stream

        Parameters
        ----------
        depth: int
        w: int
        h: int
        n: int
        indexed: int
        pad: int
        skip: int

        """
        return _mupdf.Stream_unpack_stream(self, depth, w, h, n, indexed, pad, skip)


    def unread_byte(self):
        """
        unread_byte(Stream self)

        Parameters
        ----------
        self: mupdf::Stream *

        """
        return _mupdf.Stream_unread_byte(self)


    def __init__(self, *args):
        """
        __init__(mupdf::Stream self, void * state, fz_stream_next_fn * next, fz_stream_drop_fn * drop) -> Stream

        Parameters
        ----------
        state: void *
        next: fz_stream_next_fn *
        drop: fz_stream_drop_fn *

        __init__(mupdf::Stream self, char const * filename) -> Stream

        Parameters
        ----------
        filename: char const *

        __init__(mupdf::Stream self, FILE * file) -> Stream

        Parameters
        ----------
        file: FILE *

        __init__(mupdf::Stream self, unsigned char const * data, size_t len) -> Stream

        Parameters
        ----------
        data: unsigned char const *
        len: size_t

        __init__(mupdf::Stream self, std::string const & filename) -> Stream

        Parameters
        ----------
        filename: std::string const &

        __init__(mupdf::Stream self, Stream rhs) -> Stream

        Parameters
        ----------
        rhs: mupdf::Stream const &

        __init__(mupdf::Stream self, fz_stream * internal) -> Stream

        Parameters
        ----------
        internal: fz_stream *

        """
        this = _mupdf.new_Stream(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Stream
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Stream_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Stream_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Stream_m_internal_get, _mupdf.Stream_m_internal_set)
Stream_swigregister = _mupdf.Stream_swigregister
Stream_swigregister(Stream)

class StrokeState(_object):
    """Proxy of C++ mupdf::StrokeState class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrokeState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrokeState, name)
    __repr__ = _swig_repr

    def clone_stroke_state(self):
        """
        clone_stroke_state(StrokeState self) -> StrokeState

        Parameters
        ----------
        self: mupdf::StrokeState *

        """
        return _mupdf.StrokeState_clone_stroke_state(self)


    def unshare_stroke_state(self):
        """
        unshare_stroke_state(StrokeState self) -> StrokeState

        Parameters
        ----------
        self: mupdf::StrokeState *

        """
        return _mupdf.StrokeState_unshare_stroke_state(self)


    def unshare_stroke_state_with_dash_len(self, len):
        """
        unshare_stroke_state_with_dash_len(StrokeState self, int len) -> StrokeState

        Parameters
        ----------
        len: int

        """
        return _mupdf.StrokeState_unshare_stroke_state_with_dash_len(self, len)


    def __init__(self, *args):
        """
        __init__(mupdf::StrokeState self) -> StrokeState
        __init__(mupdf::StrokeState self, int len) -> StrokeState

        Parameters
        ----------
        len: int

        __init__(mupdf::StrokeState self, StrokeState rhs) -> StrokeState

        Parameters
        ----------
        rhs: mupdf::StrokeState const &

        __init__(mupdf::StrokeState self, fz_stroke_state internal) -> StrokeState

        Parameters
        ----------
        internal: fz_stroke_state *

        """
        this = _mupdf.new_StrokeState(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_StrokeState
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.StrokeState_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.StrokeState_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.StrokeState_m_internal_get, _mupdf.StrokeState_m_internal_set)
StrokeState_swigregister = _mupdf.StrokeState_swigregister
StrokeState_swigregister(StrokeState)

class StyleContext(_object):
    """Proxy of C++ mupdf::StyleContext class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StyleContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StyleContext, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::StyleContext self, fz_style_context * internal) -> StyleContext

        Parameters
        ----------
        internal: fz_style_context *

        """
        this = _mupdf.new_StyleContext(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.StyleContext_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.StyleContext_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.StyleContext_m_internal_get, _mupdf.StyleContext_m_internal_set)
    __swig_destroy__ = _mupdf.delete_StyleContext
    __del__ = lambda self: None
StyleContext_swigregister = _mupdf.StyleContext_swigregister
StyleContext_swigregister(StyleContext)

class Text(_object):
    """Proxy of C++ mupdf::Text class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Text, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Text, name)
    __repr__ = _swig_repr

    def bound_text(self, stroke, ctm):
        """
        bound_text(Text self, StrokeState stroke, Matrix ctm) -> Rect

        Parameters
        ----------
        stroke: mupdf::StrokeState const &
        ctm: mupdf::Matrix &

        """
        return _mupdf.Text_bound_text(self, stroke, ctm)


    def show_glyph(self, font, trm, glyph, unicode, wmode, bidi_level, markup_dir, language):
        """
        show_glyph(Text self, Font font, Matrix trm, int glyph, int unicode, int wmode, int bidi_level, fz_bidi_direction markup_dir, fz_text_language language)

        Parameters
        ----------
        font: mupdf::Font const &
        trm: mupdf::Matrix &
        glyph: int
        unicode: int
        wmode: int
        bidi_level: int
        markup_dir: enum fz_bidi_direction
        language: enum fz_text_language

        """
        return _mupdf.Text_show_glyph(self, font, trm, glyph, unicode, wmode, bidi_level, markup_dir, language)


    def show_string(self, font, trm, s, wmode, bidi_level, markup_dir, language):
        """
        show_string(Text self, Font font, Matrix trm, char const * s, int wmode, int bidi_level, fz_bidi_direction markup_dir, fz_text_language language) -> Matrix

        Parameters
        ----------
        font: mupdf::Font const &
        trm: mupdf::Matrix &
        s: char const *
        wmode: int
        bidi_level: int
        markup_dir: enum fz_bidi_direction
        language: enum fz_text_language

        """
        return _mupdf.Text_show_string(self, font, trm, s, wmode, bidi_level, markup_dir, language)


    def __init__(self, *args):
        """
        __init__(mupdf::Text self) -> Text
        __init__(mupdf::Text self, Text rhs) -> Text

        Parameters
        ----------
        rhs: mupdf::Text const &

        __init__(mupdf::Text self, fz_text internal) -> Text

        Parameters
        ----------
        internal: fz_text *

        """
        this = _mupdf.new_Text(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_Text
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.Text_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Text_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Text_m_internal_get, _mupdf.Text_m_internal_set)
Text_swigregister = _mupdf.Text_swigregister
Text_swigregister(Text)

class TextItem(_object):
    """Proxy of C++ mupdf::TextItem class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextItem, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::TextItem self, fz_text_item internal) -> TextItem

        Parameters
        ----------
        internal: fz_text_item *

        """
        this = _mupdf.new_TextItem(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.TextItem_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.TextItem_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.TextItem_m_internal_get, _mupdf.TextItem_m_internal_set)
    __swig_destroy__ = _mupdf.delete_TextItem
    __del__ = lambda self: None
TextItem_swigregister = _mupdf.TextItem_swigregister
TextItem_swigregister(TextItem)

class TextSpan(_object):
    """Proxy of C++ mupdf::TextSpan class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextSpan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextSpan, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::TextSpan self, fz_text_span internal) -> TextSpan

        Parameters
        ----------
        internal: fz_text_span *

        """
        this = _mupdf.new_TextSpan(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.TextSpan_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.TextSpan_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.TextSpan_m_internal_get, _mupdf.TextSpan_m_internal_set)
    __swig_destroy__ = _mupdf.delete_TextSpan
    __del__ = lambda self: None
TextSpan_swigregister = _mupdf.TextSpan_swigregister
TextSpan_swigregister(TextSpan)

class Transition(_object):
    """Proxy of C++ mupdf::Transition class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Transition, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::Transition self, fz_transition internal) -> Transition

        Parameters
        ----------
        internal: fz_transition const *

        __init__(mupdf::Transition self, fz_transition internal) -> Transition

        Parameters
        ----------
        internal: fz_transition const

        """
        this = _mupdf.new_Transition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def internal(self, *args):
        """
        internal(Transition self) -> fz_transition
        internal(Transition self) -> fz_transition

        Parameters
        ----------
        self: mupdf::Transition const *

        """
        return _mupdf.Transition_internal(self, *args)

    __swig_setmethods__["type"] = _mupdf.Transition_type_set
    __swig_getmethods__["type"] = _mupdf.Transition_type_get
    if _newclass:
        type = _swig_property(_mupdf.Transition_type_get, _mupdf.Transition_type_set)
    __swig_setmethods__["duration"] = _mupdf.Transition_duration_set
    __swig_getmethods__["duration"] = _mupdf.Transition_duration_get
    if _newclass:
        duration = _swig_property(_mupdf.Transition_duration_get, _mupdf.Transition_duration_set)
    __swig_setmethods__["vertical"] = _mupdf.Transition_vertical_set
    __swig_getmethods__["vertical"] = _mupdf.Transition_vertical_get
    if _newclass:
        vertical = _swig_property(_mupdf.Transition_vertical_get, _mupdf.Transition_vertical_set)
    __swig_setmethods__["outwards"] = _mupdf.Transition_outwards_set
    __swig_getmethods__["outwards"] = _mupdf.Transition_outwards_get
    if _newclass:
        outwards = _swig_property(_mupdf.Transition_outwards_get, _mupdf.Transition_outwards_set)
    __swig_setmethods__["direction"] = _mupdf.Transition_direction_set
    __swig_getmethods__["direction"] = _mupdf.Transition_direction_get
    if _newclass:
        direction = _swig_property(_mupdf.Transition_direction_get, _mupdf.Transition_direction_set)
    __swig_setmethods__["state0"] = _mupdf.Transition_state0_set
    __swig_getmethods__["state0"] = _mupdf.Transition_state0_get
    if _newclass:
        state0 = _swig_property(_mupdf.Transition_state0_get, _mupdf.Transition_state0_set)
    __swig_setmethods__["state1"] = _mupdf.Transition_state1_set
    __swig_getmethods__["state1"] = _mupdf.Transition_state1_get
    if _newclass:
        state1 = _swig_property(_mupdf.Transition_state1_get, _mupdf.Transition_state1_set)

    def to_string(self):
        """
        to_string(Transition self) -> std::string

        Parameters
        ----------
        self: mupdf::Transition *

        """
        return _mupdf.Transition_to_string(self)

    __swig_destroy__ = _mupdf.delete_Transition
    __del__ = lambda self: None
Transition_swigregister = _mupdf.Transition_swigregister
Transition_swigregister(Transition)


def __lshift__(*args):
    """
    __lshift__(std::ostream & out, AaContext rhs) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::AaContext const &

    __lshift__(std::ostream & out, ColorParams rhs) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::ColorParams const &

    __lshift__(std::ostream & out, Cookie rhs) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::Cookie const &

    __lshift__(std::ostream & out, DrawOptions rhs) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::DrawOptions const &

    __lshift__(std::ostream & out, Irect rhs) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::Irect const &

    __lshift__(std::ostream & out, Location rhs) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::Location const &

    __lshift__(std::ostream & out, Matrix rhs) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::Matrix const &

    __lshift__(std::ostream & out, PdfWriteOptions rhs) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::PdfWriteOptions const &

    __lshift__(std::ostream & out, Point rhs) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::Point const &

    __lshift__(std::ostream & out, PwgOptions rhs) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::PwgOptions const &

    __lshift__(std::ostream & out, Quad rhs) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::Quad const &

    __lshift__(std::ostream & out, Rect rhs) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::Rect const &

    __lshift__(std::ostream & out, StextOptions rhs) -> std::ostream

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::StextOptions const &

    __lshift__(std::ostream & out, Transition rhs) -> std::ostream &

    Parameters
    ----------
    out: std::ostream &
    rhs: mupdf::Transition const &

    """
    return _mupdf.__lshift__(*args)
class Tree(_object):
    """Proxy of C++ mupdf::Tree class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tree, name)
    __repr__ = _swig_repr

    def tree_insert(self, key, value):
        """
        tree_insert(Tree self, char const * key, void * value) -> Tree

        Parameters
        ----------
        key: char const *
        value: void *

        """
        return _mupdf.Tree_tree_insert(self, key, value)


    def tree_lookup(self, key):
        """
        tree_lookup(Tree self, char const * key) -> void *

        Parameters
        ----------
        key: char const *

        """
        return _mupdf.Tree_tree_lookup(self, key)


    def __init__(self, internal):
        """
        __init__(mupdf::Tree self, fz_tree * internal) -> Tree

        Parameters
        ----------
        internal: fz_tree *

        """
        this = _mupdf.new_Tree(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.Tree_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Tree_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Tree_m_internal_get, _mupdf.Tree_m_internal_set)
    __swig_destroy__ = _mupdf.delete_Tree
    __del__ = lambda self: None
Tree_swigregister = _mupdf.Tree_swigregister
Tree_swigregister(Tree)

class TuningContext(_object):
    """Proxy of C++ mupdf::TuningContext class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TuningContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TuningContext, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::TuningContext self, fz_tuning_context * internal) -> TuningContext

        Parameters
        ----------
        internal: fz_tuning_context *

        """
        this = _mupdf.new_TuningContext(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.TuningContext_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.TuningContext_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.TuningContext_m_internal_get, _mupdf.TuningContext_m_internal_set)
    __swig_destroy__ = _mupdf.delete_TuningContext
    __del__ = lambda self: None
TuningContext_swigregister = _mupdf.TuningContext_swigregister
TuningContext_swigregister(TuningContext)

class Vertex(_object):
    """Proxy of C++ mupdf::Vertex class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vertex, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vertex, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::Vertex self, fz_vertex internal) -> Vertex

        Parameters
        ----------
        internal: fz_vertex *

        """
        this = _mupdf.new_Vertex(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.Vertex_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Vertex_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Vertex_m_internal_get, _mupdf.Vertex_m_internal_set)
    __swig_destroy__ = _mupdf.delete_Vertex
    __del__ = lambda self: None
Vertex_swigregister = _mupdf.Vertex_swigregister
Vertex_swigregister(Vertex)

class WarnContext(_object):
    """Proxy of C++ mupdf::WarnContext class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WarnContext, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WarnContext, name)
    __repr__ = _swig_repr

    def __init__(self, internal):
        """
        __init__(mupdf::WarnContext self, fz_warn_context internal) -> WarnContext

        Parameters
        ----------
        internal: fz_warn_context *

        """
        this = _mupdf.new_WarnContext(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.WarnContext_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.WarnContext_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.WarnContext_m_internal_get, _mupdf.WarnContext_m_internal_set)
    __swig_destroy__ = _mupdf.delete_WarnContext
    __del__ = lambda self: None
WarnContext_swigregister = _mupdf.WarnContext_swigregister
WarnContext_swigregister(WarnContext)

class Xml(_object):
    """Proxy of C++ mupdf::Xml class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Xml, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Xml, name)
    __repr__ = _swig_repr

    def debug_xml(self, level):
        """
        debug_xml(Xml self, int level)

        Parameters
        ----------
        level: int

        """
        return _mupdf.Xml_debug_xml(self, level)


    def xml_att(self, att):
        """
        xml_att(Xml self, char const * att) -> char *

        Parameters
        ----------
        att: char const *

        """
        return _mupdf.Xml_xml_att(self, att)


    def xml_att_alt(self, one, two):
        """
        xml_att_alt(Xml self, char const * one, char const * two) -> char *

        Parameters
        ----------
        one: char const *
        two: char const *

        """
        return _mupdf.Xml_xml_att_alt(self, one, two)


    def xml_att_eq(self, name, match):
        """
        xml_att_eq(Xml self, char const * name, char const * match) -> int

        Parameters
        ----------
        name: char const *
        match: char const *

        """
        return _mupdf.Xml_xml_att_eq(self, name, match)


    def xml_down(self):
        """
        xml_down(Xml self) -> Xml

        Parameters
        ----------
        self: mupdf::Xml *

        """
        return _mupdf.Xml_xml_down(self)


    def xml_find(self, tag):
        """
        xml_find(Xml self, char const * tag) -> Xml

        Parameters
        ----------
        tag: char const *

        """
        return _mupdf.Xml_xml_find(self, tag)


    def xml_find_down(self, tag):
        """
        xml_find_down(Xml self, char const * tag) -> Xml

        Parameters
        ----------
        tag: char const *

        """
        return _mupdf.Xml_xml_find_down(self, tag)


    def xml_find_down_match(self, tag, att, match):
        """
        xml_find_down_match(Xml self, char const * tag, char const * att, char const * match) -> Xml

        Parameters
        ----------
        tag: char const *
        att: char const *
        match: char const *

        """
        return _mupdf.Xml_xml_find_down_match(self, tag, att, match)


    def xml_find_match(self, tag, att, match):
        """
        xml_find_match(Xml self, char const * tag, char const * att, char const * match) -> Xml

        Parameters
        ----------
        tag: char const *
        att: char const *
        match: char const *

        """
        return _mupdf.Xml_xml_find_match(self, tag, att, match)


    def xml_find_next(self, tag):
        """
        xml_find_next(Xml self, char const * tag) -> Xml

        Parameters
        ----------
        tag: char const *

        """
        return _mupdf.Xml_xml_find_next(self, tag)


    def xml_find_next_match(self, tag, att, match):
        """
        xml_find_next_match(Xml self, char const * tag, char const * att, char const * match) -> Xml

        Parameters
        ----------
        tag: char const *
        att: char const *
        match: char const *

        """
        return _mupdf.Xml_xml_find_next_match(self, tag, att, match)


    def xml_is_tag(self, name):
        """
        xml_is_tag(Xml self, char const * name) -> int

        Parameters
        ----------
        name: char const *

        """
        return _mupdf.Xml_xml_is_tag(self, name)


    def xml_next(self):
        """
        xml_next(Xml self) -> Xml

        Parameters
        ----------
        self: mupdf::Xml *

        """
        return _mupdf.Xml_xml_next(self)


    def xml_prev(self):
        """
        xml_prev(Xml self) -> Xml

        Parameters
        ----------
        self: mupdf::Xml *

        """
        return _mupdf.Xml_xml_prev(self)


    def xml_tag(self):
        """
        xml_tag(Xml self) -> char *

        Parameters
        ----------
        self: mupdf::Xml *

        """
        return _mupdf.Xml_xml_tag(self)


    def xml_text(self):
        """
        xml_text(Xml self) -> char *

        Parameters
        ----------
        self: mupdf::Xml *

        """
        return _mupdf.Xml_xml_text(self)


    def xml_up(self):
        """
        xml_up(Xml self) -> Xml

        Parameters
        ----------
        self: mupdf::Xml *

        """
        return _mupdf.Xml_xml_up(self)


    def __init__(self, internal):
        """
        __init__(mupdf::Xml self, fz_xml * internal) -> Xml

        Parameters
        ----------
        internal: fz_xml *

        """
        this = _mupdf.new_Xml(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.Xml_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.Xml_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.Xml_m_internal_get, _mupdf.Xml_m_internal_set)
    __swig_destroy__ = _mupdf.delete_Xml
    __del__ = lambda self: None
Xml_swigregister = _mupdf.Xml_swigregister
Xml_swigregister(Xml)

class XmlDoc(_object):
    """Proxy of C++ mupdf::XmlDoc class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XmlDoc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XmlDoc, name)
    __repr__ = _swig_repr

    def detach_xml(self, node):
        """
        detach_xml(XmlDoc self, Xml node)

        Parameters
        ----------
        node: mupdf::Xml const &

        """
        return _mupdf.XmlDoc_detach_xml(self, node)


    def new_display_list_from_svg_xml(self, xml, base_uri, zip, w, h):
        """
        new_display_list_from_svg_xml(XmlDoc self, Xml xml, char const * base_uri, Archive zip, float * w, float * h) -> DisplayList

        Parameters
        ----------
        xml: mupdf::Xml const &
        base_uri: char const *
        zip: mupdf::Archive const &
        w: float *
        h: float *

        """
        return _mupdf.XmlDoc_new_display_list_from_svg_xml(self, xml, base_uri, zip, w, h)


    def new_image_from_svg_xml(self, xml, base_uri, zip):
        """
        new_image_from_svg_xml(XmlDoc self, Xml xml, char const * base_uri, Archive zip) -> Image

        Parameters
        ----------
        xml: mupdf::Xml const &
        base_uri: char const *
        zip: mupdf::Archive const &

        """
        return _mupdf.XmlDoc_new_image_from_svg_xml(self, xml, base_uri, zip)


    def xml_root(self):
        """
        xml_root(XmlDoc self) -> Xml

        Parameters
        ----------
        self: mupdf::XmlDoc *

        """
        return _mupdf.XmlDoc_xml_root(self)


    def __init__(self, internal):
        """
        __init__(mupdf::XmlDoc self, fz_xml_doc * internal) -> XmlDoc

        Parameters
        ----------
        internal: fz_xml_doc *

        """
        this = _mupdf.new_XmlDoc(internal)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["m_internal"] = _mupdf.XmlDoc_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.XmlDoc_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.XmlDoc_m_internal_get, _mupdf.XmlDoc_m_internal_set)
    __swig_destroy__ = _mupdf.delete_XmlDoc
    __del__ = lambda self: None
XmlDoc_swigregister = _mupdf.XmlDoc_swigregister
XmlDoc_swigregister(XmlDoc)

class ZipWriter(_object):
    """Proxy of C++ mupdf::ZipWriter class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZipWriter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ZipWriter, name)
    __repr__ = _swig_repr

    def close_zip_writer(self):
        """
        close_zip_writer(ZipWriter self)

        Parameters
        ----------
        self: mupdf::ZipWriter *

        """
        return _mupdf.ZipWriter_close_zip_writer(self)


    def write_zip_entry(self, name, buf, compress):
        """
        write_zip_entry(ZipWriter self, char const * name, Buffer buf, int compress)

        Parameters
        ----------
        name: char const *
        buf: mupdf::Buffer const &
        compress: int

        """
        return _mupdf.ZipWriter_write_zip_entry(self, name, buf, compress)


    def __init__(self, *args):
        """
        __init__(mupdf::ZipWriter self, char const * filename) -> ZipWriter

        Parameters
        ----------
        filename: char const *

        __init__(mupdf::ZipWriter self, Output out) -> ZipWriter

        Parameters
        ----------
        out: mupdf::Output const &

        __init__(mupdf::ZipWriter self, fz_zip_writer * internal) -> ZipWriter

        Parameters
        ----------
        internal: fz_zip_writer *

        """
        this = _mupdf.new_ZipWriter(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ZipWriter
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.ZipWriter_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.ZipWriter_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.ZipWriter_m_internal_get, _mupdf.ZipWriter_m_internal_set)
ZipWriter_swigregister = _mupdf.ZipWriter_swigregister
ZipWriter_swigregister(ZipWriter)

class LinkIterator(_object):
    """Proxy of C++ mupdf::LinkIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinkIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinkIterator, name)
    __repr__ = _swig_repr

    def __init__(self, item):
        """
        __init__(mupdf::LinkIterator self, Link item) -> LinkIterator

        Parameters
        ----------
        item: mupdf::Link const &

        """
        this = _mupdf.new_LinkIterator(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __increment__(self):
        """
        __increment__(LinkIterator self) -> LinkIterator

        Parameters
        ----------
        self: mupdf::LinkIterator *

        """
        return _mupdf.LinkIterator___increment__(self)


    def __eq__(self, rhs):
        """
        __eq__(LinkIterator self, LinkIterator rhs) -> bool

        Parameters
        ----------
        rhs: mupdf::LinkIterator const &

        """
        return _mupdf.LinkIterator___eq__(self, rhs)


    def __ne__(self, rhs):
        """
        __ne__(LinkIterator self, LinkIterator rhs) -> bool

        Parameters
        ----------
        rhs: mupdf::LinkIterator const &

        """
        return _mupdf.LinkIterator___ne__(self, rhs)


    def __ref__(self):
        """
        __ref__(LinkIterator self) -> Link

        Parameters
        ----------
        self: mupdf::LinkIterator *

        """
        return _mupdf.LinkIterator___ref__(self)


    def __deref__(self):
        """
        __deref__(LinkIterator self) -> Link

        Parameters
        ----------
        self: mupdf::LinkIterator *

        """
        return _mupdf.LinkIterator___deref__(self)

    __swig_destroy__ = _mupdf.delete_LinkIterator
    __del__ = lambda self: None

    def begin(self):
        """
        begin(LinkIterator self) -> LinkIterator

        Parameters
        ----------
        self: mupdf::LinkIterator *

        """
        return _mupdf.LinkIterator_begin(self)


    def end(self):
        """
        end(LinkIterator self) -> LinkIterator

        Parameters
        ----------
        self: mupdf::LinkIterator *

        """
        return _mupdf.LinkIterator_end(self)


    def refs(self):
        """
        refs(LinkIterator self) -> int

        Parameters
        ----------
        self: mupdf::LinkIterator *

        """
        return _mupdf.LinkIterator_refs(self)


    def next(self):
        """
        next(LinkIterator self) -> Link

        Parameters
        ----------
        self: mupdf::LinkIterator *

        """
        return _mupdf.LinkIterator_next(self)


    def rect(self):
        """
        rect(LinkIterator self) -> fz_rect

        Parameters
        ----------
        self: mupdf::LinkIterator *

        """
        return _mupdf.LinkIterator_rect(self)


    def uri(self):
        """
        uri(LinkIterator self) -> char const *

        Parameters
        ----------
        self: mupdf::LinkIterator *

        """
        return _mupdf.LinkIterator_uri(self)

    __swig_setmethods__["m_internal"] = _mupdf.LinkIterator_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.LinkIterator_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.LinkIterator_m_internal_get, _mupdf.LinkIterator_m_internal_set)
LinkIterator_swigregister = _mupdf.LinkIterator_swigregister
LinkIterator_swigregister(LinkIterator)

class OutlineIterator(_object):
    """Proxy of C++ mupdf::OutlineIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OutlineIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OutlineIterator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(mupdf::OutlineIterator self) -> OutlineIterator
        __init__(mupdf::OutlineIterator self, Outline item) -> OutlineIterator

        Parameters
        ----------
        item: mupdf::Outline const &

        """
        this = _mupdf.new_OutlineIterator(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __increment__(self):
        """
        __increment__(OutlineIterator self) -> OutlineIterator

        Parameters
        ----------
        self: mupdf::OutlineIterator *

        """
        return _mupdf.OutlineIterator___increment__(self)


    def __eq__(self, rhs):
        """
        __eq__(OutlineIterator self, OutlineIterator rhs) -> bool

        Parameters
        ----------
        rhs: mupdf::OutlineIterator const &

        """
        return _mupdf.OutlineIterator___eq__(self, rhs)


    def __ne__(self, rhs):
        """
        __ne__(OutlineIterator self, OutlineIterator rhs) -> bool

        Parameters
        ----------
        rhs: mupdf::OutlineIterator const &

        """
        return _mupdf.OutlineIterator___ne__(self, rhs)


    def __ref__(self):
        """
        __ref__(OutlineIterator self) -> OutlineIterator

        Parameters
        ----------
        self: mupdf::OutlineIterator *

        """
        return _mupdf.OutlineIterator___ref__(self)


    def __deref__(self):
        """
        __deref__(OutlineIterator self) -> OutlineIterator

        Parameters
        ----------
        self: mupdf::OutlineIterator *

        """
        return _mupdf.OutlineIterator___deref__(self)

    __swig_setmethods__["m_outline"] = _mupdf.OutlineIterator_m_outline_set
    __swig_getmethods__["m_outline"] = _mupdf.OutlineIterator_m_outline_get
    if _newclass:
        m_outline = _swig_property(_mupdf.OutlineIterator_m_outline_get, _mupdf.OutlineIterator_m_outline_set)
    __swig_setmethods__["m_depth"] = _mupdf.OutlineIterator_m_depth_set
    __swig_getmethods__["m_depth"] = _mupdf.OutlineIterator_m_depth_get
    if _newclass:
        m_depth = _swig_property(_mupdf.OutlineIterator_m_depth_get, _mupdf.OutlineIterator_m_depth_set)
    __swig_destroy__ = _mupdf.delete_OutlineIterator
    __del__ = lambda self: None
OutlineIterator_swigregister = _mupdf.OutlineIterator_swigregister
OutlineIterator_swigregister(OutlineIterator)

class StextBlockIterator(_object):
    """Proxy of C++ mupdf::StextBlockIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StextBlockIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StextBlockIterator, name)
    __repr__ = _swig_repr

    def __init__(self, item):
        """
        __init__(mupdf::StextBlockIterator self, StextLine item) -> StextBlockIterator

        Parameters
        ----------
        item: mupdf::StextLine const &

        """
        this = _mupdf.new_StextBlockIterator(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __increment__(self):
        """
        __increment__(StextBlockIterator self) -> StextBlockIterator

        Parameters
        ----------
        self: mupdf::StextBlockIterator *

        """
        return _mupdf.StextBlockIterator___increment__(self)


    def __eq__(self, rhs):
        """
        __eq__(StextBlockIterator self, StextBlockIterator rhs) -> bool

        Parameters
        ----------
        rhs: mupdf::StextBlockIterator const &

        """
        return _mupdf.StextBlockIterator___eq__(self, rhs)


    def __ne__(self, rhs):
        """
        __ne__(StextBlockIterator self, StextBlockIterator rhs) -> bool

        Parameters
        ----------
        rhs: mupdf::StextBlockIterator const &

        """
        return _mupdf.StextBlockIterator___ne__(self, rhs)


    def __ref__(self):
        """
        __ref__(StextBlockIterator self) -> StextLine

        Parameters
        ----------
        self: mupdf::StextBlockIterator *

        """
        return _mupdf.StextBlockIterator___ref__(self)


    def __deref__(self):
        """
        __deref__(StextBlockIterator self) -> StextLine

        Parameters
        ----------
        self: mupdf::StextBlockIterator *

        """
        return _mupdf.StextBlockIterator___deref__(self)

    __swig_destroy__ = _mupdf.delete_StextBlockIterator
    __del__ = lambda self: None

    def begin(self):
        """
        begin(StextBlockIterator self) -> StextLineIterator

        Parameters
        ----------
        self: mupdf::StextBlockIterator *

        """
        return _mupdf.StextBlockIterator_begin(self)


    def end(self):
        """
        end(StextBlockIterator self) -> StextLineIterator

        Parameters
        ----------
        self: mupdf::StextBlockIterator *

        """
        return _mupdf.StextBlockIterator_end(self)

    __swig_setmethods__["m_internal"] = _mupdf.StextBlockIterator_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.StextBlockIterator_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.StextBlockIterator_m_internal_get, _mupdf.StextBlockIterator_m_internal_set)
StextBlockIterator_swigregister = _mupdf.StextBlockIterator_swigregister
StextBlockIterator_swigregister(StextBlockIterator)

class StextLineIterator(_object):
    """Proxy of C++ mupdf::StextLineIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StextLineIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StextLineIterator, name)
    __repr__ = _swig_repr

    def __init__(self, item):
        """
        __init__(mupdf::StextLineIterator self, StextChar item) -> StextLineIterator

        Parameters
        ----------
        item: mupdf::StextChar const &

        """
        this = _mupdf.new_StextLineIterator(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __increment__(self):
        """
        __increment__(StextLineIterator self) -> StextLineIterator

        Parameters
        ----------
        self: mupdf::StextLineIterator *

        """
        return _mupdf.StextLineIterator___increment__(self)


    def __eq__(self, rhs):
        """
        __eq__(StextLineIterator self, StextLineIterator rhs) -> bool

        Parameters
        ----------
        rhs: mupdf::StextLineIterator const &

        """
        return _mupdf.StextLineIterator___eq__(self, rhs)


    def __ne__(self, rhs):
        """
        __ne__(StextLineIterator self, StextLineIterator rhs) -> bool

        Parameters
        ----------
        rhs: mupdf::StextLineIterator const &

        """
        return _mupdf.StextLineIterator___ne__(self, rhs)


    def __ref__(self):
        """
        __ref__(StextLineIterator self) -> StextChar

        Parameters
        ----------
        self: mupdf::StextLineIterator *

        """
        return _mupdf.StextLineIterator___ref__(self)


    def __deref__(self):
        """
        __deref__(StextLineIterator self) -> StextChar

        Parameters
        ----------
        self: mupdf::StextLineIterator *

        """
        return _mupdf.StextLineIterator___deref__(self)

    __swig_destroy__ = _mupdf.delete_StextLineIterator
    __del__ = lambda self: None
    __swig_setmethods__["m_internal"] = _mupdf.StextLineIterator_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.StextLineIterator_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.StextLineIterator_m_internal_get, _mupdf.StextLineIterator_m_internal_set)
StextLineIterator_swigregister = _mupdf.StextLineIterator_swigregister
StextLineIterator_swigregister(StextLineIterator)

class StextPageIterator(_object):
    """Proxy of C++ mupdf::StextPageIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StextPageIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StextPageIterator, name)
    __repr__ = _swig_repr

    def __init__(self, item):
        """
        __init__(mupdf::StextPageIterator self, StextBlock item) -> StextPageIterator

        Parameters
        ----------
        item: mupdf::StextBlock const &

        """
        this = _mupdf.new_StextPageIterator(item)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __increment__(self):
        """
        __increment__(StextPageIterator self) -> StextPageIterator

        Parameters
        ----------
        self: mupdf::StextPageIterator *

        """
        return _mupdf.StextPageIterator___increment__(self)


    def __eq__(self, rhs):
        """
        __eq__(StextPageIterator self, StextPageIterator rhs) -> bool

        Parameters
        ----------
        rhs: mupdf::StextPageIterator const &

        """
        return _mupdf.StextPageIterator___eq__(self, rhs)


    def __ne__(self, rhs):
        """
        __ne__(StextPageIterator self, StextPageIterator rhs) -> bool

        Parameters
        ----------
        rhs: mupdf::StextPageIterator const &

        """
        return _mupdf.StextPageIterator___ne__(self, rhs)


    def __ref__(self):
        """
        __ref__(StextPageIterator self) -> StextBlock

        Parameters
        ----------
        self: mupdf::StextPageIterator *

        """
        return _mupdf.StextPageIterator___ref__(self)


    def __deref__(self):
        """
        __deref__(StextPageIterator self) -> StextBlock

        Parameters
        ----------
        self: mupdf::StextPageIterator *

        """
        return _mupdf.StextPageIterator___deref__(self)

    __swig_destroy__ = _mupdf.delete_StextPageIterator
    __del__ = lambda self: None

    def i_transform(self):
        """
        i_transform(StextPageIterator self) -> Matrix

        Parameters
        ----------
        self: mupdf::StextPageIterator *

        """
        return _mupdf.StextPageIterator_i_transform(self)


    def i_image(self):
        """
        i_image(StextPageIterator self) -> Image

        Parameters
        ----------
        self: mupdf::StextPageIterator *

        """
        return _mupdf.StextPageIterator_i_image(self)


    def begin(self):
        """
        begin(StextPageIterator self) -> StextBlockIterator

        Parameters
        ----------
        self: mupdf::StextPageIterator *

        """
        return _mupdf.StextPageIterator_begin(self)


    def end(self):
        """
        end(StextPageIterator self) -> StextBlockIterator

        Parameters
        ----------
        self: mupdf::StextPageIterator *

        """
        return _mupdf.StextPageIterator_end(self)

    __swig_setmethods__["m_internal"] = _mupdf.StextPageIterator_m_internal_set
    __swig_getmethods__["m_internal"] = _mupdf.StextPageIterator_m_internal_get
    if _newclass:
        m_internal = _swig_property(_mupdf.StextPageIterator_m_internal_get, _mupdf.StextPageIterator_m_internal_set)
StextPageIterator_swigregister = _mupdf.StextPageIterator_swigregister
StextPageIterator_swigregister(StextPageIterator)


def buffer_extract_bytes(buffer):
    """
    buffer_extract_bytes(fz_buffer buffer) -> PyObject *

    Parameters
    ----------
    buffer: fz_buffer *

    """
    return _mupdf.buffer_extract_bytes(buffer)
class bitmap_details_outparams(_object):
    """Proxy of C++ bitmap_details_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bitmap_details_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bitmap_details_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _mupdf.bitmap_details_outparams_w_set
    __swig_getmethods__["w"] = _mupdf.bitmap_details_outparams_w_get
    if _newclass:
        w = _swig_property(_mupdf.bitmap_details_outparams_w_get, _mupdf.bitmap_details_outparams_w_set)
    __swig_setmethods__["h"] = _mupdf.bitmap_details_outparams_h_set
    __swig_getmethods__["h"] = _mupdf.bitmap_details_outparams_h_get
    if _newclass:
        h = _swig_property(_mupdf.bitmap_details_outparams_h_get, _mupdf.bitmap_details_outparams_h_set)
    __swig_setmethods__["n"] = _mupdf.bitmap_details_outparams_n_set
    __swig_getmethods__["n"] = _mupdf.bitmap_details_outparams_n_get
    if _newclass:
        n = _swig_property(_mupdf.bitmap_details_outparams_n_get, _mupdf.bitmap_details_outparams_n_set)
    __swig_setmethods__["stride"] = _mupdf.bitmap_details_outparams_stride_set
    __swig_getmethods__["stride"] = _mupdf.bitmap_details_outparams_stride_get
    if _newclass:
        stride = _swig_property(_mupdf.bitmap_details_outparams_stride_get, _mupdf.bitmap_details_outparams_stride_set)

    def __init__(self):
        """__init__(bitmap_details_outparams self) -> bitmap_details_outparams"""
        this = _mupdf.new_bitmap_details_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_bitmap_details_outparams
    __del__ = lambda self: None
bitmap_details_outparams_swigregister = _mupdf.bitmap_details_outparams_swigregister
bitmap_details_outparams_swigregister(bitmap_details_outparams)


def bitmap_details_outparams_fn(bitmap, outparams):
    """
    bitmap_details_outparams_fn(fz_bitmap bitmap, bitmap_details_outparams outparams)

    Parameters
    ----------
    bitmap: fz_bitmap *
    outparams: bitmap_details_outparams *

    """
    return _mupdf.bitmap_details_outparams_fn(bitmap, outparams)
class buffer_extract_outparams(_object):
    """Proxy of C++ buffer_extract_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, buffer_extract_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, buffer_extract_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _mupdf.buffer_extract_outparams_data_set
    __swig_getmethods__["data"] = _mupdf.buffer_extract_outparams_data_get
    if _newclass:
        data = _swig_property(_mupdf.buffer_extract_outparams_data_get, _mupdf.buffer_extract_outparams_data_set)

    def __init__(self):
        """__init__(buffer_extract_outparams self) -> buffer_extract_outparams"""
        this = _mupdf.new_buffer_extract_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_buffer_extract_outparams
    __del__ = lambda self: None
buffer_extract_outparams_swigregister = _mupdf.buffer_extract_outparams_swigregister
buffer_extract_outparams_swigregister(buffer_extract_outparams)


def buffer_extract_outparams_fn(buf, outparams):
    """
    buffer_extract_outparams_fn(fz_buffer buf, buffer_extract_outparams outparams) -> size_t

    Parameters
    ----------
    buf: fz_buffer *
    outparams: buffer_extract_outparams *

    """
    return _mupdf.buffer_extract_outparams_fn(buf, outparams)
class buffer_storage_outparams(_object):
    """Proxy of C++ buffer_storage_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, buffer_storage_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, buffer_storage_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["datap"] = _mupdf.buffer_storage_outparams_datap_set
    __swig_getmethods__["datap"] = _mupdf.buffer_storage_outparams_datap_get
    if _newclass:
        datap = _swig_property(_mupdf.buffer_storage_outparams_datap_get, _mupdf.buffer_storage_outparams_datap_set)

    def __init__(self):
        """__init__(buffer_storage_outparams self) -> buffer_storage_outparams"""
        this = _mupdf.new_buffer_storage_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_buffer_storage_outparams
    __del__ = lambda self: None
buffer_storage_outparams_swigregister = _mupdf.buffer_storage_outparams_swigregister
buffer_storage_outparams_swigregister(buffer_storage_outparams)


def buffer_storage_outparams_fn(buf, outparams):
    """
    buffer_storage_outparams_fn(fz_buffer buf, buffer_storage_outparams outparams) -> size_t

    Parameters
    ----------
    buf: fz_buffer *
    outparams: buffer_storage_outparams *

    """
    return _mupdf.buffer_storage_outparams_fn(buf, outparams)
class chartorune_outparams(_object):
    """Proxy of C++ chartorune_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, chartorune_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, chartorune_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rune"] = _mupdf.chartorune_outparams_rune_set
    __swig_getmethods__["rune"] = _mupdf.chartorune_outparams_rune_get
    if _newclass:
        rune = _swig_property(_mupdf.chartorune_outparams_rune_get, _mupdf.chartorune_outparams_rune_set)

    def __init__(self):
        """__init__(chartorune_outparams self) -> chartorune_outparams"""
        this = _mupdf.new_chartorune_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_chartorune_outparams
    __del__ = lambda self: None
chartorune_outparams_swigregister = _mupdf.chartorune_outparams_swigregister
chartorune_outparams_swigregister(chartorune_outparams)


def chartorune_outparams_fn(str, outparams):
    """
    chartorune_outparams_fn(char const * str, chartorune_outparams outparams) -> int

    Parameters
    ----------
    str: char const *
    outparams: chartorune_outparams *

    """
    return _mupdf.chartorune_outparams_fn(str, outparams)
class clamp_color_outparams(_object):
    """Proxy of C++ clamp_color_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, clamp_color_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, clamp_color_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["out"] = _mupdf.clamp_color_outparams_out_set
    __swig_getmethods__["out"] = _mupdf.clamp_color_outparams_out_get
    if _newclass:
        out = _swig_property(_mupdf.clamp_color_outparams_out_get, _mupdf.clamp_color_outparams_out_set)

    def __init__(self):
        """__init__(clamp_color_outparams self) -> clamp_color_outparams"""
        this = _mupdf.new_clamp_color_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_clamp_color_outparams
    __del__ = lambda self: None
clamp_color_outparams_swigregister = _mupdf.clamp_color_outparams_swigregister
clamp_color_outparams_swigregister(clamp_color_outparams)


def clamp_color_outparams_fn(cs, arg2, outparams):
    """
    clamp_color_outparams_fn(fz_colorspace * cs, float const * arg2, clamp_color_outparams outparams)

    Parameters
    ----------
    cs: fz_colorspace *
    in: float const *
    outparams: clamp_color_outparams *

    """
    return _mupdf.clamp_color_outparams_fn(cs, arg2, outparams)
class convert_color_outparams(_object):
    """Proxy of C++ convert_color_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, convert_color_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, convert_color_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dv"] = _mupdf.convert_color_outparams_dv_set
    __swig_getmethods__["dv"] = _mupdf.convert_color_outparams_dv_get
    if _newclass:
        dv = _swig_property(_mupdf.convert_color_outparams_dv_get, _mupdf.convert_color_outparams_dv_set)

    def __init__(self):
        """__init__(convert_color_outparams self) -> convert_color_outparams"""
        this = _mupdf.new_convert_color_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_convert_color_outparams
    __del__ = lambda self: None
convert_color_outparams_swigregister = _mupdf.convert_color_outparams_swigregister
convert_color_outparams_swigregister(convert_color_outparams)


def convert_color_outparams_fn(ss, sv, ds, arg4, params, outparams):
    """
    convert_color_outparams_fn(fz_colorspace * ss, float const * sv, fz_colorspace * ds, fz_colorspace * arg4, fz_color_params params, convert_color_outparams outparams)

    Parameters
    ----------
    ss: fz_colorspace *
    sv: float const *
    ds: fz_colorspace *
    is: fz_colorspace *
    params: fz_color_params
    outparams: convert_color_outparams *

    """
    return _mupdf.convert_color_outparams_fn(ss, sv, ds, arg4, params, outparams)
class convert_separation_colors_outparams(_object):
    """Proxy of C++ convert_separation_colors_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, convert_separation_colors_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, convert_separation_colors_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst_color"] = _mupdf.convert_separation_colors_outparams_dst_color_set
    __swig_getmethods__["dst_color"] = _mupdf.convert_separation_colors_outparams_dst_color_get
    if _newclass:
        dst_color = _swig_property(_mupdf.convert_separation_colors_outparams_dst_color_get, _mupdf.convert_separation_colors_outparams_dst_color_set)

    def __init__(self):
        """__init__(convert_separation_colors_outparams self) -> convert_separation_colors_outparams"""
        this = _mupdf.new_convert_separation_colors_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_convert_separation_colors_outparams
    __del__ = lambda self: None
convert_separation_colors_outparams_swigregister = _mupdf.convert_separation_colors_outparams_swigregister
convert_separation_colors_outparams_swigregister(convert_separation_colors_outparams)


def convert_separation_colors_outparams_fn(src_cs, src_color, dst_seps, dst_cs, color_params, outparams):
    """
    convert_separation_colors_outparams_fn(fz_colorspace * src_cs, float const * src_color, fz_separations * dst_seps, fz_colorspace * dst_cs, fz_color_params color_params, convert_separation_colors_outparams outparams)

    Parameters
    ----------
    src_cs: fz_colorspace *
    src_color: float const *
    dst_seps: fz_separations *
    dst_cs: fz_colorspace *
    color_params: fz_color_params
    outparams: convert_separation_colors_outparams *

    """
    return _mupdf.convert_separation_colors_outparams_fn(src_cs, src_color, dst_seps, dst_cs, color_params, outparams)
class decomp_image_from_stream_outparams(_object):
    """Proxy of C++ decomp_image_from_stream_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, decomp_image_from_stream_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, decomp_image_from_stream_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["l2extra"] = _mupdf.decomp_image_from_stream_outparams_l2extra_set
    __swig_getmethods__["l2extra"] = _mupdf.decomp_image_from_stream_outparams_l2extra_get
    if _newclass:
        l2extra = _swig_property(_mupdf.decomp_image_from_stream_outparams_l2extra_get, _mupdf.decomp_image_from_stream_outparams_l2extra_set)

    def __init__(self):
        """__init__(decomp_image_from_stream_outparams self) -> decomp_image_from_stream_outparams"""
        this = _mupdf.new_decomp_image_from_stream_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_decomp_image_from_stream_outparams
    __del__ = lambda self: None
decomp_image_from_stream_outparams_swigregister = _mupdf.decomp_image_from_stream_outparams_swigregister
decomp_image_from_stream_outparams_swigregister(decomp_image_from_stream_outparams)


def decomp_image_from_stream_outparams_fn(stm, image, subarea, indexed, l2factor, outparams):
    """
    decomp_image_from_stream_outparams_fn(fz_stream * stm, fz_compressed_image * image, fz_irect subarea, int indexed, int l2factor, decomp_image_from_stream_outparams outparams) -> fz_pixmap *

    Parameters
    ----------
    stm: fz_stream *
    image: fz_compressed_image *
    subarea: fz_irect *
    indexed: int
    l2factor: int
    outparams: decomp_image_from_stream_outparams *

    """
    return _mupdf.decomp_image_from_stream_outparams_fn(stm, image, subarea, indexed, l2factor, outparams)
class deflate_outparams(_object):
    """Proxy of C++ deflate_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, deflate_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, deflate_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["compressed_length"] = _mupdf.deflate_outparams_compressed_length_set
    __swig_getmethods__["compressed_length"] = _mupdf.deflate_outparams_compressed_length_get
    if _newclass:
        compressed_length = _swig_property(_mupdf.deflate_outparams_compressed_length_get, _mupdf.deflate_outparams_compressed_length_set)

    def __init__(self):
        """__init__(deflate_outparams self) -> deflate_outparams"""
        this = _mupdf.new_deflate_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_deflate_outparams
    __del__ = lambda self: None
deflate_outparams_swigregister = _mupdf.deflate_outparams_swigregister
deflate_outparams_swigregister(deflate_outparams)


def deflate_outparams_fn(dest, source, source_length, level, outparams):
    """
    deflate_outparams_fn(unsigned char * dest, unsigned char const * source, size_t source_length, fz_deflate_level level, deflate_outparams outparams)

    Parameters
    ----------
    dest: unsigned char *
    source: unsigned char const *
    source_length: size_t
    level: enum fz_deflate_level
    outparams: deflate_outparams *

    """
    return _mupdf.deflate_outparams_fn(dest, source, source_length, level, outparams)
class drop_imp_outparams(_object):
    """Proxy of C++ drop_imp_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, drop_imp_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, drop_imp_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.drop_imp_outparams_refs_set
    __swig_getmethods__["refs"] = _mupdf.drop_imp_outparams_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.drop_imp_outparams_refs_get, _mupdf.drop_imp_outparams_refs_set)

    def __init__(self):
        """__init__(drop_imp_outparams self) -> drop_imp_outparams"""
        this = _mupdf.new_drop_imp_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_drop_imp_outparams
    __del__ = lambda self: None
drop_imp_outparams_swigregister = _mupdf.drop_imp_outparams_swigregister
drop_imp_outparams_swigregister(drop_imp_outparams)


def drop_imp_outparams_fn(p, outparams):
    """
    drop_imp_outparams_fn(void * p, drop_imp_outparams outparams) -> int

    Parameters
    ----------
    p: void *
    outparams: drop_imp_outparams *

    """
    return _mupdf.drop_imp_outparams_fn(p, outparams)
class drop_imp16_outparams(_object):
    """Proxy of C++ drop_imp16_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, drop_imp16_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, drop_imp16_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.drop_imp16_outparams_refs_set
    __swig_getmethods__["refs"] = _mupdf.drop_imp16_outparams_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.drop_imp16_outparams_refs_get, _mupdf.drop_imp16_outparams_refs_set)

    def __init__(self):
        """__init__(drop_imp16_outparams self) -> drop_imp16_outparams"""
        this = _mupdf.new_drop_imp16_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_drop_imp16_outparams
    __del__ = lambda self: None
drop_imp16_outparams_swigregister = _mupdf.drop_imp16_outparams_swigregister
drop_imp16_outparams_swigregister(drop_imp16_outparams)


def drop_imp16_outparams_fn(p, outparams):
    """
    drop_imp16_outparams_fn(void * p, drop_imp16_outparams outparams) -> int

    Parameters
    ----------
    p: void *
    outparams: drop_imp16_outparams *

    """
    return _mupdf.drop_imp16_outparams_fn(p, outparams)
class encode_character_with_fallback_outparams(_object):
    """Proxy of C++ encode_character_with_fallback_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, encode_character_with_fallback_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, encode_character_with_fallback_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["out_font"] = _mupdf.encode_character_with_fallback_outparams_out_font_set
    __swig_getmethods__["out_font"] = _mupdf.encode_character_with_fallback_outparams_out_font_get
    if _newclass:
        out_font = _swig_property(_mupdf.encode_character_with_fallback_outparams_out_font_get, _mupdf.encode_character_with_fallback_outparams_out_font_set)

    def __init__(self):
        """__init__(encode_character_with_fallback_outparams self) -> encode_character_with_fallback_outparams"""
        this = _mupdf.new_encode_character_with_fallback_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_encode_character_with_fallback_outparams
    __del__ = lambda self: None
encode_character_with_fallback_outparams_swigregister = _mupdf.encode_character_with_fallback_outparams_swigregister
encode_character_with_fallback_outparams_swigregister(encode_character_with_fallback_outparams)


def encode_character_with_fallback_outparams_fn(font, unicode, script, language, outparams):
    """
    encode_character_with_fallback_outparams_fn(fz_font * font, int unicode, int script, int language, encode_character_with_fallback_outparams outparams) -> int

    Parameters
    ----------
    font: fz_font *
    unicode: int
    script: int
    language: int
    outparams: encode_character_with_fallback_outparams *

    """
    return _mupdf.encode_character_with_fallback_outparams_fn(font, unicode, script, language, outparams)
class fill_pixmap_with_color_outparams(_object):
    """Proxy of C++ fill_pixmap_with_color_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fill_pixmap_with_color_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fill_pixmap_with_color_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["color"] = _mupdf.fill_pixmap_with_color_outparams_color_set
    __swig_getmethods__["color"] = _mupdf.fill_pixmap_with_color_outparams_color_get
    if _newclass:
        color = _swig_property(_mupdf.fill_pixmap_with_color_outparams_color_get, _mupdf.fill_pixmap_with_color_outparams_color_set)

    def __init__(self):
        """__init__(fill_pixmap_with_color_outparams self) -> fill_pixmap_with_color_outparams"""
        this = _mupdf.new_fill_pixmap_with_color_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_fill_pixmap_with_color_outparams
    __del__ = lambda self: None
fill_pixmap_with_color_outparams_swigregister = _mupdf.fill_pixmap_with_color_outparams_swigregister
fill_pixmap_with_color_outparams_swigregister(fill_pixmap_with_color_outparams)


def fill_pixmap_with_color_outparams_fn(pix, colorspace, color_params, outparams):
    """
    fill_pixmap_with_color_outparams_fn(fz_pixmap * pix, fz_colorspace * colorspace, fz_color_params color_params, fill_pixmap_with_color_outparams outparams)

    Parameters
    ----------
    pix: fz_pixmap *
    colorspace: fz_colorspace *
    color_params: fz_color_params
    outparams: fill_pixmap_with_color_outparams *

    """
    return _mupdf.fill_pixmap_with_color_outparams_fn(pix, colorspace, color_params, outparams)
class get_pixmap_from_image_outparams(_object):
    """Proxy of C++ get_pixmap_from_image_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, get_pixmap_from_image_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, get_pixmap_from_image_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _mupdf.get_pixmap_from_image_outparams_w_set
    __swig_getmethods__["w"] = _mupdf.get_pixmap_from_image_outparams_w_get
    if _newclass:
        w = _swig_property(_mupdf.get_pixmap_from_image_outparams_w_get, _mupdf.get_pixmap_from_image_outparams_w_set)
    __swig_setmethods__["h"] = _mupdf.get_pixmap_from_image_outparams_h_set
    __swig_getmethods__["h"] = _mupdf.get_pixmap_from_image_outparams_h_get
    if _newclass:
        h = _swig_property(_mupdf.get_pixmap_from_image_outparams_h_get, _mupdf.get_pixmap_from_image_outparams_h_set)

    def __init__(self):
        """__init__(get_pixmap_from_image_outparams self) -> get_pixmap_from_image_outparams"""
        this = _mupdf.new_get_pixmap_from_image_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_get_pixmap_from_image_outparams
    __del__ = lambda self: None
get_pixmap_from_image_outparams_swigregister = _mupdf.get_pixmap_from_image_outparams_swigregister
get_pixmap_from_image_outparams_swigregister(get_pixmap_from_image_outparams)


def get_pixmap_from_image_outparams_fn(image, subarea, ctm, outparams):
    """
    get_pixmap_from_image_outparams_fn(fz_image * image, fz_irect subarea, fz_matrix ctm, get_pixmap_from_image_outparams outparams) -> fz_pixmap *

    Parameters
    ----------
    image: fz_image *
    subarea: fz_irect const *
    ctm: fz_matrix *
    outparams: get_pixmap_from_image_outparams *

    """
    return _mupdf.get_pixmap_from_image_outparams_fn(image, subarea, ctm, outparams)
class getopt_outparams(_object):
    """Proxy of C++ getopt_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, getopt_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, getopt_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nargv"] = _mupdf.getopt_outparams_nargv_set
    __swig_getmethods__["nargv"] = _mupdf.getopt_outparams_nargv_get
    if _newclass:
        nargv = _swig_property(_mupdf.getopt_outparams_nargv_get, _mupdf.getopt_outparams_nargv_set)

    def __init__(self):
        """__init__(getopt_outparams self) -> getopt_outparams"""
        this = _mupdf.new_getopt_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_getopt_outparams
    __del__ = lambda self: None
getopt_outparams_swigregister = _mupdf.getopt_outparams_swigregister
getopt_outparams_swigregister(getopt_outparams)


def getopt_outparams_fn(nargc, ostr, outparams):
    """
    getopt_outparams_fn(int nargc, char const * ostr, getopt_outparams outparams) -> int

    Parameters
    ----------
    nargc: int
    ostr: char const *
    outparams: getopt_outparams *

    """
    return _mupdf.getopt_outparams_fn(nargc, ostr, outparams)
class grisu_outparams(_object):
    """Proxy of C++ grisu_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, grisu_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, grisu_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["exp"] = _mupdf.grisu_outparams_exp_set
    __swig_getmethods__["exp"] = _mupdf.grisu_outparams_exp_get
    if _newclass:
        exp = _swig_property(_mupdf.grisu_outparams_exp_get, _mupdf.grisu_outparams_exp_set)

    def __init__(self):
        """__init__(grisu_outparams self) -> grisu_outparams"""
        this = _mupdf.new_grisu_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_grisu_outparams
    __del__ = lambda self: None
grisu_outparams_swigregister = _mupdf.grisu_outparams_swigregister
grisu_outparams_swigregister(grisu_outparams)


def grisu_outparams_fn(f, s, outparams):
    """
    grisu_outparams_fn(float f, char * s, grisu_outparams outparams) -> int

    Parameters
    ----------
    f: float
    s: char *
    outparams: grisu_outparams *

    """
    return _mupdf.grisu_outparams_fn(f, s, outparams)
class has_option_outparams(_object):
    """Proxy of C++ has_option_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, has_option_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, has_option_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _mupdf.has_option_outparams_val_set
    __swig_getmethods__["val"] = _mupdf.has_option_outparams_val_get
    if _newclass:
        val = _swig_property(_mupdf.has_option_outparams_val_get, _mupdf.has_option_outparams_val_set)

    def __init__(self):
        """__init__(has_option_outparams self) -> has_option_outparams"""
        this = _mupdf.new_has_option_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_has_option_outparams
    __del__ = lambda self: None
has_option_outparams_swigregister = _mupdf.has_option_outparams_swigregister
has_option_outparams_swigregister(has_option_outparams)


def has_option_outparams_fn(opts, key, outparams):
    """
    has_option_outparams_fn(char const * opts, char const * key, has_option_outparams outparams) -> int

    Parameters
    ----------
    opts: char const *
    key: char const *
    outparams: has_option_outparams *

    """
    return _mupdf.has_option_outparams_fn(opts, key, outparams)
class image_resolution_outparams(_object):
    """Proxy of C++ image_resolution_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, image_resolution_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, image_resolution_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xres"] = _mupdf.image_resolution_outparams_xres_set
    __swig_getmethods__["xres"] = _mupdf.image_resolution_outparams_xres_get
    if _newclass:
        xres = _swig_property(_mupdf.image_resolution_outparams_xres_get, _mupdf.image_resolution_outparams_xres_set)
    __swig_setmethods__["yres"] = _mupdf.image_resolution_outparams_yres_set
    __swig_getmethods__["yres"] = _mupdf.image_resolution_outparams_yres_get
    if _newclass:
        yres = _swig_property(_mupdf.image_resolution_outparams_yres_get, _mupdf.image_resolution_outparams_yres_set)

    def __init__(self):
        """__init__(image_resolution_outparams self) -> image_resolution_outparams"""
        this = _mupdf.new_image_resolution_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_image_resolution_outparams
    __del__ = lambda self: None
image_resolution_outparams_swigregister = _mupdf.image_resolution_outparams_swigregister
image_resolution_outparams_swigregister(image_resolution_outparams)


def image_resolution_outparams_fn(image, outparams):
    """
    image_resolution_outparams_fn(fz_image * image, image_resolution_outparams outparams)

    Parameters
    ----------
    image: fz_image *
    outparams: image_resolution_outparams *

    """
    return _mupdf.image_resolution_outparams_fn(image, outparams)
class keep_imp_outparams(_object):
    """Proxy of C++ keep_imp_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, keep_imp_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, keep_imp_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.keep_imp_outparams_refs_set
    __swig_getmethods__["refs"] = _mupdf.keep_imp_outparams_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.keep_imp_outparams_refs_get, _mupdf.keep_imp_outparams_refs_set)

    def __init__(self):
        """__init__(keep_imp_outparams self) -> keep_imp_outparams"""
        this = _mupdf.new_keep_imp_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_keep_imp_outparams
    __del__ = lambda self: None
keep_imp_outparams_swigregister = _mupdf.keep_imp_outparams_swigregister
keep_imp_outparams_swigregister(keep_imp_outparams)


def keep_imp_outparams_fn(p, outparams):
    """
    keep_imp_outparams_fn(void * p, keep_imp_outparams outparams) -> void *

    Parameters
    ----------
    p: void *
    outparams: keep_imp_outparams *

    """
    return _mupdf.keep_imp_outparams_fn(p, outparams)
class keep_imp16_outparams(_object):
    """Proxy of C++ keep_imp16_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, keep_imp16_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, keep_imp16_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.keep_imp16_outparams_refs_set
    __swig_getmethods__["refs"] = _mupdf.keep_imp16_outparams_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.keep_imp16_outparams_refs_get, _mupdf.keep_imp16_outparams_refs_set)

    def __init__(self):
        """__init__(keep_imp16_outparams self) -> keep_imp16_outparams"""
        this = _mupdf.new_keep_imp16_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_keep_imp16_outparams
    __del__ = lambda self: None
keep_imp16_outparams_swigregister = _mupdf.keep_imp16_outparams_swigregister
keep_imp16_outparams_swigregister(keep_imp16_outparams)


def keep_imp16_outparams_fn(p, outparams):
    """
    keep_imp16_outparams_fn(void * p, keep_imp16_outparams outparams) -> void *

    Parameters
    ----------
    p: void *
    outparams: keep_imp16_outparams *

    """
    return _mupdf.keep_imp16_outparams_fn(p, outparams)
class keep_imp_locked_outparams(_object):
    """Proxy of C++ keep_imp_locked_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, keep_imp_locked_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, keep_imp_locked_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["refs"] = _mupdf.keep_imp_locked_outparams_refs_set
    __swig_getmethods__["refs"] = _mupdf.keep_imp_locked_outparams_refs_get
    if _newclass:
        refs = _swig_property(_mupdf.keep_imp_locked_outparams_refs_get, _mupdf.keep_imp_locked_outparams_refs_set)

    def __init__(self):
        """__init__(keep_imp_locked_outparams self) -> keep_imp_locked_outparams"""
        this = _mupdf.new_keep_imp_locked_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_keep_imp_locked_outparams
    __del__ = lambda self: None
keep_imp_locked_outparams_swigregister = _mupdf.keep_imp_locked_outparams_swigregister
keep_imp_locked_outparams_swigregister(keep_imp_locked_outparams)


def keep_imp_locked_outparams_fn(p, outparams):
    """
    keep_imp_locked_outparams_fn(void * p, keep_imp_locked_outparams outparams) -> void *

    Parameters
    ----------
    p: void *
    outparams: keep_imp_locked_outparams *

    """
    return _mupdf.keep_imp_locked_outparams_fn(p, outparams)
class lookup_base14_font_outparams(_object):
    """Proxy of C++ lookup_base14_font_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lookup_base14_font_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lookup_base14_font_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _mupdf.lookup_base14_font_outparams_len_set
    __swig_getmethods__["len"] = _mupdf.lookup_base14_font_outparams_len_get
    if _newclass:
        len = _swig_property(_mupdf.lookup_base14_font_outparams_len_get, _mupdf.lookup_base14_font_outparams_len_set)

    def __init__(self):
        """__init__(lookup_base14_font_outparams self) -> lookup_base14_font_outparams"""
        this = _mupdf.new_lookup_base14_font_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_lookup_base14_font_outparams
    __del__ = lambda self: None
lookup_base14_font_outparams_swigregister = _mupdf.lookup_base14_font_outparams_swigregister
lookup_base14_font_outparams_swigregister(lookup_base14_font_outparams)


def lookup_base14_font_outparams_fn(name, outparams):
    """
    lookup_base14_font_outparams_fn(char const * name, lookup_base14_font_outparams outparams) -> unsigned char const *

    Parameters
    ----------
    name: char const *
    outparams: lookup_base14_font_outparams *

    """
    return _mupdf.lookup_base14_font_outparams_fn(name, outparams)
class lookup_builtin_font_outparams(_object):
    """Proxy of C++ lookup_builtin_font_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lookup_builtin_font_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lookup_builtin_font_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _mupdf.lookup_builtin_font_outparams_len_set
    __swig_getmethods__["len"] = _mupdf.lookup_builtin_font_outparams_len_get
    if _newclass:
        len = _swig_property(_mupdf.lookup_builtin_font_outparams_len_get, _mupdf.lookup_builtin_font_outparams_len_set)

    def __init__(self):
        """__init__(lookup_builtin_font_outparams self) -> lookup_builtin_font_outparams"""
        this = _mupdf.new_lookup_builtin_font_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_lookup_builtin_font_outparams
    __del__ = lambda self: None
lookup_builtin_font_outparams_swigregister = _mupdf.lookup_builtin_font_outparams_swigregister
lookup_builtin_font_outparams_swigregister(lookup_builtin_font_outparams)


def lookup_builtin_font_outparams_fn(name, bold, italic, outparams):
    """
    lookup_builtin_font_outparams_fn(char const * name, int bold, int italic, lookup_builtin_font_outparams outparams) -> unsigned char const *

    Parameters
    ----------
    name: char const *
    bold: int
    italic: int
    outparams: lookup_builtin_font_outparams *

    """
    return _mupdf.lookup_builtin_font_outparams_fn(name, bold, italic, outparams)
class lookup_cjk_font_outparams(_object):
    """Proxy of C++ lookup_cjk_font_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lookup_cjk_font_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lookup_cjk_font_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _mupdf.lookup_cjk_font_outparams_len_set
    __swig_getmethods__["len"] = _mupdf.lookup_cjk_font_outparams_len_get
    if _newclass:
        len = _swig_property(_mupdf.lookup_cjk_font_outparams_len_get, _mupdf.lookup_cjk_font_outparams_len_set)
    __swig_setmethods__["index"] = _mupdf.lookup_cjk_font_outparams_index_set
    __swig_getmethods__["index"] = _mupdf.lookup_cjk_font_outparams_index_get
    if _newclass:
        index = _swig_property(_mupdf.lookup_cjk_font_outparams_index_get, _mupdf.lookup_cjk_font_outparams_index_set)

    def __init__(self):
        """__init__(lookup_cjk_font_outparams self) -> lookup_cjk_font_outparams"""
        this = _mupdf.new_lookup_cjk_font_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_lookup_cjk_font_outparams
    __del__ = lambda self: None
lookup_cjk_font_outparams_swigregister = _mupdf.lookup_cjk_font_outparams_swigregister
lookup_cjk_font_outparams_swigregister(lookup_cjk_font_outparams)


def lookup_cjk_font_outparams_fn(ordering, outparams):
    """
    lookup_cjk_font_outparams_fn(int ordering, lookup_cjk_font_outparams outparams) -> unsigned char const *

    Parameters
    ----------
    ordering: int
    outparams: lookup_cjk_font_outparams *

    """
    return _mupdf.lookup_cjk_font_outparams_fn(ordering, outparams)
class lookup_cjk_font_by_language_outparams(_object):
    """Proxy of C++ lookup_cjk_font_by_language_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lookup_cjk_font_by_language_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lookup_cjk_font_by_language_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _mupdf.lookup_cjk_font_by_language_outparams_len_set
    __swig_getmethods__["len"] = _mupdf.lookup_cjk_font_by_language_outparams_len_get
    if _newclass:
        len = _swig_property(_mupdf.lookup_cjk_font_by_language_outparams_len_get, _mupdf.lookup_cjk_font_by_language_outparams_len_set)
    __swig_setmethods__["subfont"] = _mupdf.lookup_cjk_font_by_language_outparams_subfont_set
    __swig_getmethods__["subfont"] = _mupdf.lookup_cjk_font_by_language_outparams_subfont_get
    if _newclass:
        subfont = _swig_property(_mupdf.lookup_cjk_font_by_language_outparams_subfont_get, _mupdf.lookup_cjk_font_by_language_outparams_subfont_set)

    def __init__(self):
        """__init__(lookup_cjk_font_by_language_outparams self) -> lookup_cjk_font_by_language_outparams"""
        this = _mupdf.new_lookup_cjk_font_by_language_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_lookup_cjk_font_by_language_outparams
    __del__ = lambda self: None
lookup_cjk_font_by_language_outparams_swigregister = _mupdf.lookup_cjk_font_by_language_outparams_swigregister
lookup_cjk_font_by_language_outparams_swigregister(lookup_cjk_font_by_language_outparams)


def lookup_cjk_font_by_language_outparams_fn(lang, outparams):
    """
    lookup_cjk_font_by_language_outparams_fn(char const * lang, lookup_cjk_font_by_language_outparams outparams) -> unsigned char const *

    Parameters
    ----------
    lang: char const *
    outparams: lookup_cjk_font_by_language_outparams *

    """
    return _mupdf.lookup_cjk_font_by_language_outparams_fn(lang, outparams)
class lookup_noto_emoji_font_outparams(_object):
    """Proxy of C++ lookup_noto_emoji_font_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lookup_noto_emoji_font_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lookup_noto_emoji_font_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _mupdf.lookup_noto_emoji_font_outparams_len_set
    __swig_getmethods__["len"] = _mupdf.lookup_noto_emoji_font_outparams_len_get
    if _newclass:
        len = _swig_property(_mupdf.lookup_noto_emoji_font_outparams_len_get, _mupdf.lookup_noto_emoji_font_outparams_len_set)

    def __init__(self):
        """__init__(lookup_noto_emoji_font_outparams self) -> lookup_noto_emoji_font_outparams"""
        this = _mupdf.new_lookup_noto_emoji_font_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_lookup_noto_emoji_font_outparams
    __del__ = lambda self: None
lookup_noto_emoji_font_outparams_swigregister = _mupdf.lookup_noto_emoji_font_outparams_swigregister
lookup_noto_emoji_font_outparams_swigregister(lookup_noto_emoji_font_outparams)


def lookup_noto_emoji_font_outparams_fn(outparams):
    """
    lookup_noto_emoji_font_outparams_fn(lookup_noto_emoji_font_outparams outparams) -> unsigned char const *

    Parameters
    ----------
    outparams: lookup_noto_emoji_font_outparams *

    """
    return _mupdf.lookup_noto_emoji_font_outparams_fn(outparams)
class lookup_noto_font_outparams(_object):
    """Proxy of C++ lookup_noto_font_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lookup_noto_font_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lookup_noto_font_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _mupdf.lookup_noto_font_outparams_len_set
    __swig_getmethods__["len"] = _mupdf.lookup_noto_font_outparams_len_get
    if _newclass:
        len = _swig_property(_mupdf.lookup_noto_font_outparams_len_get, _mupdf.lookup_noto_font_outparams_len_set)
    __swig_setmethods__["subfont"] = _mupdf.lookup_noto_font_outparams_subfont_set
    __swig_getmethods__["subfont"] = _mupdf.lookup_noto_font_outparams_subfont_get
    if _newclass:
        subfont = _swig_property(_mupdf.lookup_noto_font_outparams_subfont_get, _mupdf.lookup_noto_font_outparams_subfont_set)

    def __init__(self):
        """__init__(lookup_noto_font_outparams self) -> lookup_noto_font_outparams"""
        this = _mupdf.new_lookup_noto_font_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_lookup_noto_font_outparams
    __del__ = lambda self: None
lookup_noto_font_outparams_swigregister = _mupdf.lookup_noto_font_outparams_swigregister
lookup_noto_font_outparams_swigregister(lookup_noto_font_outparams)


def lookup_noto_font_outparams_fn(script, lang, outparams):
    """
    lookup_noto_font_outparams_fn(int script, int lang, lookup_noto_font_outparams outparams) -> unsigned char const *

    Parameters
    ----------
    script: int
    lang: int
    outparams: lookup_noto_font_outparams *

    """
    return _mupdf.lookup_noto_font_outparams_fn(script, lang, outparams)
class lookup_noto_math_font_outparams(_object):
    """Proxy of C++ lookup_noto_math_font_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lookup_noto_math_font_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lookup_noto_math_font_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _mupdf.lookup_noto_math_font_outparams_len_set
    __swig_getmethods__["len"] = _mupdf.lookup_noto_math_font_outparams_len_get
    if _newclass:
        len = _swig_property(_mupdf.lookup_noto_math_font_outparams_len_get, _mupdf.lookup_noto_math_font_outparams_len_set)

    def __init__(self):
        """__init__(lookup_noto_math_font_outparams self) -> lookup_noto_math_font_outparams"""
        this = _mupdf.new_lookup_noto_math_font_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_lookup_noto_math_font_outparams
    __del__ = lambda self: None
lookup_noto_math_font_outparams_swigregister = _mupdf.lookup_noto_math_font_outparams_swigregister
lookup_noto_math_font_outparams_swigregister(lookup_noto_math_font_outparams)


def lookup_noto_math_font_outparams_fn(outparams):
    """
    lookup_noto_math_font_outparams_fn(lookup_noto_math_font_outparams outparams) -> unsigned char const *

    Parameters
    ----------
    outparams: lookup_noto_math_font_outparams *

    """
    return _mupdf.lookup_noto_math_font_outparams_fn(outparams)
class lookup_noto_music_font_outparams(_object):
    """Proxy of C++ lookup_noto_music_font_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lookup_noto_music_font_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lookup_noto_music_font_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _mupdf.lookup_noto_music_font_outparams_len_set
    __swig_getmethods__["len"] = _mupdf.lookup_noto_music_font_outparams_len_get
    if _newclass:
        len = _swig_property(_mupdf.lookup_noto_music_font_outparams_len_get, _mupdf.lookup_noto_music_font_outparams_len_set)

    def __init__(self):
        """__init__(lookup_noto_music_font_outparams self) -> lookup_noto_music_font_outparams"""
        this = _mupdf.new_lookup_noto_music_font_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_lookup_noto_music_font_outparams
    __del__ = lambda self: None
lookup_noto_music_font_outparams_swigregister = _mupdf.lookup_noto_music_font_outparams_swigregister
lookup_noto_music_font_outparams_swigregister(lookup_noto_music_font_outparams)


def lookup_noto_music_font_outparams_fn(outparams):
    """
    lookup_noto_music_font_outparams_fn(lookup_noto_music_font_outparams outparams) -> unsigned char const *

    Parameters
    ----------
    outparams: lookup_noto_music_font_outparams *

    """
    return _mupdf.lookup_noto_music_font_outparams_fn(outparams)
class lookup_noto_symbol1_font_outparams(_object):
    """Proxy of C++ lookup_noto_symbol1_font_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lookup_noto_symbol1_font_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lookup_noto_symbol1_font_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _mupdf.lookup_noto_symbol1_font_outparams_len_set
    __swig_getmethods__["len"] = _mupdf.lookup_noto_symbol1_font_outparams_len_get
    if _newclass:
        len = _swig_property(_mupdf.lookup_noto_symbol1_font_outparams_len_get, _mupdf.lookup_noto_symbol1_font_outparams_len_set)

    def __init__(self):
        """__init__(lookup_noto_symbol1_font_outparams self) -> lookup_noto_symbol1_font_outparams"""
        this = _mupdf.new_lookup_noto_symbol1_font_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_lookup_noto_symbol1_font_outparams
    __del__ = lambda self: None
lookup_noto_symbol1_font_outparams_swigregister = _mupdf.lookup_noto_symbol1_font_outparams_swigregister
lookup_noto_symbol1_font_outparams_swigregister(lookup_noto_symbol1_font_outparams)


def lookup_noto_symbol1_font_outparams_fn(outparams):
    """
    lookup_noto_symbol1_font_outparams_fn(lookup_noto_symbol1_font_outparams outparams) -> unsigned char const *

    Parameters
    ----------
    outparams: lookup_noto_symbol1_font_outparams *

    """
    return _mupdf.lookup_noto_symbol1_font_outparams_fn(outparams)
class lookup_noto_symbol2_font_outparams(_object):
    """Proxy of C++ lookup_noto_symbol2_font_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lookup_noto_symbol2_font_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lookup_noto_symbol2_font_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _mupdf.lookup_noto_symbol2_font_outparams_len_set
    __swig_getmethods__["len"] = _mupdf.lookup_noto_symbol2_font_outparams_len_get
    if _newclass:
        len = _swig_property(_mupdf.lookup_noto_symbol2_font_outparams_len_get, _mupdf.lookup_noto_symbol2_font_outparams_len_set)

    def __init__(self):
        """__init__(lookup_noto_symbol2_font_outparams self) -> lookup_noto_symbol2_font_outparams"""
        this = _mupdf.new_lookup_noto_symbol2_font_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_lookup_noto_symbol2_font_outparams
    __del__ = lambda self: None
lookup_noto_symbol2_font_outparams_swigregister = _mupdf.lookup_noto_symbol2_font_outparams_swigregister
lookup_noto_symbol2_font_outparams_swigregister(lookup_noto_symbol2_font_outparams)


def lookup_noto_symbol2_font_outparams_fn(outparams):
    """
    lookup_noto_symbol2_font_outparams_fn(lookup_noto_symbol2_font_outparams outparams) -> unsigned char const *

    Parameters
    ----------
    outparams: lookup_noto_symbol2_font_outparams *

    """
    return _mupdf.lookup_noto_symbol2_font_outparams_fn(outparams)
class new_deflated_data_outparams(_object):
    """Proxy of C++ new_deflated_data_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, new_deflated_data_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, new_deflated_data_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["compressed_length"] = _mupdf.new_deflated_data_outparams_compressed_length_set
    __swig_getmethods__["compressed_length"] = _mupdf.new_deflated_data_outparams_compressed_length_get
    if _newclass:
        compressed_length = _swig_property(_mupdf.new_deflated_data_outparams_compressed_length_get, _mupdf.new_deflated_data_outparams_compressed_length_set)

    def __init__(self):
        """__init__(new_deflated_data_outparams self) -> new_deflated_data_outparams"""
        this = _mupdf.new_new_deflated_data_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_new_deflated_data_outparams
    __del__ = lambda self: None
new_deflated_data_outparams_swigregister = _mupdf.new_deflated_data_outparams_swigregister
new_deflated_data_outparams_swigregister(new_deflated_data_outparams)


def new_deflated_data_outparams_fn(source, source_length, level, outparams):
    """
    new_deflated_data_outparams_fn(unsigned char const * source, size_t source_length, fz_deflate_level level, new_deflated_data_outparams outparams) -> unsigned char *

    Parameters
    ----------
    source: unsigned char const *
    source_length: size_t
    level: enum fz_deflate_level
    outparams: new_deflated_data_outparams *

    """
    return _mupdf.new_deflated_data_outparams_fn(source, source_length, level, outparams)
class new_deflated_data_from_buffer_outparams(_object):
    """Proxy of C++ new_deflated_data_from_buffer_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, new_deflated_data_from_buffer_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, new_deflated_data_from_buffer_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["compressed_length"] = _mupdf.new_deflated_data_from_buffer_outparams_compressed_length_set
    __swig_getmethods__["compressed_length"] = _mupdf.new_deflated_data_from_buffer_outparams_compressed_length_get
    if _newclass:
        compressed_length = _swig_property(_mupdf.new_deflated_data_from_buffer_outparams_compressed_length_get, _mupdf.new_deflated_data_from_buffer_outparams_compressed_length_set)

    def __init__(self):
        """__init__(new_deflated_data_from_buffer_outparams self) -> new_deflated_data_from_buffer_outparams"""
        this = _mupdf.new_new_deflated_data_from_buffer_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_new_deflated_data_from_buffer_outparams
    __del__ = lambda self: None
new_deflated_data_from_buffer_outparams_swigregister = _mupdf.new_deflated_data_from_buffer_outparams_swigregister
new_deflated_data_from_buffer_outparams_swigregister(new_deflated_data_from_buffer_outparams)


def new_deflated_data_from_buffer_outparams_fn(buffer, level, outparams):
    """
    new_deflated_data_from_buffer_outparams_fn(fz_buffer buffer, fz_deflate_level level, new_deflated_data_from_buffer_outparams outparams) -> unsigned char *

    Parameters
    ----------
    buffer: fz_buffer *
    level: enum fz_deflate_level
    outparams: new_deflated_data_from_buffer_outparams *

    """
    return _mupdf.new_deflated_data_from_buffer_outparams_fn(buffer, level, outparams)
class new_display_list_from_svg_outparams(_object):
    """Proxy of C++ new_display_list_from_svg_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, new_display_list_from_svg_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, new_display_list_from_svg_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _mupdf.new_display_list_from_svg_outparams_w_set
    __swig_getmethods__["w"] = _mupdf.new_display_list_from_svg_outparams_w_get
    if _newclass:
        w = _swig_property(_mupdf.new_display_list_from_svg_outparams_w_get, _mupdf.new_display_list_from_svg_outparams_w_set)
    __swig_setmethods__["h"] = _mupdf.new_display_list_from_svg_outparams_h_set
    __swig_getmethods__["h"] = _mupdf.new_display_list_from_svg_outparams_h_get
    if _newclass:
        h = _swig_property(_mupdf.new_display_list_from_svg_outparams_h_get, _mupdf.new_display_list_from_svg_outparams_h_set)

    def __init__(self):
        """__init__(new_display_list_from_svg_outparams self) -> new_display_list_from_svg_outparams"""
        this = _mupdf.new_new_display_list_from_svg_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_new_display_list_from_svg_outparams
    __del__ = lambda self: None
new_display_list_from_svg_outparams_swigregister = _mupdf.new_display_list_from_svg_outparams_swigregister
new_display_list_from_svg_outparams_swigregister(new_display_list_from_svg_outparams)


def new_display_list_from_svg_outparams_fn(buf, base_uri, zip, outparams):
    """
    new_display_list_from_svg_outparams_fn(fz_buffer buf, char const * base_uri, fz_archive * zip, new_display_list_from_svg_outparams outparams) -> fz_display_list *

    Parameters
    ----------
    buf: fz_buffer *
    base_uri: char const *
    zip: fz_archive *
    outparams: new_display_list_from_svg_outparams *

    """
    return _mupdf.new_display_list_from_svg_outparams_fn(buf, base_uri, zip, outparams)
class new_display_list_from_svg_xml_outparams(_object):
    """Proxy of C++ new_display_list_from_svg_xml_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, new_display_list_from_svg_xml_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, new_display_list_from_svg_xml_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _mupdf.new_display_list_from_svg_xml_outparams_w_set
    __swig_getmethods__["w"] = _mupdf.new_display_list_from_svg_xml_outparams_w_get
    if _newclass:
        w = _swig_property(_mupdf.new_display_list_from_svg_xml_outparams_w_get, _mupdf.new_display_list_from_svg_xml_outparams_w_set)
    __swig_setmethods__["h"] = _mupdf.new_display_list_from_svg_xml_outparams_h_set
    __swig_getmethods__["h"] = _mupdf.new_display_list_from_svg_xml_outparams_h_get
    if _newclass:
        h = _swig_property(_mupdf.new_display_list_from_svg_xml_outparams_h_get, _mupdf.new_display_list_from_svg_xml_outparams_h_set)

    def __init__(self):
        """__init__(new_display_list_from_svg_xml_outparams self) -> new_display_list_from_svg_xml_outparams"""
        this = _mupdf.new_new_display_list_from_svg_xml_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_new_display_list_from_svg_xml_outparams
    __del__ = lambda self: None
new_display_list_from_svg_xml_outparams_swigregister = _mupdf.new_display_list_from_svg_xml_outparams_swigregister
new_display_list_from_svg_xml_outparams_swigregister(new_display_list_from_svg_xml_outparams)


def new_display_list_from_svg_xml_outparams_fn(xmldoc, xml, base_uri, zip, outparams):
    """
    new_display_list_from_svg_xml_outparams_fn(fz_xml_doc * xmldoc, fz_xml * xml, char const * base_uri, fz_archive * zip, new_display_list_from_svg_xml_outparams outparams) -> fz_display_list *

    Parameters
    ----------
    xmldoc: fz_xml_doc *
    xml: fz_xml *
    base_uri: char const *
    zip: fz_archive *
    outparams: new_display_list_from_svg_xml_outparams *

    """
    return _mupdf.new_display_list_from_svg_xml_outparams_fn(xmldoc, xml, base_uri, zip, outparams)
class new_draw_device_with_options_outparams(_object):
    """Proxy of C++ new_draw_device_with_options_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, new_draw_device_with_options_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, new_draw_device_with_options_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pixmap"] = _mupdf.new_draw_device_with_options_outparams_pixmap_set
    __swig_getmethods__["pixmap"] = _mupdf.new_draw_device_with_options_outparams_pixmap_get
    if _newclass:
        pixmap = _swig_property(_mupdf.new_draw_device_with_options_outparams_pixmap_get, _mupdf.new_draw_device_with_options_outparams_pixmap_set)

    def __init__(self):
        """__init__(new_draw_device_with_options_outparams self) -> new_draw_device_with_options_outparams"""
        this = _mupdf.new_new_draw_device_with_options_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_new_draw_device_with_options_outparams
    __del__ = lambda self: None
new_draw_device_with_options_outparams_swigregister = _mupdf.new_draw_device_with_options_outparams_swigregister
new_draw_device_with_options_outparams_swigregister(new_draw_device_with_options_outparams)


def new_draw_device_with_options_outparams_fn(options, mediabox, outparams):
    """
    new_draw_device_with_options_outparams_fn(fz_draw_options options, fz_rect mediabox, new_draw_device_with_options_outparams outparams) -> fz_device *

    Parameters
    ----------
    options: fz_draw_options const *
    mediabox: fz_rect
    outparams: new_draw_device_with_options_outparams *

    """
    return _mupdf.new_draw_device_with_options_outparams_fn(options, mediabox, outparams)
class new_image_from_compressed_buffer_outparams(_object):
    """Proxy of C++ new_image_from_compressed_buffer_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, new_image_from_compressed_buffer_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, new_image_from_compressed_buffer_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["decode"] = _mupdf.new_image_from_compressed_buffer_outparams_decode_set
    __swig_getmethods__["decode"] = _mupdf.new_image_from_compressed_buffer_outparams_decode_get
    if _newclass:
        decode = _swig_property(_mupdf.new_image_from_compressed_buffer_outparams_decode_get, _mupdf.new_image_from_compressed_buffer_outparams_decode_set)
    __swig_setmethods__["colorkey"] = _mupdf.new_image_from_compressed_buffer_outparams_colorkey_set
    __swig_getmethods__["colorkey"] = _mupdf.new_image_from_compressed_buffer_outparams_colorkey_get
    if _newclass:
        colorkey = _swig_property(_mupdf.new_image_from_compressed_buffer_outparams_colorkey_get, _mupdf.new_image_from_compressed_buffer_outparams_colorkey_set)

    def __init__(self):
        """__init__(new_image_from_compressed_buffer_outparams self) -> new_image_from_compressed_buffer_outparams"""
        this = _mupdf.new_new_image_from_compressed_buffer_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_new_image_from_compressed_buffer_outparams
    __del__ = lambda self: None
new_image_from_compressed_buffer_outparams_swigregister = _mupdf.new_image_from_compressed_buffer_outparams_swigregister
new_image_from_compressed_buffer_outparams_swigregister(new_image_from_compressed_buffer_outparams)


def new_image_from_compressed_buffer_outparams_fn(w, h, bpc, colorspace, xres, yres, interpolate, imagemask, buffer, mask, outparams):
    """
    new_image_from_compressed_buffer_outparams_fn(int w, int h, int bpc, fz_colorspace * colorspace, int xres, int yres, int interpolate, int imagemask, fz_compressed_buffer buffer, fz_image * mask, new_image_from_compressed_buffer_outparams outparams) -> fz_image *

    Parameters
    ----------
    w: int
    h: int
    bpc: int
    colorspace: fz_colorspace *
    xres: int
    yres: int
    interpolate: int
    imagemask: int
    buffer: fz_compressed_buffer *
    mask: fz_image *
    outparams: new_image_from_compressed_buffer_outparams *

    """
    return _mupdf.new_image_from_compressed_buffer_outparams_fn(w, h, bpc, colorspace, xres, yres, interpolate, imagemask, buffer, mask, outparams)
class new_image_of_size_outparams(_object):
    """Proxy of C++ new_image_of_size_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, new_image_of_size_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, new_image_of_size_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["decode"] = _mupdf.new_image_of_size_outparams_decode_set
    __swig_getmethods__["decode"] = _mupdf.new_image_of_size_outparams_decode_get
    if _newclass:
        decode = _swig_property(_mupdf.new_image_of_size_outparams_decode_get, _mupdf.new_image_of_size_outparams_decode_set)
    __swig_setmethods__["colorkey"] = _mupdf.new_image_of_size_outparams_colorkey_set
    __swig_getmethods__["colorkey"] = _mupdf.new_image_of_size_outparams_colorkey_get
    if _newclass:
        colorkey = _swig_property(_mupdf.new_image_of_size_outparams_colorkey_get, _mupdf.new_image_of_size_outparams_colorkey_set)

    def __init__(self):
        """__init__(new_image_of_size_outparams self) -> new_image_of_size_outparams"""
        this = _mupdf.new_new_image_of_size_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_new_image_of_size_outparams
    __del__ = lambda self: None
new_image_of_size_outparams_swigregister = _mupdf.new_image_of_size_outparams_swigregister
new_image_of_size_outparams_swigregister(new_image_of_size_outparams)


def new_image_of_size_outparams_fn(w, h, bpc, colorspace, xres, yres, interpolate, imagemask, mask, size, get_pixmap, get_size, drop, outparams):
    """
    new_image_of_size_outparams_fn(int w, int h, int bpc, fz_colorspace * colorspace, int xres, int yres, int interpolate, int imagemask, fz_image * mask, size_t size, fz_image_get_pixmap_fn * get_pixmap, fz_image_get_size_fn * get_size, fz_drop_image_fn * drop, new_image_of_size_outparams outparams) -> fz_image *

    Parameters
    ----------
    w: int
    h: int
    bpc: int
    colorspace: fz_colorspace *
    xres: int
    yres: int
    interpolate: int
    imagemask: int
    mask: fz_image *
    size: size_t
    get_pixmap: fz_image_get_pixmap_fn *
    get_size: fz_image_get_size_fn *
    drop: fz_drop_image_fn *
    outparams: new_image_of_size_outparams *

    """
    return _mupdf.new_image_of_size_outparams_fn(w, h, bpc, colorspace, xres, yres, interpolate, imagemask, mask, size, get_pixmap, get_size, drop, outparams)
class new_svg_device_with_id_outparams(_object):
    """Proxy of C++ new_svg_device_with_id_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, new_svg_device_with_id_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, new_svg_device_with_id_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _mupdf.new_svg_device_with_id_outparams_id_set
    __swig_getmethods__["id"] = _mupdf.new_svg_device_with_id_outparams_id_get
    if _newclass:
        id = _swig_property(_mupdf.new_svg_device_with_id_outparams_id_get, _mupdf.new_svg_device_with_id_outparams_id_set)

    def __init__(self):
        """__init__(new_svg_device_with_id_outparams self) -> new_svg_device_with_id_outparams"""
        this = _mupdf.new_new_svg_device_with_id_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_new_svg_device_with_id_outparams
    __del__ = lambda self: None
new_svg_device_with_id_outparams_swigregister = _mupdf.new_svg_device_with_id_outparams_swigregister
new_svg_device_with_id_outparams_swigregister(new_svg_device_with_id_outparams)


def new_svg_device_with_id_outparams_fn(out, page_width, page_height, text_format, reuse_images, outparams):
    """
    new_svg_device_with_id_outparams_fn(fz_output * out, float page_width, float page_height, int text_format, int reuse_images, new_svg_device_with_id_outparams outparams) -> fz_device *

    Parameters
    ----------
    out: fz_output *
    page_width: float
    page_height: float
    text_format: int
    reuse_images: int
    outparams: new_svg_device_with_id_outparams *

    """
    return _mupdf.new_svg_device_with_id_outparams_fn(out, page_width, page_height, text_format, reuse_images, outparams)
class new_test_device_outparams(_object):
    """Proxy of C++ new_test_device_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, new_test_device_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, new_test_device_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["is_color"] = _mupdf.new_test_device_outparams_is_color_set
    __swig_getmethods__["is_color"] = _mupdf.new_test_device_outparams_is_color_get
    if _newclass:
        is_color = _swig_property(_mupdf.new_test_device_outparams_is_color_get, _mupdf.new_test_device_outparams_is_color_set)

    def __init__(self):
        """__init__(new_test_device_outparams self) -> new_test_device_outparams"""
        this = _mupdf.new_new_test_device_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_new_test_device_outparams
    __del__ = lambda self: None
new_test_device_outparams_swigregister = _mupdf.new_test_device_outparams_swigregister
new_test_device_outparams_swigregister(new_test_device_outparams)


def new_test_device_outparams_fn(threshold, options, passthrough, outparams):
    """
    new_test_device_outparams_fn(float threshold, int options, fz_device * passthrough, new_test_device_outparams outparams) -> fz_device *

    Parameters
    ----------
    threshold: float
    options: int
    passthrough: fz_device *
    outparams: new_test_device_outparams *

    """
    return _mupdf.new_test_device_outparams_fn(threshold, options, passthrough, outparams)
class open_file_ptr_no_close_outparams(_object):
    """Proxy of C++ open_file_ptr_no_close_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, open_file_ptr_no_close_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, open_file_ptr_no_close_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["file"] = _mupdf.open_file_ptr_no_close_outparams_file_set
    __swig_getmethods__["file"] = _mupdf.open_file_ptr_no_close_outparams_file_get
    if _newclass:
        file = _swig_property(_mupdf.open_file_ptr_no_close_outparams_file_get, _mupdf.open_file_ptr_no_close_outparams_file_set)

    def __init__(self):
        """__init__(open_file_ptr_no_close_outparams self) -> open_file_ptr_no_close_outparams"""
        this = _mupdf.new_open_file_ptr_no_close_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_open_file_ptr_no_close_outparams
    __del__ = lambda self: None
open_file_ptr_no_close_outparams_swigregister = _mupdf.open_file_ptr_no_close_outparams_swigregister
open_file_ptr_no_close_outparams_swigregister(open_file_ptr_no_close_outparams)


def open_file_ptr_no_close_outparams_fn(outparams):
    """
    open_file_ptr_no_close_outparams_fn(open_file_ptr_no_close_outparams outparams) -> fz_stream *

    Parameters
    ----------
    outparams: open_file_ptr_no_close_outparams *

    """
    return _mupdf.open_file_ptr_no_close_outparams_fn(outparams)
class open_image_decomp_stream_outparams(_object):
    """Proxy of C++ open_image_decomp_stream_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, open_image_decomp_stream_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, open_image_decomp_stream_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["l2factor"] = _mupdf.open_image_decomp_stream_outparams_l2factor_set
    __swig_getmethods__["l2factor"] = _mupdf.open_image_decomp_stream_outparams_l2factor_get
    if _newclass:
        l2factor = _swig_property(_mupdf.open_image_decomp_stream_outparams_l2factor_get, _mupdf.open_image_decomp_stream_outparams_l2factor_set)

    def __init__(self):
        """__init__(open_image_decomp_stream_outparams self) -> open_image_decomp_stream_outparams"""
        this = _mupdf.new_open_image_decomp_stream_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_open_image_decomp_stream_outparams
    __del__ = lambda self: None
open_image_decomp_stream_outparams_swigregister = _mupdf.open_image_decomp_stream_outparams_swigregister
open_image_decomp_stream_outparams_swigregister(open_image_decomp_stream_outparams)


def open_image_decomp_stream_outparams_fn(arg_0, arg_1, outparams):
    """
    open_image_decomp_stream_outparams_fn(fz_stream * arg_0, fz_compression_params arg_1, open_image_decomp_stream_outparams outparams) -> fz_stream *

    Parameters
    ----------
    arg_0: fz_stream *
    arg_1: fz_compression_params *
    outparams: open_image_decomp_stream_outparams *

    """
    return _mupdf.open_image_decomp_stream_outparams_fn(arg_0, arg_1, outparams)
class open_image_decomp_stream_from_buffer_outparams(_object):
    """Proxy of C++ open_image_decomp_stream_from_buffer_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, open_image_decomp_stream_from_buffer_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, open_image_decomp_stream_from_buffer_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["l2factor"] = _mupdf.open_image_decomp_stream_from_buffer_outparams_l2factor_set
    __swig_getmethods__["l2factor"] = _mupdf.open_image_decomp_stream_from_buffer_outparams_l2factor_get
    if _newclass:
        l2factor = _swig_property(_mupdf.open_image_decomp_stream_from_buffer_outparams_l2factor_get, _mupdf.open_image_decomp_stream_from_buffer_outparams_l2factor_set)

    def __init__(self):
        """__init__(open_image_decomp_stream_from_buffer_outparams self) -> open_image_decomp_stream_from_buffer_outparams"""
        this = _mupdf.new_open_image_decomp_stream_from_buffer_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_open_image_decomp_stream_from_buffer_outparams
    __del__ = lambda self: None
open_image_decomp_stream_from_buffer_outparams_swigregister = _mupdf.open_image_decomp_stream_from_buffer_outparams_swigregister
open_image_decomp_stream_from_buffer_outparams_swigregister(open_image_decomp_stream_from_buffer_outparams)


def open_image_decomp_stream_from_buffer_outparams_fn(arg_0, outparams):
    """
    open_image_decomp_stream_from_buffer_outparams_fn(fz_compressed_buffer arg_0, open_image_decomp_stream_from_buffer_outparams outparams) -> fz_stream *

    Parameters
    ----------
    arg_0: fz_compressed_buffer *
    outparams: open_image_decomp_stream_from_buffer_outparams *

    """
    return _mupdf.open_image_decomp_stream_from_buffer_outparams_fn(arg_0, outparams)
class page_presentation_outparams(_object):
    """Proxy of C++ page_presentation_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, page_presentation_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, page_presentation_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["duration"] = _mupdf.page_presentation_outparams_duration_set
    __swig_getmethods__["duration"] = _mupdf.page_presentation_outparams_duration_get
    if _newclass:
        duration = _swig_property(_mupdf.page_presentation_outparams_duration_get, _mupdf.page_presentation_outparams_duration_set)

    def __init__(self):
        """__init__(page_presentation_outparams self) -> page_presentation_outparams"""
        this = _mupdf.new_page_presentation_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_page_presentation_outparams
    __del__ = lambda self: None
page_presentation_outparams_swigregister = _mupdf.page_presentation_outparams_swigregister
page_presentation_outparams_swigregister(page_presentation_outparams)


def page_presentation_outparams_fn(page, transition, outparams):
    """
    page_presentation_outparams_fn(fz_page * page, fz_transition transition, page_presentation_outparams outparams) -> fz_transition

    Parameters
    ----------
    page: fz_page *
    transition: fz_transition *
    outparams: page_presentation_outparams *

    """
    return _mupdf.page_presentation_outparams_fn(page, transition, outparams)
class paint_shade_outparams(_object):
    """Proxy of C++ paint_shade_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, paint_shade_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, paint_shade_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cache"] = _mupdf.paint_shade_outparams_cache_set
    __swig_getmethods__["cache"] = _mupdf.paint_shade_outparams_cache_get
    if _newclass:
        cache = _swig_property(_mupdf.paint_shade_outparams_cache_get, _mupdf.paint_shade_outparams_cache_set)

    def __init__(self):
        """__init__(paint_shade_outparams self) -> paint_shade_outparams"""
        this = _mupdf.new_paint_shade_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_paint_shade_outparams
    __del__ = lambda self: None
paint_shade_outparams_swigregister = _mupdf.paint_shade_outparams_swigregister
paint_shade_outparams_swigregister(paint_shade_outparams)


def paint_shade_outparams_fn(shade, override_cs, ctm, dest, color_params, bbox, eop, outparams):
    """
    paint_shade_outparams_fn(fz_shade shade, fz_colorspace * override_cs, fz_matrix ctm, fz_pixmap * dest, fz_color_params color_params, fz_irect bbox, fz_overprint const * eop, paint_shade_outparams outparams)

    Parameters
    ----------
    shade: fz_shade *
    override_cs: fz_colorspace *
    ctm: fz_matrix
    dest: fz_pixmap *
    color_params: fz_color_params
    bbox: fz_irect
    eop: fz_overprint const *
    outparams: paint_shade_outparams *

    """
    return _mupdf.paint_shade_outparams_fn(shade, override_cs, ctm, dest, color_params, bbox, eop, outparams)
class parse_page_range_outparams(_object):
    """Proxy of C++ parse_page_range_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, parse_page_range_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, parse_page_range_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _mupdf.parse_page_range_outparams_a_set
    __swig_getmethods__["a"] = _mupdf.parse_page_range_outparams_a_get
    if _newclass:
        a = _swig_property(_mupdf.parse_page_range_outparams_a_get, _mupdf.parse_page_range_outparams_a_set)
    __swig_setmethods__["b"] = _mupdf.parse_page_range_outparams_b_set
    __swig_getmethods__["b"] = _mupdf.parse_page_range_outparams_b_get
    if _newclass:
        b = _swig_property(_mupdf.parse_page_range_outparams_b_get, _mupdf.parse_page_range_outparams_b_set)

    def __init__(self):
        """__init__(parse_page_range_outparams self) -> parse_page_range_outparams"""
        this = _mupdf.new_parse_page_range_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_parse_page_range_outparams
    __del__ = lambda self: None
parse_page_range_outparams_swigregister = _mupdf.parse_page_range_outparams_swigregister
parse_page_range_outparams_swigregister(parse_page_range_outparams)


def parse_page_range_outparams_fn(s, n, outparams):
    """
    parse_page_range_outparams_fn(char const * s, int n, parse_page_range_outparams outparams) -> char const *

    Parameters
    ----------
    s: char const *
    n: int
    outparams: parse_page_range_outparams *

    """
    return _mupdf.parse_page_range_outparams_fn(s, n, outparams)
class read_best_outparams(_object):
    """Proxy of C++ read_best_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, read_best_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, read_best_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["truncated"] = _mupdf.read_best_outparams_truncated_set
    __swig_getmethods__["truncated"] = _mupdf.read_best_outparams_truncated_get
    if _newclass:
        truncated = _swig_property(_mupdf.read_best_outparams_truncated_get, _mupdf.read_best_outparams_truncated_set)

    def __init__(self):
        """__init__(read_best_outparams self) -> read_best_outparams"""
        this = _mupdf.new_read_best_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_read_best_outparams
    __del__ = lambda self: None
read_best_outparams_swigregister = _mupdf.read_best_outparams_swigregister
read_best_outparams_swigregister(read_best_outparams)


def read_best_outparams_fn(stm, initial, outparams):
    """
    read_best_outparams_fn(fz_stream * stm, size_t initial, read_best_outparams outparams) -> fz_buffer

    Parameters
    ----------
    stm: fz_stream *
    initial: size_t
    outparams: read_best_outparams *

    """
    return _mupdf.read_best_outparams_fn(stm, initial, outparams)
class resolve_link_outparams(_object):
    """Proxy of C++ resolve_link_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, resolve_link_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, resolve_link_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xp"] = _mupdf.resolve_link_outparams_xp_set
    __swig_getmethods__["xp"] = _mupdf.resolve_link_outparams_xp_get
    if _newclass:
        xp = _swig_property(_mupdf.resolve_link_outparams_xp_get, _mupdf.resolve_link_outparams_xp_set)
    __swig_setmethods__["yp"] = _mupdf.resolve_link_outparams_yp_set
    __swig_getmethods__["yp"] = _mupdf.resolve_link_outparams_yp_get
    if _newclass:
        yp = _swig_property(_mupdf.resolve_link_outparams_yp_get, _mupdf.resolve_link_outparams_yp_set)

    def __init__(self):
        """__init__(resolve_link_outparams self) -> resolve_link_outparams"""
        this = _mupdf.new_resolve_link_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_resolve_link_outparams
    __del__ = lambda self: None
resolve_link_outparams_swigregister = _mupdf.resolve_link_outparams_swigregister
resolve_link_outparams_swigregister(resolve_link_outparams)


def resolve_link_outparams_fn(doc, uri, outparams):
    """
    resolve_link_outparams_fn(fz_document * doc, char const * uri, resolve_link_outparams outparams) -> fz_location

    Parameters
    ----------
    doc: fz_document *
    uri: char const *
    outparams: resolve_link_outparams *

    """
    return _mupdf.resolve_link_outparams_fn(doc, uri, outparams)
class separation_equivalent_outparams(_object):
    """Proxy of C++ separation_equivalent_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, separation_equivalent_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, separation_equivalent_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dst_color"] = _mupdf.separation_equivalent_outparams_dst_color_set
    __swig_getmethods__["dst_color"] = _mupdf.separation_equivalent_outparams_dst_color_get
    if _newclass:
        dst_color = _swig_property(_mupdf.separation_equivalent_outparams_dst_color_get, _mupdf.separation_equivalent_outparams_dst_color_set)

    def __init__(self):
        """__init__(separation_equivalent_outparams self) -> separation_equivalent_outparams"""
        this = _mupdf.new_separation_equivalent_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_separation_equivalent_outparams
    __del__ = lambda self: None
separation_equivalent_outparams_swigregister = _mupdf.separation_equivalent_outparams_swigregister
separation_equivalent_outparams_swigregister(separation_equivalent_outparams)


def separation_equivalent_outparams_fn(seps, idx, dst_cs, prf, color_params, outparams):
    """
    separation_equivalent_outparams_fn(fz_separations const * seps, int idx, fz_colorspace * dst_cs, fz_colorspace * prf, fz_color_params color_params, separation_equivalent_outparams outparams)

    Parameters
    ----------
    seps: fz_separations const *
    idx: int
    dst_cs: fz_colorspace *
    prf: fz_colorspace *
    color_params: fz_color_params
    outparams: separation_equivalent_outparams *

    """
    return _mupdf.separation_equivalent_outparams_fn(seps, idx, dst_cs, prf, color_params, outparams)
class store_scavenge_outparams(_object):
    """Proxy of C++ store_scavenge_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, store_scavenge_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, store_scavenge_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["phase"] = _mupdf.store_scavenge_outparams_phase_set
    __swig_getmethods__["phase"] = _mupdf.store_scavenge_outparams_phase_get
    if _newclass:
        phase = _swig_property(_mupdf.store_scavenge_outparams_phase_get, _mupdf.store_scavenge_outparams_phase_set)

    def __init__(self):
        """__init__(store_scavenge_outparams self) -> store_scavenge_outparams"""
        this = _mupdf.new_store_scavenge_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_store_scavenge_outparams
    __del__ = lambda self: None
store_scavenge_outparams_swigregister = _mupdf.store_scavenge_outparams_swigregister
store_scavenge_outparams_swigregister(store_scavenge_outparams)


def store_scavenge_outparams_fn(size, outparams):
    """
    store_scavenge_outparams_fn(size_t size, store_scavenge_outparams outparams) -> int

    Parameters
    ----------
    size: size_t
    outparams: store_scavenge_outparams *

    """
    return _mupdf.store_scavenge_outparams_fn(size, outparams)
class store_scavenge_external_outparams(_object):
    """Proxy of C++ store_scavenge_external_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, store_scavenge_external_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, store_scavenge_external_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["phase"] = _mupdf.store_scavenge_external_outparams_phase_set
    __swig_getmethods__["phase"] = _mupdf.store_scavenge_external_outparams_phase_get
    if _newclass:
        phase = _swig_property(_mupdf.store_scavenge_external_outparams_phase_get, _mupdf.store_scavenge_external_outparams_phase_set)

    def __init__(self):
        """__init__(store_scavenge_external_outparams self) -> store_scavenge_external_outparams"""
        this = _mupdf.new_store_scavenge_external_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_store_scavenge_external_outparams
    __del__ = lambda self: None
store_scavenge_external_outparams_swigregister = _mupdf.store_scavenge_external_outparams_swigregister
store_scavenge_external_outparams_swigregister(store_scavenge_external_outparams)


def store_scavenge_external_outparams_fn(size, outparams):
    """
    store_scavenge_external_outparams_fn(size_t size, store_scavenge_external_outparams outparams) -> int

    Parameters
    ----------
    size: size_t
    outparams: store_scavenge_external_outparams *

    """
    return _mupdf.store_scavenge_external_outparams_fn(size, outparams)
class strsep_outparams(_object):
    """Proxy of C++ strsep_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, strsep_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, strsep_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stringp"] = _mupdf.strsep_outparams_stringp_set
    __swig_getmethods__["stringp"] = _mupdf.strsep_outparams_stringp_get
    if _newclass:
        stringp = _swig_property(_mupdf.strsep_outparams_stringp_get, _mupdf.strsep_outparams_stringp_set)

    def __init__(self):
        """__init__(strsep_outparams self) -> strsep_outparams"""
        this = _mupdf.new_strsep_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_strsep_outparams
    __del__ = lambda self: None
strsep_outparams_swigregister = _mupdf.strsep_outparams_swigregister
strsep_outparams_swigregister(strsep_outparams)


def strsep_outparams_fn(delim, outparams):
    """
    strsep_outparams_fn(char const * delim, strsep_outparams outparams) -> char *

    Parameters
    ----------
    delim: char const *
    outparams: strsep_outparams *

    """
    return _mupdf.strsep_outparams_fn(delim, outparams)
class strtof_outparams(_object):
    """Proxy of C++ strtof_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, strtof_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, strtof_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["es"] = _mupdf.strtof_outparams_es_set
    __swig_getmethods__["es"] = _mupdf.strtof_outparams_es_get
    if _newclass:
        es = _swig_property(_mupdf.strtof_outparams_es_get, _mupdf.strtof_outparams_es_set)

    def __init__(self):
        """__init__(strtof_outparams self) -> strtof_outparams"""
        this = _mupdf.new_strtof_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_strtof_outparams
    __del__ = lambda self: None
strtof_outparams_swigregister = _mupdf.strtof_outparams_swigregister
strtof_outparams_swigregister(strtof_outparams)


def strtof_outparams_fn(s, outparams):
    """
    strtof_outparams_fn(char const * s, strtof_outparams outparams) -> float

    Parameters
    ----------
    s: char const *
    outparams: strtof_outparams *

    """
    return _mupdf.strtof_outparams_fn(s, outparams)
class ppdf_annot_MK_BC_outparams(_object):
    """Proxy of C++ ppdf_annot_MK_BC_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_annot_MK_BC_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_annot_MK_BC_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _mupdf.ppdf_annot_MK_BC_outparams_n_set
    __swig_getmethods__["n"] = _mupdf.ppdf_annot_MK_BC_outparams_n_get
    if _newclass:
        n = _swig_property(_mupdf.ppdf_annot_MK_BC_outparams_n_get, _mupdf.ppdf_annot_MK_BC_outparams_n_set)

    def __init__(self):
        """__init__(ppdf_annot_MK_BC_outparams self) -> ppdf_annot_MK_BC_outparams"""
        this = _mupdf.new_ppdf_annot_MK_BC_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_annot_MK_BC_outparams
    __del__ = lambda self: None
ppdf_annot_MK_BC_outparams_swigregister = _mupdf.ppdf_annot_MK_BC_outparams_swigregister
ppdf_annot_MK_BC_outparams_swigregister(ppdf_annot_MK_BC_outparams)


def ppdf_annot_MK_BC_outparams_fn(annot, color, outparams):
    """
    ppdf_annot_MK_BC_outparams_fn(pdf_annot * annot, float [4] color, ppdf_annot_MK_BC_outparams outparams)

    Parameters
    ----------
    annot: pdf_annot *
    color: float [4]
    outparams: ppdf_annot_MK_BC_outparams *

    """
    return _mupdf.ppdf_annot_MK_BC_outparams_fn(annot, color, outparams)
class ppdf_annot_MK_BG_outparams(_object):
    """Proxy of C++ ppdf_annot_MK_BG_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_annot_MK_BG_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_annot_MK_BG_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _mupdf.ppdf_annot_MK_BG_outparams_n_set
    __swig_getmethods__["n"] = _mupdf.ppdf_annot_MK_BG_outparams_n_get
    if _newclass:
        n = _swig_property(_mupdf.ppdf_annot_MK_BG_outparams_n_get, _mupdf.ppdf_annot_MK_BG_outparams_n_set)

    def __init__(self):
        """__init__(ppdf_annot_MK_BG_outparams self) -> ppdf_annot_MK_BG_outparams"""
        this = _mupdf.new_ppdf_annot_MK_BG_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_annot_MK_BG_outparams
    __del__ = lambda self: None
ppdf_annot_MK_BG_outparams_swigregister = _mupdf.ppdf_annot_MK_BG_outparams_swigregister
ppdf_annot_MK_BG_outparams_swigregister(ppdf_annot_MK_BG_outparams)


def ppdf_annot_MK_BG_outparams_fn(annot, color, outparams):
    """
    ppdf_annot_MK_BG_outparams_fn(pdf_annot * annot, float [4] color, ppdf_annot_MK_BG_outparams outparams)

    Parameters
    ----------
    annot: pdf_annot *
    color: float [4]
    outparams: ppdf_annot_MK_BG_outparams *

    """
    return _mupdf.ppdf_annot_MK_BG_outparams_fn(annot, color, outparams)
class ppdf_annot_color_outparams(_object):
    """Proxy of C++ ppdf_annot_color_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_annot_color_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_annot_color_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _mupdf.ppdf_annot_color_outparams_n_set
    __swig_getmethods__["n"] = _mupdf.ppdf_annot_color_outparams_n_get
    if _newclass:
        n = _swig_property(_mupdf.ppdf_annot_color_outparams_n_get, _mupdf.ppdf_annot_color_outparams_n_set)

    def __init__(self):
        """__init__(ppdf_annot_color_outparams self) -> ppdf_annot_color_outparams"""
        this = _mupdf.new_ppdf_annot_color_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_annot_color_outparams
    __del__ = lambda self: None
ppdf_annot_color_outparams_swigregister = _mupdf.ppdf_annot_color_outparams_swigregister
ppdf_annot_color_outparams_swigregister(ppdf_annot_color_outparams)


def ppdf_annot_color_outparams_fn(annot, color, outparams):
    """
    ppdf_annot_color_outparams_fn(pdf_annot * annot, float [4] color, ppdf_annot_color_outparams outparams)

    Parameters
    ----------
    annot: pdf_annot *
    color: float [4]
    outparams: ppdf_annot_color_outparams *

    """
    return _mupdf.ppdf_annot_color_outparams_fn(annot, color, outparams)
class ppdf_annot_default_appearance_outparams(_object):
    """Proxy of C++ ppdf_annot_default_appearance_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_annot_default_appearance_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_annot_default_appearance_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["font"] = _mupdf.ppdf_annot_default_appearance_outparams_font_set
    __swig_getmethods__["font"] = _mupdf.ppdf_annot_default_appearance_outparams_font_get
    if _newclass:
        font = _swig_property(_mupdf.ppdf_annot_default_appearance_outparams_font_get, _mupdf.ppdf_annot_default_appearance_outparams_font_set)
    __swig_setmethods__["size"] = _mupdf.ppdf_annot_default_appearance_outparams_size_set
    __swig_getmethods__["size"] = _mupdf.ppdf_annot_default_appearance_outparams_size_get
    if _newclass:
        size = _swig_property(_mupdf.ppdf_annot_default_appearance_outparams_size_get, _mupdf.ppdf_annot_default_appearance_outparams_size_set)
    __swig_setmethods__["n"] = _mupdf.ppdf_annot_default_appearance_outparams_n_set
    __swig_getmethods__["n"] = _mupdf.ppdf_annot_default_appearance_outparams_n_get
    if _newclass:
        n = _swig_property(_mupdf.ppdf_annot_default_appearance_outparams_n_get, _mupdf.ppdf_annot_default_appearance_outparams_n_set)

    def __init__(self):
        """__init__(ppdf_annot_default_appearance_outparams self) -> ppdf_annot_default_appearance_outparams"""
        this = _mupdf.new_ppdf_annot_default_appearance_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_annot_default_appearance_outparams
    __del__ = lambda self: None
ppdf_annot_default_appearance_outparams_swigregister = _mupdf.ppdf_annot_default_appearance_outparams_swigregister
ppdf_annot_default_appearance_outparams_swigregister(ppdf_annot_default_appearance_outparams)


def ppdf_annot_default_appearance_outparams_fn(annot, color, outparams):
    """
    ppdf_annot_default_appearance_outparams_fn(pdf_annot * annot, float [4] color, ppdf_annot_default_appearance_outparams outparams)

    Parameters
    ----------
    annot: pdf_annot *
    color: float [4]
    outparams: ppdf_annot_default_appearance_outparams *

    """
    return _mupdf.ppdf_annot_default_appearance_outparams_fn(annot, color, outparams)
class ppdf_annot_interior_color_outparams(_object):
    """Proxy of C++ ppdf_annot_interior_color_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_annot_interior_color_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_annot_interior_color_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n"] = _mupdf.ppdf_annot_interior_color_outparams_n_set
    __swig_getmethods__["n"] = _mupdf.ppdf_annot_interior_color_outparams_n_get
    if _newclass:
        n = _swig_property(_mupdf.ppdf_annot_interior_color_outparams_n_get, _mupdf.ppdf_annot_interior_color_outparams_n_set)

    def __init__(self):
        """__init__(ppdf_annot_interior_color_outparams self) -> ppdf_annot_interior_color_outparams"""
        this = _mupdf.new_ppdf_annot_interior_color_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_annot_interior_color_outparams
    __del__ = lambda self: None
ppdf_annot_interior_color_outparams_swigregister = _mupdf.ppdf_annot_interior_color_outparams_swigregister
ppdf_annot_interior_color_outparams_swigregister(ppdf_annot_interior_color_outparams)


def ppdf_annot_interior_color_outparams_fn(annot, color, outparams):
    """
    ppdf_annot_interior_color_outparams_fn(pdf_annot * annot, float [4] color, ppdf_annot_interior_color_outparams outparams)

    Parameters
    ----------
    annot: pdf_annot *
    color: float [4]
    outparams: ppdf_annot_interior_color_outparams *

    """
    return _mupdf.ppdf_annot_interior_color_outparams_fn(annot, color, outparams)
class ppdf_annot_line_ending_styles_outparams(_object):
    """Proxy of C++ ppdf_annot_line_ending_styles_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_annot_line_ending_styles_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_annot_line_ending_styles_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["start_style"] = _mupdf.ppdf_annot_line_ending_styles_outparams_start_style_set
    __swig_getmethods__["start_style"] = _mupdf.ppdf_annot_line_ending_styles_outparams_start_style_get
    if _newclass:
        start_style = _swig_property(_mupdf.ppdf_annot_line_ending_styles_outparams_start_style_get, _mupdf.ppdf_annot_line_ending_styles_outparams_start_style_set)
    __swig_setmethods__["end_style"] = _mupdf.ppdf_annot_line_ending_styles_outparams_end_style_set
    __swig_getmethods__["end_style"] = _mupdf.ppdf_annot_line_ending_styles_outparams_end_style_get
    if _newclass:
        end_style = _swig_property(_mupdf.ppdf_annot_line_ending_styles_outparams_end_style_get, _mupdf.ppdf_annot_line_ending_styles_outparams_end_style_set)

    def __init__(self):
        """__init__(ppdf_annot_line_ending_styles_outparams self) -> ppdf_annot_line_ending_styles_outparams"""
        this = _mupdf.new_ppdf_annot_line_ending_styles_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_annot_line_ending_styles_outparams
    __del__ = lambda self: None
ppdf_annot_line_ending_styles_outparams_swigregister = _mupdf.ppdf_annot_line_ending_styles_outparams_swigregister
ppdf_annot_line_ending_styles_outparams_swigregister(ppdf_annot_line_ending_styles_outparams)


def ppdf_annot_line_ending_styles_outparams_fn(annot, outparams):
    """
    ppdf_annot_line_ending_styles_outparams_fn(pdf_annot * annot, ppdf_annot_line_ending_styles_outparams outparams)

    Parameters
    ----------
    annot: pdf_annot *
    outparams: ppdf_annot_line_ending_styles_outparams *

    """
    return _mupdf.ppdf_annot_line_ending_styles_outparams_fn(annot, outparams)
class ppdf_array_get_string_outparams(_object):
    """Proxy of C++ ppdf_array_get_string_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_array_get_string_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_array_get_string_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sizep"] = _mupdf.ppdf_array_get_string_outparams_sizep_set
    __swig_getmethods__["sizep"] = _mupdf.ppdf_array_get_string_outparams_sizep_get
    if _newclass:
        sizep = _swig_property(_mupdf.ppdf_array_get_string_outparams_sizep_get, _mupdf.ppdf_array_get_string_outparams_sizep_set)

    def __init__(self):
        """__init__(ppdf_array_get_string_outparams self) -> ppdf_array_get_string_outparams"""
        this = _mupdf.new_ppdf_array_get_string_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_array_get_string_outparams
    __del__ = lambda self: None
ppdf_array_get_string_outparams_swigregister = _mupdf.ppdf_array_get_string_outparams_swigregister
ppdf_array_get_string_outparams_swigregister(ppdf_array_get_string_outparams)


def ppdf_array_get_string_outparams_fn(array, index, outparams):
    """
    ppdf_array_get_string_outparams_fn(pdf_obj * array, int index, ppdf_array_get_string_outparams outparams) -> char const *

    Parameters
    ----------
    array: pdf_obj *
    index: int
    outparams: ppdf_array_get_string_outparams *

    """
    return _mupdf.ppdf_array_get_string_outparams_fn(array, index, outparams)
class ppdf_decode_cmap_outparams(_object):
    """Proxy of C++ ppdf_decode_cmap_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_decode_cmap_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_decode_cmap_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cpt"] = _mupdf.ppdf_decode_cmap_outparams_cpt_set
    __swig_getmethods__["cpt"] = _mupdf.ppdf_decode_cmap_outparams_cpt_get
    if _newclass:
        cpt = _swig_property(_mupdf.ppdf_decode_cmap_outparams_cpt_get, _mupdf.ppdf_decode_cmap_outparams_cpt_set)

    def __init__(self):
        """__init__(ppdf_decode_cmap_outparams self) -> ppdf_decode_cmap_outparams"""
        this = _mupdf.new_ppdf_decode_cmap_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_decode_cmap_outparams
    __del__ = lambda self: None
ppdf_decode_cmap_outparams_swigregister = _mupdf.ppdf_decode_cmap_outparams_swigregister
ppdf_decode_cmap_outparams_swigregister(ppdf_decode_cmap_outparams)


def ppdf_decode_cmap_outparams_fn(cmap, s, e, outparams):
    """
    ppdf_decode_cmap_outparams_fn(pdf_cmap cmap, unsigned char * s, unsigned char * e, ppdf_decode_cmap_outparams outparams) -> int

    Parameters
    ----------
    cmap: pdf_cmap *
    s: unsigned char *
    e: unsigned char *
    outparams: ppdf_decode_cmap_outparams *

    """
    return _mupdf.ppdf_decode_cmap_outparams_fn(cmap, s, e, outparams)
class ppdf_dict_get_put_drop_outparams(_object):
    """Proxy of C++ ppdf_dict_get_put_drop_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_dict_get_put_drop_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_dict_get_put_drop_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["old_val"] = _mupdf.ppdf_dict_get_put_drop_outparams_old_val_set
    __swig_getmethods__["old_val"] = _mupdf.ppdf_dict_get_put_drop_outparams_old_val_get
    if _newclass:
        old_val = _swig_property(_mupdf.ppdf_dict_get_put_drop_outparams_old_val_get, _mupdf.ppdf_dict_get_put_drop_outparams_old_val_set)

    def __init__(self):
        """__init__(ppdf_dict_get_put_drop_outparams self) -> ppdf_dict_get_put_drop_outparams"""
        this = _mupdf.new_ppdf_dict_get_put_drop_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_dict_get_put_drop_outparams
    __del__ = lambda self: None
ppdf_dict_get_put_drop_outparams_swigregister = _mupdf.ppdf_dict_get_put_drop_outparams_swigregister
ppdf_dict_get_put_drop_outparams_swigregister(ppdf_dict_get_put_drop_outparams)


def ppdf_dict_get_put_drop_outparams_fn(dict, key, val, outparams):
    """
    ppdf_dict_get_put_drop_outparams_fn(pdf_obj * dict, pdf_obj * key, pdf_obj * val, ppdf_dict_get_put_drop_outparams outparams)

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    val: pdf_obj *
    outparams: ppdf_dict_get_put_drop_outparams *

    """
    return _mupdf.ppdf_dict_get_put_drop_outparams_fn(dict, key, val, outparams)
class ppdf_dict_get_string_outparams(_object):
    """Proxy of C++ ppdf_dict_get_string_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_dict_get_string_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_dict_get_string_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sizep"] = _mupdf.ppdf_dict_get_string_outparams_sizep_set
    __swig_getmethods__["sizep"] = _mupdf.ppdf_dict_get_string_outparams_sizep_get
    if _newclass:
        sizep = _swig_property(_mupdf.ppdf_dict_get_string_outparams_sizep_get, _mupdf.ppdf_dict_get_string_outparams_sizep_set)

    def __init__(self):
        """__init__(ppdf_dict_get_string_outparams self) -> ppdf_dict_get_string_outparams"""
        this = _mupdf.new_ppdf_dict_get_string_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_dict_get_string_outparams
    __del__ = lambda self: None
ppdf_dict_get_string_outparams_swigregister = _mupdf.ppdf_dict_get_string_outparams_swigregister
ppdf_dict_get_string_outparams_swigregister(ppdf_dict_get_string_outparams)


def ppdf_dict_get_string_outparams_fn(dict, key, outparams):
    """
    ppdf_dict_get_string_outparams_fn(pdf_obj * dict, pdf_obj * key, ppdf_dict_get_string_outparams outparams) -> char const *

    Parameters
    ----------
    dict: pdf_obj *
    key: pdf_obj *
    outparams: ppdf_dict_get_string_outparams *

    """
    return _mupdf.ppdf_dict_get_string_outparams_fn(dict, key, outparams)
class ppdf_edit_text_field_value_outparams(_object):
    """Proxy of C++ ppdf_edit_text_field_value_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_edit_text_field_value_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_edit_text_field_value_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["selStart"] = _mupdf.ppdf_edit_text_field_value_outparams_selStart_set
    __swig_getmethods__["selStart"] = _mupdf.ppdf_edit_text_field_value_outparams_selStart_get
    if _newclass:
        selStart = _swig_property(_mupdf.ppdf_edit_text_field_value_outparams_selStart_get, _mupdf.ppdf_edit_text_field_value_outparams_selStart_set)
    __swig_setmethods__["selEnd"] = _mupdf.ppdf_edit_text_field_value_outparams_selEnd_set
    __swig_getmethods__["selEnd"] = _mupdf.ppdf_edit_text_field_value_outparams_selEnd_get
    if _newclass:
        selEnd = _swig_property(_mupdf.ppdf_edit_text_field_value_outparams_selEnd_get, _mupdf.ppdf_edit_text_field_value_outparams_selEnd_set)
    __swig_setmethods__["newvalue"] = _mupdf.ppdf_edit_text_field_value_outparams_newvalue_set
    __swig_getmethods__["newvalue"] = _mupdf.ppdf_edit_text_field_value_outparams_newvalue_get
    if _newclass:
        newvalue = _swig_property(_mupdf.ppdf_edit_text_field_value_outparams_newvalue_get, _mupdf.ppdf_edit_text_field_value_outparams_newvalue_set)

    def __init__(self):
        """__init__(ppdf_edit_text_field_value_outparams self) -> ppdf_edit_text_field_value_outparams"""
        this = _mupdf.new_ppdf_edit_text_field_value_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_edit_text_field_value_outparams
    __del__ = lambda self: None
ppdf_edit_text_field_value_outparams_swigregister = _mupdf.ppdf_edit_text_field_value_outparams_swigregister
ppdf_edit_text_field_value_outparams_swigregister(ppdf_edit_text_field_value_outparams)


def ppdf_edit_text_field_value_outparams_fn(widget, value, change, outparams):
    """
    ppdf_edit_text_field_value_outparams_fn(pdf_annot * widget, char const * value, char const * change, ppdf_edit_text_field_value_outparams outparams) -> int

    Parameters
    ----------
    widget: pdf_annot *
    value: char const *
    change: char const *
    outparams: ppdf_edit_text_field_value_outparams *

    """
    return _mupdf.ppdf_edit_text_field_value_outparams_fn(widget, value, change, outparams)
class ppdf_eval_function_outparams(_object):
    """Proxy of C++ ppdf_eval_function_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_eval_function_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_eval_function_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["out"] = _mupdf.ppdf_eval_function_outparams_out_set
    __swig_getmethods__["out"] = _mupdf.ppdf_eval_function_outparams_out_get
    if _newclass:
        out = _swig_property(_mupdf.ppdf_eval_function_outparams_out_get, _mupdf.ppdf_eval_function_outparams_out_set)

    def __init__(self):
        """__init__(ppdf_eval_function_outparams self) -> ppdf_eval_function_outparams"""
        this = _mupdf.new_ppdf_eval_function_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_eval_function_outparams
    __del__ = lambda self: None
ppdf_eval_function_outparams_swigregister = _mupdf.ppdf_eval_function_outparams_swigregister
ppdf_eval_function_outparams_swigregister(ppdf_eval_function_outparams)


def ppdf_eval_function_outparams_fn(func, arg2, inlen, outlen, outparams):
    """
    ppdf_eval_function_outparams_fn(pdf_function * func, float const * arg2, int inlen, int outlen, ppdf_eval_function_outparams outparams)

    Parameters
    ----------
    func: pdf_function *
    in: float const *
    inlen: int
    outlen: int
    outparams: ppdf_eval_function_outparams *

    """
    return _mupdf.ppdf_eval_function_outparams_fn(func, arg2, inlen, outlen, outparams)
class ppdf_field_event_validate_outparams(_object):
    """Proxy of C++ ppdf_field_event_validate_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_field_event_validate_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_field_event_validate_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["newvalue"] = _mupdf.ppdf_field_event_validate_outparams_newvalue_set
    __swig_getmethods__["newvalue"] = _mupdf.ppdf_field_event_validate_outparams_newvalue_get
    if _newclass:
        newvalue = _swig_property(_mupdf.ppdf_field_event_validate_outparams_newvalue_get, _mupdf.ppdf_field_event_validate_outparams_newvalue_set)

    def __init__(self):
        """__init__(ppdf_field_event_validate_outparams self) -> ppdf_field_event_validate_outparams"""
        this = _mupdf.new_ppdf_field_event_validate_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_field_event_validate_outparams
    __del__ = lambda self: None
ppdf_field_event_validate_outparams_swigregister = _mupdf.ppdf_field_event_validate_outparams_swigregister
ppdf_field_event_validate_outparams_swigregister(ppdf_field_event_validate_outparams)


def ppdf_field_event_validate_outparams_fn(doc, field, value, outparams):
    """
    ppdf_field_event_validate_outparams_fn(pdf_document * doc, pdf_obj * field, char const * value, ppdf_field_event_validate_outparams outparams) -> int

    Parameters
    ----------
    doc: pdf_document *
    field: pdf_obj *
    value: char const *
    outparams: ppdf_field_event_validate_outparams *

    """
    return _mupdf.ppdf_field_event_validate_outparams_fn(doc, field, value, outparams)
class ppdf_js_event_result_validate_outparams(_object):
    """Proxy of C++ ppdf_js_event_result_validate_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_js_event_result_validate_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_js_event_result_validate_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["newvalue"] = _mupdf.ppdf_js_event_result_validate_outparams_newvalue_set
    __swig_getmethods__["newvalue"] = _mupdf.ppdf_js_event_result_validate_outparams_newvalue_get
    if _newclass:
        newvalue = _swig_property(_mupdf.ppdf_js_event_result_validate_outparams_newvalue_get, _mupdf.ppdf_js_event_result_validate_outparams_newvalue_set)

    def __init__(self):
        """__init__(ppdf_js_event_result_validate_outparams self) -> ppdf_js_event_result_validate_outparams"""
        this = _mupdf.new_ppdf_js_event_result_validate_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_js_event_result_validate_outparams
    __del__ = lambda self: None
ppdf_js_event_result_validate_outparams_swigregister = _mupdf.ppdf_js_event_result_validate_outparams_swigregister
ppdf_js_event_result_validate_outparams_swigregister(ppdf_js_event_result_validate_outparams)


def ppdf_js_event_result_validate_outparams_fn(js, outparams):
    """
    ppdf_js_event_result_validate_outparams_fn(pdf_js * js, ppdf_js_event_result_validate_outparams outparams) -> int

    Parameters
    ----------
    js: pdf_js *
    outparams: ppdf_js_event_result_validate_outparams *

    """
    return _mupdf.ppdf_js_event_result_validate_outparams_fn(js, outparams)
class ppdf_load_encoding_outparams(_object):
    """Proxy of C++ ppdf_load_encoding_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_load_encoding_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_load_encoding_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["estrings"] = _mupdf.ppdf_load_encoding_outparams_estrings_set
    __swig_getmethods__["estrings"] = _mupdf.ppdf_load_encoding_outparams_estrings_get
    if _newclass:
        estrings = _swig_property(_mupdf.ppdf_load_encoding_outparams_estrings_get, _mupdf.ppdf_load_encoding_outparams_estrings_set)

    def __init__(self):
        """__init__(ppdf_load_encoding_outparams self) -> ppdf_load_encoding_outparams"""
        this = _mupdf.new_ppdf_load_encoding_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_load_encoding_outparams
    __del__ = lambda self: None
ppdf_load_encoding_outparams_swigregister = _mupdf.ppdf_load_encoding_outparams_swigregister
ppdf_load_encoding_outparams_swigregister(ppdf_load_encoding_outparams)


def ppdf_load_encoding_outparams_fn(encoding, outparams):
    """
    ppdf_load_encoding_outparams_fn(char const * encoding, ppdf_load_encoding_outparams outparams)

    Parameters
    ----------
    encoding: char const *
    outparams: ppdf_load_encoding_outparams *

    """
    return _mupdf.ppdf_load_encoding_outparams_fn(encoding, outparams)
class ppdf_load_to_unicode_outparams(_object):
    """Proxy of C++ ppdf_load_to_unicode_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_load_to_unicode_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_load_to_unicode_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["strings"] = _mupdf.ppdf_load_to_unicode_outparams_strings_set
    __swig_getmethods__["strings"] = _mupdf.ppdf_load_to_unicode_outparams_strings_get
    if _newclass:
        strings = _swig_property(_mupdf.ppdf_load_to_unicode_outparams_strings_get, _mupdf.ppdf_load_to_unicode_outparams_strings_set)

    def __init__(self):
        """__init__(ppdf_load_to_unicode_outparams self) -> ppdf_load_to_unicode_outparams"""
        this = _mupdf.new_ppdf_load_to_unicode_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_load_to_unicode_outparams
    __del__ = lambda self: None
ppdf_load_to_unicode_outparams_swigregister = _mupdf.ppdf_load_to_unicode_outparams_swigregister
ppdf_load_to_unicode_outparams_swigregister(ppdf_load_to_unicode_outparams)


def ppdf_load_to_unicode_outparams_fn(doc, font, collection, cmapstm, outparams):
    """
    ppdf_load_to_unicode_outparams_fn(pdf_document * doc, pdf_font_desc font, char * collection, pdf_obj * cmapstm, ppdf_load_to_unicode_outparams outparams)

    Parameters
    ----------
    doc: pdf_document *
    font: pdf_font_desc *
    collection: char *
    cmapstm: pdf_obj *
    outparams: ppdf_load_to_unicode_outparams *

    """
    return _mupdf.ppdf_load_to_unicode_outparams_fn(doc, font, collection, cmapstm, outparams)
class ppdf_lookup_anchor_outparams(_object):
    """Proxy of C++ ppdf_lookup_anchor_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_lookup_anchor_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_lookup_anchor_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xp"] = _mupdf.ppdf_lookup_anchor_outparams_xp_set
    __swig_getmethods__["xp"] = _mupdf.ppdf_lookup_anchor_outparams_xp_get
    if _newclass:
        xp = _swig_property(_mupdf.ppdf_lookup_anchor_outparams_xp_get, _mupdf.ppdf_lookup_anchor_outparams_xp_set)
    __swig_setmethods__["yp"] = _mupdf.ppdf_lookup_anchor_outparams_yp_set
    __swig_getmethods__["yp"] = _mupdf.ppdf_lookup_anchor_outparams_yp_get
    if _newclass:
        yp = _swig_property(_mupdf.ppdf_lookup_anchor_outparams_yp_get, _mupdf.ppdf_lookup_anchor_outparams_yp_set)

    def __init__(self):
        """__init__(ppdf_lookup_anchor_outparams self) -> ppdf_lookup_anchor_outparams"""
        this = _mupdf.new_ppdf_lookup_anchor_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_lookup_anchor_outparams
    __del__ = lambda self: None
ppdf_lookup_anchor_outparams_swigregister = _mupdf.ppdf_lookup_anchor_outparams_swigregister
ppdf_lookup_anchor_outparams_swigregister(ppdf_lookup_anchor_outparams)


def ppdf_lookup_anchor_outparams_fn(doc, name, outparams):
    """
    ppdf_lookup_anchor_outparams_fn(pdf_document * doc, char const * name, ppdf_lookup_anchor_outparams outparams) -> int

    Parameters
    ----------
    doc: pdf_document *
    name: char const *
    outparams: ppdf_lookup_anchor_outparams *

    """
    return _mupdf.ppdf_lookup_anchor_outparams_fn(doc, name, outparams)
class ppdf_lookup_cmap_full_outparams(_object):
    """Proxy of C++ ppdf_lookup_cmap_full_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_lookup_cmap_full_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_lookup_cmap_full_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["out"] = _mupdf.ppdf_lookup_cmap_full_outparams_out_set
    __swig_getmethods__["out"] = _mupdf.ppdf_lookup_cmap_full_outparams_out_get
    if _newclass:
        out = _swig_property(_mupdf.ppdf_lookup_cmap_full_outparams_out_get, _mupdf.ppdf_lookup_cmap_full_outparams_out_set)

    def __init__(self):
        """__init__(ppdf_lookup_cmap_full_outparams self) -> ppdf_lookup_cmap_full_outparams"""
        this = _mupdf.new_ppdf_lookup_cmap_full_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_lookup_cmap_full_outparams
    __del__ = lambda self: None
ppdf_lookup_cmap_full_outparams_swigregister = _mupdf.ppdf_lookup_cmap_full_outparams_swigregister
ppdf_lookup_cmap_full_outparams_swigregister(ppdf_lookup_cmap_full_outparams)


def ppdf_lookup_cmap_full_outparams_fn(cmap, cpt, outparams):
    """
    ppdf_lookup_cmap_full_outparams_fn(pdf_cmap cmap, unsigned int cpt, ppdf_lookup_cmap_full_outparams outparams) -> int

    Parameters
    ----------
    cmap: pdf_cmap *
    cpt: unsigned int
    outparams: ppdf_lookup_cmap_full_outparams *

    """
    return _mupdf.ppdf_lookup_cmap_full_outparams_fn(cmap, cpt, outparams)
class ppdf_lookup_substitute_font_outparams(_object):
    """Proxy of C++ ppdf_lookup_substitute_font_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_lookup_substitute_font_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_lookup_substitute_font_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _mupdf.ppdf_lookup_substitute_font_outparams_len_set
    __swig_getmethods__["len"] = _mupdf.ppdf_lookup_substitute_font_outparams_len_get
    if _newclass:
        len = _swig_property(_mupdf.ppdf_lookup_substitute_font_outparams_len_get, _mupdf.ppdf_lookup_substitute_font_outparams_len_set)

    def __init__(self):
        """__init__(ppdf_lookup_substitute_font_outparams self) -> ppdf_lookup_substitute_font_outparams"""
        this = _mupdf.new_ppdf_lookup_substitute_font_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_lookup_substitute_font_outparams
    __del__ = lambda self: None
ppdf_lookup_substitute_font_outparams_swigregister = _mupdf.ppdf_lookup_substitute_font_outparams_swigregister
ppdf_lookup_substitute_font_outparams_swigregister(ppdf_lookup_substitute_font_outparams)


def ppdf_lookup_substitute_font_outparams_fn(mono, serif, bold, italic, outparams):
    """
    ppdf_lookup_substitute_font_outparams_fn(int mono, int serif, int bold, int italic, ppdf_lookup_substitute_font_outparams outparams) -> unsigned char const *

    Parameters
    ----------
    mono: int
    serif: int
    bold: int
    italic: int
    outparams: ppdf_lookup_substitute_font_outparams *

    """
    return _mupdf.ppdf_lookup_substitute_font_outparams_fn(mono, serif, bold, italic, outparams)
class ppdf_map_one_to_many_outparams(_object):
    """Proxy of C++ ppdf_map_one_to_many_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_map_one_to_many_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_map_one_to_many_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["many"] = _mupdf.ppdf_map_one_to_many_outparams_many_set
    __swig_getmethods__["many"] = _mupdf.ppdf_map_one_to_many_outparams_many_get
    if _newclass:
        many = _swig_property(_mupdf.ppdf_map_one_to_many_outparams_many_get, _mupdf.ppdf_map_one_to_many_outparams_many_set)

    def __init__(self):
        """__init__(ppdf_map_one_to_many_outparams self) -> ppdf_map_one_to_many_outparams"""
        this = _mupdf.new_ppdf_map_one_to_many_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_map_one_to_many_outparams
    __del__ = lambda self: None
ppdf_map_one_to_many_outparams_swigregister = _mupdf.ppdf_map_one_to_many_outparams_swigregister
ppdf_map_one_to_many_outparams_swigregister(ppdf_map_one_to_many_outparams)


def ppdf_map_one_to_many_outparams_fn(cmap, one, len, outparams):
    """
    ppdf_map_one_to_many_outparams_fn(pdf_cmap cmap, unsigned int one, size_t len, ppdf_map_one_to_many_outparams outparams)

    Parameters
    ----------
    cmap: pdf_cmap *
    one: unsigned int
    len: size_t
    outparams: ppdf_map_one_to_many_outparams *

    """
    return _mupdf.ppdf_map_one_to_many_outparams_fn(cmap, one, len, outparams)
class ppdf_obj_memo_outparams(_object):
    """Proxy of C++ ppdf_obj_memo_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_obj_memo_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_obj_memo_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["memo"] = _mupdf.ppdf_obj_memo_outparams_memo_set
    __swig_getmethods__["memo"] = _mupdf.ppdf_obj_memo_outparams_memo_get
    if _newclass:
        memo = _swig_property(_mupdf.ppdf_obj_memo_outparams_memo_get, _mupdf.ppdf_obj_memo_outparams_memo_set)

    def __init__(self):
        """__init__(ppdf_obj_memo_outparams self) -> ppdf_obj_memo_outparams"""
        this = _mupdf.new_ppdf_obj_memo_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_obj_memo_outparams
    __del__ = lambda self: None
ppdf_obj_memo_outparams_swigregister = _mupdf.ppdf_obj_memo_outparams_swigregister
ppdf_obj_memo_outparams_swigregister(ppdf_obj_memo_outparams)


def ppdf_obj_memo_outparams_fn(obj, bit, outparams):
    """
    ppdf_obj_memo_outparams_fn(pdf_obj * obj, int bit, ppdf_obj_memo_outparams outparams) -> int

    Parameters
    ----------
    obj: pdf_obj *
    bit: int
    outparams: ppdf_obj_memo_outparams *

    """
    return _mupdf.ppdf_obj_memo_outparams_fn(obj, bit, outparams)
class ppdf_page_presentation_outparams(_object):
    """Proxy of C++ ppdf_page_presentation_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_page_presentation_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_page_presentation_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["duration"] = _mupdf.ppdf_page_presentation_outparams_duration_set
    __swig_getmethods__["duration"] = _mupdf.ppdf_page_presentation_outparams_duration_get
    if _newclass:
        duration = _swig_property(_mupdf.ppdf_page_presentation_outparams_duration_get, _mupdf.ppdf_page_presentation_outparams_duration_set)

    def __init__(self):
        """__init__(ppdf_page_presentation_outparams self) -> ppdf_page_presentation_outparams"""
        this = _mupdf.new_ppdf_page_presentation_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_page_presentation_outparams
    __del__ = lambda self: None
ppdf_page_presentation_outparams_swigregister = _mupdf.ppdf_page_presentation_outparams_swigregister
ppdf_page_presentation_outparams_swigregister(ppdf_page_presentation_outparams)


def ppdf_page_presentation_outparams_fn(page, transition, outparams):
    """
    ppdf_page_presentation_outparams_fn(pdf_page * page, fz_transition transition, ppdf_page_presentation_outparams outparams) -> fz_transition

    Parameters
    ----------
    page: pdf_page *
    transition: fz_transition *
    outparams: ppdf_page_presentation_outparams *

    """
    return _mupdf.ppdf_page_presentation_outparams_fn(page, transition, outparams)
class ppdf_page_write_outparams(_object):
    """Proxy of C++ ppdf_page_write_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_page_write_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_page_write_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["presources"] = _mupdf.ppdf_page_write_outparams_presources_set
    __swig_getmethods__["presources"] = _mupdf.ppdf_page_write_outparams_presources_get
    if _newclass:
        presources = _swig_property(_mupdf.ppdf_page_write_outparams_presources_get, _mupdf.ppdf_page_write_outparams_presources_set)
    __swig_setmethods__["pcontents"] = _mupdf.ppdf_page_write_outparams_pcontents_set
    __swig_getmethods__["pcontents"] = _mupdf.ppdf_page_write_outparams_pcontents_get
    if _newclass:
        pcontents = _swig_property(_mupdf.ppdf_page_write_outparams_pcontents_get, _mupdf.ppdf_page_write_outparams_pcontents_set)

    def __init__(self):
        """__init__(ppdf_page_write_outparams self) -> ppdf_page_write_outparams"""
        this = _mupdf.new_ppdf_page_write_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_page_write_outparams
    __del__ = lambda self: None
ppdf_page_write_outparams_swigregister = _mupdf.ppdf_page_write_outparams_swigregister
ppdf_page_write_outparams_swigregister(ppdf_page_write_outparams)


def ppdf_page_write_outparams_fn(doc, mediabox, outparams):
    """
    ppdf_page_write_outparams_fn(pdf_document * doc, fz_rect mediabox, ppdf_page_write_outparams outparams) -> fz_device *

    Parameters
    ----------
    doc: pdf_document *
    mediabox: fz_rect
    outparams: ppdf_page_write_outparams *

    """
    return _mupdf.ppdf_page_write_outparams_fn(doc, mediabox, outparams)
class ppdf_parse_default_appearance_outparams(_object):
    """Proxy of C++ ppdf_parse_default_appearance_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_parse_default_appearance_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_parse_default_appearance_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["font"] = _mupdf.ppdf_parse_default_appearance_outparams_font_set
    __swig_getmethods__["font"] = _mupdf.ppdf_parse_default_appearance_outparams_font_get
    if _newclass:
        font = _swig_property(_mupdf.ppdf_parse_default_appearance_outparams_font_get, _mupdf.ppdf_parse_default_appearance_outparams_font_set)
    __swig_setmethods__["size"] = _mupdf.ppdf_parse_default_appearance_outparams_size_set
    __swig_getmethods__["size"] = _mupdf.ppdf_parse_default_appearance_outparams_size_get
    if _newclass:
        size = _swig_property(_mupdf.ppdf_parse_default_appearance_outparams_size_get, _mupdf.ppdf_parse_default_appearance_outparams_size_set)
    __swig_setmethods__["n"] = _mupdf.ppdf_parse_default_appearance_outparams_n_set
    __swig_getmethods__["n"] = _mupdf.ppdf_parse_default_appearance_outparams_n_get
    if _newclass:
        n = _swig_property(_mupdf.ppdf_parse_default_appearance_outparams_n_get, _mupdf.ppdf_parse_default_appearance_outparams_n_set)

    def __init__(self):
        """__init__(ppdf_parse_default_appearance_outparams self) -> ppdf_parse_default_appearance_outparams"""
        this = _mupdf.new_ppdf_parse_default_appearance_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_parse_default_appearance_outparams
    __del__ = lambda self: None
ppdf_parse_default_appearance_outparams_swigregister = _mupdf.ppdf_parse_default_appearance_outparams_swigregister
ppdf_parse_default_appearance_outparams_swigregister(ppdf_parse_default_appearance_outparams)


def ppdf_parse_default_appearance_outparams_fn(da, color, outparams):
    """
    ppdf_parse_default_appearance_outparams_fn(char const * da, float [4] color, ppdf_parse_default_appearance_outparams outparams)

    Parameters
    ----------
    da: char const *
    color: float [4]
    outparams: ppdf_parse_default_appearance_outparams *

    """
    return _mupdf.ppdf_parse_default_appearance_outparams_fn(da, color, outparams)
class ppdf_parse_ind_obj_outparams(_object):
    """Proxy of C++ ppdf_parse_ind_obj_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_parse_ind_obj_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_parse_ind_obj_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _mupdf.ppdf_parse_ind_obj_outparams_num_set
    __swig_getmethods__["num"] = _mupdf.ppdf_parse_ind_obj_outparams_num_get
    if _newclass:
        num = _swig_property(_mupdf.ppdf_parse_ind_obj_outparams_num_get, _mupdf.ppdf_parse_ind_obj_outparams_num_set)
    __swig_setmethods__["gen"] = _mupdf.ppdf_parse_ind_obj_outparams_gen_set
    __swig_getmethods__["gen"] = _mupdf.ppdf_parse_ind_obj_outparams_gen_get
    if _newclass:
        gen = _swig_property(_mupdf.ppdf_parse_ind_obj_outparams_gen_get, _mupdf.ppdf_parse_ind_obj_outparams_gen_set)
    __swig_setmethods__["stm_ofs"] = _mupdf.ppdf_parse_ind_obj_outparams_stm_ofs_set
    __swig_getmethods__["stm_ofs"] = _mupdf.ppdf_parse_ind_obj_outparams_stm_ofs_get
    if _newclass:
        stm_ofs = _swig_property(_mupdf.ppdf_parse_ind_obj_outparams_stm_ofs_get, _mupdf.ppdf_parse_ind_obj_outparams_stm_ofs_set)
    __swig_setmethods__["try_repair"] = _mupdf.ppdf_parse_ind_obj_outparams_try_repair_set
    __swig_getmethods__["try_repair"] = _mupdf.ppdf_parse_ind_obj_outparams_try_repair_get
    if _newclass:
        try_repair = _swig_property(_mupdf.ppdf_parse_ind_obj_outparams_try_repair_get, _mupdf.ppdf_parse_ind_obj_outparams_try_repair_set)

    def __init__(self):
        """__init__(ppdf_parse_ind_obj_outparams self) -> ppdf_parse_ind_obj_outparams"""
        this = _mupdf.new_ppdf_parse_ind_obj_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_parse_ind_obj_outparams
    __del__ = lambda self: None
ppdf_parse_ind_obj_outparams_swigregister = _mupdf.ppdf_parse_ind_obj_outparams_swigregister
ppdf_parse_ind_obj_outparams_swigregister(ppdf_parse_ind_obj_outparams)


def ppdf_parse_ind_obj_outparams_fn(doc, f, outparams):
    """
    ppdf_parse_ind_obj_outparams_fn(pdf_document * doc, fz_stream * f, ppdf_parse_ind_obj_outparams outparams) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    f: fz_stream *
    outparams: ppdf_parse_ind_obj_outparams *

    """
    return _mupdf.ppdf_parse_ind_obj_outparams_fn(doc, f, outparams)
class ppdf_parse_journal_obj_outparams(_object):
    """Proxy of C++ ppdf_parse_journal_obj_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_parse_journal_obj_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_parse_journal_obj_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["onum"] = _mupdf.ppdf_parse_journal_obj_outparams_onum_set
    __swig_getmethods__["onum"] = _mupdf.ppdf_parse_journal_obj_outparams_onum_get
    if _newclass:
        onum = _swig_property(_mupdf.ppdf_parse_journal_obj_outparams_onum_get, _mupdf.ppdf_parse_journal_obj_outparams_onum_set)
    __swig_setmethods__["ostm"] = _mupdf.ppdf_parse_journal_obj_outparams_ostm_set
    __swig_getmethods__["ostm"] = _mupdf.ppdf_parse_journal_obj_outparams_ostm_get
    if _newclass:
        ostm = _swig_property(_mupdf.ppdf_parse_journal_obj_outparams_ostm_get, _mupdf.ppdf_parse_journal_obj_outparams_ostm_set)
    __swig_setmethods__["newobj"] = _mupdf.ppdf_parse_journal_obj_outparams_newobj_set
    __swig_getmethods__["newobj"] = _mupdf.ppdf_parse_journal_obj_outparams_newobj_get
    if _newclass:
        newobj = _swig_property(_mupdf.ppdf_parse_journal_obj_outparams_newobj_get, _mupdf.ppdf_parse_journal_obj_outparams_newobj_set)

    def __init__(self):
        """__init__(ppdf_parse_journal_obj_outparams self) -> ppdf_parse_journal_obj_outparams"""
        this = _mupdf.new_ppdf_parse_journal_obj_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_parse_journal_obj_outparams
    __del__ = lambda self: None
ppdf_parse_journal_obj_outparams_swigregister = _mupdf.ppdf_parse_journal_obj_outparams_swigregister
ppdf_parse_journal_obj_outparams_swigregister(ppdf_parse_journal_obj_outparams)


def ppdf_parse_journal_obj_outparams_fn(doc, stm, outparams):
    """
    ppdf_parse_journal_obj_outparams_fn(pdf_document * doc, fz_stream * stm, ppdf_parse_journal_obj_outparams outparams) -> pdf_obj *

    Parameters
    ----------
    doc: pdf_document *
    stm: fz_stream *
    outparams: ppdf_parse_journal_obj_outparams *

    """
    return _mupdf.ppdf_parse_journal_obj_outparams_fn(doc, stm, outparams)
class ppdf_repair_obj_outparams(_object):
    """Proxy of C++ ppdf_repair_obj_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_repair_obj_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_repair_obj_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stmofsp"] = _mupdf.ppdf_repair_obj_outparams_stmofsp_set
    __swig_getmethods__["stmofsp"] = _mupdf.ppdf_repair_obj_outparams_stmofsp_get
    if _newclass:
        stmofsp = _swig_property(_mupdf.ppdf_repair_obj_outparams_stmofsp_get, _mupdf.ppdf_repair_obj_outparams_stmofsp_set)
    __swig_setmethods__["stmlenp"] = _mupdf.ppdf_repair_obj_outparams_stmlenp_set
    __swig_getmethods__["stmlenp"] = _mupdf.ppdf_repair_obj_outparams_stmlenp_get
    if _newclass:
        stmlenp = _swig_property(_mupdf.ppdf_repair_obj_outparams_stmlenp_get, _mupdf.ppdf_repair_obj_outparams_stmlenp_set)
    __swig_setmethods__["encrypt"] = _mupdf.ppdf_repair_obj_outparams_encrypt_set
    __swig_getmethods__["encrypt"] = _mupdf.ppdf_repair_obj_outparams_encrypt_get
    if _newclass:
        encrypt = _swig_property(_mupdf.ppdf_repair_obj_outparams_encrypt_get, _mupdf.ppdf_repair_obj_outparams_encrypt_set)
    __swig_setmethods__["id"] = _mupdf.ppdf_repair_obj_outparams_id_set
    __swig_getmethods__["id"] = _mupdf.ppdf_repair_obj_outparams_id_get
    if _newclass:
        id = _swig_property(_mupdf.ppdf_repair_obj_outparams_id_get, _mupdf.ppdf_repair_obj_outparams_id_set)
    __swig_setmethods__["page"] = _mupdf.ppdf_repair_obj_outparams_page_set
    __swig_getmethods__["page"] = _mupdf.ppdf_repair_obj_outparams_page_get
    if _newclass:
        page = _swig_property(_mupdf.ppdf_repair_obj_outparams_page_get, _mupdf.ppdf_repair_obj_outparams_page_set)
    __swig_setmethods__["tmpofs"] = _mupdf.ppdf_repair_obj_outparams_tmpofs_set
    __swig_getmethods__["tmpofs"] = _mupdf.ppdf_repair_obj_outparams_tmpofs_get
    if _newclass:
        tmpofs = _swig_property(_mupdf.ppdf_repair_obj_outparams_tmpofs_get, _mupdf.ppdf_repair_obj_outparams_tmpofs_set)
    __swig_setmethods__["root"] = _mupdf.ppdf_repair_obj_outparams_root_set
    __swig_getmethods__["root"] = _mupdf.ppdf_repair_obj_outparams_root_get
    if _newclass:
        root = _swig_property(_mupdf.ppdf_repair_obj_outparams_root_get, _mupdf.ppdf_repair_obj_outparams_root_set)

    def __init__(self):
        """__init__(ppdf_repair_obj_outparams self) -> ppdf_repair_obj_outparams"""
        this = _mupdf.new_ppdf_repair_obj_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_repair_obj_outparams
    __del__ = lambda self: None
ppdf_repair_obj_outparams_swigregister = _mupdf.ppdf_repair_obj_outparams_swigregister
ppdf_repair_obj_outparams_swigregister(ppdf_repair_obj_outparams)


def ppdf_repair_obj_outparams_fn(doc, buf, outparams):
    """
    ppdf_repair_obj_outparams_fn(pdf_document * doc, pdf_lexbuf buf, ppdf_repair_obj_outparams outparams) -> int

    Parameters
    ----------
    doc: pdf_document *
    buf: pdf_lexbuf *
    outparams: ppdf_repair_obj_outparams *

    """
    return _mupdf.ppdf_repair_obj_outparams_fn(doc, buf, outparams)
class ppdf_resolve_link_outparams(_object):
    """Proxy of C++ ppdf_resolve_link_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_resolve_link_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_resolve_link_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["xp"] = _mupdf.ppdf_resolve_link_outparams_xp_set
    __swig_getmethods__["xp"] = _mupdf.ppdf_resolve_link_outparams_xp_get
    if _newclass:
        xp = _swig_property(_mupdf.ppdf_resolve_link_outparams_xp_get, _mupdf.ppdf_resolve_link_outparams_xp_set)
    __swig_setmethods__["yp"] = _mupdf.ppdf_resolve_link_outparams_yp_set
    __swig_getmethods__["yp"] = _mupdf.ppdf_resolve_link_outparams_yp_get
    if _newclass:
        yp = _swig_property(_mupdf.ppdf_resolve_link_outparams_yp_get, _mupdf.ppdf_resolve_link_outparams_yp_set)

    def __init__(self):
        """__init__(ppdf_resolve_link_outparams self) -> ppdf_resolve_link_outparams"""
        this = _mupdf.new_ppdf_resolve_link_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_resolve_link_outparams
    __del__ = lambda self: None
ppdf_resolve_link_outparams_swigregister = _mupdf.ppdf_resolve_link_outparams_swigregister
ppdf_resolve_link_outparams_swigregister(ppdf_resolve_link_outparams)


def ppdf_resolve_link_outparams_fn(doc, uri, outparams):
    """
    ppdf_resolve_link_outparams_fn(pdf_document * doc, char const * uri, ppdf_resolve_link_outparams outparams) -> int

    Parameters
    ----------
    doc: pdf_document *
    uri: char const *
    outparams: ppdf_resolve_link_outparams *

    """
    return _mupdf.ppdf_resolve_link_outparams_fn(doc, uri, outparams)
class ppdf_signature_contents_outparams(_object):
    """Proxy of C++ ppdf_signature_contents_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_signature_contents_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_signature_contents_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["contents"] = _mupdf.ppdf_signature_contents_outparams_contents_set
    __swig_getmethods__["contents"] = _mupdf.ppdf_signature_contents_outparams_contents_get
    if _newclass:
        contents = _swig_property(_mupdf.ppdf_signature_contents_outparams_contents_get, _mupdf.ppdf_signature_contents_outparams_contents_set)

    def __init__(self):
        """__init__(ppdf_signature_contents_outparams self) -> ppdf_signature_contents_outparams"""
        this = _mupdf.new_ppdf_signature_contents_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_signature_contents_outparams
    __del__ = lambda self: None
ppdf_signature_contents_outparams_swigregister = _mupdf.ppdf_signature_contents_outparams_swigregister
ppdf_signature_contents_outparams_swigregister(ppdf_signature_contents_outparams)


def ppdf_signature_contents_outparams_fn(doc, signature, outparams):
    """
    ppdf_signature_contents_outparams_fn(pdf_document * doc, pdf_obj * signature, ppdf_signature_contents_outparams outparams) -> size_t

    Parameters
    ----------
    doc: pdf_document *
    signature: pdf_obj *
    outparams: ppdf_signature_contents_outparams *

    """
    return _mupdf.ppdf_signature_contents_outparams_fn(doc, signature, outparams)
class ppdf_sprint_obj_outparams(_object):
    """Proxy of C++ ppdf_sprint_obj_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_sprint_obj_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_sprint_obj_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["len"] = _mupdf.ppdf_sprint_obj_outparams_len_set
    __swig_getmethods__["len"] = _mupdf.ppdf_sprint_obj_outparams_len_get
    if _newclass:
        len = _swig_property(_mupdf.ppdf_sprint_obj_outparams_len_get, _mupdf.ppdf_sprint_obj_outparams_len_set)

    def __init__(self):
        """__init__(ppdf_sprint_obj_outparams self) -> ppdf_sprint_obj_outparams"""
        this = _mupdf.new_ppdf_sprint_obj_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_sprint_obj_outparams
    __del__ = lambda self: None
ppdf_sprint_obj_outparams_swigregister = _mupdf.ppdf_sprint_obj_outparams_swigregister
ppdf_sprint_obj_outparams_swigregister(ppdf_sprint_obj_outparams)


def ppdf_sprint_obj_outparams_fn(buf, cap, obj, tight, ascii, outparams):
    """
    ppdf_sprint_obj_outparams_fn(char * buf, size_t cap, pdf_obj * obj, int tight, int ascii, ppdf_sprint_obj_outparams outparams) -> char *

    Parameters
    ----------
    buf: char *
    cap: size_t
    obj: pdf_obj *
    tight: int
    ascii: int
    outparams: ppdf_sprint_obj_outparams *

    """
    return _mupdf.ppdf_sprint_obj_outparams_fn(buf, cap, obj, tight, ascii, outparams)
class ppdf_to_string_outparams(_object):
    """Proxy of C++ ppdf_to_string_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_to_string_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_to_string_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sizep"] = _mupdf.ppdf_to_string_outparams_sizep_set
    __swig_getmethods__["sizep"] = _mupdf.ppdf_to_string_outparams_sizep_get
    if _newclass:
        sizep = _swig_property(_mupdf.ppdf_to_string_outparams_sizep_get, _mupdf.ppdf_to_string_outparams_sizep_set)

    def __init__(self):
        """__init__(ppdf_to_string_outparams self) -> ppdf_to_string_outparams"""
        this = _mupdf.new_ppdf_to_string_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_to_string_outparams
    __del__ = lambda self: None
ppdf_to_string_outparams_swigregister = _mupdf.ppdf_to_string_outparams_swigregister
ppdf_to_string_outparams_swigregister(ppdf_to_string_outparams)


def ppdf_to_string_outparams_fn(obj, outparams):
    """
    ppdf_to_string_outparams_fn(pdf_obj * obj, ppdf_to_string_outparams outparams) -> char const *

    Parameters
    ----------
    obj: pdf_obj *
    outparams: ppdf_to_string_outparams *

    """
    return _mupdf.ppdf_to_string_outparams_fn(obj, outparams)
class ppdf_undoredo_state_outparams(_object):
    """Proxy of C++ ppdf_undoredo_state_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_undoredo_state_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_undoredo_state_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["steps"] = _mupdf.ppdf_undoredo_state_outparams_steps_set
    __swig_getmethods__["steps"] = _mupdf.ppdf_undoredo_state_outparams_steps_get
    if _newclass:
        steps = _swig_property(_mupdf.ppdf_undoredo_state_outparams_steps_get, _mupdf.ppdf_undoredo_state_outparams_steps_set)

    def __init__(self):
        """__init__(ppdf_undoredo_state_outparams self) -> ppdf_undoredo_state_outparams"""
        this = _mupdf.new_ppdf_undoredo_state_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_undoredo_state_outparams
    __del__ = lambda self: None
ppdf_undoredo_state_outparams_swigregister = _mupdf.ppdf_undoredo_state_outparams_swigregister
ppdf_undoredo_state_outparams_swigregister(ppdf_undoredo_state_outparams)


def ppdf_undoredo_state_outparams_fn(doc, outparams):
    """
    ppdf_undoredo_state_outparams_fn(pdf_document * doc, ppdf_undoredo_state_outparams outparams) -> int

    Parameters
    ----------
    doc: pdf_document *
    outparams: ppdf_undoredo_state_outparams *

    """
    return _mupdf.ppdf_undoredo_state_outparams_fn(doc, outparams)
class ppdf_walk_tree_outparams(_object):
    """Proxy of C++ ppdf_walk_tree_outparams class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ppdf_walk_tree_outparams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ppdf_walk_tree_outparams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["names"] = _mupdf.ppdf_walk_tree_outparams_names_set
    __swig_getmethods__["names"] = _mupdf.ppdf_walk_tree_outparams_names_get
    if _newclass:
        names = _swig_property(_mupdf.ppdf_walk_tree_outparams_names_get, _mupdf.ppdf_walk_tree_outparams_names_set)
    __swig_setmethods__["values"] = _mupdf.ppdf_walk_tree_outparams_values_set
    __swig_getmethods__["values"] = _mupdf.ppdf_walk_tree_outparams_values_get
    if _newclass:
        values = _swig_property(_mupdf.ppdf_walk_tree_outparams_values_get, _mupdf.ppdf_walk_tree_outparams_values_set)

    def __init__(self):
        """__init__(ppdf_walk_tree_outparams self) -> ppdf_walk_tree_outparams"""
        this = _mupdf.new_ppdf_walk_tree_outparams()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _mupdf.delete_ppdf_walk_tree_outparams
    __del__ = lambda self: None
ppdf_walk_tree_outparams_swigregister = _mupdf.ppdf_walk_tree_outparams_swigregister
ppdf_walk_tree_outparams_swigregister(ppdf_walk_tree_outparams)


def ppdf_walk_tree_outparams_fn(tree, kid_name, arrive, leave, arg, outparams):
    """
    ppdf_walk_tree_outparams_fn(pdf_obj * tree, pdf_obj * kid_name, void (*)(fz_context *,pdf_obj *,void *,pdf_obj **) arrive, void (*)(fz_context *,pdf_obj *,void *) leave, void * arg, ppdf_walk_tree_outparams outparams)

    Parameters
    ----------
    tree: pdf_obj *
    kid_name: pdf_obj *
    arrive: void (*)(fz_context *,pdf_obj *,void *,pdf_obj **)
    leave: void (*)(fz_context *,pdf_obj *,void *)
    arg: void *
    outparams: ppdf_walk_tree_outparams *

    """
    return _mupdf.ppdf_walk_tree_outparams_fn(tree, kid_name, arrive, leave, arg, outparams)

def new_pint():
    """new_pint() -> int *"""
    return _mupdf.new_pint()

def copy_pint(value):
    """
    copy_pint(int value) -> int *

    Parameters
    ----------
    value: int

    """
    return _mupdf.copy_pint(value)

def delete_pint(obj):
    """
    delete_pint(int * obj)

    Parameters
    ----------
    obj: int *

    """
    return _mupdf.delete_pint(obj)

def pint_assign(obj, value):
    """
    pint_assign(int * obj, int value)

    Parameters
    ----------
    obj: int *
    value: int

    """
    return _mupdf.pint_assign(obj, value)

def pint_value(obj):
    """
    pint_value(int * obj) -> int

    Parameters
    ----------
    obj: int *

    """
    return _mupdf.pint_value(obj)


def Document_lookup_metadata(self, key):
    """
    Python implementation override of Document.lookup_metadata().

    Returns string or None if not found.
    """
    e = new_pint()
    ret = lookup_metadata(self.m_internal, key, e)
    e = pint_value(e)
    if e < 0:
        return None
    return ret

Document.lookup_metadata = Document_lookup_metadata

def bitmap_details(bitmap):
    """
    Wrapper for out-params of fz_bitmap_details().
    Returns: int w, int h, int n, int stride
    """
    outparams = bitmap_details_outparams()
    ret = bitmap_details_outparams_fn(bitmap, outparams)
    return outparams.w, outparams.h, outparams.n, outparams.stride

def buffer_extract(buf):
    """
    Wrapper for out-params of fz_buffer_extract().
    Returns: size_t, unsigned char *data
    """
    outparams = buffer_extract_outparams()
    ret = buffer_extract_outparams_fn(buf, outparams)
    return ret, outparams.data

def buffer_storage(buf):
    """
    Wrapper for out-params of fz_buffer_storage().
    Returns: size_t, unsigned char *datap
    """
    outparams = buffer_storage_outparams()
    ret = buffer_storage_outparams_fn(buf, outparams)
    return ret, outparams.datap

def chartorune(str):
    """
    Wrapper for out-params of fz_chartorune().
    Returns: int, int rune
    """
    outparams = chartorune_outparams()
    ret = chartorune_outparams_fn(str, outparams)
    return ret, outparams.rune

def clamp_color(cs, in_):
    """
    Wrapper for out-params of fz_clamp_color().
    Returns: float out
    """
    outparams = clamp_color_outparams()
    ret = clamp_color_outparams_fn(cs, in_, outparams)
    return outparams.out

def convert_color(ss, sv, ds, is_, params):
    """
    Wrapper for out-params of fz_convert_color().
    Returns: float dv
    """
    outparams = convert_color_outparams()
    ret = convert_color_outparams_fn(ss, sv, ds, is_, params, outparams)
    return outparams.dv

def convert_separation_colors(src_cs, src_color, dst_seps, dst_cs, color_params):
    """
    Wrapper for out-params of fz_convert_separation_colors().
    Returns: float dst_color
    """
    outparams = convert_separation_colors_outparams()
    ret = convert_separation_colors_outparams_fn(src_cs, src_color, dst_seps, dst_cs, color_params, outparams)
    return outparams.dst_color

def decomp_image_from_stream(stm, image, subarea, indexed, l2factor):
    """
    Wrapper for out-params of fz_decomp_image_from_stream().
    Returns: fz_pixmap *, int l2extra
    """
    outparams = decomp_image_from_stream_outparams()
    ret = decomp_image_from_stream_outparams_fn(stm, image, subarea, indexed, l2factor, outparams)
    return ret, outparams.l2extra

def deflate(dest, source, source_length, level):
    """
    Wrapper for out-params of fz_deflate().
    Returns: size_t compressed_length
    """
    outparams = deflate_outparams()
    ret = deflate_outparams_fn(dest, source, source_length, level, outparams)
    return outparams.compressed_length

def drop_imp(p):
    """
    Wrapper for out-params of fz_drop_imp().
    Returns: int, int refs
    """
    outparams = drop_imp_outparams()
    ret = drop_imp_outparams_fn(p, outparams)
    return ret, outparams.refs

def drop_imp16(p):
    """
    Wrapper for out-params of fz_drop_imp16().
    Returns: int, int16_t refs
    """
    outparams = drop_imp16_outparams()
    ret = drop_imp16_outparams_fn(p, outparams)
    return ret, outparams.refs

def encode_character_with_fallback(font, unicode, script, language):
    """
    Wrapper for out-params of fz_encode_character_with_fallback().
    Returns: int, fz_font *out_font
    """
    outparams = encode_character_with_fallback_outparams()
    ret = encode_character_with_fallback_outparams_fn(font, unicode, script, language, outparams)
    return ret, outparams.out_font

def fill_pixmap_with_color(pix, colorspace, color_params):
    """
    Wrapper for out-params of fz_fill_pixmap_with_color().
    Returns: float color
    """
    outparams = fill_pixmap_with_color_outparams()
    ret = fill_pixmap_with_color_outparams_fn(pix, colorspace, color_params, outparams)
    return outparams.color

def get_pixmap_from_image(image, subarea, ctm):
    """
    Wrapper for out-params of fz_get_pixmap_from_image().
    Returns: fz_pixmap *, int w, int h
    """
    outparams = get_pixmap_from_image_outparams()
    ret = get_pixmap_from_image_outparams_fn(image, subarea, ctm, outparams)
    return ret, outparams.w, outparams.h

def getopt(nargc, ostr):
    """
    Wrapper for out-params of fz_getopt().
    Returns: int, char *nargv
    """
    outparams = getopt_outparams()
    ret = getopt_outparams_fn(nargc, ostr, outparams)
    return ret, outparams.nargv

def grisu(f, s):
    """
    Wrapper for out-params of fz_grisu().
    Returns: int, int exp
    """
    outparams = grisu_outparams()
    ret = grisu_outparams_fn(f, s, outparams)
    return ret, outparams.exp

def has_option(opts, key):
    """
    Wrapper for out-params of fz_has_option().
    Returns: int, const char *val
    """
    outparams = has_option_outparams()
    ret = has_option_outparams_fn(opts, key, outparams)
    return ret, outparams.val

def image_resolution(image):
    """
    Wrapper for out-params of fz_image_resolution().
    Returns: int xres, int yres
    """
    outparams = image_resolution_outparams()
    ret = image_resolution_outparams_fn(image, outparams)
    return outparams.xres, outparams.yres

def keep_imp(p):
    """
    Wrapper for out-params of fz_keep_imp().
    Returns: void *, int refs
    """
    outparams = keep_imp_outparams()
    ret = keep_imp_outparams_fn(p, outparams)
    return ret, outparams.refs

def keep_imp16(p):
    """
    Wrapper for out-params of fz_keep_imp16().
    Returns: void *, int16_t refs
    """
    outparams = keep_imp16_outparams()
    ret = keep_imp16_outparams_fn(p, outparams)
    return ret, outparams.refs

def keep_imp_locked(p):
    """
    Wrapper for out-params of fz_keep_imp_locked().
    Returns: void *, int refs
    """
    outparams = keep_imp_locked_outparams()
    ret = keep_imp_locked_outparams_fn(p, outparams)
    return ret, outparams.refs

def lookup_base14_font(name):
    """
    Wrapper for out-params of fz_lookup_base14_font().
    Returns: const unsigned char *, int len
    """
    outparams = lookup_base14_font_outparams()
    ret = lookup_base14_font_outparams_fn(name, outparams)
    return ret, outparams.len

def lookup_builtin_font(name, bold, italic):
    """
    Wrapper for out-params of fz_lookup_builtin_font().
    Returns: const unsigned char *, int len
    """
    outparams = lookup_builtin_font_outparams()
    ret = lookup_builtin_font_outparams_fn(name, bold, italic, outparams)
    return ret, outparams.len

def lookup_cjk_font(ordering):
    """
    Wrapper for out-params of fz_lookup_cjk_font().
    Returns: const unsigned char *, int len, int index
    """
    outparams = lookup_cjk_font_outparams()
    ret = lookup_cjk_font_outparams_fn(ordering, outparams)
    return ret, outparams.len, outparams.index

def lookup_cjk_font_by_language(lang):
    """
    Wrapper for out-params of fz_lookup_cjk_font_by_language().
    Returns: const unsigned char *, int len, int subfont
    """
    outparams = lookup_cjk_font_by_language_outparams()
    ret = lookup_cjk_font_by_language_outparams_fn(lang, outparams)
    return ret, outparams.len, outparams.subfont

def lookup_noto_emoji_font():
    """
    Wrapper for out-params of fz_lookup_noto_emoji_font().
    Returns: const unsigned char *, int len
    """
    outparams = lookup_noto_emoji_font_outparams()
    ret = lookup_noto_emoji_font_outparams_fn(outparams)
    return ret, outparams.len

def lookup_noto_font(script, lang):
    """
    Wrapper for out-params of fz_lookup_noto_font().
    Returns: const unsigned char *, int len, int subfont
    """
    outparams = lookup_noto_font_outparams()
    ret = lookup_noto_font_outparams_fn(script, lang, outparams)
    return ret, outparams.len, outparams.subfont

def lookup_noto_math_font():
    """
    Wrapper for out-params of fz_lookup_noto_math_font().
    Returns: const unsigned char *, int len
    """
    outparams = lookup_noto_math_font_outparams()
    ret = lookup_noto_math_font_outparams_fn(outparams)
    return ret, outparams.len

def lookup_noto_music_font():
    """
    Wrapper for out-params of fz_lookup_noto_music_font().
    Returns: const unsigned char *, int len
    """
    outparams = lookup_noto_music_font_outparams()
    ret = lookup_noto_music_font_outparams_fn(outparams)
    return ret, outparams.len

def lookup_noto_symbol1_font():
    """
    Wrapper for out-params of fz_lookup_noto_symbol1_font().
    Returns: const unsigned char *, int len
    """
    outparams = lookup_noto_symbol1_font_outparams()
    ret = lookup_noto_symbol1_font_outparams_fn(outparams)
    return ret, outparams.len

def lookup_noto_symbol2_font():
    """
    Wrapper for out-params of fz_lookup_noto_symbol2_font().
    Returns: const unsigned char *, int len
    """
    outparams = lookup_noto_symbol2_font_outparams()
    ret = lookup_noto_symbol2_font_outparams_fn(outparams)
    return ret, outparams.len

def new_deflated_data(source, source_length, level):
    """
    Wrapper for out-params of fz_new_deflated_data().
    Returns: unsigned char *, size_t compressed_length
    """
    outparams = new_deflated_data_outparams()
    ret = new_deflated_data_outparams_fn(source, source_length, level, outparams)
    return ret, outparams.compressed_length

def new_deflated_data_from_buffer(buffer, level):
    """
    Wrapper for out-params of fz_new_deflated_data_from_buffer().
    Returns: unsigned char *, size_t compressed_length
    """
    outparams = new_deflated_data_from_buffer_outparams()
    ret = new_deflated_data_from_buffer_outparams_fn(buffer, level, outparams)
    return ret, outparams.compressed_length

def new_display_list_from_svg(buf, base_uri, zip):
    """
    Wrapper for out-params of fz_new_display_list_from_svg().
    Returns: fz_display_list *, float w, float h
    """
    outparams = new_display_list_from_svg_outparams()
    ret = new_display_list_from_svg_outparams_fn(buf, base_uri, zip, outparams)
    return ret, outparams.w, outparams.h

def new_display_list_from_svg_xml(xmldoc, xml, base_uri, zip):
    """
    Wrapper for out-params of fz_new_display_list_from_svg_xml().
    Returns: fz_display_list *, float w, float h
    """
    outparams = new_display_list_from_svg_xml_outparams()
    ret = new_display_list_from_svg_xml_outparams_fn(xmldoc, xml, base_uri, zip, outparams)
    return ret, outparams.w, outparams.h

def new_draw_device_with_options(options, mediabox):
    """
    Wrapper for out-params of fz_new_draw_device_with_options().
    Returns: fz_device *, fz_pixmap *pixmap
    """
    outparams = new_draw_device_with_options_outparams()
    ret = new_draw_device_with_options_outparams_fn(options, mediabox, outparams)
    return ret, outparams.pixmap

def new_image_from_compressed_buffer(w, h, bpc, colorspace, xres, yres, interpolate, imagemask, buffer, mask):
    """
    Wrapper for out-params of fz_new_image_from_compressed_buffer().
    Returns: fz_image *, float decode, int colorkey
    """
    outparams = new_image_from_compressed_buffer_outparams()
    ret = new_image_from_compressed_buffer_outparams_fn(w, h, bpc, colorspace, xres, yres, interpolate, imagemask, buffer, mask, outparams)
    return ret, outparams.decode, outparams.colorkey

def new_image_of_size(w, h, bpc, colorspace, xres, yres, interpolate, imagemask, mask, size, get_pixmap, get_size, drop):
    """
    Wrapper for out-params of fz_new_image_of_size().
    Returns: fz_image *, float decode, int colorkey
    """
    outparams = new_image_of_size_outparams()
    ret = new_image_of_size_outparams_fn(w, h, bpc, colorspace, xres, yres, interpolate, imagemask, mask, size, get_pixmap, get_size, drop, outparams)
    return ret, outparams.decode, outparams.colorkey

def new_svg_device_with_id(out, page_width, page_height, text_format, reuse_images):
    """
    Wrapper for out-params of fz_new_svg_device_with_id().
    Returns: fz_device *, int id
    """
    outparams = new_svg_device_with_id_outparams()
    ret = new_svg_device_with_id_outparams_fn(out, page_width, page_height, text_format, reuse_images, outparams)
    return ret, outparams.id

def new_test_device(threshold, options, passthrough):
    """
    Wrapper for out-params of fz_new_test_device().
    Returns: fz_device *, int is_color
    """
    outparams = new_test_device_outparams()
    ret = new_test_device_outparams_fn(threshold, options, passthrough, outparams)
    return ret, outparams.is_color

def open_file_ptr_no_close():
    """
    Wrapper for out-params of fz_open_file_ptr_no_close().
    Returns: fz_stream *, FILE file
    """
    outparams = open_file_ptr_no_close_outparams()
    ret = open_file_ptr_no_close_outparams_fn(outparams)
    return ret, outparams.file

def open_image_decomp_stream(arg_0, arg_1):
    """
    Wrapper for out-params of fz_open_image_decomp_stream().
    Returns: fz_stream *, int l2factor
    """
    outparams = open_image_decomp_stream_outparams()
    ret = open_image_decomp_stream_outparams_fn(arg_0, arg_1, outparams)
    return ret, outparams.l2factor

def open_image_decomp_stream_from_buffer(arg_0):
    """
    Wrapper for out-params of fz_open_image_decomp_stream_from_buffer().
    Returns: fz_stream *, int l2factor
    """
    outparams = open_image_decomp_stream_from_buffer_outparams()
    ret = open_image_decomp_stream_from_buffer_outparams_fn(arg_0, outparams)
    return ret, outparams.l2factor

def page_presentation(page, transition):
    """
    Wrapper for out-params of fz_page_presentation().
    Returns: fz_transition *, float duration
    """
    outparams = page_presentation_outparams()
    ret = page_presentation_outparams_fn(page, transition, outparams)
    return ret, outparams.duration

def paint_shade(shade, override_cs, ctm, dest, color_params, bbox, eop):
    """
    Wrapper for out-params of fz_paint_shade().
    Returns: fz_shade_color_cache *cache
    """
    outparams = paint_shade_outparams()
    ret = paint_shade_outparams_fn(shade, override_cs, ctm, dest, color_params, bbox, eop, outparams)
    return outparams.cache

def parse_page_range(s, n):
    """
    Wrapper for out-params of fz_parse_page_range().
    Returns: const char *, int a, int b
    """
    outparams = parse_page_range_outparams()
    ret = parse_page_range_outparams_fn(s, n, outparams)
    return ret, outparams.a, outparams.b

def read_best(stm, initial):
    """
    Wrapper for out-params of fz_read_best().
    Returns: fz_buffer *, int truncated
    """
    outparams = read_best_outparams()
    ret = read_best_outparams_fn(stm, initial, outparams)
    return ret, outparams.truncated

def resolve_link(doc, uri):
    """
    Wrapper for out-params of fz_resolve_link().
    Returns: fz_location, float xp, float yp
    """
    outparams = resolve_link_outparams()
    ret = resolve_link_outparams_fn(doc, uri, outparams)
    return ret, outparams.xp, outparams.yp

def separation_equivalent(seps, idx, dst_cs, prf, color_params):
    """
    Wrapper for out-params of fz_separation_equivalent().
    Returns: float dst_color
    """
    outparams = separation_equivalent_outparams()
    ret = separation_equivalent_outparams_fn(seps, idx, dst_cs, prf, color_params, outparams)
    return outparams.dst_color

def store_scavenge(size):
    """
    Wrapper for out-params of fz_store_scavenge().
    Returns: int, int phase
    """
    outparams = store_scavenge_outparams()
    ret = store_scavenge_outparams_fn(size, outparams)
    return ret, outparams.phase

def store_scavenge_external(size):
    """
    Wrapper for out-params of fz_store_scavenge_external().
    Returns: int, int phase
    """
    outparams = store_scavenge_external_outparams()
    ret = store_scavenge_external_outparams_fn(size, outparams)
    return ret, outparams.phase

def strsep(delim):
    """
    Wrapper for out-params of fz_strsep().
    Returns: char *, char *stringp
    """
    outparams = strsep_outparams()
    ret = strsep_outparams_fn(delim, outparams)
    return ret, outparams.stringp

def strtof(s):
    """
    Wrapper for out-params of fz_strtof().
    Returns: float, char *es
    """
    outparams = strtof_outparams()
    ret = strtof_outparams_fn(s, outparams)
    return ret, outparams.es

def ppdf_annot_MK_BC(annot, color):
    """
    Wrapper for out-params of pdf_annot_MK_BC().
    Returns: int n
    """
    outparams = ppdf_annot_MK_BC_outparams()
    ret = ppdf_annot_MK_BC_outparams_fn(annot, color, outparams)
    return outparams.n

def ppdf_annot_MK_BG(annot, color):
    """
    Wrapper for out-params of pdf_annot_MK_BG().
    Returns: int n
    """
    outparams = ppdf_annot_MK_BG_outparams()
    ret = ppdf_annot_MK_BG_outparams_fn(annot, color, outparams)
    return outparams.n

def ppdf_annot_color(annot, color):
    """
    Wrapper for out-params of pdf_annot_color().
    Returns: int n
    """
    outparams = ppdf_annot_color_outparams()
    ret = ppdf_annot_color_outparams_fn(annot, color, outparams)
    return outparams.n

def ppdf_annot_default_appearance(annot, color):
    """
    Wrapper for out-params of pdf_annot_default_appearance().
    Returns: const char *font, float size, int n
    """
    outparams = ppdf_annot_default_appearance_outparams()
    ret = ppdf_annot_default_appearance_outparams_fn(annot, color, outparams)
    return outparams.font, outparams.size, outparams.n

def ppdf_annot_interior_color(annot, color):
    """
    Wrapper for out-params of pdf_annot_interior_color().
    Returns: int n
    """
    outparams = ppdf_annot_interior_color_outparams()
    ret = ppdf_annot_interior_color_outparams_fn(annot, color, outparams)
    return outparams.n

def ppdf_annot_line_ending_styles(annot):
    """
    Wrapper for out-params of pdf_annot_line_ending_styles().
    Returns: enum pdf_line_ending start_style, enum pdf_line_ending end_style
    """
    outparams = ppdf_annot_line_ending_styles_outparams()
    ret = ppdf_annot_line_ending_styles_outparams_fn(annot, outparams)
    return outparams.start_style, outparams.end_style

def ppdf_array_get_string(array, index):
    """
    Wrapper for out-params of pdf_array_get_string().
    Returns: const char *, size_t sizep
    """
    outparams = ppdf_array_get_string_outparams()
    ret = ppdf_array_get_string_outparams_fn(array, index, outparams)
    return ret, outparams.sizep

def ppdf_decode_cmap(cmap, s, e):
    """
    Wrapper for out-params of pdf_decode_cmap().
    Returns: int, unsigned int cpt
    """
    outparams = ppdf_decode_cmap_outparams()
    ret = ppdf_decode_cmap_outparams_fn(cmap, s, e, outparams)
    return ret, outparams.cpt

def ppdf_dict_get_put_drop(dict, key, val):
    """
    Wrapper for out-params of pdf_dict_get_put_drop().
    Returns: pdf_obj *old_val
    """
    outparams = ppdf_dict_get_put_drop_outparams()
    ret = ppdf_dict_get_put_drop_outparams_fn(dict, key, val, outparams)
    return outparams.old_val

def ppdf_dict_get_string(dict, key):
    """
    Wrapper for out-params of pdf_dict_get_string().
    Returns: const char *, size_t sizep
    """
    outparams = ppdf_dict_get_string_outparams()
    ret = ppdf_dict_get_string_outparams_fn(dict, key, outparams)
    return ret, outparams.sizep

def ppdf_edit_text_field_value(widget, value, change):
    """
    Wrapper for out-params of pdf_edit_text_field_value().
    Returns: int, int selStart, int selEnd, char *newvalue
    """
    outparams = ppdf_edit_text_field_value_outparams()
    ret = ppdf_edit_text_field_value_outparams_fn(widget, value, change, outparams)
    return ret, outparams.selStart, outparams.selEnd, outparams.newvalue

def ppdf_eval_function(func, in_, inlen, outlen):
    """
    Wrapper for out-params of pdf_eval_function().
    Returns: float out
    """
    outparams = ppdf_eval_function_outparams()
    ret = ppdf_eval_function_outparams_fn(func, in_, inlen, outlen, outparams)
    return outparams.out

def ppdf_field_event_validate(doc, field, value):
    """
    Wrapper for out-params of pdf_field_event_validate().
    Returns: int, char *newvalue
    """
    outparams = ppdf_field_event_validate_outparams()
    ret = ppdf_field_event_validate_outparams_fn(doc, field, value, outparams)
    return ret, outparams.newvalue

def ppdf_js_event_result_validate(js):
    """
    Wrapper for out-params of pdf_js_event_result_validate().
    Returns: int, char *newvalue
    """
    outparams = ppdf_js_event_result_validate_outparams()
    ret = ppdf_js_event_result_validate_outparams_fn(js, outparams)
    return ret, outparams.newvalue

def ppdf_load_encoding(encoding):
    """
    Wrapper for out-params of pdf_load_encoding().
    Returns: const char *estrings
    """
    outparams = ppdf_load_encoding_outparams()
    ret = ppdf_load_encoding_outparams_fn(encoding, outparams)
    return outparams.estrings

def ppdf_load_to_unicode(doc, font, collection, cmapstm):
    """
    Wrapper for out-params of pdf_load_to_unicode().
    Returns: const char *strings
    """
    outparams = ppdf_load_to_unicode_outparams()
    ret = ppdf_load_to_unicode_outparams_fn(doc, font, collection, cmapstm, outparams)
    return outparams.strings

def ppdf_lookup_anchor(doc, name):
    """
    Wrapper for out-params of pdf_lookup_anchor().
    Returns: int, float xp, float yp
    """
    outparams = ppdf_lookup_anchor_outparams()
    ret = ppdf_lookup_anchor_outparams_fn(doc, name, outparams)
    return ret, outparams.xp, outparams.yp

def ppdf_lookup_cmap_full(cmap, cpt):
    """
    Wrapper for out-params of pdf_lookup_cmap_full().
    Returns: int, int out
    """
    outparams = ppdf_lookup_cmap_full_outparams()
    ret = ppdf_lookup_cmap_full_outparams_fn(cmap, cpt, outparams)
    return ret, outparams.out

def ppdf_lookup_substitute_font(mono, serif, bold, italic):
    """
    Wrapper for out-params of pdf_lookup_substitute_font().
    Returns: const unsigned char *, int len
    """
    outparams = ppdf_lookup_substitute_font_outparams()
    ret = ppdf_lookup_substitute_font_outparams_fn(mono, serif, bold, italic, outparams)
    return ret, outparams.len

def ppdf_map_one_to_many(cmap, one, len):
    """
    Wrapper for out-params of pdf_map_one_to_many().
    Returns: int many
    """
    outparams = ppdf_map_one_to_many_outparams()
    ret = ppdf_map_one_to_many_outparams_fn(cmap, one, len, outparams)
    return outparams.many

def ppdf_obj_memo(obj, bit):
    """
    Wrapper for out-params of pdf_obj_memo().
    Returns: int, int memo
    """
    outparams = ppdf_obj_memo_outparams()
    ret = ppdf_obj_memo_outparams_fn(obj, bit, outparams)
    return ret, outparams.memo

def ppdf_page_presentation(page, transition):
    """
    Wrapper for out-params of pdf_page_presentation().
    Returns: fz_transition *, float duration
    """
    outparams = ppdf_page_presentation_outparams()
    ret = ppdf_page_presentation_outparams_fn(page, transition, outparams)
    return ret, outparams.duration

def ppdf_page_write(doc, mediabox):
    """
    Wrapper for out-params of pdf_page_write().
    Returns: fz_device *, pdf_obj *presources, fz_buffer *pcontents
    """
    outparams = ppdf_page_write_outparams()
    ret = ppdf_page_write_outparams_fn(doc, mediabox, outparams)
    return ret, outparams.presources, outparams.pcontents

def ppdf_parse_default_appearance(da, color):
    """
    Wrapper for out-params of pdf_parse_default_appearance().
    Returns: const char *font, float size, int n
    """
    outparams = ppdf_parse_default_appearance_outparams()
    ret = ppdf_parse_default_appearance_outparams_fn(da, color, outparams)
    return outparams.font, outparams.size, outparams.n

def ppdf_parse_ind_obj(doc, f):
    """
    Wrapper for out-params of pdf_parse_ind_obj().
    Returns: pdf_obj *, int num, int gen, int64_t stm_ofs, int try_repair
    """
    outparams = ppdf_parse_ind_obj_outparams()
    ret = ppdf_parse_ind_obj_outparams_fn(doc, f, outparams)
    return ret, outparams.num, outparams.gen, outparams.stm_ofs, outparams.try_repair

def ppdf_parse_journal_obj(doc, stm):
    """
    Wrapper for out-params of pdf_parse_journal_obj().
    Returns: pdf_obj *, int onum, fz_buffer *ostm, int newobj
    """
    outparams = ppdf_parse_journal_obj_outparams()
    ret = ppdf_parse_journal_obj_outparams_fn(doc, stm, outparams)
    return ret, outparams.onum, outparams.ostm, outparams.newobj

def ppdf_repair_obj(doc, buf):
    """
    Wrapper for out-params of pdf_repair_obj().
    Returns: int, int64_t stmofsp, int stmlenp, pdf_obj *encrypt, pdf_obj *id, pdf_obj *page, int64_t tmpofs, pdf_obj *root
    """
    outparams = ppdf_repair_obj_outparams()
    ret = ppdf_repair_obj_outparams_fn(doc, buf, outparams)
    return ret, outparams.stmofsp, outparams.stmlenp, outparams.encrypt, outparams.id, outparams.page, outparams.tmpofs, outparams.root

def ppdf_resolve_link(doc, uri):
    """
    Wrapper for out-params of pdf_resolve_link().
    Returns: int, float xp, float yp
    """
    outparams = ppdf_resolve_link_outparams()
    ret = ppdf_resolve_link_outparams_fn(doc, uri, outparams)
    return ret, outparams.xp, outparams.yp

def ppdf_signature_contents(doc, signature):
    """
    Wrapper for out-params of pdf_signature_contents().
    Returns: size_t, char *contents
    """
    outparams = ppdf_signature_contents_outparams()
    ret = ppdf_signature_contents_outparams_fn(doc, signature, outparams)
    return ret, outparams.contents

def ppdf_sprint_obj(buf, cap, obj, tight, ascii):
    """
    Wrapper for out-params of pdf_sprint_obj().
    Returns: char *, size_t len
    """
    outparams = ppdf_sprint_obj_outparams()
    ret = ppdf_sprint_obj_outparams_fn(buf, cap, obj, tight, ascii, outparams)
    return ret, outparams.len

def ppdf_to_string(obj):
    """
    Wrapper for out-params of pdf_to_string().
    Returns: const char *, size_t sizep
    """
    outparams = ppdf_to_string_outparams()
    ret = ppdf_to_string_outparams_fn(obj, outparams)
    return ret, outparams.sizep

def ppdf_undoredo_state(doc):
    """
    Wrapper for out-params of pdf_undoredo_state().
    Returns: int, int steps
    """
    outparams = ppdf_undoredo_state_outparams()
    ret = ppdf_undoredo_state_outparams_fn(doc, outparams)
    return ret, outparams.steps

def ppdf_walk_tree(tree, kid_name, arrive, leave, arg):
    """
    Wrapper for out-params of pdf_walk_tree().
    Returns: pdf_obj *names, pdf_obj *values
    """
    outparams = ppdf_walk_tree_outparams()
    ret = ppdf_walk_tree_outparams_fn(tree, kid_name, arrive, leave, arg, outparams)
    return outparams.names, outparams.values

def Bitmap_bitmap_details_outparams_fn( self):
    """
    Helper for out-params of fz_bitmap::bitmap_details() [fz_bitmap_details()].
    """
    w, h, n, stride = bitmap_details( self.m_internal)
    return w, h, n, stride

Bitmap.bitmap_details = Bitmap_bitmap_details_outparams_fn


def Buffer_buffer_extract_outparams_fn( self):
    """
    Helper for out-params of fz_buffer::buffer_extract() [fz_buffer_extract()].
    """
    ret, data = buffer_extract( self.m_internal)
    return ret, data

Buffer.buffer_extract = Buffer_buffer_extract_outparams_fn


def Buffer_buffer_storage_outparams_fn( self):
    """
    Helper for out-params of fz_buffer::buffer_storage() [fz_buffer_storage()].
    """
    ret, datap = buffer_storage( self.m_internal)
    return ret, datap

Buffer.buffer_storage = Buffer_buffer_storage_outparams_fn


def Buffer_new_display_list_from_svg_outparams_fn( self, base_uri, zip):
    """
    Helper for out-params of fz_buffer::new_display_list_from_svg() [fz_new_display_list_from_svg()].
    """
    ret, w, h = new_display_list_from_svg( self.m_internal, base_uri, zip)
    return DisplayList(ret), w, h

Buffer.new_display_list_from_svg = Buffer_new_display_list_from_svg_outparams_fn


def Colorspace_clamp_color_outparams_fn( self, in_):
    """
    Helper for out-params of fz_colorspace::clamp_color() [fz_clamp_color()].
    """
    out = clamp_color( self.m_internal, in_)
    return out

Colorspace.clamp_color = Colorspace_clamp_color_outparams_fn


def Colorspace_convert_color_outparams_fn( self, sv, params):
    """
    Helper for out-params of fz_colorspace::convert_color() [fz_convert_color()].
    """
    dv = convert_color( self.m_internal, sv, params.internal())
    return dv

Colorspace.convert_color = Colorspace_convert_color_outparams_fn


def Colorspace_convert_separation_colors_outparams_fn( self, src_color, dst_seps, color_params):
    """
    Helper for out-params of fz_colorspace::convert_separation_colors() [fz_convert_separation_colors()].
    """
    dst_color = convert_separation_colors( self.m_internal, src_color, dst_seps, color_params.internal())
    return dst_color

Colorspace.convert_separation_colors = Colorspace_convert_separation_colors_outparams_fn


def CompressedBuffer_open_image_decomp_stream_from_buffer_outparams_fn( self):
    """
    Helper for out-params of fz_compressed_buffer::open_image_decomp_stream_from_buffer() [fz_open_image_decomp_stream_from_buffer()].
    """
    ret, l2factor = open_image_decomp_stream_from_buffer( self.m_internal)
    return Stream(ret), l2factor

CompressedBuffer.open_image_decomp_stream_from_buffer = CompressedBuffer_open_image_decomp_stream_from_buffer_outparams_fn


def Document_resolve_link_outparams_fn( self, uri):
    """
    Helper for out-params of fz_document::resolve_link() [fz_resolve_link()].
    """
    ret, xp, yp = resolve_link( self.m_internal, uri)
    return Location(ret), xp, yp

Document.resolve_link = Document_resolve_link_outparams_fn


def Image_get_pixmap_from_image_outparams_fn( self, subarea, ctm):
    """
    Helper for out-params of fz_image::get_pixmap_from_image() [fz_get_pixmap_from_image()].
    """
    ret, w, h = get_pixmap_from_image( self.m_internal, subarea.internal(), ctm.internal())
    return Pixmap(ret), w, h

Image.get_pixmap_from_image = Image_get_pixmap_from_image_outparams_fn


def Image_image_resolution_outparams_fn( self):
    """
    Helper for out-params of fz_image::image_resolution() [fz_image_resolution()].
    """
    xres, yres = image_resolution( self.m_internal)
    return xres, yres

Image.image_resolution = Image_image_resolution_outparams_fn


def Output_new_svg_device_with_id_outparams_fn( self, page_width, page_height, text_format, reuse_images):
    """
    Helper for out-params of fz_output::new_svg_device_with_id() [fz_new_svg_device_with_id()].
    """
    ret, id = new_svg_device_with_id( self.m_internal, page_width, page_height, text_format, reuse_images)
    return Device(ret), id

Output.new_svg_device_with_id = Output_new_svg_device_with_id_outparams_fn


def Page_page_presentation_outparams_fn( self, transition):
    """
    Helper for out-params of fz_page::page_presentation() [fz_page_presentation()].
    """
    ret, duration = page_presentation( self.m_internal, transition.internal())
    return Transition(ret), duration

Page.page_presentation = Page_page_presentation_outparams_fn


def PdfAnnot_ppdf_annot_MK_BC_outparams_fn( self, color):
    """
    Helper for out-params of pdf_annot::ppdf_annot_MK_BC() [pdf_annot_MK_BC()].
    """
    n = ppdf_annot_MK_BC( self.m_internal, color)
    return n

PdfAnnot.annot_MK_BC = PdfAnnot_ppdf_annot_MK_BC_outparams_fn


def PdfAnnot_ppdf_annot_MK_BG_outparams_fn( self, color):
    """
    Helper for out-params of pdf_annot::ppdf_annot_MK_BG() [pdf_annot_MK_BG()].
    """
    n = ppdf_annot_MK_BG( self.m_internal, color)
    return n

PdfAnnot.annot_MK_BG = PdfAnnot_ppdf_annot_MK_BG_outparams_fn


def PdfAnnot_ppdf_annot_color_outparams_fn( self, color):
    """
    Helper for out-params of pdf_annot::ppdf_annot_color() [pdf_annot_color()].
    """
    n = ppdf_annot_color( self.m_internal, color)
    return n

PdfAnnot.annot_color = PdfAnnot_ppdf_annot_color_outparams_fn


def PdfAnnot_ppdf_annot_default_appearance_outparams_fn( self, color):
    """
    Helper for out-params of pdf_annot::ppdf_annot_default_appearance() [pdf_annot_default_appearance()].
    """
    font, size, n = ppdf_annot_default_appearance( self.m_internal, color)
    return font, size, n

PdfAnnot.annot_default_appearance = PdfAnnot_ppdf_annot_default_appearance_outparams_fn


def PdfAnnot_ppdf_annot_interior_color_outparams_fn( self, color):
    """
    Helper for out-params of pdf_annot::ppdf_annot_interior_color() [pdf_annot_interior_color()].
    """
    n = ppdf_annot_interior_color( self.m_internal, color)
    return n

PdfAnnot.annot_interior_color = PdfAnnot_ppdf_annot_interior_color_outparams_fn


def PdfAnnot_ppdf_annot_line_ending_styles_outparams_fn( self):
    """
    Helper for out-params of pdf_annot::ppdf_annot_line_ending_styles() [pdf_annot_line_ending_styles()].
    """
    start_style, end_style = ppdf_annot_line_ending_styles( self.m_internal)
    return start_style, end_style

PdfAnnot.annot_line_ending_styles = PdfAnnot_ppdf_annot_line_ending_styles_outparams_fn


def PdfAnnot_ppdf_edit_text_field_value_outparams_fn( self, value, change):
    """
    Helper for out-params of pdf_annot::ppdf_edit_text_field_value() [pdf_edit_text_field_value()].
    """
    ret, selStart, selEnd, newvalue = ppdf_edit_text_field_value( self.m_internal, value, change)
    return ret, selStart, selEnd, newvalue

PdfAnnot.edit_text_field_value = PdfAnnot_ppdf_edit_text_field_value_outparams_fn


def PdfCmap_ppdf_decode_cmap_outparams_fn( self, s, e):
    """
    Helper for out-params of pdf_cmap::ppdf_decode_cmap() [pdf_decode_cmap()].
    """
    ret, cpt = ppdf_decode_cmap( self.m_internal, s, e)
    return ret, cpt

PdfCmap.decode_cmap = PdfCmap_ppdf_decode_cmap_outparams_fn


def PdfCmap_ppdf_lookup_cmap_full_outparams_fn( self, cpt):
    """
    Helper for out-params of pdf_cmap::ppdf_lookup_cmap_full() [pdf_lookup_cmap_full()].
    """
    ret, out = ppdf_lookup_cmap_full( self.m_internal, cpt)
    return ret, out

PdfCmap.lookup_cmap_full = PdfCmap_ppdf_lookup_cmap_full_outparams_fn


def PdfCmap_ppdf_map_one_to_many_outparams_fn( self, one, len):
    """
    Helper for out-params of pdf_cmap::ppdf_map_one_to_many() [pdf_map_one_to_many()].
    """
    many = ppdf_map_one_to_many( self.m_internal, one, len)
    return many

PdfCmap.map_one_to_many = PdfCmap_ppdf_map_one_to_many_outparams_fn


def PdfDocument_ppdf_field_event_validate_outparams_fn( self, field, value):
    """
    Helper for out-params of pdf_document::ppdf_field_event_validate() [pdf_field_event_validate()].
    """
    ret, newvalue = ppdf_field_event_validate( self.m_internal, field, value)
    return ret, newvalue

PdfDocument.field_event_validate = PdfDocument_ppdf_field_event_validate_outparams_fn


def PdfDocument_ppdf_load_to_unicode_outparams_fn( self, font, collection, cmapstm):
    """
    Helper for out-params of pdf_document::ppdf_load_to_unicode() [pdf_load_to_unicode()].
    """
    strings = ppdf_load_to_unicode( self.m_internal, font, collection, cmapstm)
    return strings

PdfDocument.load_to_unicode = PdfDocument_ppdf_load_to_unicode_outparams_fn


def PdfDocument_ppdf_lookup_anchor_outparams_fn( self, name):
    """
    Helper for out-params of pdf_document::ppdf_lookup_anchor() [pdf_lookup_anchor()].
    """
    ret, xp, yp = ppdf_lookup_anchor( self.m_internal, name)
    return ret, xp, yp

PdfDocument.lookup_anchor = PdfDocument_ppdf_lookup_anchor_outparams_fn


def PdfDocument_ppdf_page_write_outparams_fn( self, mediabox):
    """
    Helper for out-params of pdf_document::ppdf_page_write() [pdf_page_write()].
    """
    ret, presources, pcontents = ppdf_page_write( self.m_internal, mediabox.internal())
    return Device(ret), PdfObj(presources), Buffer(pcontents)

PdfDocument.page_write = PdfDocument_ppdf_page_write_outparams_fn


def PdfDocument_ppdf_parse_ind_obj_outparams_fn( self, f):
    """
    Helper for out-params of pdf_document::ppdf_parse_ind_obj() [pdf_parse_ind_obj()].
    """
    ret, num, gen, stm_ofs, try_repair = ppdf_parse_ind_obj( self.m_internal, f)
    return PdfObj(ret), num, gen, stm_ofs, try_repair

PdfDocument.parse_ind_obj = PdfDocument_ppdf_parse_ind_obj_outparams_fn


def PdfDocument_ppdf_parse_journal_obj_outparams_fn( self, stm):
    """
    Helper for out-params of pdf_document::ppdf_parse_journal_obj() [pdf_parse_journal_obj()].
    """
    ret, onum, ostm, newobj = ppdf_parse_journal_obj( self.m_internal, stm)
    return PdfObj(ret), onum, Buffer(ostm), newobj

PdfDocument.parse_journal_obj = PdfDocument_ppdf_parse_journal_obj_outparams_fn


def PdfDocument_ppdf_repair_obj_outparams_fn( self, buf):
    """
    Helper for out-params of pdf_document::ppdf_repair_obj() [pdf_repair_obj()].
    """
    ret, stmofsp, stmlenp, encrypt, id, page, tmpofs, root = ppdf_repair_obj( self.m_internal, buf)
    return ret, stmofsp, stmlenp, PdfObj(encrypt), PdfObj(id), PdfObj(page), tmpofs, PdfObj(root)

PdfDocument.repair_obj = PdfDocument_ppdf_repair_obj_outparams_fn


def PdfDocument_ppdf_resolve_link_outparams_fn( self, uri):
    """
    Helper for out-params of pdf_document::ppdf_resolve_link() [pdf_resolve_link()].
    """
    ret, xp, yp = ppdf_resolve_link( self.m_internal, uri)
    return ret, xp, yp

PdfDocument.resolve_link = PdfDocument_ppdf_resolve_link_outparams_fn


def PdfDocument_ppdf_signature_contents_outparams_fn( self, signature):
    """
    Helper for out-params of pdf_document::ppdf_signature_contents() [pdf_signature_contents()].
    """
    ret, contents = ppdf_signature_contents( self.m_internal, signature)
    return ret, contents

PdfDocument.signature_contents = PdfDocument_ppdf_signature_contents_outparams_fn


def PdfDocument_ppdf_undoredo_state_outparams_fn( self):
    """
    Helper for out-params of pdf_document::ppdf_undoredo_state() [pdf_undoredo_state()].
    """
    ret, steps = ppdf_undoredo_state( self.m_internal)
    return ret, steps

PdfDocument.undoredo_state = PdfDocument_ppdf_undoredo_state_outparams_fn


def PdfFunction_ppdf_eval_function_outparams_fn( self, in_, inlen, outlen):
    """
    Helper for out-params of pdf_function::ppdf_eval_function() [pdf_eval_function()].
    """
    out = ppdf_eval_function( self.m_internal, in_, inlen, outlen)
    return out

PdfFunction.eval_function = PdfFunction_ppdf_eval_function_outparams_fn


def PdfJs_ppdf_js_event_result_validate_outparams_fn( self):
    """
    Helper for out-params of pdf_js::ppdf_js_event_result_validate() [pdf_js_event_result_validate()].
    """
    ret, newvalue = ppdf_js_event_result_validate( self.m_internal)
    return ret, newvalue

PdfJs.js_event_result_validate = PdfJs_ppdf_js_event_result_validate_outparams_fn


def PdfObj_ppdf_array_get_string_outparams_fn( self, index):
    """
    Helper for out-params of pdf_obj::ppdf_array_get_string() [pdf_array_get_string()].
    """
    ret, sizep = ppdf_array_get_string( self.m_internal, index)
    return ret, sizep

PdfObj.array_get_string = PdfObj_ppdf_array_get_string_outparams_fn


def PdfObj_ppdf_dict_get_put_drop_outparams_fn( self):
    """
    Helper for out-params of pdf_obj::ppdf_dict_get_put_drop() [pdf_dict_get_put_drop()].
    """
    old_val = ppdf_dict_get_put_drop( self.m_internal)
    return PdfObj(old_val)

PdfObj.dict_get_put_drop = PdfObj_ppdf_dict_get_put_drop_outparams_fn


def PdfObj_ppdf_dict_get_string_outparams_fn( self):
    """
    Helper for out-params of pdf_obj::ppdf_dict_get_string() [pdf_dict_get_string()].
    """
    ret, sizep = ppdf_dict_get_string( self.m_internal)
    return ret, sizep

PdfObj.dict_get_string = PdfObj_ppdf_dict_get_string_outparams_fn


def PdfObj_ppdf_obj_memo_outparams_fn( self, bit):
    """
    Helper for out-params of pdf_obj::ppdf_obj_memo() [pdf_obj_memo()].
    """
    ret, memo = ppdf_obj_memo( self.m_internal, bit)
    return ret, memo

PdfObj.obj_memo = PdfObj_ppdf_obj_memo_outparams_fn


def PdfObj_ppdf_to_string_outparams_fn( self):
    """
    Helper for out-params of pdf_obj::ppdf_to_string() [pdf_to_string()].
    """
    ret, sizep = ppdf_to_string( self.m_internal)
    return ret, sizep

PdfObj.to_string = PdfObj_ppdf_to_string_outparams_fn


def PdfObj_ppdf_walk_tree_outparams_fn( self, arrive, leave, arg):
    """
    Helper for out-params of pdf_obj::ppdf_walk_tree() [pdf_walk_tree()].
    """
    names, values = ppdf_walk_tree( self.m_internal, arrive, leave, arg)
    return PdfObj(names), PdfObj(values)

PdfObj.walk_tree = PdfObj_ppdf_walk_tree_outparams_fn


def PdfPage_ppdf_page_presentation_outparams_fn( self, transition):
    """
    Helper for out-params of pdf_page::ppdf_page_presentation() [pdf_page_presentation()].
    """
    ret, duration = ppdf_page_presentation( self.m_internal, transition.internal())
    return Transition(ret), duration

PdfPage.page_presentation = PdfPage_ppdf_page_presentation_outparams_fn


def Pixmap_fill_pixmap_with_color_outparams_fn( self, colorspace, color_params):
    """
    Helper for out-params of fz_pixmap::fill_pixmap_with_color() [fz_fill_pixmap_with_color()].
    """
    color = fill_pixmap_with_color( self.m_internal, colorspace, color_params.internal())
    return color

Pixmap.fill_pixmap_with_color = Pixmap_fill_pixmap_with_color_outparams_fn


def Separations_separation_equivalent_outparams_fn( self, idx, dst_cs, prf, color_params):
    """
    Helper for out-params of fz_separations::separation_equivalent() [fz_separation_equivalent()].
    """
    dst_color = separation_equivalent( self.m_internal, idx, dst_cs, prf, color_params.internal())
    return dst_color

Separations.separation_equivalent = Separations_separation_equivalent_outparams_fn


def Shade_paint_shade_outparams_fn( self, override_cs, ctm, dest, color_params, bbox, eop):
    """
    Helper for out-params of fz_shade::paint_shade() [fz_paint_shade()].
    """
    cache = paint_shade( self.m_internal, override_cs, ctm.internal(), dest, color_params.internal(), bbox.internal(), eop)
    return ShadeColorCache(cache)

Shade.paint_shade = Shade_paint_shade_outparams_fn


def Stream_decomp_image_from_stream_outparams_fn( self, image, subarea, indexed, l2factor):
    """
    Helper for out-params of fz_stream::decomp_image_from_stream() [fz_decomp_image_from_stream()].
    """
    ret, l2extra = decomp_image_from_stream( self.m_internal, image, subarea.internal(), indexed, l2factor)
    return Pixmap(ret), l2extra

Stream.decomp_image_from_stream = Stream_decomp_image_from_stream_outparams_fn


def Stream_open_image_decomp_stream_outparams_fn( self, arg_1):
    """
    Helper for out-params of fz_stream::open_image_decomp_stream() [fz_open_image_decomp_stream()].
    """
    ret, l2factor = open_image_decomp_stream( self.m_internal, arg_1)
    return Stream(ret), l2factor

Stream.open_image_decomp_stream = Stream_open_image_decomp_stream_outparams_fn


def Stream_read_best_outparams_fn( self, initial):
    """
    Helper for out-params of fz_stream::read_best() [fz_read_best()].
    """
    ret, truncated = read_best( self.m_internal, initial)
    return Buffer(ret), truncated

Stream.read_best = Stream_read_best_outparams_fn


def XmlDoc_new_display_list_from_svg_xml_outparams_fn( self, xml, base_uri, zip):
    """
    Helper for out-params of fz_xml_doc::new_display_list_from_svg_xml() [fz_new_display_list_from_svg_xml()].
    """
    ret, w, h = new_display_list_from_svg_xml( self.m_internal, xml, base_uri, zip)
    return DisplayList(ret), w, h

XmlDoc.new_display_list_from_svg_xml = XmlDoc_new_display_list_from_svg_xml_outparams_fn




import re

# Wrap parse_page_range() to fix SWIG bug where a NULL return
# value seems to mess up the returned list - we end up with ret
# containing two elements rather than three, e.g. [0, 2]. This
# occurs with SWIG-3.0; maybe fixed in SWIG-4?
#
w_parse_page_range = parse_page_range
def parse_page_range(s, n):
    ret = w_parse_page_range(s, n)
    if len(ret) == 2:
        return None, 0, 0
    else:
        return ret[0], ret[1], ret[2]

# Provide native python implementation of format_output_path() (->
# fz_format_output_path).
#
def format_output_path( format, page):
    m = re.search( '(%[0-9]*d)', format)
    if m:
        ret = format[ :m.start(1)] + str(page) + format[ m.end(1):]
    else:
        dot = format.rfind( '.')
        if dot < 0:
            dot = len( format)
        ret = format[:dot] + str(page) + format[dot:]
    return ret

class IteratorWrap:
    """
    This is a Python iterator for containers that have C++-style
    begin() and end() methods that return iterators.

    Iterators must have the following methods:

        __increment__(): move to next item in the container.
        __ref__(): return reference to item in the container.

    Must also be able to compare two iterators for equality.

    """
    def __init__( self, container):
        self.container = container
        self.pos = None
        self.end = container.end()
    def __iter__( self):
        return self
    def __next__( self):    # for python2.
        if self.pos is None:
            self.pos = self.container.begin()
        else:
            self.pos.__increment__()
        if self.pos == self.end:
            raise StopIteration()
        return self.pos.__ref__()
    def next( self):    # for python3.
        return self.__next__()

# The auto-generated Python class methd Buffer.buffer_extract()
# returns (size, data).
#
# But these raw values aren't particularly useful to Python code so
# we change the method to return a Python bytes instance instead,
# using the special C function buffer_storage_bytes() defined
# above.
#
# We make the original method available as
# Buffer.buffer_extract_raw(); this can be used to create a
# mupdf.Stream by passing the raw values back to C++ with:
#
#   data, size = buffer_.buffer_extract_raw()
#   stream = mupdf.Stream(data, size))
#
# We don't provide a similar wrapper for Buffer.buffer_storage()
# because we can't create a Python bytes object that
# points into the buffer'a storage. We still provide
# Buffer.buffer_storage_raw() just in case there is a need for
# Python code that can pass the raw (data, size) back in to C.
#

Buffer.buffer_extract_raw = Buffer.buffer_extract

def Buffer_buffer_extract(self):
    """
    Returns buffer data as a Python bytes instance, leaving the
    buffer empty. Note that this will make a copy of the underlying
    data.
    """
    return buffer_extract_bytes(self.m_internal)

Buffer.buffer_extract = Buffer_buffer_extract

Buffer.buffer_storage_raw = Buffer.buffer_storage
delattr(Buffer, 'buffer_storage')


Link.__iter__ = lambda self: IteratorWrap( self)
Outline.__iter__ = lambda self: IteratorWrap( self)
StextBlock.__iter__ = lambda self: IteratorWrap( self)
StextLine.__iter__ = lambda self: IteratorWrap( self)
StextPage.__iter__ = lambda self: IteratorWrap( self)
fz_aa_context.__str__ = lambda s: to_string_fz_aa_context(s)
fz_color_params.__str__ = lambda s: to_string_fz_color_params(s)
fz_cookie.__str__ = lambda s: to_string_fz_cookie(s)
fz_draw_options.__str__ = lambda s: to_string_fz_draw_options(s)
fz_irect.__str__ = lambda s: to_string_fz_irect(s)
fz_location.__str__ = lambda s: to_string_fz_location(s)
fz_matrix.__str__ = lambda s: to_string_fz_matrix(s)
pdf_write_options.__str__ = lambda s: to_string_pdf_write_options(s)
fz_point.__str__ = lambda s: to_string_fz_point(s)
fz_pwg_options.__str__ = lambda s: to_string_fz_pwg_options(s)
fz_quad.__str__ = lambda s: to_string_fz_quad(s)
fz_rect.__str__ = lambda s: to_string_fz_rect(s)
fz_stext_options.__str__ = lambda s: to_string_fz_stext_options(s)
fz_transition.__str__ = lambda s: to_string_fz_transition(s)
AaContext.__str__ = lambda self: self.to_string()
ColorParams.__str__ = lambda self: self.to_string()
Cookie.__str__ = lambda self: self.to_string()
DrawOptions.__str__ = lambda self: self.to_string()
Irect.__str__ = lambda self: self.to_string()
Location.__str__ = lambda self: self.to_string()
Matrix.__str__ = lambda self: self.to_string()
PdfWriteOptions.__str__ = lambda self: self.to_string()
Point.__str__ = lambda self: self.to_string()
PwgOptions.__str__ = lambda self: self.to_string()
Quad.__str__ = lambda self: self.to_string()
Rect.__str__ = lambda self: self.to_string()
StextOptions.__str__ = lambda self: self.to_string()
Transition.__str__ = lambda self: self.to_string()

# This file is compatible with both classic and new-style classes.


