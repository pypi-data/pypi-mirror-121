Metadata-Version: 2.1
Name: AuthX
Version: 0.0.4
Summary: Ready to use and customizable Authentications and Oauth2 management for FastAPI
Home-page: https://github.com/yezz123/AuthX
Author: Yasser Tahiri
Author-email: yasserth19@gmail.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: fastapi (==0.61.1)
Requires-Dist: PyJWT (==1.7.1)
Requires-Dist: cryptography (==3.1.1)
Requires-Dist: httpx (==0.16.1)
Requires-Dist: aioredis (==1.3.1)
Requires-Dist: passlib (==1.7.4)
Requires-Dist: itsdangerous (==1.1.0)
Requires-Dist: bcrypt (==3.2.0)
Requires-Dist: email-validator (==1.1.1)
Requires-Dist: motor (==2.3.0)
Requires-Dist: aiosmtplib (==1.1.4)
Requires-Dist: pydantic (==1.8.2)
Provides-Extra: dev
Requires-Dist: requests (==2.25.1uvicorn) ; extra == 'dev'

# AuthX

![authx](.github/header.svg)

[![Downloads](https://pepy.tech/badge/authx/month)](https://pepy.tech/project/authx)
[![Testing on Docker](https://github.com/yezz123/AuthX/actions/workflows/docker.yml/badge.svg)](https://github.com/yezz123/AuthX/actions/workflows/docker.yml)
[![PyPI version](https://badge.fury.io/py/AuthX.svg)](https://badge.fury.io/py/AuthX)

- Ready to use and customizable Authentications and Oauth2 management for FastAPI âš¡

---

**Source Code**: <https://github.com/yezz123/AuthX>

**Project Board**: <https://trello.com/b/0NNZMP8T>

**Documentation**: Working on it...

---

Add a Fully registration and authentication or authorization system to your [FastAPI](https://fastapi.tiangolo.com/) project. **AuthX** is designed to be as customizable and adaptable as possible.

__Note__: This is a **beta** version of AuthX.

- This Project is inspired from [fastapi-users](https://github.com/fastapi-users/fastapi-users) - Ready-to-use and customizable users management for FastAPI.

## Features

- [X] Extensible base user model
- [X] Ready-to-use register, login, reset password and verify e-mail routes.
- [X] Ready to use Social login and Oauth2 routes. (now with Google, Facebook)
  - [ ] Soon with Microsoft, Twitter, Github, etc.
- [X] Ready-to-use social OAuth2 login flow
- [X] Tested Project on [Docker](https://docker.com/).
- [X] Dependency callable to inject current user in route
- [X] Pluggable password validation
- [X] Using Captcha Service.
- [X] Using Email Service. (SMTP)
- [X] Extensible Error Handling
- [X] High level API to manage users, roles and permissions
- [X] Using Redis as a session store & cache.
- [X] Customizable database backend
  - [X] MongoDB async backend included thanks to [mongodb/motor](https://github.com/mongodb/motor)
- [X] Multiple customizable authentication backend
  - [X] JWT authentication backend included
  - [ ] Soon to be included Cookie authentication backend
- [X] Full OpenAPI schema support, even with several authentication backend.

## Project using

```python
# auth.py
...
from AuthX import Authentication

auth = Authentication()

# main.py
...
from .auth import auth
...
app.include_router(auth.auth_router, prefix="/api/users")
app.include_router(auth.social_router, prefix="/auth")
app.include_router(auth.password_router, prefix="/api/users")
app.include_router(auth.admin_router, prefix="/api/users")
app.include_router(auth.search_router, prefix="/api/users")
...
```

### Startup

```python
# in a startup event
from .auth import auth
...
auth.set_cache(cache) # aioredis client
auth.set_database(database) # motor client
...
```

### Dependency injections

```python
from fastapi import APIRouter, Depends
from AuthX import User
from .auth import auth

router = APIRouter()

@router.get("/anonim")
def anonim_test(user: User = Depends(auth.get_user)):
  ...

@router.get("/user")
def user_test(user: User = Depends(auth.get_authenticated_user)):
  ...

@router.get("/admin", dependencies=[Depends(auth.admin_required)])
def admin_test():
  ...

```

### Dependency injections only

```python
from AuthX import AuthX
auth = AuthX(...)

# startup
...
auth.set_cache(cache) # aioredis
...
```

## Development

### Setup environment

You should create a virtual environment and activate it:

```bash
python -m venv venv/
```

```bash
source venv/bin/activate
```

And then install the development dependencies:

```bash
pip install -r requirements.dev.txt
```

### Run tests

You can run all the tests with:

```bash
make test
```

The command will start a MongoDB container for the related unit tests. So you should have [Docker](https://www.docker.com/get-started) installed.

Alternatively, you can run `pytest` yourself. The MongoDB unit tests will be skipped if no server is available on your local machine:

```bash
pytest
```

### Format the code

Execute the following command to apply `pre-commit` formatting:

```bash
make lint
```

## Contributing

As you see the Package still under development, you can contribute to it, also its a closed source project.

- Then how i can contribute? ðŸ¤”
  - You could contact the Maintainer of this project on :
    - [Email](mailto:yasserth19@gmail.com)
    - [Twitter](https://twitter.com/THyasser1)
    - [telegram](https://t.me/yezz123)
- Where i can see the Project Roadmap? ðŸ¤”
  - I use to manage AuthX on [Trello](https://trello.com/b/0NNZMP8T), you could check and see all the tasks if you could help me to do it.

## License

This project is licensed under the terms of the Apache-2.0 License.


